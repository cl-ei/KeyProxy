
H743VIT_KeyProxy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c178  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013d0  0801c418  0801c418  0001d418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d7e8  0801d7e8  0001e7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d7f0  0801d7f0  0001e7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801d7f4  0801d7f4  0001e7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002b4  24000000  0801d7f8  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009a70  240002b4  0801daac  0001f2b4  2**2
                  ALLOC
  8 ._user_heap_stack 00002004  24009d24  0801daac  0001fd24  2**0
                  ALLOC
  9 .dtcm_ram     00000a80  20000000  20000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ARM.attributes 0000002e  00000000  00000000  00020a80  2**0
                  CONTENTS, READONLY
 11 .debug_info   000378cf  00000000  00000000  00020aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008515  00000000  00000000  0005837d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000020a8  00000000  00000000  00060898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000018d6  00000000  00000000  00062940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00043e83  00000000  00000000  00064216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00038f5f  00000000  00000000  000a8099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016f331  00000000  00000000  000e0ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00250329  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008d70  00000000  00000000  0025036c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005b  00000000  00000000  002590dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002b4 	.word	0x240002b4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801c400 	.word	0x0801c400

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002b8 	.word	0x240002b8
 80002dc:	0801c400 	.word	0x0801c400

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <LoadHALUID>:
#include "usbh_def.h"
#include "usbh_hid_mouse.h"
#include "message.h"

uint8_t IsMaster = 0;
uint8_t LoadHALUID() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
 * U1 Unique ID: 0051003E-3233510D-31373737
 * U2 Unique ID: 004D002F-3233510D-31373737
 */
#define MASTER_UID (0x0051003EU)
#define SLAVE_UID (0x004D002F)
	if (HAL_GetUIDw0() == MASTER_UID) {
 80006b0:	f001 fd1e 	bl	80020f0 <HAL_GetUIDw0>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a06      	ldr	r2, [pc, #24]	@ (80006d0 <LoadHALUID+0x24>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d103      	bne.n	80006c4 <LoadHALUID+0x18>
		IsMaster = 1;
 80006bc:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <LoadHALUID+0x28>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	e002      	b.n	80006ca <LoadHALUID+0x1e>
	} else {
		IsMaster = 0;
 80006c4:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <LoadHALUID+0x28>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	}
}
 80006ca:	bf00      	nop
 80006cc:	4618      	mov	r0, r3
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	0051003e 	.word	0x0051003e
 80006d4:	240002d0 	.word	0x240002d0

080006d8 <EXTI15_10_IRQHandler>:

typedef void(*MainPtr) ();
MainPtr MainFunc;


void EXTI15_10_IRQHandler(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	uint16_t GPIO_Pin = GPIO_PIN_10;
 80006de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e2:	80fb      	strh	r3, [r7, #6]
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U) {
 80006e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	4013      	ands	r3, r2
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d009      	beq.n	8000708 <EXTI15_10_IRQHandler+0x30>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80006f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
		printf("exit 10 trigger!\n");
 80006fe:	4804      	ldr	r0, [pc, #16]	@ (8000710 <EXTI15_10_IRQHandler+0x38>)
 8000700:	f01b f888 	bl	801b814 <puts>
		Error_Handler();
 8000704:	f000 ff10 	bl	8001528 <Error_Handler>
	}
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	0801c418 	.word	0x0801c418

08000714 <myMain>:

void myMain() {
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
	Msg_Init();
 8000728:	f000 f994 	bl	8000a54 <Msg_Init>

	LoadHALUID();
 800072c:	f7ff ffbe 	bl	80006ac <LoadHALUID>

	if (IsMaster) {
 8000730:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <myMain+0xa0>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d01b      	beq.n	8000770 <myMain+0x5c>
		printf("I am Master!\n");
 8000738:	481f      	ldr	r0, [pc, #124]	@ (80007b8 <myMain+0xa4>)
 800073a:	f01b f86b 	bl	801b814 <puts>
		MainFunc = MasterMain;
 800073e:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <myMain+0xa8>)
 8000740:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <myMain+0xac>)
 8000742:	601a      	str	r2, [r3, #0]

		// 配置PA10, 设置为 GPIO_MODE_IT_FALLING 接收从机触发的中断
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000744:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000748:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800074e:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000750:	2301      	movs	r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	481a      	ldr	r0, [pc, #104]	@ (80007c4 <myMain+0xb0>)
 800075a:	f004 f927 	bl	80049ac <HAL_GPIO_Init>

		/* EXTI interrupt init*/
		HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	2028      	movs	r0, #40	@ 0x28
 8000764:	f001 fdab 	bl	80022be <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000768:	2028      	movs	r0, #40	@ 0x28
 800076a:	f001 fdc2 	bl	80022f2 <HAL_NVIC_EnableIRQ>
 800076e:	e017      	b.n	80007a0 <myMain+0x8c>
	} else {
		printf("I am Slave!\n");
 8000770:	4815      	ldr	r0, [pc, #84]	@ (80007c8 <myMain+0xb4>)
 8000772:	f01b f84f 	bl	801b814 <puts>
		MainFunc = SlaveMain;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <myMain+0xa8>)
 8000778:	4a14      	ldr	r2, [pc, #80]	@ (80007cc <myMain+0xb8>)
 800077a:	601a      	str	r2, [r3, #0]

		// 配置PA10为开漏输出，用于触发主机中断
		GPIOA->BSRR = (uint32_t)GPIO_PIN_10; // 避免初始化时输出低电平导致触发
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <myMain+0xb0>)
 800077e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000782:	619a      	str	r2, [r3, #24]
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000784:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000788:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800078a:	2311      	movs	r3, #17
 800078c:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078e:	2301      	movs	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4619      	mov	r1, r3
 800079a:	480a      	ldr	r0, [pc, #40]	@ (80007c4 <myMain+0xb0>)
 800079c:	f004 f906 	bl	80049ac <HAL_GPIO_Init>
	}

	SPIA_Init();
 80007a0:	f000 faf0 	bl	8000d84 <SPIA_Init>
	MainFunc();
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <myMain+0xa8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4798      	blx	r3
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	240002d0 	.word	0x240002d0
 80007b8:	0801c42c 	.word	0x0801c42c
 80007bc:	240002d4 	.word	0x240002d4
 80007c0:	080009b5 	.word	0x080009b5
 80007c4:	58020000 	.word	0x58020000
 80007c8:	0801c43c 	.word	0x0801c43c
 80007cc:	08000cbd 	.word	0x08000cbd

080007d0 <SendToSlave>:
	lastTx = mtxBuff[0];
//	printf("tx: %u\n", lastTx);
	SPIA_TxData((uint8_t*)mtxBuff, 10);
}

void SendToSlave(uint8_t *data) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	// 前8字节为HID 报文，第9字节为键鼠区分，第10字节为CRC
	uint8_t crc = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 9; i++) {
 80007dc:	2300      	movs	r3, #0
 80007de:	73bb      	strb	r3, [r7, #14]
 80007e0:	e010      	b.n	8000804 <SendToSlave+0x34>
		mtxBuff[i] = data[i];
 80007e2:	7bbb      	ldrb	r3, [r7, #14]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	441a      	add	r2, r3
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	7811      	ldrb	r1, [r2, #0]
 80007ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000820 <SendToSlave+0x50>)
 80007ee:	54d1      	strb	r1, [r2, r3]
		crc += data[i];
 80007f0:	7bbb      	ldrb	r3, [r7, #14]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	4413      	add	r3, r2
 80007fc:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 9; i++) {
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	3301      	adds	r3, #1
 8000802:	73bb      	strb	r3, [r7, #14]
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	2b08      	cmp	r3, #8
 8000808:	d9eb      	bls.n	80007e2 <SendToSlave+0x12>
	}

	mtxBuff[9] = crc;
 800080a:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <SendToSlave+0x50>)
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	7253      	strb	r3, [r2, #9]
	SPIA_TxData((uint8_t*)mtxBuff, 10);
 8000810:	210a      	movs	r1, #10
 8000812:	4803      	ldr	r0, [pc, #12]	@ (8000820 <SendToSlave+0x50>)
 8000814:	f000 fa74 	bl	8000d00 <SPIA_TxData>
}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	240002d8 	.word	0x240002d8

08000824 <CheckActive>:

uint8_t CheckActive(uint8_t *data) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	// data 为收到的 HID 报文, 前8字节为原始报文，第9字节为键鼠标记。data 必须为9字节
	// 在这里检查按键的键值，并判断是否改变Active

	if (data[8] != 1) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3308      	adds	r3, #8
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d001      	beq.n	800083a <CheckActive+0x16>
		#ifdef CL_DEBUG
			printf("is not kb.\n");
		#endif
		return 0;
 8000836:	2300      	movs	r3, #0
 8000838:	e08d      	b.n	8000956 <CheckActive+0x132>
	}
	if ((data[0] != 0) || \
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d11d      	bne.n	800087e <CheckActive+0x5a>
		(data[1] != 0) || \
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3301      	adds	r3, #1
 8000846:	781b      	ldrb	r3, [r3, #0]
	if ((data[0] != 0) || \
 8000848:	2b00      	cmp	r3, #0
 800084a:	d118      	bne.n	800087e <CheckActive+0x5a>
		(data[3] != 0) || \
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3303      	adds	r3, #3
 8000850:	781b      	ldrb	r3, [r3, #0]
		(data[1] != 0) || \
 8000852:	2b00      	cmp	r3, #0
 8000854:	d113      	bne.n	800087e <CheckActive+0x5a>
		(data[4] != 0) || \
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3304      	adds	r3, #4
 800085a:	781b      	ldrb	r3, [r3, #0]
		(data[3] != 0) || \
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10e      	bne.n	800087e <CheckActive+0x5a>
		(data[5] != 0) || \
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3305      	adds	r3, #5
 8000864:	781b      	ldrb	r3, [r3, #0]
		(data[4] != 0) || \
 8000866:	2b00      	cmp	r3, #0
 8000868:	d109      	bne.n	800087e <CheckActive+0x5a>
		(data[6] != 0) || \
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3306      	adds	r3, #6
 800086e:	781b      	ldrb	r3, [r3, #0]
		(data[5] != 0) || \
 8000870:	2b00      	cmp	r3, #0
 8000872:	d104      	bne.n	800087e <CheckActive+0x5a>
		(data[7] != 0)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3307      	adds	r3, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
		(data[6] != 0) || \
 800087a:	2b00      	cmp	r3, #0
 800087c:	d00d      	beq.n	800089a <CheckActive+0x76>
	) {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000884:	4836      	ldr	r0, [pc, #216]	@ (8000960 <CheckActive+0x13c>)
 8000886:	f004 fa41 	bl	8004d0c <HAL_GPIO_WritePin>
		#ifdef CL_DEBUG
			printf("is not hot key.\n");
		#endif
		keyFlagSub = 0;
 800088a:	4b36      	ldr	r3, [pc, #216]	@ (8000964 <CheckActive+0x140>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
		keyFlagMain = 0;
 8000890:	4b35      	ldr	r3, [pc, #212]	@ (8000968 <CheckActive+0x144>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
		return 0;
 8000896:	2300      	movs	r3, #0
 8000898:	e05d      	b.n	8000956 <CheckActive+0x132>
	}

	if (data[2] == 0) {
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3302      	adds	r3, #2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d127      	bne.n	80008f4 <CheckActive+0xd0>
		// release
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008aa:	482d      	ldr	r0, [pc, #180]	@ (8000960 <CheckActive+0x13c>)
 80008ac:	f004 fa2e 	bl	8004d0c <HAL_GPIO_WritePin>
		#ifdef CL_DEBUG
			printf("key released.\n");
			uint8_t origin = Active;
		#endif
		if (Active == 1 && keyFlagSub == 1) {
 80008b0:	4b2e      	ldr	r3, [pc, #184]	@ (800096c <CheckActive+0x148>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d108      	bne.n	80008cc <CheckActive+0xa8>
 80008ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000964 <CheckActive+0x140>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d103      	bne.n	80008cc <CheckActive+0xa8>
			Active = 0;
 80008c4:	4b29      	ldr	r3, [pc, #164]	@ (800096c <CheckActive+0x148>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
 80008ca:	e00c      	b.n	80008e6 <CheckActive+0xc2>
		} else if (Active != 1 && keyFlagMain == 1) {
 80008cc:	4b27      	ldr	r3, [pc, #156]	@ (800096c <CheckActive+0x148>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d007      	beq.n	80008e6 <CheckActive+0xc2>
 80008d6:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <CheckActive+0x144>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d102      	bne.n	80008e6 <CheckActive+0xc2>
			Active = 1;
 80008e0:	4b22      	ldr	r3, [pc, #136]	@ (800096c <CheckActive+0x148>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
		}

		keyFlagSub = 0;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <CheckActive+0x140>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
		keyFlagMain = 0;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <CheckActive+0x144>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	e02f      	b.n	8000954 <CheckActive+0x130>

		#ifdef CL_DEBUG
			printf("\t hot check: origin: %d, curr: %d\n", origin, Active);
		#endif
	} else if (data[2] == 71) { // scroll lock
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3302      	adds	r3, #2
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b47      	cmp	r3, #71	@ 0x47
 80008fc:	d10c      	bne.n	8000918 <CheckActive+0xf4>
		// switch to sub
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000904:	4816      	ldr	r0, [pc, #88]	@ (8000960 <CheckActive+0x13c>)
 8000906:	f004 fa01 	bl	8004d0c <HAL_GPIO_WritePin>

		#ifdef CL_DEBUG
			printf("sub key pressed.\n");
		#endif
		keyFlagSub = 1;
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <CheckActive+0x140>)
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
		keyFlagMain = 0;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <CheckActive+0x144>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	e01d      	b.n	8000954 <CheckActive+0x130>
	} else if (data[2] == 72) { // pause break
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3302      	adds	r3, #2
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b48      	cmp	r3, #72	@ 0x48
 8000920:	d10c      	bne.n	800093c <CheckActive+0x118>
		// switch to main
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000928:	480d      	ldr	r0, [pc, #52]	@ (8000960 <CheckActive+0x13c>)
 800092a:	f004 f9ef 	bl	8004d0c <HAL_GPIO_WritePin>

		#ifdef CL_DEBUG
			printf("main key pressed.\n");
		#endif
		keyFlagSub = 0;
 800092e:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <CheckActive+0x140>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
		keyFlagMain = 1;
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <CheckActive+0x144>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	e00b      	b.n	8000954 <CheckActive+0x130>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000942:	4807      	ldr	r0, [pc, #28]	@ (8000960 <CheckActive+0x13c>)
 8000944:	f004 f9e2 	bl	8004d0c <HAL_GPIO_WritePin>
		#ifdef CL_DEBUG
			printf("single key is not hotkey.\n");
		#endif
		keyFlagSub = 0;
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <CheckActive+0x140>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
		keyFlagMain = 0;
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <CheckActive+0x144>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	58020800 	.word	0x58020800
 8000964:	20000001 	.word	0x20000001
 8000968:	20000002 	.word	0x20000002
 800096c:	20000000 	.word	0x20000000

08000970 <ProcessData>:

void ProcessData(uint8_t *data, Msg_SourceTypeDef source) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < 8; i++) {
		printf("%d, ", data[i]);
	}
	printf("\n");
#endif
	if (Active) {
 800097c:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <ProcessData+0x3c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d008      	beq.n	8000998 <ProcessData+0x28>
		// 发送到USB
		mainLastActive = HAL_GetTick();
 8000986:	f001 fb77 	bl	8002078 <HAL_GetTick>
 800098a:	4603      	mov	r3, r0
 800098c:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <ProcessData+0x40>)
 800098e:	6013      	str	r3, [r2, #0]
		USBA_AutoReport(data);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 fab5 	bl	8000f00 <USBA_AutoReport>
 8000996:	e002      	b.n	800099e <ProcessData+0x2e>
	} else {
		// 发送到从机
		SendToSlave(data);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff19 	bl	80007d0 <SendToSlave>
	}
	CheckActive(data);
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff ff40 	bl	8000824 <CheckActive>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	240002f8 	.word	0x240002f8

080009b4 <MasterMain>:


void MasterMain() {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
	mainLastActive = HAL_GetTick();
 80009ba:	f001 fb5d 	bl	8002078 <HAL_GetTick>
 80009be:	4603      	mov	r3, r0
 80009c0:	4a1e      	ldr	r2, [pc, #120]	@ (8000a3c <MasterMain+0x88>)
 80009c2:	6013      	str	r3, [r2, #0]
	uint8_t mvBuff[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	721a      	strb	r2, [r3, #8]

	Active = 1;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <MasterMain+0x8c>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
	keyFlagSub = 0;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <MasterMain+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	keyFlagMain = 0;
 80009da:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <MasterMain+0x94>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]

	while (1) {
		MX_USB_HOST_Process();
 80009e0:	f01a fa22 	bl	801ae28 <MX_USB_HOST_Process>
		// 主机适用于mac, 降低回报率的突发率，以获得良好的兼容性
		// 125Hz -> 8ms
		if ((!Active) || (HAL_GetTick() - mainLastActive >= 8)) {
 80009e4:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MasterMain+0x8c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d007      	beq.n	80009fe <MasterMain+0x4a>
 80009ee:	f001 fb43 	bl	8002078 <HAL_GetTick>
 80009f2:	4602      	mov	r2, r0
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MasterMain+0x88>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	2b07      	cmp	r3, #7
 80009fc:	d902      	bls.n	8000a04 <MasterMain+0x50>
			// 非激活的状态，直接处理消息，以快速发送到从机；
			// 激活状态需要8ms之后再处理消息，以降低突发传输
			Msg_Consume(&ProcessData);
 80009fe:	4813      	ldr	r0, [pc, #76]	@ (8000a4c <MasterMain+0x98>)
 8000a00:	f000 f894 	bl	8000b2c <Msg_Consume>
		}

		if (HAL_GetTick() - mainLastActive > (1000 *60 *5)) { // 5分钟
 8000a04:	f001 fb38 	bl	8002078 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MasterMain+0x88>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	4a0f      	ldr	r2, [pc, #60]	@ (8000a50 <MasterMain+0x9c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d9e4      	bls.n	80009e0 <MasterMain+0x2c>
			mainLastActive = HAL_GetTick();
 8000a16:	f001 fb2f 	bl	8002078 <HAL_GetTick>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a07      	ldr	r2, [pc, #28]	@ (8000a3c <MasterMain+0x88>)
 8000a1e:	6013      	str	r3, [r2, #0]
			#ifdef CL_DEBUG
				printf("move mouse!\n");
			#endif

			// 随机移动鼠标
			mvBuff[1] = (mainLastActive >> 5) & 0xFF;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MasterMain+0x88>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	095b      	lsrs	r3, r3, #5
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	717b      	strb	r3, [r7, #5]
			mvBuff[2] = mainLastActive & 0xFF;
 8000a2a:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <MasterMain+0x88>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	71bb      	strb	r3, [r7, #6]
			USBA_AutoReport(mvBuff);
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fa63 	bl	8000f00 <USBA_AutoReport>
		MX_USB_HOST_Process();
 8000a3a:	e7d1      	b.n	80009e0 <MasterMain+0x2c>
 8000a3c:	240002f8 	.word	0x240002f8
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000001 	.word	0x20000001
 8000a48:	20000002 	.word	0x20000002
 8000a4c:	08000971 	.word	0x08000971
 8000a50:	000493e0 	.word	0x000493e0

08000a54 <Msg_Init>:

__attribute__((section(".dtcm_ram"))) MessageBuffer msg_buff;
__attribute__((section(".dtcm_ram"))) MessageBuffer* buffer;


void Msg_Init() {
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	buffer = &msg_buff;
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <Msg_Init+0x28>)
 8000a5a:	4a09      	ldr	r2, [pc, #36]	@ (8000a80 <Msg_Init+0x2c>)
 8000a5c:	601a      	str	r2, [r3, #0]
	buffer->head = 0;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <Msg_Init+0x28>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2200      	movs	r2, #0
 8000a64:	f8a3 2a28 	strh.w	r2, [r3, #2600]	@ 0xa28
	buffer->tail = 0;
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <Msg_Init+0x28>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f8a3 2a2a 	strh.w	r2, [r3, #2602]	@ 0xa2a
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	20000a30 	.word	0x20000a30
 8000a80:	20000004 	.word	0x20000004

08000a84 <Msg_Add>:

// 添加消息到缓冲区
// 这里会添加11字节的数据: 前8字节报文，第9字节键鼠标志，第10字节crc
uint8_t Msg_Add(const uint8_t* data, Msg_SourceTypeDef source) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
    uint16_t next_head = (buffer->head + 1) % BUFFER_SIZE;
 8000a90:	4b24      	ldr	r3, [pc, #144]	@ (8000b24 <Msg_Add+0xa0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f8b3 3a28 	ldrh.w	r3, [r3, #2600]	@ 0xa28
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	4a22      	ldr	r2, [pc, #136]	@ (8000b28 <Msg_Add+0xa4>)
 8000a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa2:	1191      	asrs	r1, r2, #6
 8000aa4:	17da      	asrs	r2, r3, #31
 8000aa6:	1a8a      	subs	r2, r1, r2
 8000aa8:	21c8      	movs	r1, #200	@ 0xc8
 8000aaa:	fb01 f202 	mul.w	r2, r1, r2
 8000aae:	1a9a      	subs	r2, r3, r2
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	81fb      	strh	r3, [r7, #14]

    // 检查缓冲区是否已满
    if (next_head == buffer->tail) {
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <Msg_Add+0xa0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f8b3 3a2a 	ldrh.w	r3, [r3, #2602]	@ 0xa2a
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	89fa      	ldrh	r2, [r7, #14]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d101      	bne.n	8000ac8 <Msg_Add+0x44>
        return 1;  // 缓冲区已满
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e029      	b.n	8000b1c <Msg_Add+0x98>
    }

    // 复制数据到缓冲区
    memcpy(buffer->messages[buffer->head].data, data, MESSAGE_SIZE_VALID);
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <Msg_Add+0xa0>)
 8000aca:	6819      	ldr	r1, [r3, #0]
 8000acc:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <Msg_Add+0xa0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f8b3 3a28 	ldrh.w	r3, [r3, #2600]	@ 0xa28
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4613      	mov	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	220a      	movs	r2, #10
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f01a fffe 	bl	801baea <memcpy>
    buffer->messages[buffer->head].source = source;
 8000aee:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <Msg_Add+0xa0>)
 8000af0:	6819      	ldr	r1, [r3, #0]
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <Msg_Add+0xa0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f8b3 3a28 	ldrh.w	r3, [r3, #2600]	@ 0xa28
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	330c      	adds	r3, #12
 8000b0c:	78fa      	ldrb	r2, [r7, #3]
 8000b0e:	701a      	strb	r2, [r3, #0]
    // 更新head指针(确保编译器不会优化这个操作)
    buffer->head = next_head;
 8000b10:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <Msg_Add+0xa0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	89fa      	ldrh	r2, [r7, #14]
 8000b16:	f8a3 2a28 	strh.w	r2, [r3, #2600]	@ 0xa28

    return 0;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000a30 	.word	0x20000a30
 8000b28:	51eb851f 	.word	0x51eb851f

08000b2c <Msg_Consume>:
uint8_t Msg_IsEmpty() {
    return (buffer->head == buffer->tail) ? 1 : 0;
}

// 处理一条消息
uint8_t Msg_Consume(void (*cb)(uint8_t *data, Msg_SourceTypeDef source)) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	if (buffer->head == buffer->tail) {
 8000b34:	4b3f      	ldr	r3, [pc, #252]	@ (8000c34 <Msg_Consume+0x108>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f8b3 3a28 	ldrh.w	r3, [r3, #2600]	@ 0xa28
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c34 <Msg_Consume+0x108>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f8b3 3a2a 	ldrh.w	r3, [r3, #2602]	@ 0xa2a
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d101      	bne.n	8000b50 <Msg_Consume+0x24>
		return 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e06c      	b.n	8000c2a <Msg_Consume+0xfe>
	}

	uint8_t *data_ptr = buffer->messages[buffer->tail].data;
 8000b50:	4b38      	ldr	r3, [pc, #224]	@ (8000c34 <Msg_Consume+0x108>)
 8000b52:	6819      	ldr	r1, [r3, #0]
 8000b54:	4b37      	ldr	r3, [pc, #220]	@ (8000c34 <Msg_Consume+0x108>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f8b3 3a2a 	ldrh.w	r3, [r3, #2602]	@ 0xa2a
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	60bb      	str	r3, [r7, #8]
	if (buffer->messages[buffer->tail].source == MSG_FROM_SPI) {
 8000b6e:	4b31      	ldr	r3, [pc, #196]	@ (8000c34 <Msg_Consume+0x108>)
 8000b70:	6819      	ldr	r1, [r3, #0]
 8000b72:	4b30      	ldr	r3, [pc, #192]	@ (8000c34 <Msg_Consume+0x108>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f8b3 3a2a 	ldrh.w	r3, [r3, #2602]	@ 0xa2a
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4613      	mov	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	330c      	adds	r3, #12
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d121      	bne.n	8000bd6 <Msg_Consume+0xaa>
		// 检查CRC值
		uint8_t count = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	73fb      	strb	r3, [r7, #15]
		for (uint8_t i = 0; i < 9; i++) {
 8000b96:	2300      	movs	r3, #0
 8000b98:	73bb      	strb	r3, [r7, #14]
 8000b9a:	e009      	b.n	8000bb0 <Msg_Consume+0x84>
			count += data_ptr[i];
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	73fb      	strb	r3, [r7, #15]
		for (uint8_t i = 0; i < 9; i++) {
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	3301      	adds	r3, #1
 8000bae:	73bb      	strb	r3, [r7, #14]
 8000bb0:	7bbb      	ldrb	r3, [r7, #14]
 8000bb2:	2b08      	cmp	r3, #8
 8000bb4:	d9f2      	bls.n	8000b9c <Msg_Consume+0x70>
		}
		if (count != data_ptr[9]) {
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	3309      	adds	r3, #9
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	7bfa      	ldrb	r2, [r7, #15]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d009      	beq.n	8000bd6 <Msg_Consume+0xaa>
			printf("received data crc error: %ud, last: %u\n", count, data_ptr[9]);
 8000bc2:	7bf9      	ldrb	r1, [r7, #15]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	3309      	adds	r3, #9
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	481a      	ldr	r0, [pc, #104]	@ (8000c38 <Msg_Consume+0x10c>)
 8000bce:	f01a fdb1 	bl	801b734 <iprintf>
			Error_Handler();
 8000bd2:	f000 fca9 	bl	8001528 <Error_Handler>
		}
	}

	cb(data_ptr, buffer->messages[buffer->tail].source);
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <Msg_Consume+0x108>)
 8000bd8:	6819      	ldr	r1, [r3, #0]
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <Msg_Consume+0x108>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f8b3 3a2a 	ldrh.w	r3, [r3, #2602]	@ 0xa2a
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	330c      	adds	r3, #12
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	68b8      	ldr	r0, [r7, #8]
 8000bfc:	4798      	blx	r3

    // 更新tail指针
    buffer->tail = (buffer->tail + 1) % BUFFER_SIZE;
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <Msg_Consume+0x108>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f8b3 3a2a 	ldrh.w	r3, [r3, #2602]	@ 0xa2a
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <Msg_Consume+0x110>)
 8000c0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c10:	1191      	asrs	r1, r2, #6
 8000c12:	17da      	asrs	r2, r3, #31
 8000c14:	1a8a      	subs	r2, r1, r2
 8000c16:	21c8      	movs	r1, #200	@ 0xc8
 8000c18:	fb01 f202 	mul.w	r2, r1, r2
 8000c1c:	1a9a      	subs	r2, r3, r2
 8000c1e:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <Msg_Consume+0x108>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	b292      	uxth	r2, r2
 8000c24:	f8a3 2a2a 	strh.w	r2, [r3, #2602]	@ 0xa2a
    return 1;
 8000c28:	2301      	movs	r3, #1
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000a30 	.word	0x20000a30
 8000c38:	0801c448 	.word	0x0801c448
 8000c3c:	51eb851f 	.word	0x51eb851f

08000c40 <SendToMaster>:

// #define CL_DEBUG

uint8_t stxBuff[32];

void SendToMaster(uint8_t *data) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	// 前8字节为HID 报文，第9字节为键鼠区分，第10字节为CRC
	uint8_t crc = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 9; i++) {
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73bb      	strb	r3, [r7, #14]
 8000c50:	e010      	b.n	8000c74 <SendToMaster+0x34>
		stxBuff[i] = data[i];
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	441a      	add	r2, r3
 8000c58:	7bbb      	ldrb	r3, [r7, #14]
 8000c5a:	7811      	ldrb	r1, [r2, #0]
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c90 <SendToMaster+0x50>)
 8000c5e:	54d1      	strb	r1, [r2, r3]
		crc += data[i];
 8000c60:	7bbb      	ldrb	r3, [r7, #14]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	781a      	ldrb	r2, [r3, #0]
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 9; i++) {
 8000c6e:	7bbb      	ldrb	r3, [r7, #14]
 8000c70:	3301      	adds	r3, #1
 8000c72:	73bb      	strb	r3, [r7, #14]
 8000c74:	7bbb      	ldrb	r3, [r7, #14]
 8000c76:	2b08      	cmp	r3, #8
 8000c78:	d9eb      	bls.n	8000c52 <SendToMaster+0x12>
	}

	stxBuff[9] = crc;
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <SendToMaster+0x50>)
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	7253      	strb	r3, [r2, #9]
	SPIA_TxData((uint8_t*)stxBuff, 10);
 8000c80:	210a      	movs	r1, #10
 8000c82:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <SendToMaster+0x50>)
 8000c84:	f000 f83c 	bl	8000d00 <SPIA_TxData>
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	240002fc 	.word	0x240002fc

08000c94 <SlaveProcessData>:

void SlaveProcessData(uint8_t *data, Msg_SourceTypeDef source) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
			printf("%u, ", data[i]);
		}
		printf("\n");
	#endif

	if (source == MSG_FROM_USB) {
 8000ca0:	78fb      	ldrb	r3, [r7, #3]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d103      	bne.n	8000cae <SlaveProcessData+0x1a>
		// slave 接收到的USB消息，一律发送到主机
		SendToMaster(data);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffca 	bl	8000c40 <SendToMaster>
	} else {
		// slave 接收到的SPI消息，一律发送到USB设备
		USBA_AutoReport(data);
	}
}
 8000cac:	e002      	b.n	8000cb4 <SlaveProcessData+0x20>
		USBA_AutoReport(data);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f000 f926 	bl	8000f00 <USBA_AutoReport>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <SlaveMain>:


void SlaveMain() {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	while (1) {
		MX_USB_HOST_Process();
 8000cc0:	f01a f8b2 	bl	801ae28 <MX_USB_HOST_Process>
		Msg_Consume(&SlaveProcessData);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <SlaveMain+0x14>)
 8000cc6:	f7ff ff31 	bl	8000b2c <Msg_Consume>
	while (1) {
 8000cca:	bf00      	nop
 8000ccc:	e7f8      	b.n	8000cc0 <SlaveMain+0x4>
 8000cce:	bf00      	nop
 8000cd0:	08000c95 	.word	0x08000c95

08000cd4 <HAL_SPI_TxCpltCallback>:
extern SPI_HandleTypeDef hspi2;

__attribute__((section(".dtcm_ram"))) uint8_t txBusy = 0;
uint8_t spiaTxBuff[20];

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a06      	ldr	r2, [pc, #24]	@ (8000cf8 <HAL_SPI_TxCpltCallback+0x24>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d102      	bne.n	8000cea <HAL_SPI_TxCpltCallback+0x16>
		txBusy = 0;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_SPI_TxCpltCallback+0x28>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
	}
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	24000358 	.word	0x24000358
 8000cfc:	20000a34 	.word	0x20000a34

08000d00 <SPIA_TxData>:

void SPIA_TxData(uint8_t *buff, uint8_t size) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]
	// size == 9
	while (txBusy) {
 8000d0c:	e001      	b.n	8000d12 <SPIA_TxData+0x12>
		// delay?
		__NOP();
 8000d0e:	bf00      	nop
		__NOP();
 8000d10:	bf00      	nop
	while (txBusy) {
 8000d12:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <SPIA_TxData+0x74>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f9      	bne.n	8000d0e <SPIA_TxData+0xe>
	}
	HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(&hspi1, buff, size);
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	4815      	ldr	r0, [pc, #84]	@ (8000d78 <SPIA_TxData+0x78>)
 8000d24:	f00a fbba 	bl	800b49c <HAL_SPI_Transmit_DMA>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	72fb      	strb	r3, [r7, #11]
	if (status != HAL_OK) {
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d01c      	beq.n	8000d6c <SPIA_TxData+0x6c>
		printf("tx error! status: %d, size: %d\n\tdata:", status, size);
 8000d32:	7afb      	ldrb	r3, [r7, #11]
 8000d34:	78fa      	ldrb	r2, [r7, #3]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4810      	ldr	r0, [pc, #64]	@ (8000d7c <SPIA_TxData+0x7c>)
 8000d3a:	f01a fcfb 	bl	801b734 <iprintf>
		for (uint32_t i = 0; i < size; i++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	e00a      	b.n	8000d5a <SPIA_TxData+0x5a>
			printf("%d, ", buff[i]);
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4413      	add	r3, r2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <SPIA_TxData+0x80>)
 8000d50:	f01a fcf0 	bl	801b734 <iprintf>
		for (uint32_t i = 0; i < size; i++) {
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	3301      	adds	r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d3f0      	bcc.n	8000d44 <SPIA_TxData+0x44>
		}
		printf("\n");
 8000d62:	200a      	movs	r0, #10
 8000d64:	f01a fcf8 	bl	801b758 <putchar>

		Error_Handler();
 8000d68:	f000 fbde 	bl	8001528 <Error_Handler>
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000a34 	.word	0x20000a34
 8000d78:	24000358 	.word	0x24000358
 8000d7c:	0801c470 	.word	0x0801c470
 8000d80:	0801c498 	.word	0x0801c498

08000d84 <SPIA_Init>:

// 这里虽然接收10个字节，但前9位可用
#define RX_BATCH (10U)
uint8_t rxBuff[32];

void SPIA_Init() {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	txBusy = 0;
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <SPIA_Init+0x38>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]

	status = HAL_SPI_Receive_DMA(&hspi2, rxBuff, RX_BATCH);
 8000d90:	220a      	movs	r2, #10
 8000d92:	490b      	ldr	r1, [pc, #44]	@ (8000dc0 <SPIA_Init+0x3c>)
 8000d94:	480b      	ldr	r0, [pc, #44]	@ (8000dc4 <SPIA_Init+0x40>)
 8000d96:	f00a fcc3 	bl	800b720 <HAL_SPI_Receive_DMA>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <SPIA_Init+0x2e>
		printf("\n set Received ERROR! status: %d\n", status);
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4619      	mov	r1, r3
 8000da8:	4807      	ldr	r0, [pc, #28]	@ (8000dc8 <SPIA_Init+0x44>)
 8000daa:	f01a fcc3 	bl	801b734 <iprintf>
		Error_Handler();
 8000dae:	f000 fbbb 	bl	8001528 <Error_Handler>
	}
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000a34 	.word	0x20000a34
 8000dc0:	2400031c 	.word	0x2400031c
 8000dc4:	240003e0 	.word	0x240003e0
 8000dc8:	0801c4a0 	.word	0x0801c4a0

08000dcc <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	if (hspi == &hspi2) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a12      	ldr	r2, [pc, #72]	@ (8000e20 <HAL_SPI_RxCpltCallback+0x54>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d11c      	bne.n	8000e16 <HAL_SPI_RxCpltCallback+0x4a>
		// 添加到消息队列中
		if (Msg_Add(rxBuff, MSG_FROM_SPI) != 0) {
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4811      	ldr	r0, [pc, #68]	@ (8000e24 <HAL_SPI_RxCpltCallback+0x58>)
 8000de0:	f7ff fe50 	bl	8000a84 <Msg_Add>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d004      	beq.n	8000df4 <HAL_SPI_RxCpltCallback+0x28>
			printf("add data to msg_buf error!\n");
 8000dea:	480f      	ldr	r0, [pc, #60]	@ (8000e28 <HAL_SPI_RxCpltCallback+0x5c>)
 8000dec:	f01a fd12 	bl	801b814 <puts>
			Error_Handler();
 8000df0:	f000 fb9a 	bl	8001528 <Error_Handler>
		}

		// 继续接收
		status = HAL_SPI_Receive_DMA(&hspi2, rxBuff, RX_BATCH);
 8000df4:	220a      	movs	r2, #10
 8000df6:	490b      	ldr	r1, [pc, #44]	@ (8000e24 <HAL_SPI_RxCpltCallback+0x58>)
 8000df8:	4809      	ldr	r0, [pc, #36]	@ (8000e20 <HAL_SPI_RxCpltCallback+0x54>)
 8000dfa:	f00a fc91 	bl	800b720 <HAL_SPI_Receive_DMA>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) {
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d006      	beq.n	8000e16 <HAL_SPI_RxCpltCallback+0x4a>
			printf("\n set Received ERROR! status: %d\n", status);
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4807      	ldr	r0, [pc, #28]	@ (8000e2c <HAL_SPI_RxCpltCallback+0x60>)
 8000e0e:	f01a fc91 	bl	801b734 <iprintf>
			Error_Handler();
 8000e12:	f000 fb89 	bl	8001528 <Error_Handler>
		}
	}
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	240003e0 	.word	0x240003e0
 8000e24:	2400031c 	.word	0x2400031c
 8000e28:	0801c4c4 	.word	0x0801c4c4
 8000e2c:	0801c4a0 	.word	0x0801c4a0

08000e30 <USBH_HID_EventCallback>:
// ===================== cb =========================
__attribute__((section(".dtcm_ram"))) HID_HandleTypeDef *HID_Handle;
__attribute__((section(".dtcm_ram"))) uint16_t usbRxLen;
__attribute__((section(".dtcm_ram"))) uint8_t usbRxBuff[64];

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000e3e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	4a29      	ldr	r2, [pc, #164]	@ (8000eec <USBH_HID_EventCallback+0xbc>)
 8000e46:	6013      	str	r3, [r2, #0]
	if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL)) {
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <USBH_HID_EventCallback+0xbc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	8b1b      	ldrh	r3, [r3, #24]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d048      	beq.n	8000ee4 <USBH_HID_EventCallback+0xb4>
 8000e52:	4b26      	ldr	r3, [pc, #152]	@ (8000eec <USBH_HID_EventCallback+0xbc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d043      	beq.n	8000ee4 <USBH_HID_EventCallback+0xb4>
		return;
	}

	// 读取并复制数据到缓冲区
	usbRxLen = USBH_HID_FifoRead(&HID_Handle->fifo, usbRxBuff, HID_Handle->length);
 8000e5c:	4b23      	ldr	r3, [pc, #140]	@ (8000eec <USBH_HID_EventCallback+0xbc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f103 0008 	add.w	r0, r3, #8
 8000e64:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <USBH_HID_EventCallback+0xbc>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	8b1b      	ldrh	r3, [r3, #24]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4920      	ldr	r1, [pc, #128]	@ (8000ef0 <USBH_HID_EventCallback+0xc0>)
 8000e6e:	f013 fcf0 	bl	8014852 <USBH_HID_FifoRead>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <USBH_HID_EventCallback+0xc4>)
 8000e78:	801a      	strh	r2, [r3, #0]
	if (usbRxLen != HID_Handle->length) {
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <USBH_HID_EventCallback+0xbc>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	8b1a      	ldrh	r2, [r3, #24]
 8000e80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <USBH_HID_EventCallback+0xc4>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d00b      	beq.n	8000ea0 <USBH_HID_EventCallback+0x70>
		printf("usb rx len != dist len! rx: %d, hid handler len: %d\n", usbRxLen, HID_Handle->length);
 8000e88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <USBH_HID_EventCallback+0xc4>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <USBH_HID_EventCallback+0xbc>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	8b1b      	ldrh	r3, [r3, #24]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4818      	ldr	r0, [pc, #96]	@ (8000ef8 <USBH_HID_EventCallback+0xc8>)
 8000e98:	f01a fc4c 	bl	801b734 <iprintf>
		Error_Handler();
 8000e9c:	f000 fb44 	bl	8001528 <Error_Handler>
	}

	if ((phost->device.CfgDesc.bNumInterfaces > 0) && (phost->device.CfgDesc.Itf_Desc[0].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000ea6:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00a      	beq.n	8000ec4 <USBH_HID_EventCallback+0x94>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000eb4:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d103      	bne.n	8000ec4 <USBH_HID_EventCallback+0x94>
		usbRxBuff[8] = 1;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <USBH_HID_EventCallback+0xc0>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	721a      	strb	r2, [r3, #8]
 8000ec2:	e002      	b.n	8000eca <USBH_HID_EventCallback+0x9a>
	} else {
		usbRxBuff[8] = 0;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <USBH_HID_EventCallback+0xc0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	721a      	strb	r2, [r3, #8]
	}
	if (Msg_Add(usbRxBuff, MSG_FROM_USB)) {
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4808      	ldr	r0, [pc, #32]	@ (8000ef0 <USBH_HID_EventCallback+0xc0>)
 8000ece:	f7ff fdd9 	bl	8000a84 <Msg_Add>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <USBH_HID_EventCallback+0xb6>
		printf("add usb received data to msg queue err! status not eq 0\n");
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <USBH_HID_EventCallback+0xcc>)
 8000eda:	f01a fc9b 	bl	801b814 <puts>
		Error_Handler();
 8000ede:	f000 fb23 	bl	8001528 <Error_Handler>
 8000ee2:	e000      	b.n	8000ee6 <USBH_HID_EventCallback+0xb6>
		return;
 8000ee4:	bf00      	nop
	}
}
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000a38 	.word	0x20000a38
 8000ef0:	20000a40 	.word	0x20000a40
 8000ef4:	20000a3c 	.word	0x20000a3c
 8000ef8:	0801c4e0 	.word	0x0801c4e0
 8000efc:	0801c518 	.word	0x0801c518

08000f00 <USBA_AutoReport>:

uint8_t usbDevBuff[8];
extern USBD_HandleTypeDef hUsbDeviceFS;

void USBA_AutoReport(uint8_t *data) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint8_t retry = 10;
 8000f08:	230a      	movs	r3, #10
 8000f0a:	73fb      	strb	r3, [r7, #15]
	memcpy(usbDevBuff, data, 8);
 8000f0c:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <USBA_AutoReport+0x5c>)
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6810      	ldr	r0, [r2, #0]
 8000f12:	6851      	ldr	r1, [r2, #4]
 8000f14:	c303      	stmia	r3!, {r0, r1}
	while (retry--) {
 8000f16:	e016      	b.n	8000f46 <USBA_AutoReport+0x46>
		if (data[8] == 1) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3308      	adds	r3, #8
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d108      	bne.n	8000f34 <USBA_AutoReport+0x34>
			if (USBD_OK == USBD_KEYBOADR_HID_SendReport(&hUsbDeviceFS, usbDevBuff, 8)) {
 8000f22:	2208      	movs	r2, #8
 8000f24:	490d      	ldr	r1, [pc, #52]	@ (8000f5c <USBA_AutoReport+0x5c>)
 8000f26:	480e      	ldr	r0, [pc, #56]	@ (8000f60 <USBA_AutoReport+0x60>)
 8000f28:	f00f f87c 	bl	8010024 <USBD_KEYBOADR_HID_SendReport>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d108      	bne.n	8000f44 <USBA_AutoReport+0x44>
				return;
 8000f32:	e00f      	b.n	8000f54 <USBA_AutoReport+0x54>
			}
		} else {
			if (USBD_OK == USBD_MOUSE_HID_SendReport(&hUsbDeviceFS, usbDevBuff, 4)) {
 8000f34:	2204      	movs	r2, #4
 8000f36:	4909      	ldr	r1, [pc, #36]	@ (8000f5c <USBA_AutoReport+0x5c>)
 8000f38:	4809      	ldr	r0, [pc, #36]	@ (8000f60 <USBA_AutoReport+0x60>)
 8000f3a:	f00f f89b 	bl	8010074 <USBD_MOUSE_HID_SendReport>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d006      	beq.n	8000f52 <USBA_AutoReport+0x52>
				return;
			}
		}
		__NOP();
 8000f44:	bf00      	nop
	while (retry--) {
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	1e5a      	subs	r2, r3, #1
 8000f4a:	73fa      	strb	r2, [r7, #15]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1e3      	bne.n	8000f18 <USBA_AutoReport+0x18>
 8000f50:	e000      	b.n	8000f54 <USBA_AutoReport+0x54>
				return;
 8000f52:	bf00      	nop
	}
}
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2400033c 	.word	0x2400033c
 8000f60:	24000a34 	.word	0x24000a34

08000f64 <mflush>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
void mflush() {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1 , (uint8_t *)printBuff, printLen, 0xFFFF);
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <mflush+0x20>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f72:	4905      	ldr	r1, [pc, #20]	@ (8000f88 <mflush+0x24>)
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <mflush+0x28>)
 8000f76:	f00b f8ce 	bl	800c116 <HAL_UART_Transmit>
	printLen = 0;
 8000f7a:	4b02      	ldr	r3, [pc, #8]	@ (8000f84 <mflush+0x20>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	240009ec 	.word	0x240009ec
 8000f88:	240005ec 	.word	0x240005ec
 8000f8c:	24000558 	.word	0x24000558

08000f90 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	printBuff[printLen++] = ch;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <__io_putchar+0x38>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	490a      	ldr	r1, [pc, #40]	@ (8000fc8 <__io_putchar+0x38>)
 8000fa0:	600a      	str	r2, [r1, #0]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	b2d1      	uxtb	r1, r2
 8000fa6:	4a09      	ldr	r2, [pc, #36]	@ (8000fcc <__io_putchar+0x3c>)
 8000fa8:	54d1      	strb	r1, [r2, r3]
	if (ch == '\n' || printLen >= 20) mflush();
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0a      	cmp	r3, #10
 8000fae:	d003      	beq.n	8000fb8 <__io_putchar+0x28>
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <__io_putchar+0x38>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b13      	cmp	r3, #19
 8000fb6:	d901      	bls.n	8000fbc <__io_putchar+0x2c>
 8000fb8:	f7ff ffd4 	bl	8000f64 <mflush>
	return ch;
 8000fbc:	687b      	ldr	r3, [r7, #4]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	240009ec 	.word	0x240009ec
 8000fcc:	240005ec 	.word	0x240005ec

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fd4:	4b31      	ldr	r3, [pc, #196]	@ (800109c <main+0xcc>)
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d11b      	bne.n	8001018 <main+0x48>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe0:	f3bf 8f4f 	dsb	sy
}
 8000fe4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe6:	f3bf 8f6f 	isb	sy
}
 8000fea:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fec:	4b2b      	ldr	r3, [pc, #172]	@ (800109c <main+0xcc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff4:	f3bf 8f4f 	dsb	sy
}
 8000ff8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ffa:	f3bf 8f6f 	isb	sy
}
 8000ffe:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001000:	4b26      	ldr	r3, [pc, #152]	@ (800109c <main+0xcc>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	4a25      	ldr	r2, [pc, #148]	@ (800109c <main+0xcc>)
 8001006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800100a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800100c:	f3bf 8f4f 	dsb	sy
}
 8001010:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001012:	f3bf 8f6f 	isb	sy
}
 8001016:	e000      	b.n	800101a <main+0x4a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001018:	bf00      	nop

  /* USER CODE BEGIN 1 */
	SCB_EnableICache();
	HAL_MPU_Disable();
 800101a:	f001 f985 	bl	8002328 <HAL_MPU_Disable>
 800101e:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <main+0xcc>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d11b      	bne.n	8001062 <main+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
 800102a:	f3bf 8f4f 	dsb	sy
}
 800102e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001030:	f3bf 8f6f 	isb	sy
}
 8001034:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001036:	4b19      	ldr	r3, [pc, #100]	@ (800109c <main+0xcc>)
 8001038:	2200      	movs	r2, #0
 800103a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800103e:	f3bf 8f4f 	dsb	sy
}
 8001042:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001044:	f3bf 8f6f 	isb	sy
}
 8001048:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <main+0xcc>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	4a13      	ldr	r2, [pc, #76]	@ (800109c <main+0xcc>)
 8001050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001054:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001056:	f3bf 8f4f 	dsb	sy
}
 800105a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800105c:	f3bf 8f6f 	isb	sy
}
 8001060:	e000      	b.n	8001064 <main+0x94>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001062:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001064:	f000 ff82 	bl	8001f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001068:	f000 f81a 	bl	80010a0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800106c:	f000 f894 	bl	8001198 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f000 f9f6 	bl	8001460 <MX_GPIO_Init>
  MX_DMA_Init();
 8001074:	f000 f9cc 	bl	8001410 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001078:	f000 f97e 	bl	8001378 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800107c:	f000 f8d4 	bl	8001228 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001080:	f000 f92a 	bl	80012d8 <MX_SPI2_Init>
  MX_RNG_Init();
 8001084:	f000 f8ba 	bl	80011fc <MX_RNG_Init>
  MX_USB_HOST_Init();
 8001088:	f019 fe7c 	bl	801ad84 <MX_USB_HOST_Init>
  MX_USB_DEVICE_Init();
 800108c:	f019 fa00 	bl	801a490 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  myMain();
 8001090:	f7ff fb40 	bl	8000714 <myMain>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001094:	f019 fec8 	bl	801ae28 <MX_USB_HOST_Process>
 8001098:	e7fc      	b.n	8001094 <main+0xc4>
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b09c      	sub	sp, #112	@ 0x70
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010aa:	224c      	movs	r2, #76	@ 0x4c
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f01a fc90 	bl	801b9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2220      	movs	r2, #32
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f01a fc8a 	bl	801b9d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010c0:	2002      	movs	r0, #2
 80010c2:	f007 fa09 	bl	80084d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <SystemClock_Config+0xf0>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	4a30      	ldr	r2, [pc, #192]	@ (8001190 <SystemClock_Config+0xf0>)
 80010d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010d4:	6193      	str	r3, [r2, #24]
 80010d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <SystemClock_Config+0xf0>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001194 <SystemClock_Config+0xf4>)
 80010e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001194 <SystemClock_Config+0xf4>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80010ec:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <SystemClock_Config+0xf4>)
 80010ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010f8:	bf00      	nop
 80010fa:	4b25      	ldr	r3, [pc, #148]	@ (8001190 <SystemClock_Config+0xf0>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001106:	d1f8      	bne.n	80010fa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001108:	2321      	movs	r3, #33	@ 0x21
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800110c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001112:	2301      	movs	r3, #1
 8001114:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111a:	2302      	movs	r3, #2
 800111c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800111e:	2305      	movs	r3, #5
 8001120:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001122:	23c0      	movs	r3, #192	@ 0xc0
 8001124:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001126:	2302      	movs	r3, #2
 8001128:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 800112a:	230c      	movs	r3, #12
 800112c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800112e:	2302      	movs	r3, #2
 8001130:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001132:	2308      	movs	r3, #8
 8001134:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001136:	2300      	movs	r3, #0
 8001138:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001142:	4618      	mov	r0, r3
 8001144:	f007 fa12 	bl	800856c <HAL_RCC_OscConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800114e:	f000 f9eb 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001152:	233f      	movs	r3, #63	@ 0x3f
 8001154:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001156:	2303      	movs	r3, #3
 8001158:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800115e:	2308      	movs	r3, #8
 8001160:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001162:	2340      	movs	r3, #64	@ 0x40
 8001164:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001166:	2340      	movs	r3, #64	@ 0x40
 8001168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800116a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800116e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001170:	2340      	movs	r3, #64	@ 0x40
 8001172:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2104      	movs	r1, #4
 8001178:	4618      	mov	r0, r3
 800117a:	f007 fe51 	bl	8008e20 <HAL_RCC_ClockConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001184:	f000 f9d0 	bl	8001528 <Error_Handler>
  }
}
 8001188:	bf00      	nop
 800118a:	3770      	adds	r7, #112	@ 0x70
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	58024800 	.word	0x58024800
 8001194:	58000400 	.word	0x58000400

08001198 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0b0      	sub	sp, #192	@ 0xc0
 800119c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	22c0      	movs	r2, #192	@ 0xc0
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f01a fc15 	bl	801b9d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011aa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 80011b6:	2305      	movs	r3, #5
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 96;
 80011ba:	2360      	movs	r3, #96	@ 0x60
 80011bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 10;
 80011be:	230a      	movs	r3, #10
 80011c0:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
 80011c2:	230a      	movs	r3, #10
 80011c4:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80011d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 f9a8 	bl	8009538 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80011ee:	f000 f99b 	bl	8001528 <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	37c0      	adds	r7, #192	@ 0xc0
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <MX_RNG_Init+0x24>)
 8001202:	4a08      	ldr	r2, [pc, #32]	@ (8001224 <MX_RNG_Init+0x28>)
 8001204:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_RNG_Init+0x24>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_RNG_Init+0x24>)
 800120e:	f009 ffbf 	bl	800b190 <HAL_RNG_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001218:	f000 f986 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	24000344 	.word	0x24000344
 8001224:	48021800 	.word	0x48021800

08001228 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800122c:	4b28      	ldr	r3, [pc, #160]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 800122e:	4a29      	ldr	r2, [pc, #164]	@ (80012d4 <MX_SPI1_Init+0xac>)
 8001230:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001232:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 8001234:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001238:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800123a:	4b25      	ldr	r3, [pc, #148]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 800123c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001240:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001242:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 8001244:	2207      	movs	r2, #7
 8001246:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001248:	4b21      	ldr	r3, [pc, #132]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800124e:	4b20      	ldr	r3, [pc, #128]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001254:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 8001256:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800125a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800125c:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 800125e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001262:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001264:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 8001272:	2200      	movs	r2, #0
 8001274:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 8001278:	2200      	movs	r2, #0
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 800127e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001282:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 8001286:	2200      	movs	r2, #0
 8001288:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 800128c:	2200      	movs	r2, #0
 800128e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 8001292:	2200      	movs	r2, #0
 8001294:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 8001298:	2200      	movs	r2, #0
 800129a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012a8:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_SPI1_Init+0xa8>)
 80012bc:	f009 ffca 	bl	800b254 <HAL_SPI_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80012c6:	f000 f92f 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	24000358 	.word	0x24000358
 80012d4:	40013000 	.word	0x40013000

080012d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012dc:	4b24      	ldr	r3, [pc, #144]	@ (8001370 <MX_SPI2_Init+0x98>)
 80012de:	4a25      	ldr	r2, [pc, #148]	@ (8001374 <MX_SPI2_Init+0x9c>)
 80012e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80012e2:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <MX_SPI2_Init+0x98>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80012e8:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <MX_SPI2_Init+0x98>)
 80012ea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001370 <MX_SPI2_Init+0x98>)
 80012f2:	2207      	movs	r2, #7
 80012f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <MX_SPI2_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <MX_SPI2_Init+0x98>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001302:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <MX_SPI2_Init+0x98>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001308:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <MX_SPI2_Init+0x98>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800130e:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <MX_SPI2_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001314:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <MX_SPI2_Init+0x98>)
 8001316:	2200      	movs	r2, #0
 8001318:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <MX_SPI2_Init+0x98>)
 800131c:	2200      	movs	r2, #0
 800131e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001320:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <MX_SPI2_Init+0x98>)
 8001322:	2200      	movs	r2, #0
 8001324:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <MX_SPI2_Init+0x98>)
 8001328:	2200      	movs	r2, #0
 800132a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800132c:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <MX_SPI2_Init+0x98>)
 800132e:	2200      	movs	r2, #0
 8001330:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_SPI2_Init+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001338:	4b0d      	ldr	r3, [pc, #52]	@ (8001370 <MX_SPI2_Init+0x98>)
 800133a:	2200      	movs	r2, #0
 800133c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800133e:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_SPI2_Init+0x98>)
 8001340:	2200      	movs	r2, #0
 8001342:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001344:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <MX_SPI2_Init+0x98>)
 8001346:	2200      	movs	r2, #0
 8001348:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_SPI2_Init+0x98>)
 800134c:	2200      	movs	r2, #0
 800134e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <MX_SPI2_Init+0x98>)
 8001352:	2200      	movs	r2, #0
 8001354:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_SPI2_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	@ (8001370 <MX_SPI2_Init+0x98>)
 800135e:	f009 ff79 	bl	800b254 <HAL_SPI_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_SPI2_Init+0x94>
  {
    Error_Handler();
 8001368:	f000 f8de 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	240003e0 	.word	0x240003e0
 8001374:	40003800 	.word	0x40003800

08001378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 800137e:	4a23      	ldr	r2, [pc, #140]	@ (800140c <MX_USART1_UART_Init+0x94>)
 8001380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001382:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 800139e:	2208      	movs	r2, #8
 80013a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80013c0:	4811      	ldr	r0, [pc, #68]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013c2:	f00a fe50 	bl	800c066 <HAL_HalfDuplex_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013cc:	f000 f8ac 	bl	8001528 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d0:	2100      	movs	r1, #0
 80013d2:	480d      	ldr	r0, [pc, #52]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013d4:	f00b feef 	bl	800d1b6 <HAL_UARTEx_SetTxFifoThreshold>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013de:	f000 f8a3 	bl	8001528 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e2:	2100      	movs	r1, #0
 80013e4:	4808      	ldr	r0, [pc, #32]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013e6:	f00b ff24 	bl	800d232 <HAL_UARTEx_SetRxFifoThreshold>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013f0:	f000 f89a 	bl	8001528 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013f6:	f00b fea5 	bl	800d144 <HAL_UARTEx_DisableFifoMode>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001400:	f000 f892 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	24000558 	.word	0x24000558
 800140c:	40011000 	.word	0x40011000

08001410 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <MX_DMA_Init+0x4c>)
 8001418:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800141c:	4a0f      	ldr	r2, [pc, #60]	@ (800145c <MX_DMA_Init+0x4c>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001426:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <MX_DMA_Init+0x4c>)
 8001428:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	200b      	movs	r0, #11
 800143a:	f000 ff40 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800143e:	200b      	movs	r0, #11
 8001440:	f000 ff57 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	200c      	movs	r0, #12
 800144a:	f000 ff38 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800144e:	200c      	movs	r0, #12
 8001450:	f000 ff4f 	bl	80022f2 <HAL_NVIC_EnableIRQ>

}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	58024400 	.word	0x58024400

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001476:	4b2a      	ldr	r3, [pc, #168]	@ (8001520 <MX_GPIO_Init+0xc0>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147c:	4a28      	ldr	r2, [pc, #160]	@ (8001520 <MX_GPIO_Init+0xc0>)
 800147e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <MX_GPIO_Init+0xc0>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001494:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <MX_GPIO_Init+0xc0>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149a:	4a21      	ldr	r2, [pc, #132]	@ (8001520 <MX_GPIO_Init+0xc0>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <MX_GPIO_Init+0xc0>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <MX_GPIO_Init+0xc0>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b8:	4a19      	ldr	r2, [pc, #100]	@ (8001520 <MX_GPIO_Init+0xc0>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <MX_GPIO_Init+0xc0>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <MX_GPIO_Init+0xc0>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d6:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <MX_GPIO_Init+0xc0>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <MX_GPIO_Init+0xc0>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014f4:	480b      	ldr	r0, [pc, #44]	@ (8001524 <MX_GPIO_Init+0xc4>)
 80014f6:	f003 fc09 	bl	8004d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MX_GPIO_Init+0xc4>)
 8001514:	f003 fa4a 	bl	80049ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	@ 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	58024400 	.word	0x58024400
 8001524:	58020800 	.word	0x58020800

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800152e:	b672      	cpsid	i
}
 8001530:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  // 用于从机触发主机
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001538:	4819      	ldr	r0, [pc, #100]	@ (80015a0 <Error_Handler+0x78>)
 800153a:	f003 fbe7 	bl	8004d0c <HAL_GPIO_WritePin>
  uint32_t delayCount = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
  while (1)
  {
	  volatile uint32_t ticks = 10000000;
 8001542:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <Error_Handler+0x7c>)
 8001544:	61bb      	str	r3, [r7, #24]
	  while (ticks--) {
 8001546:	e000      	b.n	800154a <Error_Handler+0x22>
		  __NOP();
 8001548:	bf00      	nop
	  while (ticks--) {
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1e5a      	subs	r2, r3, #1
 800154e:	61ba      	str	r2, [r7, #24]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f9      	bne.n	8001548 <Error_Handler+0x20>
	  };
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8001554:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001558:	4813      	ldr	r0, [pc, #76]	@ (80015a8 <Error_Handler+0x80>)
 800155a:	f003 fbf0 	bl	8004d3e <HAL_GPIO_TogglePin>
	  delayCount++;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3301      	adds	r3, #1
 8001562:	61fb      	str	r3, [r7, #28]

	  if (delayCount >= 100) {
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	2b63      	cmp	r3, #99	@ 0x63
 8001568:	d9eb      	bls.n	8001542 <Error_Handler+0x1a>
		// 100 计数约 8 秒
		// PC0 输出低电平，复位重启
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001578:	2301      	movs	r3, #1
 800157a:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <Error_Handler+0x80>)
 800158e:	f003 fa0d 	bl	80049ac <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2101      	movs	r1, #1
 8001596:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <Error_Handler+0x80>)
 8001598:	f003 fbb8 	bl	8004d0c <HAL_GPIO_WritePin>
  {
 800159c:	e7d1      	b.n	8001542 <Error_Handler+0x1a>
 800159e:	bf00      	nop
 80015a0:	58020000 	.word	0x58020000
 80015a4:	00989680 	.word	0x00989680
 80015a8:	58020800 	.word	0x58020800

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_MspInit+0x30>)
 80015b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015b8:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <HAL_MspInit+0x30>)
 80015ba:	f043 0302 	orr.w	r3, r3, #2
 80015be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_MspInit+0x30>)
 80015c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	58024400 	.word	0x58024400

080015e0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0b4      	sub	sp, #208	@ 0xd0
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	22c0      	movs	r2, #192	@ 0xc0
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f01a f9ef 	bl	801b9d4 <memset>
  if(hrng->Instance==RNG)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a14      	ldr	r2, [pc, #80]	@ (800164c <HAL_RNG_MspInit+0x6c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d121      	bne.n	8001644 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001600:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	4618      	mov	r0, r3
 8001618:	f007 ff8e 	bl	8009538 <HAL_RCCEx_PeriphCLKConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8001622:	f7ff ff81 	bl	8001528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001626:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <HAL_RNG_MspInit+0x70>)
 8001628:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800162c:	4a08      	ldr	r2, [pc, #32]	@ (8001650 <HAL_RNG_MspInit+0x70>)
 800162e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001632:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_RNG_MspInit+0x70>)
 8001638:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800163c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001644:	bf00      	nop
 8001646:	37d0      	adds	r7, #208	@ 0xd0
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	48021800 	.word	0x48021800
 8001650:	58024400 	.word	0x58024400

08001654 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0be      	sub	sp, #248	@ 0xf8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800166c:	f107 0320 	add.w	r3, r7, #32
 8001670:	22c0      	movs	r2, #192	@ 0xc0
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f01a f9ad 	bl	801b9d4 <memset>
  if(hspi->Instance==SPI1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4aa7      	ldr	r2, [pc, #668]	@ (800191c <HAL_SPI_MspInit+0x2c8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	f040 80a0 	bne.w	80017c6 <HAL_SPI_MspInit+0x172>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001686:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001698:	f107 0320 	add.w	r3, r7, #32
 800169c:	4618      	mov	r0, r3
 800169e:	f007 ff4b 	bl	8009538 <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80016a8:	f7ff ff3e 	bl	8001528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ac:	4b9c      	ldr	r3, [pc, #624]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 80016ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016b2:	4a9b      	ldr	r2, [pc, #620]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 80016b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016bc:	4b98      	ldr	r3, [pc, #608]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 80016be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b95      	ldr	r3, [pc, #596]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 80016cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d0:	4a93      	ldr	r2, [pc, #588]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016da:	4b91      	ldr	r3, [pc, #580]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e8:	4b8d      	ldr	r3, [pc, #564]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ee:	4a8c      	ldr	r2, [pc, #560]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016f8:	4b89      	ldr	r3, [pc, #548]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8001706:	2390      	movs	r3, #144	@ 0x90
 8001708:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800171e:	2305      	movs	r3, #5
 8001720:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001728:	4619      	mov	r1, r3
 800172a:	487e      	ldr	r0, [pc, #504]	@ (8001924 <HAL_SPI_MspInit+0x2d0>)
 800172c:	f003 f93e 	bl	80049ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001730:	2308      	movs	r3, #8
 8001732:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001748:	2305      	movs	r3, #5
 800174a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001752:	4619      	mov	r1, r3
 8001754:	4874      	ldr	r0, [pc, #464]	@ (8001928 <HAL_SPI_MspInit+0x2d4>)
 8001756:	f003 f929 	bl	80049ac <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800175a:	4b74      	ldr	r3, [pc, #464]	@ (800192c <HAL_SPI_MspInit+0x2d8>)
 800175c:	4a74      	ldr	r2, [pc, #464]	@ (8001930 <HAL_SPI_MspInit+0x2dc>)
 800175e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001760:	4b72      	ldr	r3, [pc, #456]	@ (800192c <HAL_SPI_MspInit+0x2d8>)
 8001762:	2226      	movs	r2, #38	@ 0x26
 8001764:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001766:	4b71      	ldr	r3, [pc, #452]	@ (800192c <HAL_SPI_MspInit+0x2d8>)
 8001768:	2240      	movs	r2, #64	@ 0x40
 800176a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176c:	4b6f      	ldr	r3, [pc, #444]	@ (800192c <HAL_SPI_MspInit+0x2d8>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001772:	4b6e      	ldr	r3, [pc, #440]	@ (800192c <HAL_SPI_MspInit+0x2d8>)
 8001774:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001778:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800177a:	4b6c      	ldr	r3, [pc, #432]	@ (800192c <HAL_SPI_MspInit+0x2d8>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001780:	4b6a      	ldr	r3, [pc, #424]	@ (800192c <HAL_SPI_MspInit+0x2d8>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001786:	4b69      	ldr	r3, [pc, #420]	@ (800192c <HAL_SPI_MspInit+0x2d8>)
 8001788:	2200      	movs	r2, #0
 800178a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800178c:	4b67      	ldr	r3, [pc, #412]	@ (800192c <HAL_SPI_MspInit+0x2d8>)
 800178e:	2200      	movs	r2, #0
 8001790:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001792:	4b66      	ldr	r3, [pc, #408]	@ (800192c <HAL_SPI_MspInit+0x2d8>)
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001798:	4864      	ldr	r0, [pc, #400]	@ (800192c <HAL_SPI_MspInit+0x2d8>)
 800179a:	f000 fddd 	bl	8002358 <HAL_DMA_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_SPI_MspInit+0x154>
    {
      Error_Handler();
 80017a4:	f7ff fec0 	bl	8001528 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a60      	ldr	r2, [pc, #384]	@ (800192c <HAL_SPI_MspInit+0x2d8>)
 80017ac:	679a      	str	r2, [r3, #120]	@ 0x78
 80017ae:	4a5f      	ldr	r2, [pc, #380]	@ (800192c <HAL_SPI_MspInit+0x2d8>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	2023      	movs	r0, #35	@ 0x23
 80017ba:	f000 fd80 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017be:	2023      	movs	r0, #35	@ 0x23
 80017c0:	f000 fd97 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017c4:	e0a5      	b.n	8001912 <HAL_SPI_MspInit+0x2be>
  else if(hspi->Instance==SPI2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001934 <HAL_SPI_MspInit+0x2e0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	f040 80a0 	bne.w	8001912 <HAL_SPI_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80017d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	4618      	mov	r0, r3
 80017ea:	f007 fea5 	bl	8009538 <HAL_RCCEx_PeriphCLKConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_SPI_MspInit+0x1a4>
      Error_Handler();
 80017f4:	f7ff fe98 	bl	8001528 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017f8:	4b49      	ldr	r3, [pc, #292]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 80017fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017fe:	4a48      	ldr	r2, [pc, #288]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001804:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001808:	4b45      	ldr	r3, [pc, #276]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 800180a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800180e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	4b42      	ldr	r3, [pc, #264]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181c:	4a40      	ldr	r2, [pc, #256]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001826:	4b3e      	ldr	r3, [pc, #248]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	4b3a      	ldr	r3, [pc, #232]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 8001836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183a:	4a39      	ldr	r2, [pc, #228]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001844:	4b36      	ldr	r3, [pc, #216]	@ (8001920 <HAL_SPI_MspInit+0x2cc>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001852:	2302      	movs	r3, #2
 8001854:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800186a:	2305      	movs	r3, #5
 800186c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001870:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001874:	4619      	mov	r1, r3
 8001876:	4830      	ldr	r0, [pc, #192]	@ (8001938 <HAL_SPI_MspInit+0x2e4>)
 8001878:	f003 f898 	bl	80049ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800187c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001880:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001896:	2305      	movs	r3, #5
 8001898:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018a0:	4619      	mov	r1, r3
 80018a2:	4821      	ldr	r0, [pc, #132]	@ (8001928 <HAL_SPI_MspInit+0x2d4>)
 80018a4:	f003 f882 	bl	80049ac <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 80018a8:	4b24      	ldr	r3, [pc, #144]	@ (800193c <HAL_SPI_MspInit+0x2e8>)
 80018aa:	4a25      	ldr	r2, [pc, #148]	@ (8001940 <HAL_SPI_MspInit+0x2ec>)
 80018ac:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80018ae:	4b23      	ldr	r3, [pc, #140]	@ (800193c <HAL_SPI_MspInit+0x2e8>)
 80018b0:	2227      	movs	r2, #39	@ 0x27
 80018b2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b4:	4b21      	ldr	r3, [pc, #132]	@ (800193c <HAL_SPI_MspInit+0x2e8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ba:	4b20      	ldr	r3, [pc, #128]	@ (800193c <HAL_SPI_MspInit+0x2e8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <HAL_SPI_MspInit+0x2e8>)
 80018c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018c6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c8:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <HAL_SPI_MspInit+0x2e8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <HAL_SPI_MspInit+0x2e8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <HAL_SPI_MspInit+0x2e8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018da:	4b18      	ldr	r3, [pc, #96]	@ (800193c <HAL_SPI_MspInit+0x2e8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018e0:	4b16      	ldr	r3, [pc, #88]	@ (800193c <HAL_SPI_MspInit+0x2e8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80018e6:	4815      	ldr	r0, [pc, #84]	@ (800193c <HAL_SPI_MspInit+0x2e8>)
 80018e8:	f000 fd36 	bl	8002358 <HAL_DMA_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_SPI_MspInit+0x2a2>
      Error_Handler();
 80018f2:	f7ff fe19 	bl	8001528 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a10      	ldr	r2, [pc, #64]	@ (800193c <HAL_SPI_MspInit+0x2e8>)
 80018fa:	67da      	str	r2, [r3, #124]	@ 0x7c
 80018fc:	4a0f      	ldr	r2, [pc, #60]	@ (800193c <HAL_SPI_MspInit+0x2e8>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2024      	movs	r0, #36	@ 0x24
 8001908:	f000 fcd9 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800190c:	2024      	movs	r0, #36	@ 0x24
 800190e:	f000 fcf0 	bl	80022f2 <HAL_NVIC_EnableIRQ>
}
 8001912:	bf00      	nop
 8001914:	37f8      	adds	r7, #248	@ 0xf8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40013000 	.word	0x40013000
 8001920:	58024400 	.word	0x58024400
 8001924:	58020000 	.word	0x58020000
 8001928:	58020400 	.word	0x58020400
 800192c:	24000468 	.word	0x24000468
 8001930:	40020010 	.word	0x40020010
 8001934:	40003800 	.word	0x40003800
 8001938:	58020800 	.word	0x58020800
 800193c:	240004e0 	.word	0x240004e0
 8001940:	40020028 	.word	0x40020028

08001944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b0ba      	sub	sp, #232	@ 0xe8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	22c0      	movs	r2, #192	@ 0xc0
 8001962:	2100      	movs	r1, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f01a f835 	bl	801b9d4 <memset>
  if(huart->Instance==USART1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a27      	ldr	r2, [pc, #156]	@ (8001a0c <HAL_UART_MspInit+0xc8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d146      	bne.n	8001a02 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001974:	f04f 0201 	mov.w	r2, #1
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	4618      	mov	r0, r3
 800198c:	f007 fdd4 	bl	8009538 <HAL_RCCEx_PeriphCLKConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001996:	f7ff fdc7 	bl	8001528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <HAL_UART_MspInit+0xcc>)
 800199c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a10 <HAL_UART_MspInit+0xcc>)
 80019a2:	f043 0310 	orr.w	r3, r3, #16
 80019a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019aa:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <HAL_UART_MspInit+0xcc>)
 80019ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <HAL_UART_MspInit+0xcc>)
 80019ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019be:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <HAL_UART_MspInit+0xcc>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <HAL_UART_MspInit+0xcc>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019de:	2312      	movs	r3, #18
 80019e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f0:	2307      	movs	r3, #7
 80019f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <HAL_UART_MspInit+0xd0>)
 80019fe:	f002 ffd5 	bl	80049ac <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a02:	bf00      	nop
 8001a04:	37e8      	adds	r7, #232	@ 0xe8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40011000 	.word	0x40011000
 8001a10:	58024400 	.word	0x58024400
 8001a14:	58020000 	.word	0x58020000

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <NMI_Handler+0x4>

08001a20 <HardFault_Handler_C>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler_C(uint32_t *stack_frame) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	@ 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    uint32_t r0 = stack_frame[0];
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t r1 = stack_frame[1];
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	623b      	str	r3, [r7, #32]
    uint32_t r2 = stack_frame[2];
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	61fb      	str	r3, [r7, #28]
    uint32_t r3 = stack_frame[3];
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	61bb      	str	r3, [r7, #24]
    uint32_t r12 = stack_frame[4];
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	617b      	str	r3, [r7, #20]
    uint32_t lr = stack_frame[5];
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	613b      	str	r3, [r7, #16]
    uint32_t pc = stack_frame[6];
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	60fb      	str	r3, [r7, #12]
    uint32_t psr = stack_frame[7];
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	60bb      	str	r3, [r7, #8]

    printf("R0: 0x%08X\n", r0);
 8001a58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a5a:	4811      	ldr	r0, [pc, #68]	@ (8001aa0 <HardFault_Handler_C+0x80>)
 8001a5c:	f019 fe6a 	bl	801b734 <iprintf>
    printf("R1: 0x%08X\n", r1);
 8001a60:	6a39      	ldr	r1, [r7, #32]
 8001a62:	4810      	ldr	r0, [pc, #64]	@ (8001aa4 <HardFault_Handler_C+0x84>)
 8001a64:	f019 fe66 	bl	801b734 <iprintf>
    printf("R2: 0x%08X\n", r2);
 8001a68:	69f9      	ldr	r1, [r7, #28]
 8001a6a:	480f      	ldr	r0, [pc, #60]	@ (8001aa8 <HardFault_Handler_C+0x88>)
 8001a6c:	f019 fe62 	bl	801b734 <iprintf>
    printf("R3: 0x%08X\n", r3);
 8001a70:	69b9      	ldr	r1, [r7, #24]
 8001a72:	480e      	ldr	r0, [pc, #56]	@ (8001aac <HardFault_Handler_C+0x8c>)
 8001a74:	f019 fe5e 	bl	801b734 <iprintf>
    printf("R12: 0x%08X\n", r12);
 8001a78:	6979      	ldr	r1, [r7, #20]
 8001a7a:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <HardFault_Handler_C+0x90>)
 8001a7c:	f019 fe5a 	bl	801b734 <iprintf>
    printf("LR: 0x%08X\n", lr);
 8001a80:	6939      	ldr	r1, [r7, #16]
 8001a82:	480c      	ldr	r0, [pc, #48]	@ (8001ab4 <HardFault_Handler_C+0x94>)
 8001a84:	f019 fe56 	bl	801b734 <iprintf>
    printf("PC: 0x%08X\n", pc);
 8001a88:	68f9      	ldr	r1, [r7, #12]
 8001a8a:	480b      	ldr	r0, [pc, #44]	@ (8001ab8 <HardFault_Handler_C+0x98>)
 8001a8c:	f019 fe52 	bl	801b734 <iprintf>
    printf("PSR: 0x%08X\n", psr);
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	480a      	ldr	r0, [pc, #40]	@ (8001abc <HardFault_Handler_C+0x9c>)
 8001a94:	f019 fe4e 	bl	801b734 <iprintf>

    Error_Handler();
 8001a98:	f7ff fd46 	bl	8001528 <Error_Handler>
    while(1);
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <HardFault_Handler_C+0x7c>
 8001aa0:	0801c550 	.word	0x0801c550
 8001aa4:	0801c55c 	.word	0x0801c55c
 8001aa8:	0801c568 	.word	0x0801c568
 8001aac:	0801c574 	.word	0x0801c574
 8001ab0:	0801c580 	.word	0x0801c580
 8001ab4:	0801c590 	.word	0x0801c590
 8001ab8:	0801c59c 	.word	0x0801c59c
 8001abc:	0801c5a8 	.word	0x0801c5a8

08001ac0 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("hard fault!\n");
 8001ac6:	4827      	ldr	r0, [pc, #156]	@ (8001b64 <HardFault_Handler+0xa4>)
 8001ac8:	f019 fea4 	bl	801b814 <puts>

	volatile uint32_t *cfsr = (uint32_t *)0xE000ED28; // CFSR 地址
 8001acc:	4b26      	ldr	r3, [pc, #152]	@ (8001b68 <HardFault_Handler+0xa8>)
 8001ace:	61bb      	str	r3, [r7, #24]
	volatile uint32_t *hfsr = (uint32_t *)0xE000ED2C; // HFSR 地址
 8001ad0:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <HardFault_Handler+0xac>)
 8001ad2:	617b      	str	r3, [r7, #20]
	volatile uint32_t *mmfar = (uint32_t *)0xE000ED34; // MMFAR 地址
 8001ad4:	4b26      	ldr	r3, [pc, #152]	@ (8001b70 <HardFault_Handler+0xb0>)
 8001ad6:	613b      	str	r3, [r7, #16]
	volatile uint32_t *bfar = (uint32_t *)0xE000ED38; // BFAR 地址
 8001ad8:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <HardFault_Handler+0xb4>)
 8001ada:	60fb      	str	r3, [r7, #12]

	printf("HardFault detected!\n");
 8001adc:	4826      	ldr	r0, [pc, #152]	@ (8001b78 <HardFault_Handler+0xb8>)
 8001ade:	f019 fe99 	bl	801b814 <puts>
	printf("CFSR: 0x%08X\n", *cfsr);
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4824      	ldr	r0, [pc, #144]	@ (8001b7c <HardFault_Handler+0xbc>)
 8001aea:	f019 fe23 	bl	801b734 <iprintf>
	printf("HFSR: 0x%08X\n", *hfsr);
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4822      	ldr	r0, [pc, #136]	@ (8001b80 <HardFault_Handler+0xc0>)
 8001af6:	f019 fe1d 	bl	801b734 <iprintf>
	printf("MMFAR: 0x%08X\n", *mmfar);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4619      	mov	r1, r3
 8001b00:	4820      	ldr	r0, [pc, #128]	@ (8001b84 <HardFault_Handler+0xc4>)
 8001b02:	f019 fe17 	bl	801b734 <iprintf>
	printf("BFAR: 0x%08X\n", *bfar);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	481e      	ldr	r0, [pc, #120]	@ (8001b88 <HardFault_Handler+0xc8>)
 8001b0e:	f019 fe11 	bl	801b734 <iprintf>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8001b12:	f3ef 8308 	mrs	r3, MSP
 8001b16:	607b      	str	r3, [r7, #4]
  return(result);
 8001b18:	687b      	ldr	r3, [r7, #4]


    uint32_t *stack_frame = (uint32_t*)__get_MSP();
 8001b1a:	60bb      	str	r3, [r7, #8]
    printf("Call trace:\n");
 8001b1c:	481b      	ldr	r0, [pc, #108]	@ (8001b8c <HardFault_Handler+0xcc>)
 8001b1e:	f019 fe79 	bl	801b814 <puts>
    for(int i=0; i<8; i++) {
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	e00f      	b.n	8001b48 <HardFault_Handler+0x88>
        printf("[%p]: 0x%08X\n", &stack_frame[i], stack_frame[i]);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	18d1      	adds	r1, r2, r3
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	4413      	add	r3, r2
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4814      	ldr	r0, [pc, #80]	@ (8001b90 <HardFault_Handler+0xd0>)
 8001b3e:	f019 fdf9 	bl	801b734 <iprintf>
    for(int i=0; i<8; i++) {
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b07      	cmp	r3, #7
 8001b4c:	ddec      	ble.n	8001b28 <HardFault_Handler+0x68>
    }


	__asm volatile (
 8001b4e:	f01e 0f04 	tst.w	lr, #4
 8001b52:	bf0c      	ite	eq
 8001b54:	f3ef 8008 	mrseq	r0, MSP
 8001b58:	f3ef 8009 	mrsne	r0, PSP
 8001b5c:	f7ff bf60 	b.w	8001a20 <HardFault_Handler_C>
		"mrsne r0, psp\n"
		"b HardFault_Handler_C\n"
	);

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <HardFault_Handler+0xa0>
 8001b64:	0801c5b8 	.word	0x0801c5b8
 8001b68:	e000ed28 	.word	0xe000ed28
 8001b6c:	e000ed2c 	.word	0xe000ed2c
 8001b70:	e000ed34 	.word	0xe000ed34
 8001b74:	e000ed38 	.word	0xe000ed38
 8001b78:	0801c5c4 	.word	0x0801c5c4
 8001b7c:	0801c5d8 	.word	0x0801c5d8
 8001b80:	0801c5e8 	.word	0x0801c5e8
 8001b84:	0801c5f8 	.word	0x0801c5f8
 8001b88:	0801c608 	.word	0x0801c608
 8001b8c:	0801c618 	.word	0x0801c618
 8001b90:	0801c624 	.word	0x0801c624

08001b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <MemManage_Handler+0x4>

08001b9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bda:	f000 fa39 	bl	8002050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <DMA1_Stream0_IRQHandler+0x10>)
 8001bea:	f001 fbc1 	bl	8003370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	24000468 	.word	0x24000468

08001bf8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <DMA1_Stream1_IRQHandler+0x10>)
 8001bfe:	f001 fbb7 	bl	8003370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	240004e0 	.word	0x240004e0

08001c0c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c10:	4802      	ldr	r0, [pc, #8]	@ (8001c1c <SPI1_IRQHandler+0x10>)
 8001c12:	f009 fecd 	bl	800b9b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	24000358 	.word	0x24000358

08001c20 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001c24:	4802      	ldr	r0, [pc, #8]	@ (8001c30 <SPI2_IRQHandler+0x10>)
 8001c26:	f009 fec3 	bl	800b9b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	240003e0 	.word	0x240003e0

08001c34 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001c38:	4802      	ldr	r0, [pc, #8]	@ (8001c44 <OTG_HS_IRQHandler+0x10>)
 8001c3a:	f003 fb71 	bl	8005320 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	240097f8 	.word	0x240097f8

08001c48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c4c:	4802      	ldr	r0, [pc, #8]	@ (8001c58 <OTG_FS_IRQHandler+0x10>)
 8001c4e:	f005 fafb 	bl	8007248 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	24000f10 	.word	0x24000f10

08001c5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	e00a      	b.n	8001c84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c6e:	f3af 8000 	nop.w
 8001c72:	4601      	mov	r1, r0
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	b2ca      	uxtb	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbf0      	blt.n	8001c6e <_read+0x12>
  }

  return len;
 8001c8c:	687b      	ldr	r3, [r7, #4]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e009      	b.n	8001cbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	60ba      	str	r2, [r7, #8]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f96d 	bl	8000f90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbf1      	blt.n	8001ca8 <_write+0x12>
  }
  return len;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_close>:

int _close(int file)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_isatty>:

int _isatty(int file)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	@ (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f019 fe92 	bl	801ba90 <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	24080000 	.word	0x24080000
 8001d98:	00001000 	.word	0x00001000
 8001d9c:	240009f0 	.word	0x240009f0
 8001da0:	24009d28 	.word	0x24009d28

08001da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001da8:	4b43      	ldr	r3, [pc, #268]	@ (8001eb8 <SystemInit+0x114>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dae:	4a42      	ldr	r2, [pc, #264]	@ (8001eb8 <SystemInit+0x114>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001db8:	4b40      	ldr	r3, [pc, #256]	@ (8001ebc <SystemInit+0x118>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	2b06      	cmp	r3, #6
 8001dc2:	d807      	bhi.n	8001dd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8001ebc <SystemInit+0x118>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 030f 	bic.w	r3, r3, #15
 8001dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8001ebc <SystemInit+0x118>)
 8001dce:	f043 0307 	orr.w	r3, r3, #7
 8001dd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec0 <SystemInit+0x11c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a39      	ldr	r2, [pc, #228]	@ (8001ec0 <SystemInit+0x11c>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001de0:	4b37      	ldr	r3, [pc, #220]	@ (8001ec0 <SystemInit+0x11c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001de6:	4b36      	ldr	r3, [pc, #216]	@ (8001ec0 <SystemInit+0x11c>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4935      	ldr	r1, [pc, #212]	@ (8001ec0 <SystemInit+0x11c>)
 8001dec:	4b35      	ldr	r3, [pc, #212]	@ (8001ec4 <SystemInit+0x120>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001df2:	4b32      	ldr	r3, [pc, #200]	@ (8001ebc <SystemInit+0x118>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d007      	beq.n	8001e0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8001ebc <SystemInit+0x118>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 030f 	bic.w	r3, r3, #15
 8001e06:	4a2d      	ldr	r2, [pc, #180]	@ (8001ebc <SystemInit+0x118>)
 8001e08:	f043 0307 	orr.w	r3, r3, #7
 8001e0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec0 <SystemInit+0x11c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e14:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec0 <SystemInit+0x11c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e1a:	4b29      	ldr	r3, [pc, #164]	@ (8001ec0 <SystemInit+0x11c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e20:	4b27      	ldr	r3, [pc, #156]	@ (8001ec0 <SystemInit+0x11c>)
 8001e22:	4a29      	ldr	r2, [pc, #164]	@ (8001ec8 <SystemInit+0x124>)
 8001e24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e26:	4b26      	ldr	r3, [pc, #152]	@ (8001ec0 <SystemInit+0x11c>)
 8001e28:	4a28      	ldr	r2, [pc, #160]	@ (8001ecc <SystemInit+0x128>)
 8001e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ec0 <SystemInit+0x11c>)
 8001e2e:	4a28      	ldr	r2, [pc, #160]	@ (8001ed0 <SystemInit+0x12c>)
 8001e30:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e32:	4b23      	ldr	r3, [pc, #140]	@ (8001ec0 <SystemInit+0x11c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e38:	4b21      	ldr	r3, [pc, #132]	@ (8001ec0 <SystemInit+0x11c>)
 8001e3a:	4a25      	ldr	r2, [pc, #148]	@ (8001ed0 <SystemInit+0x12c>)
 8001e3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <SystemInit+0x11c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec0 <SystemInit+0x11c>)
 8001e46:	4a22      	ldr	r2, [pc, #136]	@ (8001ed0 <SystemInit+0x12c>)
 8001e48:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <SystemInit+0x11c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec0 <SystemInit+0x11c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec0 <SystemInit+0x11c>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <SystemInit+0x11c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e62:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <SystemInit+0x130>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <SystemInit+0x134>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e6e:	d202      	bcs.n	8001e76 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <SystemInit+0x138>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001e76:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <SystemInit+0x11c>)
 8001e78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d113      	bne.n	8001eac <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001e84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <SystemInit+0x11c>)
 8001e86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec0 <SystemInit+0x11c>)
 8001e8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e90:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e94:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <SystemInit+0x13c>)
 8001e96:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001e9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <SystemInit+0x11c>)
 8001e9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ea2:	4a07      	ldr	r2, [pc, #28]	@ (8001ec0 <SystemInit+0x11c>)
 8001ea4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ea8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00
 8001ebc:	52002000 	.word	0x52002000
 8001ec0:	58024400 	.word	0x58024400
 8001ec4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ec8:	02020200 	.word	0x02020200
 8001ecc:	01ff0000 	.word	0x01ff0000
 8001ed0:	01010280 	.word	0x01010280
 8001ed4:	5c001000 	.word	0x5c001000
 8001ed8:	ffff0000 	.word	0xffff0000
 8001edc:	51008108 	.word	0x51008108
 8001ee0:	52004000 	.word	0x52004000

08001ee4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <ExitRun0Mode+0x2c>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4a08      	ldr	r2, [pc, #32]	@ (8001f10 <ExitRun0Mode+0x2c>)
 8001eee:	f043 0302 	orr.w	r3, r3, #2
 8001ef2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001ef4:	bf00      	nop
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <ExitRun0Mode+0x2c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f9      	beq.n	8001ef6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	58024800 	.word	0x58024800

08001f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f14:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001f50 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001f18:	f7ff ffe4 	bl	8001ee4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f1c:	f7ff ff42 	bl	8001da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f20:	480c      	ldr	r0, [pc, #48]	@ (8001f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f22:	490d      	ldr	r1, [pc, #52]	@ (8001f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f24:	4a0d      	ldr	r2, [pc, #52]	@ (8001f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f38:	4c0a      	ldr	r4, [pc, #40]	@ (8001f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f46:	f019 fda9 	bl	801ba9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4a:	f7ff f841 	bl	8000fd0 <main>
  bx  lr
 8001f4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f58:	240002b4 	.word	0x240002b4
  ldr r2, =_sidata
 8001f5c:	0801d7f8 	.word	0x0801d7f8
  ldr r2, =_sbss
 8001f60:	240002b4 	.word	0x240002b4
  ldr r4, =_ebss
 8001f64:	24009d24 	.word	0x24009d24

08001f68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f68:	e7fe      	b.n	8001f68 <ADC3_IRQHandler>
	...

08001f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f72:	2003      	movs	r0, #3
 8001f74:	f000 f998 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f78:	f007 f908 	bl	800918c <HAL_RCC_GetSysClockFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_Init+0x68>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	4913      	ldr	r1, [pc, #76]	@ (8001fd8 <HAL_Init+0x6c>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
 8001f94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <HAL_Init+0x68>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd8 <HAL_Init+0x6c>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <HAL_Init+0x70>)
 8001fae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe0 <HAL_Init+0x74>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb6:	200f      	movs	r0, #15
 8001fb8:	f000 f814 	bl	8001fe4 <HAL_InitTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e002      	b.n	8001fcc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc6:	f7ff faf1 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	58024400 	.word	0x58024400
 8001fd8:	0801d774 	.word	0x0801d774
 8001fdc:	24000004 	.word	0x24000004
 8001fe0:	24000000 	.word	0x24000000

08001fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fec:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_InitTick+0x60>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e021      	b.n	800203c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ff8:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <HAL_InitTick+0x64>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <HAL_InitTick+0x60>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002006:	fbb3 f3f1 	udiv	r3, r3, r1
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f97d 	bl	800230e <HAL_SYSTICK_Config>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e00e      	b.n	800203c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d80a      	bhi.n	800203a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002024:	2200      	movs	r2, #0
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f000 f947 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002030:	4a06      	ldr	r2, [pc, #24]	@ (800204c <HAL_InitTick+0x68>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	2400000c 	.word	0x2400000c
 8002048:	24000000 	.word	0x24000000
 800204c:	24000008 	.word	0x24000008

08002050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_IncTick+0x20>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_IncTick+0x24>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4413      	add	r3, r2
 8002060:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <HAL_IncTick+0x24>)
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	2400000c 	.word	0x2400000c
 8002074:	240009f4 	.word	0x240009f4

08002078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return uwTick;
 800207c:	4b03      	ldr	r3, [pc, #12]	@ (800208c <HAL_GetTick+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	240009f4 	.word	0x240009f4

08002090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002098:	f7ff ffee 	bl	8002078 <HAL_GetTick>
 800209c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a8:	d005      	beq.n	80020b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_Delay+0x44>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b6:	bf00      	nop
 80020b8:	f7ff ffde 	bl	8002078 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d8f7      	bhi.n	80020b8 <HAL_Delay+0x28>
  {
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2400000c 	.word	0x2400000c

080020d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <HAL_GetREVID+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	0c1b      	lsrs	r3, r3, #16
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	5c001000 	.word	0x5c001000

080020f0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80020f4:	4b03      	ldr	r3, [pc, #12]	@ (8002104 <HAL_GetUIDw0+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	1ff1e800 	.word	0x1ff1e800

08002108 <__NVIC_SetPriorityGrouping>:
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002118:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <__NVIC_SetPriorityGrouping+0x40>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002124:	4013      	ands	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <__NVIC_SetPriorityGrouping+0x44>)
 8002132:	4313      	orrs	r3, r2
 8002134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002136:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <__NVIC_SetPriorityGrouping+0x40>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60d3      	str	r3, [r2, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00
 800214c:	05fa0000 	.word	0x05fa0000

08002150 <__NVIC_GetPriorityGrouping>:
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002154:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <__NVIC_GetPriorityGrouping+0x18>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	f003 0307 	and.w	r3, r3, #7
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_EnableIRQ>:
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217a:	2b00      	cmp	r3, #0
 800217c:	db0b      	blt.n	8002196 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	4907      	ldr	r1, [pc, #28]	@ (80021a4 <__NVIC_EnableIRQ+0x38>)
 8002186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2001      	movs	r0, #1
 800218e:	fa00 f202 	lsl.w	r2, r0, r2
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e100 	.word	0xe000e100

080021a8 <__NVIC_SetPriority>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	@ (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	@ (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	@ 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	@ 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff8e 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff29 	bl	8002108 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff40 	bl	8002150 <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff90 	bl	80021fc <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff5f 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff33 	bl	800216c <__NVIC_EnableIRQ>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ffa4 	bl	8002264 <SysTick_Config>
 800231c:	4603      	mov	r3, r0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800232c:	f3bf 8f5f 	dmb	sy
}
 8002330:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002332:	4b07      	ldr	r3, [pc, #28]	@ (8002350 <HAL_MPU_Disable+0x28>)
 8002334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002336:	4a06      	ldr	r2, [pc, #24]	@ (8002350 <HAL_MPU_Disable+0x28>)
 8002338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800233e:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <HAL_MPU_Disable+0x2c>)
 8002340:	2200      	movs	r2, #0
 8002342:	605a      	str	r2, [r3, #4]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000ed00 	.word	0xe000ed00
 8002354:	e000ed90 	.word	0xe000ed90

08002358 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff fe8a 	bl	8002078 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e316      	b.n	800299e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a66      	ldr	r2, [pc, #408]	@ (8002510 <HAL_DMA_Init+0x1b8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d04a      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a65      	ldr	r2, [pc, #404]	@ (8002514 <HAL_DMA_Init+0x1bc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d045      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a63      	ldr	r2, [pc, #396]	@ (8002518 <HAL_DMA_Init+0x1c0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d040      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a62      	ldr	r2, [pc, #392]	@ (800251c <HAL_DMA_Init+0x1c4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d03b      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a60      	ldr	r2, [pc, #384]	@ (8002520 <HAL_DMA_Init+0x1c8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d036      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a5f      	ldr	r2, [pc, #380]	@ (8002524 <HAL_DMA_Init+0x1cc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d031      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002528 <HAL_DMA_Init+0x1d0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d02c      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a5c      	ldr	r2, [pc, #368]	@ (800252c <HAL_DMA_Init+0x1d4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d027      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002530 <HAL_DMA_Init+0x1d8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d022      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a59      	ldr	r2, [pc, #356]	@ (8002534 <HAL_DMA_Init+0x1dc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d01d      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a57      	ldr	r2, [pc, #348]	@ (8002538 <HAL_DMA_Init+0x1e0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d018      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a56      	ldr	r2, [pc, #344]	@ (800253c <HAL_DMA_Init+0x1e4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d013      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a54      	ldr	r2, [pc, #336]	@ (8002540 <HAL_DMA_Init+0x1e8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00e      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a53      	ldr	r2, [pc, #332]	@ (8002544 <HAL_DMA_Init+0x1ec>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d009      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a51      	ldr	r2, [pc, #324]	@ (8002548 <HAL_DMA_Init+0x1f0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d004      	beq.n	8002410 <HAL_DMA_Init+0xb8>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a50      	ldr	r2, [pc, #320]	@ (800254c <HAL_DMA_Init+0x1f4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d101      	bne.n	8002414 <HAL_DMA_Init+0xbc>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_DMA_Init+0xbe>
 8002414:	2300      	movs	r3, #0
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 813b 	beq.w	8002692 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a37      	ldr	r2, [pc, #220]	@ (8002510 <HAL_DMA_Init+0x1b8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d04a      	beq.n	80024cc <HAL_DMA_Init+0x174>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a36      	ldr	r2, [pc, #216]	@ (8002514 <HAL_DMA_Init+0x1bc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d045      	beq.n	80024cc <HAL_DMA_Init+0x174>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a34      	ldr	r2, [pc, #208]	@ (8002518 <HAL_DMA_Init+0x1c0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d040      	beq.n	80024cc <HAL_DMA_Init+0x174>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a33      	ldr	r2, [pc, #204]	@ (800251c <HAL_DMA_Init+0x1c4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d03b      	beq.n	80024cc <HAL_DMA_Init+0x174>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a31      	ldr	r2, [pc, #196]	@ (8002520 <HAL_DMA_Init+0x1c8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d036      	beq.n	80024cc <HAL_DMA_Init+0x174>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a30      	ldr	r2, [pc, #192]	@ (8002524 <HAL_DMA_Init+0x1cc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d031      	beq.n	80024cc <HAL_DMA_Init+0x174>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2e      	ldr	r2, [pc, #184]	@ (8002528 <HAL_DMA_Init+0x1d0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d02c      	beq.n	80024cc <HAL_DMA_Init+0x174>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2d      	ldr	r2, [pc, #180]	@ (800252c <HAL_DMA_Init+0x1d4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d027      	beq.n	80024cc <HAL_DMA_Init+0x174>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2b      	ldr	r2, [pc, #172]	@ (8002530 <HAL_DMA_Init+0x1d8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d022      	beq.n	80024cc <HAL_DMA_Init+0x174>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2a      	ldr	r2, [pc, #168]	@ (8002534 <HAL_DMA_Init+0x1dc>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d01d      	beq.n	80024cc <HAL_DMA_Init+0x174>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a28      	ldr	r2, [pc, #160]	@ (8002538 <HAL_DMA_Init+0x1e0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d018      	beq.n	80024cc <HAL_DMA_Init+0x174>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_DMA_Init+0x1e4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d013      	beq.n	80024cc <HAL_DMA_Init+0x174>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a25      	ldr	r2, [pc, #148]	@ (8002540 <HAL_DMA_Init+0x1e8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00e      	beq.n	80024cc <HAL_DMA_Init+0x174>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a24      	ldr	r2, [pc, #144]	@ (8002544 <HAL_DMA_Init+0x1ec>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d009      	beq.n	80024cc <HAL_DMA_Init+0x174>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a22      	ldr	r2, [pc, #136]	@ (8002548 <HAL_DMA_Init+0x1f0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_DMA_Init+0x174>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a21      	ldr	r2, [pc, #132]	@ (800254c <HAL_DMA_Init+0x1f4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d108      	bne.n	80024de <HAL_DMA_Init+0x186>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e007      	b.n	80024ee <HAL_DMA_Init+0x196>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0201 	bic.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024ee:	e02f      	b.n	8002550 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024f0:	f7ff fdc2 	bl	8002078 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	d928      	bls.n	8002550 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2220      	movs	r2, #32
 8002502:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2203      	movs	r2, #3
 8002508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e246      	b.n	800299e <HAL_DMA_Init+0x646>
 8002510:	40020010 	.word	0x40020010
 8002514:	40020028 	.word	0x40020028
 8002518:	40020040 	.word	0x40020040
 800251c:	40020058 	.word	0x40020058
 8002520:	40020070 	.word	0x40020070
 8002524:	40020088 	.word	0x40020088
 8002528:	400200a0 	.word	0x400200a0
 800252c:	400200b8 	.word	0x400200b8
 8002530:	40020410 	.word	0x40020410
 8002534:	40020428 	.word	0x40020428
 8002538:	40020440 	.word	0x40020440
 800253c:	40020458 	.word	0x40020458
 8002540:	40020470 	.word	0x40020470
 8002544:	40020488 	.word	0x40020488
 8002548:	400204a0 	.word	0x400204a0
 800254c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1c8      	bne.n	80024f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4b83      	ldr	r3, [pc, #524]	@ (8002778 <HAL_DMA_Init+0x420>)
 800256a:	4013      	ands	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002576:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002582:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d107      	bne.n	80025b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	4313      	orrs	r3, r2
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80025b4:	4b71      	ldr	r3, [pc, #452]	@ (800277c <HAL_DMA_Init+0x424>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b71      	ldr	r3, [pc, #452]	@ (8002780 <HAL_DMA_Init+0x428>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025c0:	d328      	bcc.n	8002614 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b28      	cmp	r3, #40	@ 0x28
 80025c8:	d903      	bls.n	80025d2 <HAL_DMA_Init+0x27a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80025d0:	d917      	bls.n	8002602 <HAL_DMA_Init+0x2aa>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80025d8:	d903      	bls.n	80025e2 <HAL_DMA_Init+0x28a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b42      	cmp	r3, #66	@ 0x42
 80025e0:	d90f      	bls.n	8002602 <HAL_DMA_Init+0x2aa>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b46      	cmp	r3, #70	@ 0x46
 80025e8:	d903      	bls.n	80025f2 <HAL_DMA_Init+0x29a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b48      	cmp	r3, #72	@ 0x48
 80025f0:	d907      	bls.n	8002602 <HAL_DMA_Init+0x2aa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80025f8:	d905      	bls.n	8002606 <HAL_DMA_Init+0x2ae>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b52      	cmp	r3, #82	@ 0x52
 8002600:	d801      	bhi.n	8002606 <HAL_DMA_Init+0x2ae>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_DMA_Init+0x2b0>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002612:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f023 0307 	bic.w	r3, r3, #7
 800262a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	2b04      	cmp	r3, #4
 800263c:	d117      	bne.n	800266e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00e      	beq.n	800266e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f002 f821 	bl	8004698 <DMA_CheckFifoParam>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2240      	movs	r2, #64	@ 0x40
 8002660:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e197      	b.n	800299e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f001 ff5c 	bl	8004534 <DMA_CalcBaseAndBitshift>
 800267c:	4603      	mov	r3, r0
 800267e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	223f      	movs	r2, #63	@ 0x3f
 800268a:	409a      	lsls	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	e0cd      	b.n	800282e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a3b      	ldr	r2, [pc, #236]	@ (8002784 <HAL_DMA_Init+0x42c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d022      	beq.n	80026e2 <HAL_DMA_Init+0x38a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a39      	ldr	r2, [pc, #228]	@ (8002788 <HAL_DMA_Init+0x430>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01d      	beq.n	80026e2 <HAL_DMA_Init+0x38a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a38      	ldr	r2, [pc, #224]	@ (800278c <HAL_DMA_Init+0x434>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d018      	beq.n	80026e2 <HAL_DMA_Init+0x38a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a36      	ldr	r2, [pc, #216]	@ (8002790 <HAL_DMA_Init+0x438>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_DMA_Init+0x38a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a35      	ldr	r2, [pc, #212]	@ (8002794 <HAL_DMA_Init+0x43c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00e      	beq.n	80026e2 <HAL_DMA_Init+0x38a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a33      	ldr	r2, [pc, #204]	@ (8002798 <HAL_DMA_Init+0x440>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d009      	beq.n	80026e2 <HAL_DMA_Init+0x38a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a32      	ldr	r2, [pc, #200]	@ (800279c <HAL_DMA_Init+0x444>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d004      	beq.n	80026e2 <HAL_DMA_Init+0x38a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a30      	ldr	r2, [pc, #192]	@ (80027a0 <HAL_DMA_Init+0x448>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_DMA_Init+0x38e>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_DMA_Init+0x390>
 80026e6:	2300      	movs	r3, #0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 8097 	beq.w	800281c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a24      	ldr	r2, [pc, #144]	@ (8002784 <HAL_DMA_Init+0x42c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d021      	beq.n	800273c <HAL_DMA_Init+0x3e4>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a22      	ldr	r2, [pc, #136]	@ (8002788 <HAL_DMA_Init+0x430>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01c      	beq.n	800273c <HAL_DMA_Init+0x3e4>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a21      	ldr	r2, [pc, #132]	@ (800278c <HAL_DMA_Init+0x434>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d017      	beq.n	800273c <HAL_DMA_Init+0x3e4>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1f      	ldr	r2, [pc, #124]	@ (8002790 <HAL_DMA_Init+0x438>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d012      	beq.n	800273c <HAL_DMA_Init+0x3e4>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1e      	ldr	r2, [pc, #120]	@ (8002794 <HAL_DMA_Init+0x43c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00d      	beq.n	800273c <HAL_DMA_Init+0x3e4>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1c      	ldr	r2, [pc, #112]	@ (8002798 <HAL_DMA_Init+0x440>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d008      	beq.n	800273c <HAL_DMA_Init+0x3e4>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1b      	ldr	r2, [pc, #108]	@ (800279c <HAL_DMA_Init+0x444>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d003      	beq.n	800273c <HAL_DMA_Init+0x3e4>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a19      	ldr	r2, [pc, #100]	@ (80027a0 <HAL_DMA_Init+0x448>)
 800273a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <HAL_DMA_Init+0x44c>)
 8002758:	4013      	ands	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b40      	cmp	r3, #64	@ 0x40
 8002762:	d021      	beq.n	80027a8 <HAL_DMA_Init+0x450>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b80      	cmp	r3, #128	@ 0x80
 800276a:	d102      	bne.n	8002772 <HAL_DMA_Init+0x41a>
 800276c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002770:	e01b      	b.n	80027aa <HAL_DMA_Init+0x452>
 8002772:	2300      	movs	r3, #0
 8002774:	e019      	b.n	80027aa <HAL_DMA_Init+0x452>
 8002776:	bf00      	nop
 8002778:	fe10803f 	.word	0xfe10803f
 800277c:	5c001000 	.word	0x5c001000
 8002780:	ffff0000 	.word	0xffff0000
 8002784:	58025408 	.word	0x58025408
 8002788:	5802541c 	.word	0x5802541c
 800278c:	58025430 	.word	0x58025430
 8002790:	58025444 	.word	0x58025444
 8002794:	58025458 	.word	0x58025458
 8002798:	5802546c 	.word	0x5802546c
 800279c:	58025480 	.word	0x58025480
 80027a0:	58025494 	.word	0x58025494
 80027a4:	fffe000f 	.word	0xfffe000f
 80027a8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68d2      	ldr	r2, [r2, #12]
 80027ae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027d8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b6e      	ldr	r3, [pc, #440]	@ (80029a8 <HAL_DMA_Init+0x650>)
 80027f0:	4413      	add	r3, r2
 80027f2:	4a6e      	ldr	r2, [pc, #440]	@ (80029ac <HAL_DMA_Init+0x654>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f001 fe97 	bl	8004534 <DMA_CalcBaseAndBitshift>
 8002806:	4603      	mov	r3, r0
 8002808:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2201      	movs	r2, #1
 8002814:	409a      	lsls	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	e008      	b.n	800282e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2240      	movs	r2, #64	@ 0x40
 8002820:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2203      	movs	r2, #3
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0b7      	b.n	800299e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a5f      	ldr	r2, [pc, #380]	@ (80029b0 <HAL_DMA_Init+0x658>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d072      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a5d      	ldr	r2, [pc, #372]	@ (80029b4 <HAL_DMA_Init+0x65c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d06d      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a5c      	ldr	r2, [pc, #368]	@ (80029b8 <HAL_DMA_Init+0x660>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d068      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a5a      	ldr	r2, [pc, #360]	@ (80029bc <HAL_DMA_Init+0x664>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d063      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a59      	ldr	r2, [pc, #356]	@ (80029c0 <HAL_DMA_Init+0x668>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d05e      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a57      	ldr	r2, [pc, #348]	@ (80029c4 <HAL_DMA_Init+0x66c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d059      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a56      	ldr	r2, [pc, #344]	@ (80029c8 <HAL_DMA_Init+0x670>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d054      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a54      	ldr	r2, [pc, #336]	@ (80029cc <HAL_DMA_Init+0x674>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d04f      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a53      	ldr	r2, [pc, #332]	@ (80029d0 <HAL_DMA_Init+0x678>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d04a      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a51      	ldr	r2, [pc, #324]	@ (80029d4 <HAL_DMA_Init+0x67c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d045      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a50      	ldr	r2, [pc, #320]	@ (80029d8 <HAL_DMA_Init+0x680>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d040      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a4e      	ldr	r2, [pc, #312]	@ (80029dc <HAL_DMA_Init+0x684>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d03b      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a4d      	ldr	r2, [pc, #308]	@ (80029e0 <HAL_DMA_Init+0x688>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d036      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a4b      	ldr	r2, [pc, #300]	@ (80029e4 <HAL_DMA_Init+0x68c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d031      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a4a      	ldr	r2, [pc, #296]	@ (80029e8 <HAL_DMA_Init+0x690>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d02c      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a48      	ldr	r2, [pc, #288]	@ (80029ec <HAL_DMA_Init+0x694>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d027      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a47      	ldr	r2, [pc, #284]	@ (80029f0 <HAL_DMA_Init+0x698>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d022      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a45      	ldr	r2, [pc, #276]	@ (80029f4 <HAL_DMA_Init+0x69c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01d      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a44      	ldr	r2, [pc, #272]	@ (80029f8 <HAL_DMA_Init+0x6a0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d018      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a42      	ldr	r2, [pc, #264]	@ (80029fc <HAL_DMA_Init+0x6a4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a41      	ldr	r2, [pc, #260]	@ (8002a00 <HAL_DMA_Init+0x6a8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00e      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a3f      	ldr	r2, [pc, #252]	@ (8002a04 <HAL_DMA_Init+0x6ac>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d009      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a08 <HAL_DMA_Init+0x6b0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d004      	beq.n	800291e <HAL_DMA_Init+0x5c6>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a3c      	ldr	r2, [pc, #240]	@ (8002a0c <HAL_DMA_Init+0x6b4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_DMA_Init+0x5ca>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_DMA_Init+0x5cc>
 8002922:	2300      	movs	r3, #0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d032      	beq.n	800298e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f001 ff31 	bl	8004790 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b80      	cmp	r3, #128	@ 0x80
 8002934:	d102      	bne.n	800293c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002950:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d010      	beq.n	800297c <HAL_DMA_Init+0x624>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b08      	cmp	r3, #8
 8002960:	d80c      	bhi.n	800297c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f001 ffae 	bl	80048c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	e008      	b.n	800298e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	a7fdabf8 	.word	0xa7fdabf8
 80029ac:	cccccccd 	.word	0xcccccccd
 80029b0:	40020010 	.word	0x40020010
 80029b4:	40020028 	.word	0x40020028
 80029b8:	40020040 	.word	0x40020040
 80029bc:	40020058 	.word	0x40020058
 80029c0:	40020070 	.word	0x40020070
 80029c4:	40020088 	.word	0x40020088
 80029c8:	400200a0 	.word	0x400200a0
 80029cc:	400200b8 	.word	0x400200b8
 80029d0:	40020410 	.word	0x40020410
 80029d4:	40020428 	.word	0x40020428
 80029d8:	40020440 	.word	0x40020440
 80029dc:	40020458 	.word	0x40020458
 80029e0:	40020470 	.word	0x40020470
 80029e4:	40020488 	.word	0x40020488
 80029e8:	400204a0 	.word	0x400204a0
 80029ec:	400204b8 	.word	0x400204b8
 80029f0:	58025408 	.word	0x58025408
 80029f4:	5802541c 	.word	0x5802541c
 80029f8:	58025430 	.word	0x58025430
 80029fc:	58025444 	.word	0x58025444
 8002a00:	58025458 	.word	0x58025458
 8002a04:	5802546c 	.word	0x5802546c
 8002a08:	58025480 	.word	0x58025480
 8002a0c:	58025494 	.word	0x58025494

08002a10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e226      	b.n	8002e7a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_DMA_Start_IT+0x2a>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e21f      	b.n	8002e7a <HAL_DMA_Start_IT+0x46a>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	f040 820a 	bne.w	8002e64 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a68      	ldr	r2, [pc, #416]	@ (8002c04 <HAL_DMA_Start_IT+0x1f4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d04a      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a66      	ldr	r2, [pc, #408]	@ (8002c08 <HAL_DMA_Start_IT+0x1f8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d045      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a65      	ldr	r2, [pc, #404]	@ (8002c0c <HAL_DMA_Start_IT+0x1fc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d040      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a63      	ldr	r2, [pc, #396]	@ (8002c10 <HAL_DMA_Start_IT+0x200>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d03b      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a62      	ldr	r2, [pc, #392]	@ (8002c14 <HAL_DMA_Start_IT+0x204>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d036      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a60      	ldr	r2, [pc, #384]	@ (8002c18 <HAL_DMA_Start_IT+0x208>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d031      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a5f      	ldr	r2, [pc, #380]	@ (8002c1c <HAL_DMA_Start_IT+0x20c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d02c      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c20 <HAL_DMA_Start_IT+0x210>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d027      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c24 <HAL_DMA_Start_IT+0x214>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d022      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5a      	ldr	r2, [pc, #360]	@ (8002c28 <HAL_DMA_Start_IT+0x218>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01d      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a59      	ldr	r2, [pc, #356]	@ (8002c2c <HAL_DMA_Start_IT+0x21c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d018      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a57      	ldr	r2, [pc, #348]	@ (8002c30 <HAL_DMA_Start_IT+0x220>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a56      	ldr	r2, [pc, #344]	@ (8002c34 <HAL_DMA_Start_IT+0x224>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d00e      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a54      	ldr	r2, [pc, #336]	@ (8002c38 <HAL_DMA_Start_IT+0x228>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d009      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a53      	ldr	r2, [pc, #332]	@ (8002c3c <HAL_DMA_Start_IT+0x22c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d004      	beq.n	8002afe <HAL_DMA_Start_IT+0xee>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a51      	ldr	r2, [pc, #324]	@ (8002c40 <HAL_DMA_Start_IT+0x230>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d108      	bne.n	8002b10 <HAL_DMA_Start_IT+0x100>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e007      	b.n	8002b20 <HAL_DMA_Start_IT+0x110>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f001 fb58 	bl	80041dc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a34      	ldr	r2, [pc, #208]	@ (8002c04 <HAL_DMA_Start_IT+0x1f4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d04a      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a33      	ldr	r2, [pc, #204]	@ (8002c08 <HAL_DMA_Start_IT+0x1f8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d045      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a31      	ldr	r2, [pc, #196]	@ (8002c0c <HAL_DMA_Start_IT+0x1fc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d040      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a30      	ldr	r2, [pc, #192]	@ (8002c10 <HAL_DMA_Start_IT+0x200>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d03b      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a2e      	ldr	r2, [pc, #184]	@ (8002c14 <HAL_DMA_Start_IT+0x204>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d036      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a2d      	ldr	r2, [pc, #180]	@ (8002c18 <HAL_DMA_Start_IT+0x208>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d031      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c1c <HAL_DMA_Start_IT+0x20c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d02c      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a2a      	ldr	r2, [pc, #168]	@ (8002c20 <HAL_DMA_Start_IT+0x210>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d027      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a28      	ldr	r2, [pc, #160]	@ (8002c24 <HAL_DMA_Start_IT+0x214>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d022      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a27      	ldr	r2, [pc, #156]	@ (8002c28 <HAL_DMA_Start_IT+0x218>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d01d      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a25      	ldr	r2, [pc, #148]	@ (8002c2c <HAL_DMA_Start_IT+0x21c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d018      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a24      	ldr	r2, [pc, #144]	@ (8002c30 <HAL_DMA_Start_IT+0x220>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a22      	ldr	r2, [pc, #136]	@ (8002c34 <HAL_DMA_Start_IT+0x224>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00e      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a21      	ldr	r2, [pc, #132]	@ (8002c38 <HAL_DMA_Start_IT+0x228>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d009      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c3c <HAL_DMA_Start_IT+0x22c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d004      	beq.n	8002bcc <HAL_DMA_Start_IT+0x1bc>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c40 <HAL_DMA_Start_IT+0x230>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <HAL_DMA_Start_IT+0x1c0>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <HAL_DMA_Start_IT+0x1c2>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d036      	beq.n	8002c44 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 021e 	bic.w	r2, r3, #30
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0216 	orr.w	r2, r2, #22
 8002be8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d03e      	beq.n	8002c70 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0208 	orr.w	r2, r2, #8
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e035      	b.n	8002c70 <HAL_DMA_Start_IT+0x260>
 8002c04:	40020010 	.word	0x40020010
 8002c08:	40020028 	.word	0x40020028
 8002c0c:	40020040 	.word	0x40020040
 8002c10:	40020058 	.word	0x40020058
 8002c14:	40020070 	.word	0x40020070
 8002c18:	40020088 	.word	0x40020088
 8002c1c:	400200a0 	.word	0x400200a0
 8002c20:	400200b8 	.word	0x400200b8
 8002c24:	40020410 	.word	0x40020410
 8002c28:	40020428 	.word	0x40020428
 8002c2c:	40020440 	.word	0x40020440
 8002c30:	40020458 	.word	0x40020458
 8002c34:	40020470 	.word	0x40020470
 8002c38:	40020488 	.word	0x40020488
 8002c3c:	400204a0 	.word	0x400204a0
 8002c40:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 020e 	bic.w	r2, r3, #14
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 020a 	orr.w	r2, r2, #10
 8002c56:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0204 	orr.w	r2, r2, #4
 8002c6e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a83      	ldr	r2, [pc, #524]	@ (8002e84 <HAL_DMA_Start_IT+0x474>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d072      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a82      	ldr	r2, [pc, #520]	@ (8002e88 <HAL_DMA_Start_IT+0x478>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d06d      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a80      	ldr	r2, [pc, #512]	@ (8002e8c <HAL_DMA_Start_IT+0x47c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d068      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a7f      	ldr	r2, [pc, #508]	@ (8002e90 <HAL_DMA_Start_IT+0x480>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d063      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a7d      	ldr	r2, [pc, #500]	@ (8002e94 <HAL_DMA_Start_IT+0x484>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d05e      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8002e98 <HAL_DMA_Start_IT+0x488>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d059      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a7a      	ldr	r2, [pc, #488]	@ (8002e9c <HAL_DMA_Start_IT+0x48c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d054      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a79      	ldr	r2, [pc, #484]	@ (8002ea0 <HAL_DMA_Start_IT+0x490>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d04f      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a77      	ldr	r2, [pc, #476]	@ (8002ea4 <HAL_DMA_Start_IT+0x494>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d04a      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a76      	ldr	r2, [pc, #472]	@ (8002ea8 <HAL_DMA_Start_IT+0x498>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d045      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a74      	ldr	r2, [pc, #464]	@ (8002eac <HAL_DMA_Start_IT+0x49c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d040      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a73      	ldr	r2, [pc, #460]	@ (8002eb0 <HAL_DMA_Start_IT+0x4a0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d03b      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a71      	ldr	r2, [pc, #452]	@ (8002eb4 <HAL_DMA_Start_IT+0x4a4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d036      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a70      	ldr	r2, [pc, #448]	@ (8002eb8 <HAL_DMA_Start_IT+0x4a8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d031      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a6e      	ldr	r2, [pc, #440]	@ (8002ebc <HAL_DMA_Start_IT+0x4ac>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d02c      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a6d      	ldr	r2, [pc, #436]	@ (8002ec0 <HAL_DMA_Start_IT+0x4b0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d027      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a6b      	ldr	r2, [pc, #428]	@ (8002ec4 <HAL_DMA_Start_IT+0x4b4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d022      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6a      	ldr	r2, [pc, #424]	@ (8002ec8 <HAL_DMA_Start_IT+0x4b8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d01d      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a68      	ldr	r2, [pc, #416]	@ (8002ecc <HAL_DMA_Start_IT+0x4bc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d018      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a67      	ldr	r2, [pc, #412]	@ (8002ed0 <HAL_DMA_Start_IT+0x4c0>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d013      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a65      	ldr	r2, [pc, #404]	@ (8002ed4 <HAL_DMA_Start_IT+0x4c4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00e      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a64      	ldr	r2, [pc, #400]	@ (8002ed8 <HAL_DMA_Start_IT+0x4c8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d009      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a62      	ldr	r2, [pc, #392]	@ (8002edc <HAL_DMA_Start_IT+0x4cc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <HAL_DMA_Start_IT+0x350>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a61      	ldr	r2, [pc, #388]	@ (8002ee0 <HAL_DMA_Start_IT+0x4d0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_DMA_Start_IT+0x354>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_DMA_Start_IT+0x356>
 8002d64:	2300      	movs	r3, #0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01a      	beq.n	8002da0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d86:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d9e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a37      	ldr	r2, [pc, #220]	@ (8002e84 <HAL_DMA_Start_IT+0x474>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d04a      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a36      	ldr	r2, [pc, #216]	@ (8002e88 <HAL_DMA_Start_IT+0x478>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d045      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a34      	ldr	r2, [pc, #208]	@ (8002e8c <HAL_DMA_Start_IT+0x47c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d040      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a33      	ldr	r2, [pc, #204]	@ (8002e90 <HAL_DMA_Start_IT+0x480>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d03b      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a31      	ldr	r2, [pc, #196]	@ (8002e94 <HAL_DMA_Start_IT+0x484>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d036      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a30      	ldr	r2, [pc, #192]	@ (8002e98 <HAL_DMA_Start_IT+0x488>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d031      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2e      	ldr	r2, [pc, #184]	@ (8002e9c <HAL_DMA_Start_IT+0x48c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02c      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea0 <HAL_DMA_Start_IT+0x490>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d027      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea4 <HAL_DMA_Start_IT+0x494>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d022      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8002ea8 <HAL_DMA_Start_IT+0x498>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d01d      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a28      	ldr	r2, [pc, #160]	@ (8002eac <HAL_DMA_Start_IT+0x49c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d018      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a27      	ldr	r2, [pc, #156]	@ (8002eb0 <HAL_DMA_Start_IT+0x4a0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a25      	ldr	r2, [pc, #148]	@ (8002eb4 <HAL_DMA_Start_IT+0x4a4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00e      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a24      	ldr	r2, [pc, #144]	@ (8002eb8 <HAL_DMA_Start_IT+0x4a8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d009      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a22      	ldr	r2, [pc, #136]	@ (8002ebc <HAL_DMA_Start_IT+0x4ac>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d004      	beq.n	8002e40 <HAL_DMA_Start_IT+0x430>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a21      	ldr	r2, [pc, #132]	@ (8002ec0 <HAL_DMA_Start_IT+0x4b0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d108      	bne.n	8002e52 <HAL_DMA_Start_IT+0x442>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	e012      	b.n	8002e78 <HAL_DMA_Start_IT+0x468>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0201 	orr.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e009      	b.n	8002e78 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e6a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40020010 	.word	0x40020010
 8002e88:	40020028 	.word	0x40020028
 8002e8c:	40020040 	.word	0x40020040
 8002e90:	40020058 	.word	0x40020058
 8002e94:	40020070 	.word	0x40020070
 8002e98:	40020088 	.word	0x40020088
 8002e9c:	400200a0 	.word	0x400200a0
 8002ea0:	400200b8 	.word	0x400200b8
 8002ea4:	40020410 	.word	0x40020410
 8002ea8:	40020428 	.word	0x40020428
 8002eac:	40020440 	.word	0x40020440
 8002eb0:	40020458 	.word	0x40020458
 8002eb4:	40020470 	.word	0x40020470
 8002eb8:	40020488 	.word	0x40020488
 8002ebc:	400204a0 	.word	0x400204a0
 8002ec0:	400204b8 	.word	0x400204b8
 8002ec4:	58025408 	.word	0x58025408
 8002ec8:	5802541c 	.word	0x5802541c
 8002ecc:	58025430 	.word	0x58025430
 8002ed0:	58025444 	.word	0x58025444
 8002ed4:	58025458 	.word	0x58025458
 8002ed8:	5802546c 	.word	0x5802546c
 8002edc:	58025480 	.word	0x58025480
 8002ee0:	58025494 	.word	0x58025494

08002ee4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e237      	b.n	8003366 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d004      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2280      	movs	r2, #128	@ 0x80
 8002f06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e22c      	b.n	8003366 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a5c      	ldr	r2, [pc, #368]	@ (8003084 <HAL_DMA_Abort_IT+0x1a0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d04a      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003088 <HAL_DMA_Abort_IT+0x1a4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d045      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a59      	ldr	r2, [pc, #356]	@ (800308c <HAL_DMA_Abort_IT+0x1a8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d040      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a58      	ldr	r2, [pc, #352]	@ (8003090 <HAL_DMA_Abort_IT+0x1ac>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d03b      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a56      	ldr	r2, [pc, #344]	@ (8003094 <HAL_DMA_Abort_IT+0x1b0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d036      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a55      	ldr	r2, [pc, #340]	@ (8003098 <HAL_DMA_Abort_IT+0x1b4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d031      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a53      	ldr	r2, [pc, #332]	@ (800309c <HAL_DMA_Abort_IT+0x1b8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d02c      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a52      	ldr	r2, [pc, #328]	@ (80030a0 <HAL_DMA_Abort_IT+0x1bc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d027      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a50      	ldr	r2, [pc, #320]	@ (80030a4 <HAL_DMA_Abort_IT+0x1c0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d022      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a4f      	ldr	r2, [pc, #316]	@ (80030a8 <HAL_DMA_Abort_IT+0x1c4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d01d      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a4d      	ldr	r2, [pc, #308]	@ (80030ac <HAL_DMA_Abort_IT+0x1c8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d018      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a4c      	ldr	r2, [pc, #304]	@ (80030b0 <HAL_DMA_Abort_IT+0x1cc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d013      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a4a      	ldr	r2, [pc, #296]	@ (80030b4 <HAL_DMA_Abort_IT+0x1d0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00e      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a49      	ldr	r2, [pc, #292]	@ (80030b8 <HAL_DMA_Abort_IT+0x1d4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d009      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a47      	ldr	r2, [pc, #284]	@ (80030bc <HAL_DMA_Abort_IT+0x1d8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_DMA_Abort_IT+0xc8>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a46      	ldr	r2, [pc, #280]	@ (80030c0 <HAL_DMA_Abort_IT+0x1dc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d101      	bne.n	8002fb0 <HAL_DMA_Abort_IT+0xcc>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <HAL_DMA_Abort_IT+0xce>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 8086 	beq.w	80030c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8003084 <HAL_DMA_Abort_IT+0x1a0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d04a      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a2e      	ldr	r2, [pc, #184]	@ (8003088 <HAL_DMA_Abort_IT+0x1a4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d045      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800308c <HAL_DMA_Abort_IT+0x1a8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d040      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8003090 <HAL_DMA_Abort_IT+0x1ac>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d03b      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a29      	ldr	r2, [pc, #164]	@ (8003094 <HAL_DMA_Abort_IT+0x1b0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d036      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a28      	ldr	r2, [pc, #160]	@ (8003098 <HAL_DMA_Abort_IT+0x1b4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d031      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a26      	ldr	r2, [pc, #152]	@ (800309c <HAL_DMA_Abort_IT+0x1b8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d02c      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a25      	ldr	r2, [pc, #148]	@ (80030a0 <HAL_DMA_Abort_IT+0x1bc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d027      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a23      	ldr	r2, [pc, #140]	@ (80030a4 <HAL_DMA_Abort_IT+0x1c0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d022      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a22      	ldr	r2, [pc, #136]	@ (80030a8 <HAL_DMA_Abort_IT+0x1c4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d01d      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a20      	ldr	r2, [pc, #128]	@ (80030ac <HAL_DMA_Abort_IT+0x1c8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d018      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1f      	ldr	r2, [pc, #124]	@ (80030b0 <HAL_DMA_Abort_IT+0x1cc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d013      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1d      	ldr	r2, [pc, #116]	@ (80030b4 <HAL_DMA_Abort_IT+0x1d0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00e      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1c      	ldr	r2, [pc, #112]	@ (80030b8 <HAL_DMA_Abort_IT+0x1d4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d009      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1a      	ldr	r2, [pc, #104]	@ (80030bc <HAL_DMA_Abort_IT+0x1d8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_DMA_Abort_IT+0x17c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a19      	ldr	r2, [pc, #100]	@ (80030c0 <HAL_DMA_Abort_IT+0x1dc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d108      	bne.n	8003072 <HAL_DMA_Abort_IT+0x18e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	e178      	b.n	8003364 <HAL_DMA_Abort_IT+0x480>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e16f      	b.n	8003364 <HAL_DMA_Abort_IT+0x480>
 8003084:	40020010 	.word	0x40020010
 8003088:	40020028 	.word	0x40020028
 800308c:	40020040 	.word	0x40020040
 8003090:	40020058 	.word	0x40020058
 8003094:	40020070 	.word	0x40020070
 8003098:	40020088 	.word	0x40020088
 800309c:	400200a0 	.word	0x400200a0
 80030a0:	400200b8 	.word	0x400200b8
 80030a4:	40020410 	.word	0x40020410
 80030a8:	40020428 	.word	0x40020428
 80030ac:	40020440 	.word	0x40020440
 80030b0:	40020458 	.word	0x40020458
 80030b4:	40020470 	.word	0x40020470
 80030b8:	40020488 	.word	0x40020488
 80030bc:	400204a0 	.word	0x400204a0
 80030c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 020e 	bic.w	r2, r2, #14
 80030d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a6c      	ldr	r2, [pc, #432]	@ (800328c <HAL_DMA_Abort_IT+0x3a8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d04a      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6b      	ldr	r2, [pc, #428]	@ (8003290 <HAL_DMA_Abort_IT+0x3ac>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d045      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a69      	ldr	r2, [pc, #420]	@ (8003294 <HAL_DMA_Abort_IT+0x3b0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d040      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a68      	ldr	r2, [pc, #416]	@ (8003298 <HAL_DMA_Abort_IT+0x3b4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d03b      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a66      	ldr	r2, [pc, #408]	@ (800329c <HAL_DMA_Abort_IT+0x3b8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d036      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a65      	ldr	r2, [pc, #404]	@ (80032a0 <HAL_DMA_Abort_IT+0x3bc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d031      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a63      	ldr	r2, [pc, #396]	@ (80032a4 <HAL_DMA_Abort_IT+0x3c0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d02c      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a62      	ldr	r2, [pc, #392]	@ (80032a8 <HAL_DMA_Abort_IT+0x3c4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d027      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a60      	ldr	r2, [pc, #384]	@ (80032ac <HAL_DMA_Abort_IT+0x3c8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d022      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a5f      	ldr	r2, [pc, #380]	@ (80032b0 <HAL_DMA_Abort_IT+0x3cc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d01d      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a5d      	ldr	r2, [pc, #372]	@ (80032b4 <HAL_DMA_Abort_IT+0x3d0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d018      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a5c      	ldr	r2, [pc, #368]	@ (80032b8 <HAL_DMA_Abort_IT+0x3d4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d013      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a5a      	ldr	r2, [pc, #360]	@ (80032bc <HAL_DMA_Abort_IT+0x3d8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00e      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a59      	ldr	r2, [pc, #356]	@ (80032c0 <HAL_DMA_Abort_IT+0x3dc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a57      	ldr	r2, [pc, #348]	@ (80032c4 <HAL_DMA_Abort_IT+0x3e0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_DMA_Abort_IT+0x290>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a56      	ldr	r2, [pc, #344]	@ (80032c8 <HAL_DMA_Abort_IT+0x3e4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d108      	bne.n	8003186 <HAL_DMA_Abort_IT+0x2a2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e007      	b.n	8003196 <HAL_DMA_Abort_IT+0x2b2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a3c      	ldr	r2, [pc, #240]	@ (800328c <HAL_DMA_Abort_IT+0x3a8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d072      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003290 <HAL_DMA_Abort_IT+0x3ac>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d06d      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a39      	ldr	r2, [pc, #228]	@ (8003294 <HAL_DMA_Abort_IT+0x3b0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d068      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a37      	ldr	r2, [pc, #220]	@ (8003298 <HAL_DMA_Abort_IT+0x3b4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d063      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a36      	ldr	r2, [pc, #216]	@ (800329c <HAL_DMA_Abort_IT+0x3b8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d05e      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a34      	ldr	r2, [pc, #208]	@ (80032a0 <HAL_DMA_Abort_IT+0x3bc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d059      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a33      	ldr	r2, [pc, #204]	@ (80032a4 <HAL_DMA_Abort_IT+0x3c0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d054      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a31      	ldr	r2, [pc, #196]	@ (80032a8 <HAL_DMA_Abort_IT+0x3c4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d04f      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a30      	ldr	r2, [pc, #192]	@ (80032ac <HAL_DMA_Abort_IT+0x3c8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d04a      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a2e      	ldr	r2, [pc, #184]	@ (80032b0 <HAL_DMA_Abort_IT+0x3cc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d045      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a2d      	ldr	r2, [pc, #180]	@ (80032b4 <HAL_DMA_Abort_IT+0x3d0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d040      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a2b      	ldr	r2, [pc, #172]	@ (80032b8 <HAL_DMA_Abort_IT+0x3d4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d03b      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a2a      	ldr	r2, [pc, #168]	@ (80032bc <HAL_DMA_Abort_IT+0x3d8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d036      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a28      	ldr	r2, [pc, #160]	@ (80032c0 <HAL_DMA_Abort_IT+0x3dc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d031      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a27      	ldr	r2, [pc, #156]	@ (80032c4 <HAL_DMA_Abort_IT+0x3e0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d02c      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a25      	ldr	r2, [pc, #148]	@ (80032c8 <HAL_DMA_Abort_IT+0x3e4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d027      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a24      	ldr	r2, [pc, #144]	@ (80032cc <HAL_DMA_Abort_IT+0x3e8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d022      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a22      	ldr	r2, [pc, #136]	@ (80032d0 <HAL_DMA_Abort_IT+0x3ec>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01d      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a21      	ldr	r2, [pc, #132]	@ (80032d4 <HAL_DMA_Abort_IT+0x3f0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d018      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1f      	ldr	r2, [pc, #124]	@ (80032d8 <HAL_DMA_Abort_IT+0x3f4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1e      	ldr	r2, [pc, #120]	@ (80032dc <HAL_DMA_Abort_IT+0x3f8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00e      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1c      	ldr	r2, [pc, #112]	@ (80032e0 <HAL_DMA_Abort_IT+0x3fc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d009      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1b      	ldr	r2, [pc, #108]	@ (80032e4 <HAL_DMA_Abort_IT+0x400>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_DMA_Abort_IT+0x3a2>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a19      	ldr	r2, [pc, #100]	@ (80032e8 <HAL_DMA_Abort_IT+0x404>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d132      	bne.n	80032ec <HAL_DMA_Abort_IT+0x408>
 8003286:	2301      	movs	r3, #1
 8003288:	e031      	b.n	80032ee <HAL_DMA_Abort_IT+0x40a>
 800328a:	bf00      	nop
 800328c:	40020010 	.word	0x40020010
 8003290:	40020028 	.word	0x40020028
 8003294:	40020040 	.word	0x40020040
 8003298:	40020058 	.word	0x40020058
 800329c:	40020070 	.word	0x40020070
 80032a0:	40020088 	.word	0x40020088
 80032a4:	400200a0 	.word	0x400200a0
 80032a8:	400200b8 	.word	0x400200b8
 80032ac:	40020410 	.word	0x40020410
 80032b0:	40020428 	.word	0x40020428
 80032b4:	40020440 	.word	0x40020440
 80032b8:	40020458 	.word	0x40020458
 80032bc:	40020470 	.word	0x40020470
 80032c0:	40020488 	.word	0x40020488
 80032c4:	400204a0 	.word	0x400204a0
 80032c8:	400204b8 	.word	0x400204b8
 80032cc:	58025408 	.word	0x58025408
 80032d0:	5802541c 	.word	0x5802541c
 80032d4:	58025430 	.word	0x58025430
 80032d8:	58025444 	.word	0x58025444
 80032dc:	58025458 	.word	0x58025458
 80032e0:	5802546c 	.word	0x5802546c
 80032e4:	58025480 	.word	0x58025480
 80032e8:	58025494 	.word	0x58025494
 80032ec:	2300      	movs	r3, #0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d028      	beq.n	8003344 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003300:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003306:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2201      	movs	r2, #1
 8003312:	409a      	lsls	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003320:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00c      	beq.n	8003344 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003334:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003338:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003342:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop

08003370 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	@ 0x28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800337c:	4b67      	ldr	r3, [pc, #412]	@ (800351c <HAL_DMA_IRQHandler+0x1ac>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a67      	ldr	r2, [pc, #412]	@ (8003520 <HAL_DMA_IRQHandler+0x1b0>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	0a9b      	lsrs	r3, r3, #10
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003394:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a5f      	ldr	r2, [pc, #380]	@ (8003524 <HAL_DMA_IRQHandler+0x1b4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d04a      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003528 <HAL_DMA_IRQHandler+0x1b8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d045      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a5c      	ldr	r2, [pc, #368]	@ (800352c <HAL_DMA_IRQHandler+0x1bc>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d040      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a5a      	ldr	r2, [pc, #360]	@ (8003530 <HAL_DMA_IRQHandler+0x1c0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d03b      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a59      	ldr	r2, [pc, #356]	@ (8003534 <HAL_DMA_IRQHandler+0x1c4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d036      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a57      	ldr	r2, [pc, #348]	@ (8003538 <HAL_DMA_IRQHandler+0x1c8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d031      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a56      	ldr	r2, [pc, #344]	@ (800353c <HAL_DMA_IRQHandler+0x1cc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d02c      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a54      	ldr	r2, [pc, #336]	@ (8003540 <HAL_DMA_IRQHandler+0x1d0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d027      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a53      	ldr	r2, [pc, #332]	@ (8003544 <HAL_DMA_IRQHandler+0x1d4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d022      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a51      	ldr	r2, [pc, #324]	@ (8003548 <HAL_DMA_IRQHandler+0x1d8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01d      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a50      	ldr	r2, [pc, #320]	@ (800354c <HAL_DMA_IRQHandler+0x1dc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d018      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a4e      	ldr	r2, [pc, #312]	@ (8003550 <HAL_DMA_IRQHandler+0x1e0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a4d      	ldr	r2, [pc, #308]	@ (8003554 <HAL_DMA_IRQHandler+0x1e4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00e      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a4b      	ldr	r2, [pc, #300]	@ (8003558 <HAL_DMA_IRQHandler+0x1e8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d009      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a4a      	ldr	r2, [pc, #296]	@ (800355c <HAL_DMA_IRQHandler+0x1ec>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_DMA_IRQHandler+0xd2>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a48      	ldr	r2, [pc, #288]	@ (8003560 <HAL_DMA_IRQHandler+0x1f0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d101      	bne.n	8003446 <HAL_DMA_IRQHandler+0xd6>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <HAL_DMA_IRQHandler+0xd8>
 8003446:	2300      	movs	r3, #0
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 842b 	beq.w	8003ca4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2208      	movs	r2, #8
 8003458:	409a      	lsls	r2, r3
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80a2 	beq.w	80035a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2e      	ldr	r2, [pc, #184]	@ (8003524 <HAL_DMA_IRQHandler+0x1b4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d04a      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2d      	ldr	r2, [pc, #180]	@ (8003528 <HAL_DMA_IRQHandler+0x1b8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d045      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2b      	ldr	r2, [pc, #172]	@ (800352c <HAL_DMA_IRQHandler+0x1bc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d040      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2a      	ldr	r2, [pc, #168]	@ (8003530 <HAL_DMA_IRQHandler+0x1c0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d03b      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a28      	ldr	r2, [pc, #160]	@ (8003534 <HAL_DMA_IRQHandler+0x1c4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d036      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a27      	ldr	r2, [pc, #156]	@ (8003538 <HAL_DMA_IRQHandler+0x1c8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d031      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a25      	ldr	r2, [pc, #148]	@ (800353c <HAL_DMA_IRQHandler+0x1cc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d02c      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a24      	ldr	r2, [pc, #144]	@ (8003540 <HAL_DMA_IRQHandler+0x1d0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d027      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a22      	ldr	r2, [pc, #136]	@ (8003544 <HAL_DMA_IRQHandler+0x1d4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d022      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a21      	ldr	r2, [pc, #132]	@ (8003548 <HAL_DMA_IRQHandler+0x1d8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d01d      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1f      	ldr	r2, [pc, #124]	@ (800354c <HAL_DMA_IRQHandler+0x1dc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d018      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003550 <HAL_DMA_IRQHandler+0x1e0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d013      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003554 <HAL_DMA_IRQHandler+0x1e4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00e      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003558 <HAL_DMA_IRQHandler+0x1e8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d009      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a19      	ldr	r2, [pc, #100]	@ (800355c <HAL_DMA_IRQHandler+0x1ec>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d004      	beq.n	8003504 <HAL_DMA_IRQHandler+0x194>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a18      	ldr	r2, [pc, #96]	@ (8003560 <HAL_DMA_IRQHandler+0x1f0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d12f      	bne.n	8003564 <HAL_DMA_IRQHandler+0x1f4>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	bf14      	ite	ne
 8003512:	2301      	movne	r3, #1
 8003514:	2300      	moveq	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	e02e      	b.n	8003578 <HAL_DMA_IRQHandler+0x208>
 800351a:	bf00      	nop
 800351c:	24000000 	.word	0x24000000
 8003520:	1b4e81b5 	.word	0x1b4e81b5
 8003524:	40020010 	.word	0x40020010
 8003528:	40020028 	.word	0x40020028
 800352c:	40020040 	.word	0x40020040
 8003530:	40020058 	.word	0x40020058
 8003534:	40020070 	.word	0x40020070
 8003538:	40020088 	.word	0x40020088
 800353c:	400200a0 	.word	0x400200a0
 8003540:	400200b8 	.word	0x400200b8
 8003544:	40020410 	.word	0x40020410
 8003548:	40020428 	.word	0x40020428
 800354c:	40020440 	.word	0x40020440
 8003550:	40020458 	.word	0x40020458
 8003554:	40020470 	.word	0x40020470
 8003558:	40020488 	.word	0x40020488
 800355c:	400204a0 	.word	0x400204a0
 8003560:	400204b8 	.word	0x400204b8
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	bf14      	ite	ne
 8003572:	2301      	movne	r3, #1
 8003574:	2300      	moveq	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d015      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0204 	bic.w	r2, r2, #4
 800358a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	2208      	movs	r2, #8
 8003596:	409a      	lsls	r2, r3
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	fa22 f303 	lsr.w	r3, r2, r3
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d06e      	beq.n	800369c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a69      	ldr	r2, [pc, #420]	@ (8003768 <HAL_DMA_IRQHandler+0x3f8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d04a      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a67      	ldr	r2, [pc, #412]	@ (800376c <HAL_DMA_IRQHandler+0x3fc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d045      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a66      	ldr	r2, [pc, #408]	@ (8003770 <HAL_DMA_IRQHandler+0x400>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d040      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a64      	ldr	r2, [pc, #400]	@ (8003774 <HAL_DMA_IRQHandler+0x404>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d03b      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a63      	ldr	r2, [pc, #396]	@ (8003778 <HAL_DMA_IRQHandler+0x408>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d036      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a61      	ldr	r2, [pc, #388]	@ (800377c <HAL_DMA_IRQHandler+0x40c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d031      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a60      	ldr	r2, [pc, #384]	@ (8003780 <HAL_DMA_IRQHandler+0x410>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d02c      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a5e      	ldr	r2, [pc, #376]	@ (8003784 <HAL_DMA_IRQHandler+0x414>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d027      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a5d      	ldr	r2, [pc, #372]	@ (8003788 <HAL_DMA_IRQHandler+0x418>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d022      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a5b      	ldr	r2, [pc, #364]	@ (800378c <HAL_DMA_IRQHandler+0x41c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01d      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a5a      	ldr	r2, [pc, #360]	@ (8003790 <HAL_DMA_IRQHandler+0x420>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d018      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a58      	ldr	r2, [pc, #352]	@ (8003794 <HAL_DMA_IRQHandler+0x424>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a57      	ldr	r2, [pc, #348]	@ (8003798 <HAL_DMA_IRQHandler+0x428>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00e      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a55      	ldr	r2, [pc, #340]	@ (800379c <HAL_DMA_IRQHandler+0x42c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a54      	ldr	r2, [pc, #336]	@ (80037a0 <HAL_DMA_IRQHandler+0x430>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_DMA_IRQHandler+0x2ee>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a52      	ldr	r2, [pc, #328]	@ (80037a4 <HAL_DMA_IRQHandler+0x434>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10a      	bne.n	8003674 <HAL_DMA_IRQHandler+0x304>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e003      	b.n	800367c <HAL_DMA_IRQHandler+0x30c>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2300      	movs	r3, #0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00d      	beq.n	800369c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2201      	movs	r2, #1
 800368a:	409a      	lsls	r2, r3
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003694:	f043 0202 	orr.w	r2, r3, #2
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2204      	movs	r2, #4
 80036a6:	409a      	lsls	r2, r3
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 808f 	beq.w	80037d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003768 <HAL_DMA_IRQHandler+0x3f8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d04a      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a2a      	ldr	r2, [pc, #168]	@ (800376c <HAL_DMA_IRQHandler+0x3fc>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d045      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a29      	ldr	r2, [pc, #164]	@ (8003770 <HAL_DMA_IRQHandler+0x400>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d040      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a27      	ldr	r2, [pc, #156]	@ (8003774 <HAL_DMA_IRQHandler+0x404>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d03b      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a26      	ldr	r2, [pc, #152]	@ (8003778 <HAL_DMA_IRQHandler+0x408>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d036      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a24      	ldr	r2, [pc, #144]	@ (800377c <HAL_DMA_IRQHandler+0x40c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d031      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a23      	ldr	r2, [pc, #140]	@ (8003780 <HAL_DMA_IRQHandler+0x410>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d02c      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a21      	ldr	r2, [pc, #132]	@ (8003784 <HAL_DMA_IRQHandler+0x414>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d027      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a20      	ldr	r2, [pc, #128]	@ (8003788 <HAL_DMA_IRQHandler+0x418>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1e      	ldr	r2, [pc, #120]	@ (800378c <HAL_DMA_IRQHandler+0x41c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01d      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1d      	ldr	r2, [pc, #116]	@ (8003790 <HAL_DMA_IRQHandler+0x420>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d018      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1b      	ldr	r2, [pc, #108]	@ (8003794 <HAL_DMA_IRQHandler+0x424>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1a      	ldr	r2, [pc, #104]	@ (8003798 <HAL_DMA_IRQHandler+0x428>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00e      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a18      	ldr	r2, [pc, #96]	@ (800379c <HAL_DMA_IRQHandler+0x42c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <HAL_DMA_IRQHandler+0x430>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_DMA_IRQHandler+0x3e2>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a15      	ldr	r2, [pc, #84]	@ (80037a4 <HAL_DMA_IRQHandler+0x434>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d12a      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x438>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf14      	ite	ne
 8003760:	2301      	movne	r3, #1
 8003762:	2300      	moveq	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	e023      	b.n	80037b0 <HAL_DMA_IRQHandler+0x440>
 8003768:	40020010 	.word	0x40020010
 800376c:	40020028 	.word	0x40020028
 8003770:	40020040 	.word	0x40020040
 8003774:	40020058 	.word	0x40020058
 8003778:	40020070 	.word	0x40020070
 800377c:	40020088 	.word	0x40020088
 8003780:	400200a0 	.word	0x400200a0
 8003784:	400200b8 	.word	0x400200b8
 8003788:	40020410 	.word	0x40020410
 800378c:	40020428 	.word	0x40020428
 8003790:	40020440 	.word	0x40020440
 8003794:	40020458 	.word	0x40020458
 8003798:	40020470 	.word	0x40020470
 800379c:	40020488 	.word	0x40020488
 80037a0:	400204a0 	.word	0x400204a0
 80037a4:	400204b8 	.word	0x400204b8
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2300      	movs	r3, #0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00d      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2204      	movs	r2, #4
 80037be:	409a      	lsls	r2, r3
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c8:	f043 0204 	orr.w	r2, r3, #4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	2210      	movs	r2, #16
 80037da:	409a      	lsls	r2, r3
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a6 	beq.w	8003932 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a85      	ldr	r2, [pc, #532]	@ (8003a00 <HAL_DMA_IRQHandler+0x690>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d04a      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a83      	ldr	r2, [pc, #524]	@ (8003a04 <HAL_DMA_IRQHandler+0x694>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d045      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a82      	ldr	r2, [pc, #520]	@ (8003a08 <HAL_DMA_IRQHandler+0x698>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d040      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a80      	ldr	r2, [pc, #512]	@ (8003a0c <HAL_DMA_IRQHandler+0x69c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d03b      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a7f      	ldr	r2, [pc, #508]	@ (8003a10 <HAL_DMA_IRQHandler+0x6a0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d036      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a7d      	ldr	r2, [pc, #500]	@ (8003a14 <HAL_DMA_IRQHandler+0x6a4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d031      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7c      	ldr	r2, [pc, #496]	@ (8003a18 <HAL_DMA_IRQHandler+0x6a8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d02c      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a7a      	ldr	r2, [pc, #488]	@ (8003a1c <HAL_DMA_IRQHandler+0x6ac>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d027      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a79      	ldr	r2, [pc, #484]	@ (8003a20 <HAL_DMA_IRQHandler+0x6b0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d022      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a77      	ldr	r2, [pc, #476]	@ (8003a24 <HAL_DMA_IRQHandler+0x6b4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01d      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a76      	ldr	r2, [pc, #472]	@ (8003a28 <HAL_DMA_IRQHandler+0x6b8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d018      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a74      	ldr	r2, [pc, #464]	@ (8003a2c <HAL_DMA_IRQHandler+0x6bc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a73      	ldr	r2, [pc, #460]	@ (8003a30 <HAL_DMA_IRQHandler+0x6c0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00e      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a71      	ldr	r2, [pc, #452]	@ (8003a34 <HAL_DMA_IRQHandler+0x6c4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a70      	ldr	r2, [pc, #448]	@ (8003a38 <HAL_DMA_IRQHandler+0x6c8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_DMA_IRQHandler+0x516>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a6e      	ldr	r2, [pc, #440]	@ (8003a3c <HAL_DMA_IRQHandler+0x6cc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10a      	bne.n	800389c <HAL_DMA_IRQHandler+0x52c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf14      	ite	ne
 8003894:	2301      	movne	r3, #1
 8003896:	2300      	moveq	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e009      	b.n	80038b0 <HAL_DMA_IRQHandler+0x540>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bf14      	ite	ne
 80038aa:	2301      	movne	r3, #1
 80038ac:	2300      	moveq	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d03e      	beq.n	8003932 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2210      	movs	r2, #16
 80038be:	409a      	lsls	r2, r3
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d018      	beq.n	8003904 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d108      	bne.n	80038f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d024      	beq.n	8003932 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
 80038f0:	e01f      	b.n	8003932 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01b      	beq.n	8003932 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	4798      	blx	r3
 8003902:	e016      	b.n	8003932 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d107      	bne.n	8003922 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0208 	bic.w	r2, r2, #8
 8003920:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	2220      	movs	r2, #32
 800393c:	409a      	lsls	r2, r3
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8110 	beq.w	8003b68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2c      	ldr	r2, [pc, #176]	@ (8003a00 <HAL_DMA_IRQHandler+0x690>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d04a      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2b      	ldr	r2, [pc, #172]	@ (8003a04 <HAL_DMA_IRQHandler+0x694>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d045      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a29      	ldr	r2, [pc, #164]	@ (8003a08 <HAL_DMA_IRQHandler+0x698>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d040      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a28      	ldr	r2, [pc, #160]	@ (8003a0c <HAL_DMA_IRQHandler+0x69c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d03b      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a26      	ldr	r2, [pc, #152]	@ (8003a10 <HAL_DMA_IRQHandler+0x6a0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d036      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a25      	ldr	r2, [pc, #148]	@ (8003a14 <HAL_DMA_IRQHandler+0x6a4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d031      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a23      	ldr	r2, [pc, #140]	@ (8003a18 <HAL_DMA_IRQHandler+0x6a8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02c      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a22      	ldr	r2, [pc, #136]	@ (8003a1c <HAL_DMA_IRQHandler+0x6ac>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d027      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a20      	ldr	r2, [pc, #128]	@ (8003a20 <HAL_DMA_IRQHandler+0x6b0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d022      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a24 <HAL_DMA_IRQHandler+0x6b4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d01d      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a28 <HAL_DMA_IRQHandler+0x6b8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d018      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1c      	ldr	r2, [pc, #112]	@ (8003a2c <HAL_DMA_IRQHandler+0x6bc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d013      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003a30 <HAL_DMA_IRQHandler+0x6c0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00e      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a19      	ldr	r2, [pc, #100]	@ (8003a34 <HAL_DMA_IRQHandler+0x6c4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d009      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a17      	ldr	r2, [pc, #92]	@ (8003a38 <HAL_DMA_IRQHandler+0x6c8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x678>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a16      	ldr	r2, [pc, #88]	@ (8003a3c <HAL_DMA_IRQHandler+0x6cc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d12b      	bne.n	8003a40 <HAL_DMA_IRQHandler+0x6d0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bf14      	ite	ne
 80039f6:	2301      	movne	r3, #1
 80039f8:	2300      	moveq	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	e02a      	b.n	8003a54 <HAL_DMA_IRQHandler+0x6e4>
 80039fe:	bf00      	nop
 8003a00:	40020010 	.word	0x40020010
 8003a04:	40020028 	.word	0x40020028
 8003a08:	40020040 	.word	0x40020040
 8003a0c:	40020058 	.word	0x40020058
 8003a10:	40020070 	.word	0x40020070
 8003a14:	40020088 	.word	0x40020088
 8003a18:	400200a0 	.word	0x400200a0
 8003a1c:	400200b8 	.word	0x400200b8
 8003a20:	40020410 	.word	0x40020410
 8003a24:	40020428 	.word	0x40020428
 8003a28:	40020440 	.word	0x40020440
 8003a2c:	40020458 	.word	0x40020458
 8003a30:	40020470 	.word	0x40020470
 8003a34:	40020488 	.word	0x40020488
 8003a38:	400204a0 	.word	0x400204a0
 8003a3c:	400204b8 	.word	0x400204b8
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bf14      	ite	ne
 8003a4e:	2301      	movne	r3, #1
 8003a50:	2300      	moveq	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8087 	beq.w	8003b68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	2220      	movs	r2, #32
 8003a64:	409a      	lsls	r2, r3
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d139      	bne.n	8003aea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0216 	bic.w	r2, r2, #22
 8003a84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695a      	ldr	r2, [r3, #20]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d103      	bne.n	8003aa6 <HAL_DMA_IRQHandler+0x736>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0208 	bic.w	r2, r2, #8
 8003ab4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aba:	f003 031f 	and.w	r3, r3, #31
 8003abe:	223f      	movs	r2, #63	@ 0x3f
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 834a 	beq.w	8004174 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
          }
          return;
 8003ae8:	e344      	b.n	8004174 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d018      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d108      	bne.n	8003b18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d02c      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
 8003b16:	e027      	b.n	8003b68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d023      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
 8003b28:	e01e      	b.n	8003b68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10f      	bne.n	8003b58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0210 	bic.w	r2, r2, #16
 8003b46:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8306 	beq.w	800417e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8088 	beq.w	8003c90 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2204      	movs	r2, #4
 8003b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a7a      	ldr	r2, [pc, #488]	@ (8003d78 <HAL_DMA_IRQHandler+0xa08>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d04a      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a79      	ldr	r2, [pc, #484]	@ (8003d7c <HAL_DMA_IRQHandler+0xa0c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d045      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a77      	ldr	r2, [pc, #476]	@ (8003d80 <HAL_DMA_IRQHandler+0xa10>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d040      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a76      	ldr	r2, [pc, #472]	@ (8003d84 <HAL_DMA_IRQHandler+0xa14>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d03b      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a74      	ldr	r2, [pc, #464]	@ (8003d88 <HAL_DMA_IRQHandler+0xa18>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d036      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a73      	ldr	r2, [pc, #460]	@ (8003d8c <HAL_DMA_IRQHandler+0xa1c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d031      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a71      	ldr	r2, [pc, #452]	@ (8003d90 <HAL_DMA_IRQHandler+0xa20>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d02c      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a70      	ldr	r2, [pc, #448]	@ (8003d94 <HAL_DMA_IRQHandler+0xa24>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d027      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a6e      	ldr	r2, [pc, #440]	@ (8003d98 <HAL_DMA_IRQHandler+0xa28>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d022      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a6d      	ldr	r2, [pc, #436]	@ (8003d9c <HAL_DMA_IRQHandler+0xa2c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d01d      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a6b      	ldr	r2, [pc, #428]	@ (8003da0 <HAL_DMA_IRQHandler+0xa30>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d018      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a6a      	ldr	r2, [pc, #424]	@ (8003da4 <HAL_DMA_IRQHandler+0xa34>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a68      	ldr	r2, [pc, #416]	@ (8003da8 <HAL_DMA_IRQHandler+0xa38>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00e      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a67      	ldr	r2, [pc, #412]	@ (8003dac <HAL_DMA_IRQHandler+0xa3c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d009      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a65      	ldr	r2, [pc, #404]	@ (8003db0 <HAL_DMA_IRQHandler+0xa40>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x8b8>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a64      	ldr	r2, [pc, #400]	@ (8003db4 <HAL_DMA_IRQHandler+0xa44>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d108      	bne.n	8003c3a <HAL_DMA_IRQHandler+0x8ca>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	e007      	b.n	8003c4a <HAL_DMA_IRQHandler+0x8da>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d307      	bcc.n	8003c66 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f2      	bne.n	8003c4a <HAL_DMA_IRQHandler+0x8da>
 8003c64:	e000      	b.n	8003c68 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003c66:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2203      	movs	r2, #3
 8003c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003c7e:	e003      	b.n	8003c88 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8272 	beq.w	800417e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4798      	blx	r3
 8003ca2:	e26c      	b.n	800417e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a43      	ldr	r2, [pc, #268]	@ (8003db8 <HAL_DMA_IRQHandler+0xa48>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d022      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x984>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a42      	ldr	r2, [pc, #264]	@ (8003dbc <HAL_DMA_IRQHandler+0xa4c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d01d      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x984>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a40      	ldr	r2, [pc, #256]	@ (8003dc0 <HAL_DMA_IRQHandler+0xa50>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d018      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x984>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a3f      	ldr	r2, [pc, #252]	@ (8003dc4 <HAL_DMA_IRQHandler+0xa54>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x984>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a3d      	ldr	r2, [pc, #244]	@ (8003dc8 <HAL_DMA_IRQHandler+0xa58>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x984>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a3c      	ldr	r2, [pc, #240]	@ (8003dcc <HAL_DMA_IRQHandler+0xa5c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x984>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a3a      	ldr	r2, [pc, #232]	@ (8003dd0 <HAL_DMA_IRQHandler+0xa60>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x984>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a39      	ldr	r2, [pc, #228]	@ (8003dd4 <HAL_DMA_IRQHandler+0xa64>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d101      	bne.n	8003cf8 <HAL_DMA_IRQHandler+0x988>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <HAL_DMA_IRQHandler+0x98a>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 823f 	beq.w	800417e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2204      	movs	r2, #4
 8003d12:	409a      	lsls	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80cd 	beq.w	8003eb8 <HAL_DMA_IRQHandler+0xb48>
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80c7 	beq.w	8003eb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2204      	movs	r2, #4
 8003d34:	409a      	lsls	r2, r3
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d049      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d109      	bne.n	8003d62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8210 	beq.w	8004178 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d60:	e20a      	b.n	8004178 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8206 	beq.w	8004178 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d74:	e200      	b.n	8004178 <HAL_DMA_IRQHandler+0xe08>
 8003d76:	bf00      	nop
 8003d78:	40020010 	.word	0x40020010
 8003d7c:	40020028 	.word	0x40020028
 8003d80:	40020040 	.word	0x40020040
 8003d84:	40020058 	.word	0x40020058
 8003d88:	40020070 	.word	0x40020070
 8003d8c:	40020088 	.word	0x40020088
 8003d90:	400200a0 	.word	0x400200a0
 8003d94:	400200b8 	.word	0x400200b8
 8003d98:	40020410 	.word	0x40020410
 8003d9c:	40020428 	.word	0x40020428
 8003da0:	40020440 	.word	0x40020440
 8003da4:	40020458 	.word	0x40020458
 8003da8:	40020470 	.word	0x40020470
 8003dac:	40020488 	.word	0x40020488
 8003db0:	400204a0 	.word	0x400204a0
 8003db4:	400204b8 	.word	0x400204b8
 8003db8:	58025408 	.word	0x58025408
 8003dbc:	5802541c 	.word	0x5802541c
 8003dc0:	58025430 	.word	0x58025430
 8003dc4:	58025444 	.word	0x58025444
 8003dc8:	58025458 	.word	0x58025458
 8003dcc:	5802546c 	.word	0x5802546c
 8003dd0:	58025480 	.word	0x58025480
 8003dd4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d160      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a7f      	ldr	r2, [pc, #508]	@ (8003fe4 <HAL_DMA_IRQHandler+0xc74>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d04a      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a7d      	ldr	r2, [pc, #500]	@ (8003fe8 <HAL_DMA_IRQHandler+0xc78>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d045      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a7c      	ldr	r2, [pc, #496]	@ (8003fec <HAL_DMA_IRQHandler+0xc7c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d040      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a7a      	ldr	r2, [pc, #488]	@ (8003ff0 <HAL_DMA_IRQHandler+0xc80>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d03b      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a79      	ldr	r2, [pc, #484]	@ (8003ff4 <HAL_DMA_IRQHandler+0xc84>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d036      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a77      	ldr	r2, [pc, #476]	@ (8003ff8 <HAL_DMA_IRQHandler+0xc88>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d031      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a76      	ldr	r2, [pc, #472]	@ (8003ffc <HAL_DMA_IRQHandler+0xc8c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d02c      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a74      	ldr	r2, [pc, #464]	@ (8004000 <HAL_DMA_IRQHandler+0xc90>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d027      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a73      	ldr	r2, [pc, #460]	@ (8004004 <HAL_DMA_IRQHandler+0xc94>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d022      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a71      	ldr	r2, [pc, #452]	@ (8004008 <HAL_DMA_IRQHandler+0xc98>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01d      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a70      	ldr	r2, [pc, #448]	@ (800400c <HAL_DMA_IRQHandler+0xc9c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d018      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a6e      	ldr	r2, [pc, #440]	@ (8004010 <HAL_DMA_IRQHandler+0xca0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a6d      	ldr	r2, [pc, #436]	@ (8004014 <HAL_DMA_IRQHandler+0xca4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00e      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a6b      	ldr	r2, [pc, #428]	@ (8004018 <HAL_DMA_IRQHandler+0xca8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a6a      	ldr	r2, [pc, #424]	@ (800401c <HAL_DMA_IRQHandler+0xcac>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xb12>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a68      	ldr	r2, [pc, #416]	@ (8004020 <HAL_DMA_IRQHandler+0xcb0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d108      	bne.n	8003e94 <HAL_DMA_IRQHandler+0xb24>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0208 	bic.w	r2, r2, #8
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e007      	b.n	8003ea4 <HAL_DMA_IRQHandler+0xb34>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0204 	bic.w	r2, r2, #4
 8003ea2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8165 	beq.w	8004178 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eb6:	e15f      	b.n	8004178 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80c5 	beq.w	8004058 <HAL_DMA_IRQHandler+0xce8>
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80bf 	beq.w	8004058 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d018      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 813a 	beq.w	800417c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f10:	e134      	b.n	800417c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8130 	beq.w	800417c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f24:	e12a      	b.n	800417c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f040 8089 	bne.w	8004044 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a2b      	ldr	r2, [pc, #172]	@ (8003fe4 <HAL_DMA_IRQHandler+0xc74>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d04a      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a29      	ldr	r2, [pc, #164]	@ (8003fe8 <HAL_DMA_IRQHandler+0xc78>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d045      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a28      	ldr	r2, [pc, #160]	@ (8003fec <HAL_DMA_IRQHandler+0xc7c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d040      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a26      	ldr	r2, [pc, #152]	@ (8003ff0 <HAL_DMA_IRQHandler+0xc80>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d03b      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a25      	ldr	r2, [pc, #148]	@ (8003ff4 <HAL_DMA_IRQHandler+0xc84>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d036      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a23      	ldr	r2, [pc, #140]	@ (8003ff8 <HAL_DMA_IRQHandler+0xc88>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d031      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a22      	ldr	r2, [pc, #136]	@ (8003ffc <HAL_DMA_IRQHandler+0xc8c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d02c      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a20      	ldr	r2, [pc, #128]	@ (8004000 <HAL_DMA_IRQHandler+0xc90>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d027      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1f      	ldr	r2, [pc, #124]	@ (8004004 <HAL_DMA_IRQHandler+0xc94>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d022      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1d      	ldr	r2, [pc, #116]	@ (8004008 <HAL_DMA_IRQHandler+0xc98>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01d      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800400c <HAL_DMA_IRQHandler+0xc9c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d018      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8004010 <HAL_DMA_IRQHandler+0xca0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a19      	ldr	r2, [pc, #100]	@ (8004014 <HAL_DMA_IRQHandler+0xca4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a17      	ldr	r2, [pc, #92]	@ (8004018 <HAL_DMA_IRQHandler+0xca8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a16      	ldr	r2, [pc, #88]	@ (800401c <HAL_DMA_IRQHandler+0xcac>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0xc62>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a14      	ldr	r2, [pc, #80]	@ (8004020 <HAL_DMA_IRQHandler+0xcb0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d128      	bne.n	8004024 <HAL_DMA_IRQHandler+0xcb4>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0214 	bic.w	r2, r2, #20
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e027      	b.n	8004034 <HAL_DMA_IRQHandler+0xcc4>
 8003fe4:	40020010 	.word	0x40020010
 8003fe8:	40020028 	.word	0x40020028
 8003fec:	40020040 	.word	0x40020040
 8003ff0:	40020058 	.word	0x40020058
 8003ff4:	40020070 	.word	0x40020070
 8003ff8:	40020088 	.word	0x40020088
 8003ffc:	400200a0 	.word	0x400200a0
 8004000:	400200b8 	.word	0x400200b8
 8004004:	40020410 	.word	0x40020410
 8004008:	40020428 	.word	0x40020428
 800400c:	40020440 	.word	0x40020440
 8004010:	40020458 	.word	0x40020458
 8004014:	40020470 	.word	0x40020470
 8004018:	40020488 	.word	0x40020488
 800401c:	400204a0 	.word	0x400204a0
 8004020:	400204b8 	.word	0x400204b8
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 020a 	bic.w	r2, r2, #10
 8004032:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8097 	beq.w	800417c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004056:	e091      	b.n	800417c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	2208      	movs	r2, #8
 8004062:	409a      	lsls	r2, r3
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	4013      	ands	r3, r2
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8088 	beq.w	800417e <HAL_DMA_IRQHandler+0xe0e>
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 8082 	beq.w	800417e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a41      	ldr	r2, [pc, #260]	@ (8004184 <HAL_DMA_IRQHandler+0xe14>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d04a      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a3f      	ldr	r2, [pc, #252]	@ (8004188 <HAL_DMA_IRQHandler+0xe18>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d045      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a3e      	ldr	r2, [pc, #248]	@ (800418c <HAL_DMA_IRQHandler+0xe1c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d040      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a3c      	ldr	r2, [pc, #240]	@ (8004190 <HAL_DMA_IRQHandler+0xe20>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d03b      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a3b      	ldr	r2, [pc, #236]	@ (8004194 <HAL_DMA_IRQHandler+0xe24>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d036      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a39      	ldr	r2, [pc, #228]	@ (8004198 <HAL_DMA_IRQHandler+0xe28>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d031      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a38      	ldr	r2, [pc, #224]	@ (800419c <HAL_DMA_IRQHandler+0xe2c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d02c      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a36      	ldr	r2, [pc, #216]	@ (80041a0 <HAL_DMA_IRQHandler+0xe30>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d027      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a35      	ldr	r2, [pc, #212]	@ (80041a4 <HAL_DMA_IRQHandler+0xe34>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d022      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a33      	ldr	r2, [pc, #204]	@ (80041a8 <HAL_DMA_IRQHandler+0xe38>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01d      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a32      	ldr	r2, [pc, #200]	@ (80041ac <HAL_DMA_IRQHandler+0xe3c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d018      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a30      	ldr	r2, [pc, #192]	@ (80041b0 <HAL_DMA_IRQHandler+0xe40>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2f      	ldr	r2, [pc, #188]	@ (80041b4 <HAL_DMA_IRQHandler+0xe44>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00e      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2d      	ldr	r2, [pc, #180]	@ (80041b8 <HAL_DMA_IRQHandler+0xe48>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d009      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2c      	ldr	r2, [pc, #176]	@ (80041bc <HAL_DMA_IRQHandler+0xe4c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d004      	beq.n	800411a <HAL_DMA_IRQHandler+0xdaa>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a2a      	ldr	r2, [pc, #168]	@ (80041c0 <HAL_DMA_IRQHandler+0xe50>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d108      	bne.n	800412c <HAL_DMA_IRQHandler+0xdbc>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 021c 	bic.w	r2, r2, #28
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e007      	b.n	800413c <HAL_DMA_IRQHandler+0xdcc>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 020e 	bic.w	r2, r2, #14
 800413a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	2201      	movs	r2, #1
 8004146:	409a      	lsls	r2, r3
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	4798      	blx	r3
 8004172:	e004      	b.n	800417e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004174:	bf00      	nop
 8004176:	e002      	b.n	800417e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004178:	bf00      	nop
 800417a:	e000      	b.n	800417e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800417c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800417e:	3728      	adds	r7, #40	@ 0x28
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40020010 	.word	0x40020010
 8004188:	40020028 	.word	0x40020028
 800418c:	40020040 	.word	0x40020040
 8004190:	40020058 	.word	0x40020058
 8004194:	40020070 	.word	0x40020070
 8004198:	40020088 	.word	0x40020088
 800419c:	400200a0 	.word	0x400200a0
 80041a0:	400200b8 	.word	0x400200b8
 80041a4:	40020410 	.word	0x40020410
 80041a8:	40020428 	.word	0x40020428
 80041ac:	40020440 	.word	0x40020440
 80041b0:	40020458 	.word	0x40020458
 80041b4:	40020470 	.word	0x40020470
 80041b8:	40020488 	.word	0x40020488
 80041bc:	400204a0 	.word	0x400204a0
 80041c0:	400204b8 	.word	0x400204b8

080041c4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7f      	ldr	r2, [pc, #508]	@ (80043f8 <DMA_SetConfig+0x21c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d072      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a7d      	ldr	r2, [pc, #500]	@ (80043fc <DMA_SetConfig+0x220>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d06d      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a7c      	ldr	r2, [pc, #496]	@ (8004400 <DMA_SetConfig+0x224>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d068      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a7a      	ldr	r2, [pc, #488]	@ (8004404 <DMA_SetConfig+0x228>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d063      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a79      	ldr	r2, [pc, #484]	@ (8004408 <DMA_SetConfig+0x22c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d05e      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a77      	ldr	r2, [pc, #476]	@ (800440c <DMA_SetConfig+0x230>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d059      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a76      	ldr	r2, [pc, #472]	@ (8004410 <DMA_SetConfig+0x234>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d054      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a74      	ldr	r2, [pc, #464]	@ (8004414 <DMA_SetConfig+0x238>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d04f      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a73      	ldr	r2, [pc, #460]	@ (8004418 <DMA_SetConfig+0x23c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d04a      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a71      	ldr	r2, [pc, #452]	@ (800441c <DMA_SetConfig+0x240>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d045      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a70      	ldr	r2, [pc, #448]	@ (8004420 <DMA_SetConfig+0x244>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d040      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6e      	ldr	r2, [pc, #440]	@ (8004424 <DMA_SetConfig+0x248>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d03b      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a6d      	ldr	r2, [pc, #436]	@ (8004428 <DMA_SetConfig+0x24c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d036      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a6b      	ldr	r2, [pc, #428]	@ (800442c <DMA_SetConfig+0x250>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d031      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a6a      	ldr	r2, [pc, #424]	@ (8004430 <DMA_SetConfig+0x254>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d02c      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a68      	ldr	r2, [pc, #416]	@ (8004434 <DMA_SetConfig+0x258>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d027      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a67      	ldr	r2, [pc, #412]	@ (8004438 <DMA_SetConfig+0x25c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d022      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a65      	ldr	r2, [pc, #404]	@ (800443c <DMA_SetConfig+0x260>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01d      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a64      	ldr	r2, [pc, #400]	@ (8004440 <DMA_SetConfig+0x264>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d018      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a62      	ldr	r2, [pc, #392]	@ (8004444 <DMA_SetConfig+0x268>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a61      	ldr	r2, [pc, #388]	@ (8004448 <DMA_SetConfig+0x26c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00e      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a5f      	ldr	r2, [pc, #380]	@ (800444c <DMA_SetConfig+0x270>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d009      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004450 <DMA_SetConfig+0x274>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <DMA_SetConfig+0x10a>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a5c      	ldr	r2, [pc, #368]	@ (8004454 <DMA_SetConfig+0x278>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d101      	bne.n	80042ea <DMA_SetConfig+0x10e>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <DMA_SetConfig+0x110>
 80042ea:	2300      	movs	r3, #0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00d      	beq.n	800430c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80042f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d004      	beq.n	800430c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800430a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a39      	ldr	r2, [pc, #228]	@ (80043f8 <DMA_SetConfig+0x21c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d04a      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a38      	ldr	r2, [pc, #224]	@ (80043fc <DMA_SetConfig+0x220>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d045      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a36      	ldr	r2, [pc, #216]	@ (8004400 <DMA_SetConfig+0x224>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d040      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a35      	ldr	r2, [pc, #212]	@ (8004404 <DMA_SetConfig+0x228>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d03b      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a33      	ldr	r2, [pc, #204]	@ (8004408 <DMA_SetConfig+0x22c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d036      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a32      	ldr	r2, [pc, #200]	@ (800440c <DMA_SetConfig+0x230>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d031      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a30      	ldr	r2, [pc, #192]	@ (8004410 <DMA_SetConfig+0x234>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d02c      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a2f      	ldr	r2, [pc, #188]	@ (8004414 <DMA_SetConfig+0x238>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d027      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2d      	ldr	r2, [pc, #180]	@ (8004418 <DMA_SetConfig+0x23c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d022      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a2c      	ldr	r2, [pc, #176]	@ (800441c <DMA_SetConfig+0x240>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d01d      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2a      	ldr	r2, [pc, #168]	@ (8004420 <DMA_SetConfig+0x244>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d018      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a29      	ldr	r2, [pc, #164]	@ (8004424 <DMA_SetConfig+0x248>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d013      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a27      	ldr	r2, [pc, #156]	@ (8004428 <DMA_SetConfig+0x24c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00e      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a26      	ldr	r2, [pc, #152]	@ (800442c <DMA_SetConfig+0x250>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d009      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a24      	ldr	r2, [pc, #144]	@ (8004430 <DMA_SetConfig+0x254>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <DMA_SetConfig+0x1d0>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a23      	ldr	r2, [pc, #140]	@ (8004434 <DMA_SetConfig+0x258>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d101      	bne.n	80043b0 <DMA_SetConfig+0x1d4>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <DMA_SetConfig+0x1d6>
 80043b0:	2300      	movs	r3, #0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d059      	beq.n	800446a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	223f      	movs	r2, #63	@ 0x3f
 80043c0:	409a      	lsls	r2, r3
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80043d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b40      	cmp	r3, #64	@ 0x40
 80043e4:	d138      	bne.n	8004458 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043f6:	e086      	b.n	8004506 <DMA_SetConfig+0x32a>
 80043f8:	40020010 	.word	0x40020010
 80043fc:	40020028 	.word	0x40020028
 8004400:	40020040 	.word	0x40020040
 8004404:	40020058 	.word	0x40020058
 8004408:	40020070 	.word	0x40020070
 800440c:	40020088 	.word	0x40020088
 8004410:	400200a0 	.word	0x400200a0
 8004414:	400200b8 	.word	0x400200b8
 8004418:	40020410 	.word	0x40020410
 800441c:	40020428 	.word	0x40020428
 8004420:	40020440 	.word	0x40020440
 8004424:	40020458 	.word	0x40020458
 8004428:	40020470 	.word	0x40020470
 800442c:	40020488 	.word	0x40020488
 8004430:	400204a0 	.word	0x400204a0
 8004434:	400204b8 	.word	0x400204b8
 8004438:	58025408 	.word	0x58025408
 800443c:	5802541c 	.word	0x5802541c
 8004440:	58025430 	.word	0x58025430
 8004444:	58025444 	.word	0x58025444
 8004448:	58025458 	.word	0x58025458
 800444c:	5802546c 	.word	0x5802546c
 8004450:	58025480 	.word	0x58025480
 8004454:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	60da      	str	r2, [r3, #12]
}
 8004468:	e04d      	b.n	8004506 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a29      	ldr	r2, [pc, #164]	@ (8004514 <DMA_SetConfig+0x338>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d022      	beq.n	80044ba <DMA_SetConfig+0x2de>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a27      	ldr	r2, [pc, #156]	@ (8004518 <DMA_SetConfig+0x33c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d01d      	beq.n	80044ba <DMA_SetConfig+0x2de>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a26      	ldr	r2, [pc, #152]	@ (800451c <DMA_SetConfig+0x340>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d018      	beq.n	80044ba <DMA_SetConfig+0x2de>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a24      	ldr	r2, [pc, #144]	@ (8004520 <DMA_SetConfig+0x344>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d013      	beq.n	80044ba <DMA_SetConfig+0x2de>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a23      	ldr	r2, [pc, #140]	@ (8004524 <DMA_SetConfig+0x348>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00e      	beq.n	80044ba <DMA_SetConfig+0x2de>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a21      	ldr	r2, [pc, #132]	@ (8004528 <DMA_SetConfig+0x34c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d009      	beq.n	80044ba <DMA_SetConfig+0x2de>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a20      	ldr	r2, [pc, #128]	@ (800452c <DMA_SetConfig+0x350>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d004      	beq.n	80044ba <DMA_SetConfig+0x2de>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004530 <DMA_SetConfig+0x354>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d101      	bne.n	80044be <DMA_SetConfig+0x2e2>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <DMA_SetConfig+0x2e4>
 80044be:	2300      	movs	r3, #0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d020      	beq.n	8004506 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2201      	movs	r2, #1
 80044ce:	409a      	lsls	r2, r3
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b40      	cmp	r3, #64	@ 0x40
 80044e2:	d108      	bne.n	80044f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	60da      	str	r2, [r3, #12]
}
 80044f4:	e007      	b.n	8004506 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	60da      	str	r2, [r3, #12]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	58025408 	.word	0x58025408
 8004518:	5802541c 	.word	0x5802541c
 800451c:	58025430 	.word	0x58025430
 8004520:	58025444 	.word	0x58025444
 8004524:	58025458 	.word	0x58025458
 8004528:	5802546c 	.word	0x5802546c
 800452c:	58025480 	.word	0x58025480
 8004530:	58025494 	.word	0x58025494

08004534 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a42      	ldr	r2, [pc, #264]	@ (800464c <DMA_CalcBaseAndBitshift+0x118>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d04a      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a41      	ldr	r2, [pc, #260]	@ (8004650 <DMA_CalcBaseAndBitshift+0x11c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d045      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a3f      	ldr	r2, [pc, #252]	@ (8004654 <DMA_CalcBaseAndBitshift+0x120>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d040      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a3e      	ldr	r2, [pc, #248]	@ (8004658 <DMA_CalcBaseAndBitshift+0x124>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d03b      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a3c      	ldr	r2, [pc, #240]	@ (800465c <DMA_CalcBaseAndBitshift+0x128>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d036      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a3b      	ldr	r2, [pc, #236]	@ (8004660 <DMA_CalcBaseAndBitshift+0x12c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d031      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a39      	ldr	r2, [pc, #228]	@ (8004664 <DMA_CalcBaseAndBitshift+0x130>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d02c      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a38      	ldr	r2, [pc, #224]	@ (8004668 <DMA_CalcBaseAndBitshift+0x134>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d027      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a36      	ldr	r2, [pc, #216]	@ (800466c <DMA_CalcBaseAndBitshift+0x138>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d022      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a35      	ldr	r2, [pc, #212]	@ (8004670 <DMA_CalcBaseAndBitshift+0x13c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d01d      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a33      	ldr	r2, [pc, #204]	@ (8004674 <DMA_CalcBaseAndBitshift+0x140>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d018      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a32      	ldr	r2, [pc, #200]	@ (8004678 <DMA_CalcBaseAndBitshift+0x144>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d013      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a30      	ldr	r2, [pc, #192]	@ (800467c <DMA_CalcBaseAndBitshift+0x148>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00e      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004680 <DMA_CalcBaseAndBitshift+0x14c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d009      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004684 <DMA_CalcBaseAndBitshift+0x150>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d004      	beq.n	80045dc <DMA_CalcBaseAndBitshift+0xa8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004688 <DMA_CalcBaseAndBitshift+0x154>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d101      	bne.n	80045e0 <DMA_CalcBaseAndBitshift+0xac>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <DMA_CalcBaseAndBitshift+0xae>
 80045e0:	2300      	movs	r3, #0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d024      	beq.n	8004630 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	3b10      	subs	r3, #16
 80045ee:	4a27      	ldr	r2, [pc, #156]	@ (800468c <DMA_CalcBaseAndBitshift+0x158>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	4a24      	ldr	r2, [pc, #144]	@ (8004690 <DMA_CalcBaseAndBitshift+0x15c>)
 8004600:	5cd3      	ldrb	r3, [r2, r3]
 8004602:	461a      	mov	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b03      	cmp	r3, #3
 800460c:	d908      	bls.n	8004620 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	4b1f      	ldr	r3, [pc, #124]	@ (8004694 <DMA_CalcBaseAndBitshift+0x160>)
 8004616:	4013      	ands	r3, r2
 8004618:	1d1a      	adds	r2, r3, #4
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	659a      	str	r2, [r3, #88]	@ 0x58
 800461e:	e00d      	b.n	800463c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	4b1b      	ldr	r3, [pc, #108]	@ (8004694 <DMA_CalcBaseAndBitshift+0x160>)
 8004628:	4013      	ands	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6593      	str	r3, [r2, #88]	@ 0x58
 800462e:	e005      	b.n	800463c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	40020010 	.word	0x40020010
 8004650:	40020028 	.word	0x40020028
 8004654:	40020040 	.word	0x40020040
 8004658:	40020058 	.word	0x40020058
 800465c:	40020070 	.word	0x40020070
 8004660:	40020088 	.word	0x40020088
 8004664:	400200a0 	.word	0x400200a0
 8004668:	400200b8 	.word	0x400200b8
 800466c:	40020410 	.word	0x40020410
 8004670:	40020428 	.word	0x40020428
 8004674:	40020440 	.word	0x40020440
 8004678:	40020458 	.word	0x40020458
 800467c:	40020470 	.word	0x40020470
 8004680:	40020488 	.word	0x40020488
 8004684:	400204a0 	.word	0x400204a0
 8004688:	400204b8 	.word	0x400204b8
 800468c:	aaaaaaab 	.word	0xaaaaaaab
 8004690:	0801d784 	.word	0x0801d784
 8004694:	fffffc00 	.word	0xfffffc00

08004698 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d120      	bne.n	80046ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d858      	bhi.n	8004766 <DMA_CheckFifoParam+0xce>
 80046b4:	a201      	add	r2, pc, #4	@ (adr r2, 80046bc <DMA_CheckFifoParam+0x24>)
 80046b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ba:	bf00      	nop
 80046bc:	080046cd 	.word	0x080046cd
 80046c0:	080046df 	.word	0x080046df
 80046c4:	080046cd 	.word	0x080046cd
 80046c8:	08004767 	.word	0x08004767
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d048      	beq.n	800476a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046dc:	e045      	b.n	800476a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80046e6:	d142      	bne.n	800476e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046ec:	e03f      	b.n	800476e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046f6:	d123      	bne.n	8004740 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d838      	bhi.n	8004772 <DMA_CheckFifoParam+0xda>
 8004700:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <DMA_CheckFifoParam+0x70>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	08004719 	.word	0x08004719
 800470c:	0800471f 	.word	0x0800471f
 8004710:	08004719 	.word	0x08004719
 8004714:	08004731 	.word	0x08004731
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
        break;
 800471c:	e030      	b.n	8004780 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d025      	beq.n	8004776 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800472e:	e022      	b.n	8004776 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004738:	d11f      	bne.n	800477a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800473e:	e01c      	b.n	800477a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004744:	2b02      	cmp	r3, #2
 8004746:	d902      	bls.n	800474e <DMA_CheckFifoParam+0xb6>
 8004748:	2b03      	cmp	r3, #3
 800474a:	d003      	beq.n	8004754 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800474c:	e018      	b.n	8004780 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
        break;
 8004752:	e015      	b.n	8004780 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00e      	beq.n	800477e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
    break;
 8004764:	e00b      	b.n	800477e <DMA_CheckFifoParam+0xe6>
        break;
 8004766:	bf00      	nop
 8004768:	e00a      	b.n	8004780 <DMA_CheckFifoParam+0xe8>
        break;
 800476a:	bf00      	nop
 800476c:	e008      	b.n	8004780 <DMA_CheckFifoParam+0xe8>
        break;
 800476e:	bf00      	nop
 8004770:	e006      	b.n	8004780 <DMA_CheckFifoParam+0xe8>
        break;
 8004772:	bf00      	nop
 8004774:	e004      	b.n	8004780 <DMA_CheckFifoParam+0xe8>
        break;
 8004776:	bf00      	nop
 8004778:	e002      	b.n	8004780 <DMA_CheckFifoParam+0xe8>
        break;
 800477a:	bf00      	nop
 800477c:	e000      	b.n	8004780 <DMA_CheckFifoParam+0xe8>
    break;
 800477e:	bf00      	nop
    }
  }

  return status;
 8004780:	7bfb      	ldrb	r3, [r7, #15]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop

08004790 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a38      	ldr	r2, [pc, #224]	@ (8004884 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d022      	beq.n	80047ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a36      	ldr	r2, [pc, #216]	@ (8004888 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01d      	beq.n	80047ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a35      	ldr	r2, [pc, #212]	@ (800488c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d018      	beq.n	80047ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a33      	ldr	r2, [pc, #204]	@ (8004890 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a32      	ldr	r2, [pc, #200]	@ (8004894 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00e      	beq.n	80047ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a30      	ldr	r2, [pc, #192]	@ (8004898 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a2f      	ldr	r2, [pc, #188]	@ (800489c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2d      	ldr	r2, [pc, #180]	@ (80048a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d101      	bne.n	80047f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80047f2:	2300      	movs	r3, #0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01a      	beq.n	800482e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	3b08      	subs	r3, #8
 8004800:	4a28      	ldr	r2, [pc, #160]	@ (80048a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4b26      	ldr	r3, [pc, #152]	@ (80048a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	461a      	mov	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a24      	ldr	r2, [pc, #144]	@ (80048ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800481c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2201      	movs	r2, #1
 8004826:	409a      	lsls	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800482c:	e024      	b.n	8004878 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	3b10      	subs	r3, #16
 8004836:	4a1e      	ldr	r2, [pc, #120]	@ (80048b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004838:	fba2 2303 	umull	r2, r3, r2, r3
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a1c      	ldr	r2, [pc, #112]	@ (80048b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d806      	bhi.n	8004856 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4a1b      	ldr	r2, [pc, #108]	@ (80048b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d902      	bls.n	8004856 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3308      	adds	r3, #8
 8004854:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4b18      	ldr	r3, [pc, #96]	@ (80048bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	461a      	mov	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a16      	ldr	r2, [pc, #88]	@ (80048c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004868:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	2201      	movs	r2, #1
 8004872:	409a      	lsls	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	58025408 	.word	0x58025408
 8004888:	5802541c 	.word	0x5802541c
 800488c:	58025430 	.word	0x58025430
 8004890:	58025444 	.word	0x58025444
 8004894:	58025458 	.word	0x58025458
 8004898:	5802546c 	.word	0x5802546c
 800489c:	58025480 	.word	0x58025480
 80048a0:	58025494 	.word	0x58025494
 80048a4:	cccccccd 	.word	0xcccccccd
 80048a8:	16009600 	.word	0x16009600
 80048ac:	58025880 	.word	0x58025880
 80048b0:	aaaaaaab 	.word	0xaaaaaaab
 80048b4:	400204b8 	.word	0x400204b8
 80048b8:	4002040f 	.word	0x4002040f
 80048bc:	10008200 	.word	0x10008200
 80048c0:	40020880 	.word	0x40020880

080048c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d04a      	beq.n	8004970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d847      	bhi.n	8004970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a25      	ldr	r2, [pc, #148]	@ (800497c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d022      	beq.n	8004930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a24      	ldr	r2, [pc, #144]	@ (8004980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d01d      	beq.n	8004930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a22      	ldr	r2, [pc, #136]	@ (8004984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d018      	beq.n	8004930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a21      	ldr	r2, [pc, #132]	@ (8004988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d013      	beq.n	8004930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1f      	ldr	r2, [pc, #124]	@ (800498c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00e      	beq.n	8004930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1e      	ldr	r2, [pc, #120]	@ (8004990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d009      	beq.n	8004930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1c      	ldr	r2, [pc, #112]	@ (8004994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1b      	ldr	r2, [pc, #108]	@ (8004998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d101      	bne.n	8004934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004934:	2300      	movs	r3, #0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4b17      	ldr	r3, [pc, #92]	@ (800499c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	461a      	mov	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a15      	ldr	r2, [pc, #84]	@ (80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800494c:	671a      	str	r2, [r3, #112]	@ 0x70
 800494e:	e009      	b.n	8004964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4b14      	ldr	r3, [pc, #80]	@ (80049a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	461a      	mov	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a11      	ldr	r2, [pc, #68]	@ (80049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004962:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3b01      	subs	r3, #1
 8004968:	2201      	movs	r2, #1
 800496a:	409a      	lsls	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	58025408 	.word	0x58025408
 8004980:	5802541c 	.word	0x5802541c
 8004984:	58025430 	.word	0x58025430
 8004988:	58025444 	.word	0x58025444
 800498c:	58025458 	.word	0x58025458
 8004990:	5802546c 	.word	0x5802546c
 8004994:	58025480 	.word	0x58025480
 8004998:	58025494 	.word	0x58025494
 800499c:	1600963f 	.word	0x1600963f
 80049a0:	58025940 	.word	0x58025940
 80049a4:	1000823f 	.word	0x1000823f
 80049a8:	40020940 	.word	0x40020940

080049ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b089      	sub	sp, #36	@ 0x24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80049ba:	4b89      	ldr	r3, [pc, #548]	@ (8004be0 <HAL_GPIO_Init+0x234>)
 80049bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049be:	e194      	b.n	8004cea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	2101      	movs	r1, #1
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	fa01 f303 	lsl.w	r3, r1, r3
 80049cc:	4013      	ands	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8186 	beq.w	8004ce4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d005      	beq.n	80049f0 <HAL_GPIO_Init+0x44>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d130      	bne.n	8004a52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	2203      	movs	r2, #3
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a26:	2201      	movs	r2, #1
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	091b      	lsrs	r3, r3, #4
 8004a3c:	f003 0201 	and.w	r2, r3, #1
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d017      	beq.n	8004a8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	2203      	movs	r2, #3
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4013      	ands	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d123      	bne.n	8004ae2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	08da      	lsrs	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3208      	adds	r2, #8
 8004aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	220f      	movs	r2, #15
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4013      	ands	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	08da      	lsrs	r2, r3, #3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3208      	adds	r2, #8
 8004adc:	69b9      	ldr	r1, [r7, #24]
 8004ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	2203      	movs	r2, #3
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	43db      	mvns	r3, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4013      	ands	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 0203 	and.w	r2, r3, #3
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80e0 	beq.w	8004ce4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b24:	4b2f      	ldr	r3, [pc, #188]	@ (8004be4 <HAL_GPIO_Init+0x238>)
 8004b26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b2a:	4a2e      	ldr	r2, [pc, #184]	@ (8004be4 <HAL_GPIO_Init+0x238>)
 8004b2c:	f043 0302 	orr.w	r3, r3, #2
 8004b30:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004b34:	4b2b      	ldr	r3, [pc, #172]	@ (8004be4 <HAL_GPIO_Init+0x238>)
 8004b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b42:	4a29      	ldr	r2, [pc, #164]	@ (8004be8 <HAL_GPIO_Init+0x23c>)
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	089b      	lsrs	r3, r3, #2
 8004b48:	3302      	adds	r3, #2
 8004b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	220f      	movs	r2, #15
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4013      	ands	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a20      	ldr	r2, [pc, #128]	@ (8004bec <HAL_GPIO_Init+0x240>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d052      	beq.n	8004c14 <HAL_GPIO_Init+0x268>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a1f      	ldr	r2, [pc, #124]	@ (8004bf0 <HAL_GPIO_Init+0x244>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d031      	beq.n	8004bda <HAL_GPIO_Init+0x22e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a1e      	ldr	r2, [pc, #120]	@ (8004bf4 <HAL_GPIO_Init+0x248>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d02b      	beq.n	8004bd6 <HAL_GPIO_Init+0x22a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf8 <HAL_GPIO_Init+0x24c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d025      	beq.n	8004bd2 <HAL_GPIO_Init+0x226>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a1c      	ldr	r2, [pc, #112]	@ (8004bfc <HAL_GPIO_Init+0x250>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d01f      	beq.n	8004bce <HAL_GPIO_Init+0x222>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a1b      	ldr	r2, [pc, #108]	@ (8004c00 <HAL_GPIO_Init+0x254>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d019      	beq.n	8004bca <HAL_GPIO_Init+0x21e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a1a      	ldr	r2, [pc, #104]	@ (8004c04 <HAL_GPIO_Init+0x258>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d013      	beq.n	8004bc6 <HAL_GPIO_Init+0x21a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a19      	ldr	r2, [pc, #100]	@ (8004c08 <HAL_GPIO_Init+0x25c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00d      	beq.n	8004bc2 <HAL_GPIO_Init+0x216>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a18      	ldr	r2, [pc, #96]	@ (8004c0c <HAL_GPIO_Init+0x260>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d007      	beq.n	8004bbe <HAL_GPIO_Init+0x212>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a17      	ldr	r2, [pc, #92]	@ (8004c10 <HAL_GPIO_Init+0x264>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d101      	bne.n	8004bba <HAL_GPIO_Init+0x20e>
 8004bb6:	2309      	movs	r3, #9
 8004bb8:	e02d      	b.n	8004c16 <HAL_GPIO_Init+0x26a>
 8004bba:	230a      	movs	r3, #10
 8004bbc:	e02b      	b.n	8004c16 <HAL_GPIO_Init+0x26a>
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	e029      	b.n	8004c16 <HAL_GPIO_Init+0x26a>
 8004bc2:	2307      	movs	r3, #7
 8004bc4:	e027      	b.n	8004c16 <HAL_GPIO_Init+0x26a>
 8004bc6:	2306      	movs	r3, #6
 8004bc8:	e025      	b.n	8004c16 <HAL_GPIO_Init+0x26a>
 8004bca:	2305      	movs	r3, #5
 8004bcc:	e023      	b.n	8004c16 <HAL_GPIO_Init+0x26a>
 8004bce:	2304      	movs	r3, #4
 8004bd0:	e021      	b.n	8004c16 <HAL_GPIO_Init+0x26a>
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e01f      	b.n	8004c16 <HAL_GPIO_Init+0x26a>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e01d      	b.n	8004c16 <HAL_GPIO_Init+0x26a>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e01b      	b.n	8004c16 <HAL_GPIO_Init+0x26a>
 8004bde:	bf00      	nop
 8004be0:	58000080 	.word	0x58000080
 8004be4:	58024400 	.word	0x58024400
 8004be8:	58000400 	.word	0x58000400
 8004bec:	58020000 	.word	0x58020000
 8004bf0:	58020400 	.word	0x58020400
 8004bf4:	58020800 	.word	0x58020800
 8004bf8:	58020c00 	.word	0x58020c00
 8004bfc:	58021000 	.word	0x58021000
 8004c00:	58021400 	.word	0x58021400
 8004c04:	58021800 	.word	0x58021800
 8004c08:	58021c00 	.word	0x58021c00
 8004c0c:	58022000 	.word	0x58022000
 8004c10:	58022400 	.word	0x58022400
 8004c14:	2300      	movs	r3, #0
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	f002 0203 	and.w	r2, r2, #3
 8004c1c:	0092      	lsls	r2, r2, #2
 8004c1e:	4093      	lsls	r3, r2
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c26:	4938      	ldr	r1, [pc, #224]	@ (8004d08 <HAL_GPIO_Init+0x35c>)
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	089b      	lsrs	r3, r3, #2
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	4013      	ands	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4013      	ands	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f47f ae63 	bne.w	80049c0 <HAL_GPIO_Init+0x14>
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	bf00      	nop
 8004cfe:	3724      	adds	r7, #36	@ 0x24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	58000400 	.word	0x58000400

08004d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	807b      	strh	r3, [r7, #2]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d1c:	787b      	ldrb	r3, [r7, #1]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d22:	887a      	ldrh	r2, [r7, #2]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004d28:	e003      	b.n	8004d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d2a:	887b      	ldrh	r3, [r7, #2]
 8004d2c:	041a      	lsls	r2, r3, #16
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	619a      	str	r2, [r3, #24]
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	460b      	mov	r3, r1
 8004d48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d50:	887a      	ldrh	r2, [r7, #2]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4013      	ands	r3, r2
 8004d56:	041a      	lsls	r2, r3, #16
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	43d9      	mvns	r1, r3
 8004d5c:	887b      	ldrh	r3, [r7, #2]
 8004d5e:	400b      	ands	r3, r1
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	619a      	str	r2, [r3, #24]
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af02      	add	r7, sp, #8
 8004d78:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e04f      	b.n	8004e24 <HAL_HCD_Init+0xb2>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f016 f87d 	bl	801ae98 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2203      	movs	r2, #3
 8004da2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f008 fbf3 	bl	800d596 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	7c1a      	ldrb	r2, [r3, #16]
 8004db8:	f88d 2000 	strb.w	r2, [sp]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dc0:	f008 fac4 	bl	800d34c <USB_CoreInit>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_HCD_Init+0x64>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e026      	b.n	8004e24 <HAL_HCD_Init+0xb2>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2101      	movs	r1, #1
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f008 fbeb 	bl	800d5b8 <USB_SetCurrentMode>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_HCD_Init+0x82>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e017      	b.n	8004e24 <HAL_HCD_Init+0xb2>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	7c1a      	ldrb	r2, [r3, #16]
 8004dfc:	f88d 2000 	strb.w	r2, [sp]
 8004e00:	3304      	adds	r3, #4
 8004e02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e04:	f009 fe1a 	bl	800ea3c <USB_HostInit>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e004      	b.n	8004e24 <HAL_HCD_Init+0xb2>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b08b      	sub	sp, #44	@ 0x2c
 8004e30:	af04      	add	r7, sp, #16
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	4608      	mov	r0, r1
 8004e36:	4611      	mov	r1, r2
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	70fb      	strb	r3, [r7, #3]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	70bb      	strb	r3, [r7, #2]
 8004e42:	4613      	mov	r3, r2
 8004e44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004e46:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004e48:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_HCD_HC_Init+0x2c>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e09d      	b.n	8004f94 <HAL_HCD_HC_Init+0x168>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004e60:	78fa      	ldrb	r2, [r7, #3]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3319      	adds	r3, #25
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	3314      	adds	r3, #20
 8004e84:	787a      	ldrb	r2, [r7, #1]
 8004e86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004e88:	78fa      	ldrb	r2, [r7, #3]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	3315      	adds	r3, #21
 8004e98:	78fa      	ldrb	r2, [r7, #3]
 8004e9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004e9c:	78fa      	ldrb	r2, [r7, #3]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3326      	adds	r3, #38	@ 0x26
 8004eac:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004eb0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	78bb      	ldrb	r3, [r7, #2]
 8004eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eba:	b2d8      	uxtb	r0, r3
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	3316      	adds	r3, #22
 8004eca:	4602      	mov	r2, r0
 8004ecc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fbc8 	bl	8005668 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004ed8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	da0a      	bge.n	8004ef6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	3317      	adds	r3, #23
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e009      	b.n	8004f0a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004ef6:	78fa      	ldrb	r2, [r7, #3]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	3317      	adds	r3, #23
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f009 fede 	bl	800ecd0 <USB_GetHostSpeed>
 8004f14:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004f16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d10b      	bne.n	8004f36 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004f1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d107      	bne.n	8004f36 <HAL_HCD_HC_Init+0x10a>
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d104      	bne.n	8004f36 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2bbc      	cmp	r3, #188	@ 0xbc
 8004f30:	d901      	bls.n	8004f36 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004f32:	23bc      	movs	r3, #188	@ 0xbc
 8004f34:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004f36:	78fa      	ldrb	r2, [r7, #3]
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	1a9b      	subs	r3, r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	3318      	adds	r3, #24
 8004f46:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004f4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004f4c:	78fa      	ldrb	r2, [r7, #3]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	b298      	uxth	r0, r3
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	4613      	mov	r3, r2
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	3328      	adds	r3, #40	@ 0x28
 8004f60:	4602      	mov	r2, r0
 8004f62:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	787c      	ldrb	r4, [r7, #1]
 8004f6e:	78ba      	ldrb	r2, [r7, #2]
 8004f70:	78f9      	ldrb	r1, [r7, #3]
 8004f72:	9302      	str	r3, [sp, #8]
 8004f74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f78:	9301      	str	r3, [sp, #4]
 8004f7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	4623      	mov	r3, r4
 8004f82:	f009 fecd 	bl	800ed20 <USB_HC_Init>
 8004f86:	4603      	mov	r3, r0
 8004f88:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd90      	pop	{r4, r7, pc}

08004f9c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_HCD_HC_Halt+0x1e>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e00f      	b.n	8004fda <HAL_HCD_HC_Halt+0x3e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	4611      	mov	r1, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f00a fa4d 	bl	800f46a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	4608      	mov	r0, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	70fb      	strb	r3, [r7, #3]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	70bb      	strb	r3, [r7, #2]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004ffe:	78fa      	ldrb	r2, [r7, #3]
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	1a9b      	subs	r3, r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	3317      	adds	r3, #23
 800500e:	78ba      	ldrb	r2, [r7, #2]
 8005010:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005012:	78fa      	ldrb	r2, [r7, #3]
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	3326      	adds	r3, #38	@ 0x26
 8005022:	787a      	ldrb	r2, [r7, #1]
 8005024:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005026:	7c3b      	ldrb	r3, [r7, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d114      	bne.n	8005056 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800502c:	78fa      	ldrb	r2, [r7, #3]
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	332a      	adds	r3, #42	@ 0x2a
 800503c:	2203      	movs	r2, #3
 800503e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005040:	78fa      	ldrb	r2, [r7, #3]
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	1a9b      	subs	r3, r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	3319      	adds	r3, #25
 8005050:	7f3a      	ldrb	r2, [r7, #28]
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	e009      	b.n	800506a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005056:	78fa      	ldrb	r2, [r7, #3]
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	332a      	adds	r3, #42	@ 0x2a
 8005066:	2202      	movs	r2, #2
 8005068:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800506a:	787b      	ldrb	r3, [r7, #1]
 800506c:	2b03      	cmp	r3, #3
 800506e:	f200 8102 	bhi.w	8005276 <HAL_HCD_HC_SubmitRequest+0x292>
 8005072:	a201      	add	r2, pc, #4	@ (adr r2, 8005078 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	08005089 	.word	0x08005089
 800507c:	08005261 	.word	0x08005261
 8005080:	0800514d 	.word	0x0800514d
 8005084:	080051d7 	.word	0x080051d7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8005088:	7c3b      	ldrb	r3, [r7, #16]
 800508a:	2b01      	cmp	r3, #1
 800508c:	f040 80f5 	bne.w	800527a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8005090:	78bb      	ldrb	r3, [r7, #2]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d12d      	bne.n	80050f2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8005096:	8b3b      	ldrh	r3, [r7, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d109      	bne.n	80050b0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	333d      	adds	r3, #61	@ 0x3d
 80050ac:	2201      	movs	r2, #1
 80050ae:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80050b0:	78fa      	ldrb	r2, [r7, #3]
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	333d      	adds	r3, #61	@ 0x3d
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80050c6:	78fa      	ldrb	r2, [r7, #3]
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	332a      	adds	r3, #42	@ 0x2a
 80050d6:	2200      	movs	r2, #0
 80050d8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80050da:	e0ce      	b.n	800527a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80050dc:	78fa      	ldrb	r2, [r7, #3]
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	4613      	mov	r3, r2
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	332a      	adds	r3, #42	@ 0x2a
 80050ec:	2202      	movs	r2, #2
 80050ee:	701a      	strb	r2, [r3, #0]
      break;
 80050f0:	e0c3      	b.n	800527a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80050f2:	78fa      	ldrb	r2, [r7, #3]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	331a      	adds	r3, #26
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b01      	cmp	r3, #1
 8005106:	f040 80b8 	bne.w	800527a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800510a:	78fa      	ldrb	r2, [r7, #3]
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	1a9b      	subs	r3, r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	333c      	adds	r3, #60	@ 0x3c
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005120:	78fa      	ldrb	r2, [r7, #3]
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	332a      	adds	r3, #42	@ 0x2a
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]
      break;
 8005134:	e0a1      	b.n	800527a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	332a      	adds	r3, #42	@ 0x2a
 8005146:	2202      	movs	r2, #2
 8005148:	701a      	strb	r2, [r3, #0]
      break;
 800514a:	e096      	b.n	800527a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800514c:	78bb      	ldrb	r3, [r7, #2]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d120      	bne.n	8005194 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005152:	78fa      	ldrb	r2, [r7, #3]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	333d      	adds	r3, #61	@ 0x3d
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005168:	78fa      	ldrb	r2, [r7, #3]
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	1a9b      	subs	r3, r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	332a      	adds	r3, #42	@ 0x2a
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800517c:	e07e      	b.n	800527c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	332a      	adds	r3, #42	@ 0x2a
 800518e:	2202      	movs	r2, #2
 8005190:	701a      	strb	r2, [r3, #0]
      break;
 8005192:	e073      	b.n	800527c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005194:	78fa      	ldrb	r2, [r7, #3]
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	333c      	adds	r3, #60	@ 0x3c
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	332a      	adds	r3, #42	@ 0x2a
 80051ba:	2200      	movs	r2, #0
 80051bc:	701a      	strb	r2, [r3, #0]
      break;
 80051be:	e05d      	b.n	800527c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	332a      	adds	r3, #42	@ 0x2a
 80051d0:	2202      	movs	r2, #2
 80051d2:	701a      	strb	r2, [r3, #0]
      break;
 80051d4:	e052      	b.n	800527c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80051d6:	78bb      	ldrb	r3, [r7, #2]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d120      	bne.n	800521e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80051dc:	78fa      	ldrb	r2, [r7, #3]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	333d      	adds	r3, #61	@ 0x3d
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80051f2:	78fa      	ldrb	r2, [r7, #3]
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	332a      	adds	r3, #42	@ 0x2a
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005206:	e039      	b.n	800527c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005208:	78fa      	ldrb	r2, [r7, #3]
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	4613      	mov	r3, r2
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	332a      	adds	r3, #42	@ 0x2a
 8005218:	2202      	movs	r2, #2
 800521a:	701a      	strb	r2, [r3, #0]
      break;
 800521c:	e02e      	b.n	800527c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800521e:	78fa      	ldrb	r2, [r7, #3]
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	333c      	adds	r3, #60	@ 0x3c
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10a      	bne.n	800524a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005234:	78fa      	ldrb	r2, [r7, #3]
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	332a      	adds	r3, #42	@ 0x2a
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
      break;
 8005248:	e018      	b.n	800527c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800524a:	78fa      	ldrb	r2, [r7, #3]
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	1a9b      	subs	r3, r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	332a      	adds	r3, #42	@ 0x2a
 800525a:	2202      	movs	r2, #2
 800525c:	701a      	strb	r2, [r3, #0]
      break;
 800525e:	e00d      	b.n	800527c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	332a      	adds	r3, #42	@ 0x2a
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]
      break;
 8005274:	e002      	b.n	800527c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8005276:	bf00      	nop
 8005278:	e000      	b.n	800527c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800527a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800527c:	78fa      	ldrb	r2, [r7, #3]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	332c      	adds	r3, #44	@ 0x2c
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005290:	78fa      	ldrb	r2, [r7, #3]
 8005292:	8b39      	ldrh	r1, [r7, #24]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	4613      	mov	r3, r2
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4403      	add	r3, r0
 80052a0:	3334      	adds	r3, #52	@ 0x34
 80052a2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80052a4:	78fa      	ldrb	r2, [r7, #3]
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	334c      	adds	r3, #76	@ 0x4c
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80052b8:	78fa      	ldrb	r2, [r7, #3]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	1a9b      	subs	r3, r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	3338      	adds	r3, #56	@ 0x38
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80052cc:	78fa      	ldrb	r2, [r7, #3]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	3315      	adds	r3, #21
 80052dc:	78fa      	ldrb	r2, [r7, #3]
 80052de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80052e0:	78fa      	ldrb	r2, [r7, #3]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	334d      	adds	r3, #77	@ 0x4d
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6818      	ldr	r0, [r3, #0]
 80052f8:	78fa      	ldrb	r2, [r7, #3]
 80052fa:	4613      	mov	r3, r2
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	3310      	adds	r3, #16
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	4413      	add	r3, r2
 8005308:	1d19      	adds	r1, r3, #4
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	799b      	ldrb	r3, [r3, #6]
 800530e:	461a      	mov	r2, r3
 8005310:	f009 fe2a 	bl	800ef68 <USB_HC_StartXfer>
 8005314:	4603      	mov	r3, r0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop

08005320 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f009 fabe 	bl	800e8b8 <USB_GetMode>
 800533c:	4603      	mov	r3, r0
 800533e:	2b01      	cmp	r3, #1
 8005340:	f040 80fb 	bne.w	800553a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f009 fa01 	bl	800e750 <USB_ReadInterrupts>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 80f1 	beq.w	8005538 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f009 f9f8 	bl	800e750 <USB_ReadInterrupts>
 8005360:	4603      	mov	r3, r0
 8005362:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005366:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800536a:	d104      	bne.n	8005376 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005374:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f009 f9e8 	bl	800e750 <USB_ReadInterrupts>
 8005380:	4603      	mov	r3, r0
 8005382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800538a:	d104      	bne.n	8005396 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005394:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f009 f9d8 	bl	800e750 <USB_ReadInterrupts>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053aa:	d104      	bne.n	80053b6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80053b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f009 f9c8 	bl	800e750 <USB_ReadInterrupts>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d103      	bne.n	80053d2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2202      	movs	r2, #2
 80053d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f009 f9ba 	bl	800e750 <USB_ReadInterrupts>
 80053dc:	4603      	mov	r3, r0
 80053de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053e6:	d120      	bne.n	800542a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80053f0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d113      	bne.n	800542a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005402:	2110      	movs	r1, #16
 8005404:	6938      	ldr	r0, [r7, #16]
 8005406:	f008 fa81 	bl	800d90c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800540a:	6938      	ldr	r0, [r7, #16]
 800540c:	f008 fab0 	bl	800d970 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	7a5b      	ldrb	r3, [r3, #9]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d105      	bne.n	8005424 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2101      	movs	r1, #1
 800541e:	4618      	mov	r0, r3
 8005420:	f009 fbb6 	bl	800eb90 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f015 fda7 	bl	801af78 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f009 f98e 	bl	800e750 <USB_ReadInterrupts>
 8005434:	4603      	mov	r3, r0
 8005436:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800543a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800543e:	d102      	bne.n	8005446 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f001 fd4d 	bl	8006ee0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f009 f980 	bl	800e750 <USB_ReadInterrupts>
 8005450:	4603      	mov	r3, r0
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b08      	cmp	r3, #8
 8005458:	d106      	bne.n	8005468 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f015 fd70 	bl	801af40 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2208      	movs	r2, #8
 8005466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f009 f96f 	bl	800e750 <USB_ReadInterrupts>
 8005472:	4603      	mov	r3, r0
 8005474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005478:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800547c:	d139      	bne.n	80054f2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f009 ffe0 	bl	800f448 <USB_HC_ReadInterrupt>
 8005488:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e025      	b.n	80054dc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	fa22 f303 	lsr.w	r3, r2, r3
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d018      	beq.n	80054d6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ba:	d106      	bne.n	80054ca <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f905 	bl	80056d2 <HCD_HC_IN_IRQHandler>
 80054c8:	e005      	b.n	80054d6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	4619      	mov	r1, r3
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 ff67 	bl	80063a4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	3301      	adds	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	795b      	ldrb	r3, [r3, #5]
 80054e0:	461a      	mov	r2, r3
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d3d3      	bcc.n	8005490 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80054f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f009 f92a 	bl	800e750 <USB_ReadInterrupts>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b10      	cmp	r3, #16
 8005504:	d101      	bne.n	800550a <HAL_HCD_IRQHandler+0x1ea>
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <HAL_HCD_IRQHandler+0x1ec>
 800550a:	2300      	movs	r3, #0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d014      	beq.n	800553a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0210 	bic.w	r2, r2, #16
 800551e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f001 fbfe 	bl	8006d22 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0210 	orr.w	r2, r2, #16
 8005534:	619a      	str	r2, [r3, #24]
 8005536:	e000      	b.n	800553a <HAL_HCD_IRQHandler+0x21a>
      return;
 8005538:	bf00      	nop
    }
  }
}
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_HCD_Start+0x16>
 8005552:	2302      	movs	r3, #2
 8005554:	e013      	b.n	800557e <HAL_HCD_Start+0x3e>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2101      	movs	r1, #1
 8005564:	4618      	mov	r0, r3
 8005566:	f009 fb7a 	bl	800ec5e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f008 f800 	bl	800d574 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_HCD_Stop+0x16>
 8005598:	2302      	movs	r3, #2
 800559a:	e00d      	b.n	80055b8 <HAL_HCD_Stop+0x32>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f00a f8bb 	bl	800f724 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f009 fb1c 	bl	800ec0a <USB_ResetPort>
 80055d2:	4603      	mov	r3, r0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80055e8:	78fa      	ldrb	r2, [r7, #3]
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	334c      	adds	r3, #76	@ 0x4c
 80055f8:	781b      	ldrb	r3, [r3, #0]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	460b      	mov	r3, r1
 8005610:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005612:	78fa      	ldrb	r2, [r7, #3]
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	440b      	add	r3, r1
 8005620:	3338      	adds	r3, #56	@ 0x38
 8005622:	681b      	ldr	r3, [r3, #0]
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f009 fb5e 	bl	800ecfe <USB_GetCurrentFrame>
 8005642:	4603      	mov	r3, r0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f009 fb39 	bl	800ecd0 <USB_GetHostSpeed>
 800565e:	4603      	mov	r3, r0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8005674:	78fa      	ldrb	r2, [r7, #3]
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	331a      	adds	r3, #26
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8005688:	78fa      	ldrb	r2, [r7, #3]
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	331b      	adds	r3, #27
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800569c:	78fa      	ldrb	r2, [r7, #3]
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	3325      	adds	r3, #37	@ 0x25
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80056b0:	78fa      	ldrb	r2, [r7, #3]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	3324      	adds	r3, #36	@ 0x24
 80056c0:	2200      	movs	r2, #0
 80056c2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b086      	sub	sp, #24
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	4611      	mov	r1, r2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f009 f840 	bl	800e776 <USB_ReadChInterrupts>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d11a      	bne.n	8005736 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4413      	add	r3, r2
 8005708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800570c:	461a      	mov	r2, r3
 800570e:	2304      	movs	r3, #4
 8005710:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005712:	78fa      	ldrb	r2, [r7, #3]
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	4613      	mov	r3, r2
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	1a9b      	subs	r3, r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	334d      	adds	r3, #77	@ 0x4d
 8005722:	2207      	movs	r2, #7
 8005724:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	78fa      	ldrb	r2, [r7, #3]
 800572c:	4611      	mov	r1, r2
 800572e:	4618      	mov	r0, r3
 8005730:	f009 fe9b 	bl	800f46a <USB_HC_Halt>
 8005734:	e09e      	b.n	8005874 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	78fa      	ldrb	r2, [r7, #3]
 800573c:	4611      	mov	r1, r2
 800573e:	4618      	mov	r0, r3
 8005740:	f009 f819 	bl	800e776 <USB_ReadChInterrupts>
 8005744:	4603      	mov	r3, r0
 8005746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800574e:	d11b      	bne.n	8005788 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4413      	add	r3, r2
 8005758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800575c:	461a      	mov	r2, r3
 800575e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005762:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005764:	78fa      	ldrb	r2, [r7, #3]
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	4613      	mov	r3, r2
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	334d      	adds	r3, #77	@ 0x4d
 8005774:	2208      	movs	r2, #8
 8005776:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	4611      	mov	r1, r2
 8005780:	4618      	mov	r0, r3
 8005782:	f009 fe72 	bl	800f46a <USB_HC_Halt>
 8005786:	e075      	b.n	8005874 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	78fa      	ldrb	r2, [r7, #3]
 800578e:	4611      	mov	r1, r2
 8005790:	4618      	mov	r0, r3
 8005792:	f008 fff0 	bl	800e776 <USB_ReadChInterrupts>
 8005796:	4603      	mov	r3, r0
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b08      	cmp	r3, #8
 800579e:	d11a      	bne.n	80057d6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ac:	461a      	mov	r2, r3
 80057ae:	2308      	movs	r3, #8
 80057b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	334d      	adds	r3, #77	@ 0x4d
 80057c2:	2206      	movs	r2, #6
 80057c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	4611      	mov	r1, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f009 fe4b 	bl	800f46a <USB_HC_Halt>
 80057d4:	e04e      	b.n	8005874 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	78fa      	ldrb	r2, [r7, #3]
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f008 ffc9 	bl	800e776 <USB_ReadChInterrupts>
 80057e4:	4603      	mov	r3, r0
 80057e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ee:	d11b      	bne.n	8005828 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057fc:	461a      	mov	r2, r3
 80057fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005802:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005804:	78fa      	ldrb	r2, [r7, #3]
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	334d      	adds	r3, #77	@ 0x4d
 8005814:	2209      	movs	r2, #9
 8005816:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	78fa      	ldrb	r2, [r7, #3]
 800581e:	4611      	mov	r1, r2
 8005820:	4618      	mov	r0, r3
 8005822:	f009 fe22 	bl	800f46a <USB_HC_Halt>
 8005826:	e025      	b.n	8005874 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	78fa      	ldrb	r2, [r7, #3]
 800582e:	4611      	mov	r1, r2
 8005830:	4618      	mov	r0, r3
 8005832:	f008 ffa0 	bl	800e776 <USB_ReadChInterrupts>
 8005836:	4603      	mov	r3, r0
 8005838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583c:	2b80      	cmp	r3, #128	@ 0x80
 800583e:	d119      	bne.n	8005874 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	4413      	add	r3, r2
 8005848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800584c:	461a      	mov	r2, r3
 800584e:	2380      	movs	r3, #128	@ 0x80
 8005850:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005852:	78fa      	ldrb	r2, [r7, #3]
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	1a9b      	subs	r3, r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	334d      	adds	r3, #77	@ 0x4d
 8005862:	2207      	movs	r2, #7
 8005864:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	78fa      	ldrb	r2, [r7, #3]
 800586c:	4611      	mov	r1, r2
 800586e:	4618      	mov	r0, r3
 8005870:	f009 fdfb 	bl	800f46a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	78fa      	ldrb	r2, [r7, #3]
 800587a:	4611      	mov	r1, r2
 800587c:	4618      	mov	r0, r3
 800587e:	f008 ff7a 	bl	800e776 <USB_ReadChInterrupts>
 8005882:	4603      	mov	r3, r0
 8005884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800588c:	d112      	bne.n	80058b4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	78fa      	ldrb	r2, [r7, #3]
 8005894:	4611      	mov	r1, r2
 8005896:	4618      	mov	r0, r3
 8005898:	f009 fde7 	bl	800f46a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a8:	461a      	mov	r2, r3
 80058aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058ae:	6093      	str	r3, [r2, #8]
 80058b0:	f000 bd75 	b.w	800639e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	78fa      	ldrb	r2, [r7, #3]
 80058ba:	4611      	mov	r1, r2
 80058bc:	4618      	mov	r0, r3
 80058be:	f008 ff5a 	bl	800e776 <USB_ReadChInterrupts>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	f040 8128 	bne.w	8005b1e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80058ce:	78fb      	ldrb	r3, [r7, #3]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058da:	461a      	mov	r2, r3
 80058dc:	2320      	movs	r3, #32
 80058de:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80058e0:	78fa      	ldrb	r2, [r7, #3]
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	4613      	mov	r3, r2
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	1a9b      	subs	r3, r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	440b      	add	r3, r1
 80058ee:	331b      	adds	r3, #27
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d119      	bne.n	800592a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80058f6:	78fa      	ldrb	r2, [r7, #3]
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	331b      	adds	r3, #27
 8005906:	2200      	movs	r2, #0
 8005908:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	78fa      	ldrb	r2, [r7, #3]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	440a      	add	r2, r1
 8005920:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005928:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	799b      	ldrb	r3, [r3, #6]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d01b      	beq.n	800596a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005932:	78fa      	ldrb	r2, [r7, #3]
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	3330      	adds	r3, #48	@ 0x30
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4413      	add	r3, r2
 800594c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005956:	78fa      	ldrb	r2, [r7, #3]
 8005958:	1ac9      	subs	r1, r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	4613      	mov	r3, r2
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	1a9b      	subs	r3, r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4403      	add	r3, r0
 8005966:	3338      	adds	r3, #56	@ 0x38
 8005968:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800596a:	78fa      	ldrb	r2, [r7, #3]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	1a9b      	subs	r3, r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	334d      	adds	r3, #77	@ 0x4d
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800597e:	78fa      	ldrb	r2, [r7, #3]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	3344      	adds	r3, #68	@ 0x44
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4413      	add	r3, r2
 800599a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800599e:	461a      	mov	r2, r3
 80059a0:	2301      	movs	r3, #1
 80059a2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059a4:	78fa      	ldrb	r2, [r7, #3]
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	4613      	mov	r3, r2
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	3326      	adds	r3, #38	@ 0x26
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80059ba:	78fa      	ldrb	r2, [r7, #3]
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	440b      	add	r3, r1
 80059c8:	3326      	adds	r3, #38	@ 0x26
 80059ca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d110      	bne.n	80059f2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	78fa      	ldrb	r2, [r7, #3]
 80059d6:	4611      	mov	r1, r2
 80059d8:	4618      	mov	r0, r3
 80059da:	f009 fd46 	bl	800f46a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059ea:	461a      	mov	r2, r3
 80059ec:	2310      	movs	r3, #16
 80059ee:	6093      	str	r3, [r2, #8]
 80059f0:	e03d      	b.n	8005a6e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80059f2:	78fa      	ldrb	r2, [r7, #3]
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	3326      	adds	r3, #38	@ 0x26
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d00a      	beq.n	8005a1e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005a08:	78fa      	ldrb	r2, [r7, #3]
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	3326      	adds	r3, #38	@ 0x26
 8005a18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d127      	bne.n	8005a6e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	78fa      	ldrb	r2, [r7, #3]
 8005a2e:	0151      	lsls	r1, r2, #5
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	440a      	add	r2, r1
 8005a34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a3c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005a3e:	78fa      	ldrb	r2, [r7, #3]
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	1a9b      	subs	r3, r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	334c      	adds	r3, #76	@ 0x4c
 8005a4e:	2201      	movs	r2, #1
 8005a50:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005a52:	78fa      	ldrb	r2, [r7, #3]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	1a9b      	subs	r3, r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	334c      	adds	r3, #76	@ 0x4c
 8005a62:	781a      	ldrb	r2, [r3, #0]
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f015 fa93 	bl	801af94 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	799b      	ldrb	r3, [r3, #6]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d13b      	bne.n	8005aee <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	440b      	add	r3, r1
 8005a84:	3338      	adds	r3, #56	@ 0x38
 8005a86:	6819      	ldr	r1, [r3, #0]
 8005a88:	78fa      	ldrb	r2, [r7, #3]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4403      	add	r3, r0
 8005a96:	3328      	adds	r3, #40	@ 0x28
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	440b      	add	r3, r1
 8005a9c:	1e59      	subs	r1, r3, #1
 8005a9e:	78fa      	ldrb	r2, [r7, #3]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4403      	add	r3, r0
 8005aac:	3328      	adds	r3, #40	@ 0x28
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8470 	beq.w	800639e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	440b      	add	r3, r1
 8005acc:	333c      	adds	r3, #60	@ 0x3c
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	78fa      	ldrb	r2, [r7, #3]
 8005ad2:	f083 0301 	eor.w	r3, r3, #1
 8005ad6:	b2d8      	uxtb	r0, r3
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	333c      	adds	r3, #60	@ 0x3c
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	701a      	strb	r2, [r3, #0]
 8005aea:	f000 bc58 	b.w	800639e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	333c      	adds	r3, #60	@ 0x3c
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	78fa      	ldrb	r2, [r7, #3]
 8005b02:	f083 0301 	eor.w	r3, r3, #1
 8005b06:	b2d8      	uxtb	r0, r3
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	333c      	adds	r3, #60	@ 0x3c
 8005b16:	4602      	mov	r2, r0
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	f000 bc40 	b.w	800639e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	78fa      	ldrb	r2, [r7, #3]
 8005b24:	4611      	mov	r1, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f008 fe25 	bl	800e776 <USB_ReadChInterrupts>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d131      	bne.n	8005b9a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b42:	461a      	mov	r2, r3
 8005b44:	2320      	movs	r3, #32
 8005b46:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005b48:	78fa      	ldrb	r2, [r7, #3]
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	331a      	adds	r3, #26
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	f040 841f 	bne.w	800639e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005b60:	78fa      	ldrb	r2, [r7, #3]
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	4613      	mov	r3, r2
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	1a9b      	subs	r3, r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	331b      	adds	r3, #27
 8005b70:	2201      	movs	r2, #1
 8005b72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005b74:	78fa      	ldrb	r2, [r7, #3]
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	1a9b      	subs	r3, r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	334d      	adds	r3, #77	@ 0x4d
 8005b84:	2203      	movs	r2, #3
 8005b86:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	78fa      	ldrb	r2, [r7, #3]
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f009 fc6a 	bl	800f46a <USB_HC_Halt>
 8005b96:	f000 bc02 	b.w	800639e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	78fa      	ldrb	r2, [r7, #3]
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f008 fde7 	bl	800e776 <USB_ReadChInterrupts>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	f040 8305 	bne.w	80061be <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005bc6:	78fa      	ldrb	r2, [r7, #3]
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	440b      	add	r3, r1
 8005bd4:	334d      	adds	r3, #77	@ 0x4d
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d114      	bne.n	8005c06 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005bdc:	78fa      	ldrb	r2, [r7, #3]
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	4613      	mov	r3, r2
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	334d      	adds	r3, #77	@ 0x4d
 8005bec:	2202      	movs	r2, #2
 8005bee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005bf0:	78fa      	ldrb	r2, [r7, #3]
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	334c      	adds	r3, #76	@ 0x4c
 8005c00:	2201      	movs	r2, #1
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	e2cc      	b.n	80061a0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005c06:	78fa      	ldrb	r2, [r7, #3]
 8005c08:	6879      	ldr	r1, [r7, #4]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	440b      	add	r3, r1
 8005c14:	334d      	adds	r3, #77	@ 0x4d
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b06      	cmp	r3, #6
 8005c1a:	d114      	bne.n	8005c46 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	4613      	mov	r3, r2
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	334d      	adds	r3, #77	@ 0x4d
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005c30:	78fa      	ldrb	r2, [r7, #3]
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	1a9b      	subs	r3, r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	334c      	adds	r3, #76	@ 0x4c
 8005c40:	2205      	movs	r2, #5
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	e2ac      	b.n	80061a0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005c46:	78fa      	ldrb	r2, [r7, #3]
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	1a9b      	subs	r3, r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	440b      	add	r3, r1
 8005c54:	334d      	adds	r3, #77	@ 0x4d
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b07      	cmp	r3, #7
 8005c5a:	d00b      	beq.n	8005c74 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005c5c:	78fa      	ldrb	r2, [r7, #3]
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	4613      	mov	r3, r2
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	1a9b      	subs	r3, r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	334d      	adds	r3, #77	@ 0x4d
 8005c6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005c6e:	2b09      	cmp	r3, #9
 8005c70:	f040 80a6 	bne.w	8005dc0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005c74:	78fa      	ldrb	r2, [r7, #3]
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	334d      	adds	r3, #77	@ 0x4d
 8005c84:	2202      	movs	r2, #2
 8005c86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005c88:	78fa      	ldrb	r2, [r7, #3]
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	1a9b      	subs	r3, r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	3344      	adds	r3, #68	@ 0x44
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	1c59      	adds	r1, r3, #1
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	1a9b      	subs	r3, r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4403      	add	r3, r0
 8005ca8:	3344      	adds	r3, #68	@ 0x44
 8005caa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	3344      	adds	r3, #68	@ 0x44
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d943      	bls.n	8005d4a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005cc2:	78fa      	ldrb	r2, [r7, #3]
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	3344      	adds	r3, #68	@ 0x44
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	1a9b      	subs	r3, r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	331a      	adds	r3, #26
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d123      	bne.n	8005d34 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005cec:	78fa      	ldrb	r2, [r7, #3]
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	331b      	adds	r3, #27
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005d00:	78fa      	ldrb	r2, [r7, #3]
 8005d02:	6879      	ldr	r1, [r7, #4]
 8005d04:	4613      	mov	r3, r2
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	1a9b      	subs	r3, r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	440b      	add	r3, r1
 8005d0e:	331c      	adds	r3, #28
 8005d10:	2200      	movs	r2, #0
 8005d12:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	78fa      	ldrb	r2, [r7, #3]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d32:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	334c      	adds	r3, #76	@ 0x4c
 8005d44:	2204      	movs	r2, #4
 8005d46:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005d48:	e229      	b.n	800619e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	440b      	add	r3, r1
 8005d58:	334c      	adds	r3, #76	@ 0x4c
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d5e:	78fa      	ldrb	r2, [r7, #3]
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	4613      	mov	r3, r2
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	3326      	adds	r3, #38	@ 0x26
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d74:	78fa      	ldrb	r2, [r7, #3]
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	1a9b      	subs	r3, r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	3326      	adds	r3, #38	@ 0x26
 8005d84:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	f040 8209 	bne.w	800619e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005da2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005daa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005db8:	461a      	mov	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005dbe:	e1ee      	b.n	800619e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005dc0:	78fa      	ldrb	r2, [r7, #3]
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	334d      	adds	r3, #77	@ 0x4d
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b05      	cmp	r3, #5
 8005dd4:	f040 80c8 	bne.w	8005f68 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005dd8:	78fa      	ldrb	r2, [r7, #3]
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	334d      	adds	r3, #77	@ 0x4d
 8005de8:	2202      	movs	r2, #2
 8005dea:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005dec:	78fa      	ldrb	r2, [r7, #3]
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	440b      	add	r3, r1
 8005dfa:	331b      	adds	r3, #27
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	f040 81ce 	bne.w	80061a0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	3326      	adds	r3, #38	@ 0x26
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d16b      	bne.n	8005ef2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005e1a:	78fa      	ldrb	r2, [r7, #3]
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	3348      	adds	r3, #72	@ 0x48
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	1c59      	adds	r1, r3, #1
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	4613      	mov	r3, r2
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4403      	add	r3, r0
 8005e3a:	3348      	adds	r3, #72	@ 0x48
 8005e3c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	3348      	adds	r3, #72	@ 0x48
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d943      	bls.n	8005edc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	1a9b      	subs	r3, r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	440b      	add	r3, r1
 8005e62:	3348      	adds	r3, #72	@ 0x48
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005e68:	78fa      	ldrb	r2, [r7, #3]
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	011b      	lsls	r3, r3, #4
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	331b      	adds	r3, #27
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005e7c:	78fa      	ldrb	r2, [r7, #3]
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	4613      	mov	r3, r2
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	1a9b      	subs	r3, r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	440b      	add	r3, r1
 8005e8a:	3344      	adds	r3, #68	@ 0x44
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d809      	bhi.n	8005ea6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005e92:	78fa      	ldrb	r2, [r7, #3]
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	1a9b      	subs	r3, r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	331c      	adds	r3, #28
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ec4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005ec6:	78fa      	ldrb	r2, [r7, #3]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	334c      	adds	r3, #76	@ 0x4c
 8005ed6:	2204      	movs	r2, #4
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	e014      	b.n	8005f06 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005edc:	78fa      	ldrb	r2, [r7, #3]
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	334c      	adds	r3, #76	@ 0x4c
 8005eec:	2202      	movs	r2, #2
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	e009      	b.n	8005f06 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	334c      	adds	r3, #76	@ 0x4c
 8005f02:	2202      	movs	r2, #2
 8005f04:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005f06:	78fa      	ldrb	r2, [r7, #3]
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	3326      	adds	r3, #38	@ 0x26
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00b      	beq.n	8005f34 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005f1c:	78fa      	ldrb	r2, [r7, #3]
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	4613      	mov	r3, r2
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	3326      	adds	r3, #38	@ 0x26
 8005f2c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	f040 8136 	bne.w	80061a0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f4a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f52:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f60:	461a      	mov	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	e11b      	b.n	80061a0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	1a9b      	subs	r3, r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	334d      	adds	r3, #77	@ 0x4d
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	f040 8081 	bne.w	8006082 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f80:	78fa      	ldrb	r2, [r7, #3]
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	334d      	adds	r3, #77	@ 0x4d
 8005f90:	2202      	movs	r2, #2
 8005f92:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005f94:	78fa      	ldrb	r2, [r7, #3]
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	331b      	adds	r3, #27
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	f040 80fa 	bne.w	80061a0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005fac:	78fa      	ldrb	r2, [r7, #3]
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	1a9b      	subs	r3, r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	440b      	add	r3, r1
 8005fba:	334c      	adds	r3, #76	@ 0x4c
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	78fa      	ldrb	r2, [r7, #3]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fde:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	78fa      	ldrb	r2, [r7, #3]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ffe:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4413      	add	r3, r2
 8006008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	78fa      	ldrb	r2, [r7, #3]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	440a      	add	r2, r1
 8006016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800601a:	f023 0320 	bic.w	r3, r3, #32
 800601e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006020:	78fa      	ldrb	r2, [r7, #3]
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	4613      	mov	r3, r2
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	1a9b      	subs	r3, r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	3326      	adds	r3, #38	@ 0x26
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00b      	beq.n	800604e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	1a9b      	subs	r3, r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	3326      	adds	r3, #38	@ 0x26
 8006046:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006048:	2b02      	cmp	r3, #2
 800604a:	f040 80a9 	bne.w	80061a0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006064:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800606c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800606e:	78fb      	ldrb	r3, [r7, #3]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	4413      	add	r3, r2
 8006076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800607a:	461a      	mov	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	e08e      	b.n	80061a0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	334d      	adds	r3, #77	@ 0x4d
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b04      	cmp	r3, #4
 8006096:	d143      	bne.n	8006120 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006098:	78fa      	ldrb	r2, [r7, #3]
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	334d      	adds	r3, #77	@ 0x4d
 80060a8:	2202      	movs	r2, #2
 80060aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	4613      	mov	r3, r2
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	1a9b      	subs	r3, r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	440b      	add	r3, r1
 80060ba:	334c      	adds	r3, #76	@ 0x4c
 80060bc:	2202      	movs	r2, #2
 80060be:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80060c0:	78fa      	ldrb	r2, [r7, #3]
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	4613      	mov	r3, r2
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	440b      	add	r3, r1
 80060ce:	3326      	adds	r3, #38	@ 0x26
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80060d6:	78fa      	ldrb	r2, [r7, #3]
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	3326      	adds	r3, #38	@ 0x26
 80060e6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d159      	bne.n	80061a0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006102:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800610a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4413      	add	r3, r2
 8006114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006118:	461a      	mov	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	e03f      	b.n	80061a0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	334d      	adds	r3, #77	@ 0x4d
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b08      	cmp	r3, #8
 8006134:	d126      	bne.n	8006184 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006136:	78fa      	ldrb	r2, [r7, #3]
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	4613      	mov	r3, r2
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	440b      	add	r3, r1
 8006144:	334d      	adds	r3, #77	@ 0x4d
 8006146:	2202      	movs	r2, #2
 8006148:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800614a:	78fa      	ldrb	r2, [r7, #3]
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	4613      	mov	r3, r2
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	1a9b      	subs	r3, r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	3344      	adds	r3, #68	@ 0x44
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	1c59      	adds	r1, r3, #1
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4403      	add	r3, r0
 800616a:	3344      	adds	r3, #68	@ 0x44
 800616c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800616e:	78fa      	ldrb	r2, [r7, #3]
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	440b      	add	r3, r1
 800617c:	334c      	adds	r3, #76	@ 0x4c
 800617e:	2204      	movs	r2, #4
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	e00d      	b.n	80061a0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	334d      	adds	r3, #77	@ 0x4d
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b02      	cmp	r3, #2
 8006198:	f000 8100 	beq.w	800639c <HCD_HC_IN_IRQHandler+0xcca>
 800619c:	e000      	b.n	80061a0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800619e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80061a0:	78fa      	ldrb	r2, [r7, #3]
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	334c      	adds	r3, #76	@ 0x4c
 80061b0:	781a      	ldrb	r2, [r3, #0]
 80061b2:	78fb      	ldrb	r3, [r7, #3]
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f014 feec 	bl	801af94 <HAL_HCD_HC_NotifyURBChange_Callback>
 80061bc:	e0ef      	b.n	800639e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	78fa      	ldrb	r2, [r7, #3]
 80061c4:	4611      	mov	r1, r2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f008 fad5 	bl	800e776 <USB_ReadChInterrupts>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d2:	2b40      	cmp	r3, #64	@ 0x40
 80061d4:	d12f      	bne.n	8006236 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061e2:	461a      	mov	r2, r3
 80061e4:	2340      	movs	r3, #64	@ 0x40
 80061e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80061e8:	78fa      	ldrb	r2, [r7, #3]
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	1a9b      	subs	r3, r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	334d      	adds	r3, #77	@ 0x4d
 80061f8:	2205      	movs	r2, #5
 80061fa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80061fc:	78fa      	ldrb	r2, [r7, #3]
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	331a      	adds	r3, #26
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d109      	bne.n	8006226 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006212:	78fa      	ldrb	r2, [r7, #3]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	3344      	adds	r3, #68	@ 0x44
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	78fa      	ldrb	r2, [r7, #3]
 800622c:	4611      	mov	r1, r2
 800622e:	4618      	mov	r0, r3
 8006230:	f009 f91b 	bl	800f46a <USB_HC_Halt>
 8006234:	e0b3      	b.n	800639e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	78fa      	ldrb	r2, [r7, #3]
 800623c:	4611      	mov	r1, r2
 800623e:	4618      	mov	r0, r3
 8006240:	f008 fa99 	bl	800e776 <USB_ReadChInterrupts>
 8006244:	4603      	mov	r3, r0
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b10      	cmp	r3, #16
 800624c:	f040 80a7 	bne.w	800639e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006250:	78fa      	ldrb	r2, [r7, #3]
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	3326      	adds	r3, #38	@ 0x26
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b03      	cmp	r3, #3
 8006264:	d11b      	bne.n	800629e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	3344      	adds	r3, #68	@ 0x44
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800627a:	78fa      	ldrb	r2, [r7, #3]
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	1a9b      	subs	r3, r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	334d      	adds	r3, #77	@ 0x4d
 800628a:	2204      	movs	r2, #4
 800628c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	4611      	mov	r1, r2
 8006296:	4618      	mov	r0, r3
 8006298:	f009 f8e7 	bl	800f46a <USB_HC_Halt>
 800629c:	e03f      	b.n	800631e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800629e:	78fa      	ldrb	r2, [r7, #3]
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	3326      	adds	r3, #38	@ 0x26
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80062b4:	78fa      	ldrb	r2, [r7, #3]
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	4613      	mov	r3, r2
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	3326      	adds	r3, #38	@ 0x26
 80062c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d129      	bne.n	800631e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	1a9b      	subs	r3, r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	3344      	adds	r3, #68	@ 0x44
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	799b      	ldrb	r3, [r3, #6]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <HCD_HC_IN_IRQHandler+0xc2a>
 80062e6:	78fa      	ldrb	r2, [r7, #3]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	331b      	adds	r3, #27
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d110      	bne.n	800631e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80062fc:	78fa      	ldrb	r2, [r7, #3]
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	334d      	adds	r3, #77	@ 0x4d
 800630c:	2204      	movs	r2, #4
 800630e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	4611      	mov	r1, r2
 8006318:	4618      	mov	r0, r3
 800631a:	f009 f8a6 	bl	800f46a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800631e:	78fa      	ldrb	r2, [r7, #3]
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	1a9b      	subs	r3, r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	440b      	add	r3, r1
 800632c:	331b      	adds	r3, #27
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d129      	bne.n	8006388 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006334:	78fa      	ldrb	r2, [r7, #3]
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	4613      	mov	r3, r2
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	331b      	adds	r3, #27
 8006344:	2200      	movs	r2, #0
 8006346:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	4413      	add	r3, r2
 8006350:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	78fa      	ldrb	r2, [r7, #3]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	440a      	add	r2, r1
 800635e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006366:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	4413      	add	r3, r2
 8006370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	78fa      	ldrb	r2, [r7, #3]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	440a      	add	r2, r1
 800637e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006382:	f043 0320 	orr.w	r3, r3, #32
 8006386:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	4413      	add	r3, r2
 8006390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006394:	461a      	mov	r2, r3
 8006396:	2310      	movs	r3, #16
 8006398:	6093      	str	r3, [r2, #8]
 800639a:	e000      	b.n	800639e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800639c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	4611      	mov	r1, r2
 80063c2:	4618      	mov	r0, r3
 80063c4:	f008 f9d7 	bl	800e776 <USB_ReadChInterrupts>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d11b      	bne.n	800640a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80063d2:	78fb      	ldrb	r3, [r7, #3]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063de:	461a      	mov	r2, r3
 80063e0:	2304      	movs	r3, #4
 80063e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	1a9b      	subs	r3, r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	334d      	adds	r3, #77	@ 0x4d
 80063f4:	2207      	movs	r2, #7
 80063f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	78fa      	ldrb	r2, [r7, #3]
 80063fe:	4611      	mov	r1, r2
 8006400:	4618      	mov	r0, r3
 8006402:	f009 f832 	bl	800f46a <USB_HC_Halt>
 8006406:	f000 bc89 	b.w	8006d1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	78fa      	ldrb	r2, [r7, #3]
 8006410:	4611      	mov	r1, r2
 8006412:	4618      	mov	r0, r3
 8006414:	f008 f9af 	bl	800e776 <USB_ReadChInterrupts>
 8006418:	4603      	mov	r3, r0
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b20      	cmp	r3, #32
 8006420:	f040 8082 	bne.w	8006528 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	4413      	add	r3, r2
 800642c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006430:	461a      	mov	r2, r3
 8006432:	2320      	movs	r3, #32
 8006434:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8006436:	78fa      	ldrb	r2, [r7, #3]
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	4613      	mov	r3, r2
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	1a9b      	subs	r3, r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	3319      	adds	r3, #25
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d124      	bne.n	8006496 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800644c:	78fa      	ldrb	r2, [r7, #3]
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	4613      	mov	r3, r2
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	440b      	add	r3, r1
 800645a:	3319      	adds	r3, #25
 800645c:	2200      	movs	r2, #0
 800645e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006460:	78fa      	ldrb	r2, [r7, #3]
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	4613      	mov	r3, r2
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	1a9b      	subs	r3, r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	334c      	adds	r3, #76	@ 0x4c
 8006470:	2202      	movs	r2, #2
 8006472:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006474:	78fa      	ldrb	r2, [r7, #3]
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	4613      	mov	r3, r2
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	440b      	add	r3, r1
 8006482:	334d      	adds	r3, #77	@ 0x4d
 8006484:	2203      	movs	r2, #3
 8006486:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	78fa      	ldrb	r2, [r7, #3]
 800648e:	4611      	mov	r1, r2
 8006490:	4618      	mov	r0, r3
 8006492:	f008 ffea 	bl	800f46a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	331a      	adds	r3, #26
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	f040 8437 	bne.w	8006d1c <HCD_HC_OUT_IRQHandler+0x978>
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	4613      	mov	r3, r2
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	1a9b      	subs	r3, r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	440b      	add	r3, r1
 80064bc:	331b      	adds	r3, #27
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f040 842b 	bne.w	8006d1c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80064c6:	78fa      	ldrb	r2, [r7, #3]
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	4613      	mov	r3, r2
 80064cc:	011b      	lsls	r3, r3, #4
 80064ce:	1a9b      	subs	r3, r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	440b      	add	r3, r1
 80064d4:	3326      	adds	r3, #38	@ 0x26
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d009      	beq.n	80064f0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80064dc:	78fa      	ldrb	r2, [r7, #3]
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	4613      	mov	r3, r2
 80064e2:	011b      	lsls	r3, r3, #4
 80064e4:	1a9b      	subs	r3, r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	331b      	adds	r3, #27
 80064ec:	2201      	movs	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80064f0:	78fa      	ldrb	r2, [r7, #3]
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	4613      	mov	r3, r2
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	1a9b      	subs	r3, r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	440b      	add	r3, r1
 80064fe:	334d      	adds	r3, #77	@ 0x4d
 8006500:	2203      	movs	r2, #3
 8006502:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	78fa      	ldrb	r2, [r7, #3]
 800650a:	4611      	mov	r1, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f008 ffac 	bl	800f46a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8006512:	78fa      	ldrb	r2, [r7, #3]
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	4613      	mov	r3, r2
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	440b      	add	r3, r1
 8006520:	3344      	adds	r3, #68	@ 0x44
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	e3f9      	b.n	8006d1c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	78fa      	ldrb	r2, [r7, #3]
 800652e:	4611      	mov	r1, r2
 8006530:	4618      	mov	r0, r3
 8006532:	f008 f920 	bl	800e776 <USB_ReadChInterrupts>
 8006536:	4603      	mov	r3, r0
 8006538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800653c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006540:	d111      	bne.n	8006566 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006542:	78fb      	ldrb	r3, [r7, #3]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	4413      	add	r3, r2
 800654a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800654e:	461a      	mov	r2, r3
 8006550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006554:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	78fa      	ldrb	r2, [r7, #3]
 800655c:	4611      	mov	r1, r2
 800655e:	4618      	mov	r0, r3
 8006560:	f008 ff83 	bl	800f46a <USB_HC_Halt>
 8006564:	e3da      	b.n	8006d1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	78fa      	ldrb	r2, [r7, #3]
 800656c:	4611      	mov	r1, r2
 800656e:	4618      	mov	r0, r3
 8006570:	f008 f901 	bl	800e776 <USB_ReadChInterrupts>
 8006574:	4603      	mov	r3, r0
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b01      	cmp	r3, #1
 800657c:	d168      	bne.n	8006650 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800657e:	78fa      	ldrb	r2, [r7, #3]
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	4613      	mov	r3, r2
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	3344      	adds	r3, #68	@ 0x44
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	78fa      	ldrb	r2, [r7, #3]
 8006598:	4611      	mov	r1, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f008 f8eb 	bl	800e776 <USB_ReadChInterrupts>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a6:	2b40      	cmp	r3, #64	@ 0x40
 80065a8:	d112      	bne.n	80065d0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80065aa:	78fa      	ldrb	r2, [r7, #3]
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	3319      	adds	r3, #25
 80065ba:	2201      	movs	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80065be:	78fb      	ldrb	r3, [r7, #3]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ca:	461a      	mov	r2, r3
 80065cc:	2340      	movs	r3, #64	@ 0x40
 80065ce:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	4613      	mov	r3, r2
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	1a9b      	subs	r3, r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	331b      	adds	r3, #27
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d019      	beq.n	800661a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80065e6:	78fa      	ldrb	r2, [r7, #3]
 80065e8:	6879      	ldr	r1, [r7, #4]
 80065ea:	4613      	mov	r3, r2
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	1a9b      	subs	r3, r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	440b      	add	r3, r1
 80065f4:	331b      	adds	r3, #27
 80065f6:	2200      	movs	r2, #0
 80065f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4413      	add	r3, r2
 8006602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	78fa      	ldrb	r2, [r7, #3]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	440a      	add	r2, r1
 8006610:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006614:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006618:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	4413      	add	r3, r2
 8006622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006626:	461a      	mov	r2, r3
 8006628:	2301      	movs	r3, #1
 800662a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800662c:	78fa      	ldrb	r2, [r7, #3]
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	4613      	mov	r3, r2
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	1a9b      	subs	r3, r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	440b      	add	r3, r1
 800663a:	334d      	adds	r3, #77	@ 0x4d
 800663c:	2201      	movs	r2, #1
 800663e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	78fa      	ldrb	r2, [r7, #3]
 8006646:	4611      	mov	r1, r2
 8006648:	4618      	mov	r0, r3
 800664a:	f008 ff0e 	bl	800f46a <USB_HC_Halt>
 800664e:	e365      	b.n	8006d1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	78fa      	ldrb	r2, [r7, #3]
 8006656:	4611      	mov	r1, r2
 8006658:	4618      	mov	r0, r3
 800665a:	f008 f88c 	bl	800e776 <USB_ReadChInterrupts>
 800665e:	4603      	mov	r3, r0
 8006660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006664:	2b40      	cmp	r3, #64	@ 0x40
 8006666:	d139      	bne.n	80066dc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8006668:	78fa      	ldrb	r2, [r7, #3]
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	4613      	mov	r3, r2
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	1a9b      	subs	r3, r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	440b      	add	r3, r1
 8006676:	334d      	adds	r3, #77	@ 0x4d
 8006678:	2205      	movs	r2, #5
 800667a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800667c:	78fa      	ldrb	r2, [r7, #3]
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	331a      	adds	r3, #26
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d109      	bne.n	80066a6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006692:	78fa      	ldrb	r2, [r7, #3]
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	4613      	mov	r3, r2
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	1a9b      	subs	r3, r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	440b      	add	r3, r1
 80066a0:	3319      	adds	r3, #25
 80066a2:	2201      	movs	r2, #1
 80066a4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80066a6:	78fa      	ldrb	r2, [r7, #3]
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	1a9b      	subs	r3, r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	440b      	add	r3, r1
 80066b4:	3344      	adds	r3, #68	@ 0x44
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	78fa      	ldrb	r2, [r7, #3]
 80066c0:	4611      	mov	r1, r2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f008 fed1 	bl	800f46a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d4:	461a      	mov	r2, r3
 80066d6:	2340      	movs	r3, #64	@ 0x40
 80066d8:	6093      	str	r3, [r2, #8]
 80066da:	e31f      	b.n	8006d1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	78fa      	ldrb	r2, [r7, #3]
 80066e2:	4611      	mov	r1, r2
 80066e4:	4618      	mov	r0, r3
 80066e6:	f008 f846 	bl	800e776 <USB_ReadChInterrupts>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f003 0308 	and.w	r3, r3, #8
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d11a      	bne.n	800672a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006700:	461a      	mov	r2, r3
 8006702:	2308      	movs	r3, #8
 8006704:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006706:	78fa      	ldrb	r2, [r7, #3]
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	4613      	mov	r3, r2
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	1a9b      	subs	r3, r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	440b      	add	r3, r1
 8006714:	334d      	adds	r3, #77	@ 0x4d
 8006716:	2206      	movs	r2, #6
 8006718:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	4611      	mov	r1, r2
 8006722:	4618      	mov	r0, r3
 8006724:	f008 fea1 	bl	800f46a <USB_HC_Halt>
 8006728:	e2f8      	b.n	8006d1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	78fa      	ldrb	r2, [r7, #3]
 8006730:	4611      	mov	r1, r2
 8006732:	4618      	mov	r0, r3
 8006734:	f008 f81f 	bl	800e776 <USB_ReadChInterrupts>
 8006738:	4603      	mov	r3, r0
 800673a:	f003 0310 	and.w	r3, r3, #16
 800673e:	2b10      	cmp	r3, #16
 8006740:	d144      	bne.n	80067cc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	440b      	add	r3, r1
 8006750:	3344      	adds	r3, #68	@ 0x44
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006756:	78fa      	ldrb	r2, [r7, #3]
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	334d      	adds	r3, #77	@ 0x4d
 8006766:	2204      	movs	r2, #4
 8006768:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800676a:	78fa      	ldrb	r2, [r7, #3]
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	3319      	adds	r3, #25
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d114      	bne.n	80067aa <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006780:	78fa      	ldrb	r2, [r7, #3]
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	4613      	mov	r3, r2
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	3318      	adds	r3, #24
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	3319      	adds	r3, #25
 80067a6:	2201      	movs	r2, #1
 80067a8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	4611      	mov	r1, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f008 fe59 	bl	800f46a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80067b8:	78fb      	ldrb	r3, [r7, #3]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c4:	461a      	mov	r2, r3
 80067c6:	2310      	movs	r3, #16
 80067c8:	6093      	str	r3, [r2, #8]
 80067ca:	e2a7      	b.n	8006d1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	78fa      	ldrb	r2, [r7, #3]
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f007 ffce 	bl	800e776 <USB_ReadChInterrupts>
 80067da:	4603      	mov	r3, r0
 80067dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e0:	2b80      	cmp	r3, #128	@ 0x80
 80067e2:	f040 8083 	bne.w	80068ec <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	799b      	ldrb	r3, [r3, #6]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d111      	bne.n	8006812 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80067ee:	78fa      	ldrb	r2, [r7, #3]
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	334d      	adds	r3, #77	@ 0x4d
 80067fe:	2207      	movs	r2, #7
 8006800:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	78fa      	ldrb	r2, [r7, #3]
 8006808:	4611      	mov	r1, r2
 800680a:	4618      	mov	r0, r3
 800680c:	f008 fe2d 	bl	800f46a <USB_HC_Halt>
 8006810:	e062      	b.n	80068d8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006812:	78fa      	ldrb	r2, [r7, #3]
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	3344      	adds	r3, #68	@ 0x44
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	1c59      	adds	r1, r3, #1
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	4613      	mov	r3, r2
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4403      	add	r3, r0
 8006832:	3344      	adds	r3, #68	@ 0x44
 8006834:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006836:	78fa      	ldrb	r2, [r7, #3]
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	4613      	mov	r3, r2
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	1a9b      	subs	r3, r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	440b      	add	r3, r1
 8006844:	3344      	adds	r3, #68	@ 0x44
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d922      	bls.n	8006892 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4613      	mov	r3, r2
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	1a9b      	subs	r3, r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	3344      	adds	r3, #68	@ 0x44
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006860:	78fa      	ldrb	r2, [r7, #3]
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	4613      	mov	r3, r2
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	1a9b      	subs	r3, r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	334c      	adds	r3, #76	@ 0x4c
 8006870:	2204      	movs	r2, #4
 8006872:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006874:	78fa      	ldrb	r2, [r7, #3]
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4613      	mov	r3, r2
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	440b      	add	r3, r1
 8006882:	334c      	adds	r3, #76	@ 0x4c
 8006884:	781a      	ldrb	r2, [r3, #0]
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f014 fb82 	bl	801af94 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006890:	e022      	b.n	80068d8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	1a9b      	subs	r3, r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	334c      	adds	r3, #76	@ 0x4c
 80068a2:	2202      	movs	r2, #2
 80068a4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068bc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068c4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80068c6:	78fb      	ldrb	r3, [r7, #3]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068d2:	461a      	mov	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e4:	461a      	mov	r2, r3
 80068e6:	2380      	movs	r3, #128	@ 0x80
 80068e8:	6093      	str	r3, [r2, #8]
 80068ea:	e217      	b.n	8006d1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	78fa      	ldrb	r2, [r7, #3]
 80068f2:	4611      	mov	r1, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f007 ff3e 	bl	800e776 <USB_ReadChInterrupts>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006904:	d11b      	bne.n	800693e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006906:	78fa      	ldrb	r2, [r7, #3]
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	1a9b      	subs	r3, r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	440b      	add	r3, r1
 8006914:	334d      	adds	r3, #77	@ 0x4d
 8006916:	2209      	movs	r2, #9
 8006918:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	78fa      	ldrb	r2, [r7, #3]
 8006920:	4611      	mov	r1, r2
 8006922:	4618      	mov	r0, r3
 8006924:	f008 fda1 	bl	800f46a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	4413      	add	r3, r2
 8006930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006934:	461a      	mov	r2, r3
 8006936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800693a:	6093      	str	r3, [r2, #8]
 800693c:	e1ee      	b.n	8006d1c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	78fa      	ldrb	r2, [r7, #3]
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f007 ff15 	bl	800e776 <USB_ReadChInterrupts>
 800694c:	4603      	mov	r3, r0
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b02      	cmp	r3, #2
 8006954:	f040 81df 	bne.w	8006d16 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	4413      	add	r3, r2
 8006960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006964:	461a      	mov	r2, r3
 8006966:	2302      	movs	r3, #2
 8006968:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800696a:	78fa      	ldrb	r2, [r7, #3]
 800696c:	6879      	ldr	r1, [r7, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	1a9b      	subs	r3, r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	440b      	add	r3, r1
 8006978:	334d      	adds	r3, #77	@ 0x4d
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b01      	cmp	r3, #1
 800697e:	f040 8093 	bne.w	8006aa8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006982:	78fa      	ldrb	r2, [r7, #3]
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	4613      	mov	r3, r2
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	1a9b      	subs	r3, r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	440b      	add	r3, r1
 8006990:	334d      	adds	r3, #77	@ 0x4d
 8006992:	2202      	movs	r2, #2
 8006994:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006996:	78fa      	ldrb	r2, [r7, #3]
 8006998:	6879      	ldr	r1, [r7, #4]
 800699a:	4613      	mov	r3, r2
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	440b      	add	r3, r1
 80069a4:	334c      	adds	r3, #76	@ 0x4c
 80069a6:	2201      	movs	r2, #1
 80069a8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80069aa:	78fa      	ldrb	r2, [r7, #3]
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	4613      	mov	r3, r2
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	440b      	add	r3, r1
 80069b8:	3326      	adds	r3, #38	@ 0x26
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d00b      	beq.n	80069d8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80069c0:	78fa      	ldrb	r2, [r7, #3]
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	1a9b      	subs	r3, r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	3326      	adds	r3, #38	@ 0x26
 80069d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	f040 8190 	bne.w	8006cf8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	799b      	ldrb	r3, [r3, #6]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d115      	bne.n	8006a0c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	333d      	adds	r3, #61	@ 0x3d
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	78fa      	ldrb	r2, [r7, #3]
 80069f4:	f083 0301 	eor.w	r3, r3, #1
 80069f8:	b2d8      	uxtb	r0, r3
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	4613      	mov	r3, r2
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	1a9b      	subs	r3, r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	440b      	add	r3, r1
 8006a06:	333d      	adds	r3, #61	@ 0x3d
 8006a08:	4602      	mov	r2, r0
 8006a0a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	799b      	ldrb	r3, [r3, #6]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	f040 8171 	bne.w	8006cf8 <HCD_HC_OUT_IRQHandler+0x954>
 8006a16:	78fa      	ldrb	r2, [r7, #3]
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	011b      	lsls	r3, r3, #4
 8006a1e:	1a9b      	subs	r3, r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	440b      	add	r3, r1
 8006a24:	3334      	adds	r3, #52	@ 0x34
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8165 	beq.w	8006cf8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006a2e:	78fa      	ldrb	r2, [r7, #3]
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	3334      	adds	r3, #52	@ 0x34
 8006a3e:	6819      	ldr	r1, [r3, #0]
 8006a40:	78fa      	ldrb	r2, [r7, #3]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	4613      	mov	r3, r2
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	1a9b      	subs	r3, r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4403      	add	r3, r0
 8006a4e:	3328      	adds	r3, #40	@ 0x28
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	440b      	add	r3, r1
 8006a54:	1e59      	subs	r1, r3, #1
 8006a56:	78fa      	ldrb	r2, [r7, #3]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	1a9b      	subs	r3, r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4403      	add	r3, r0
 8006a64:	3328      	adds	r3, #40	@ 0x28
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a6c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 813f 	beq.w	8006cf8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006a7a:	78fa      	ldrb	r2, [r7, #3]
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	440b      	add	r3, r1
 8006a88:	333d      	adds	r3, #61	@ 0x3d
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	78fa      	ldrb	r2, [r7, #3]
 8006a8e:	f083 0301 	eor.w	r3, r3, #1
 8006a92:	b2d8      	uxtb	r0, r3
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	011b      	lsls	r3, r3, #4
 8006a9a:	1a9b      	subs	r3, r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	333d      	adds	r3, #61	@ 0x3d
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e127      	b.n	8006cf8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006aa8:	78fa      	ldrb	r2, [r7, #3]
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4613      	mov	r3, r2
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	1a9b      	subs	r3, r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	440b      	add	r3, r1
 8006ab6:	334d      	adds	r3, #77	@ 0x4d
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d120      	bne.n	8006b00 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006abe:	78fa      	ldrb	r2, [r7, #3]
 8006ac0:	6879      	ldr	r1, [r7, #4]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	1a9b      	subs	r3, r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	440b      	add	r3, r1
 8006acc:	334d      	adds	r3, #77	@ 0x4d
 8006ace:	2202      	movs	r2, #2
 8006ad0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006ad2:	78fa      	ldrb	r2, [r7, #3]
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	440b      	add	r3, r1
 8006ae0:	331b      	adds	r3, #27
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	f040 8107 	bne.w	8006cf8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006aea:	78fa      	ldrb	r2, [r7, #3]
 8006aec:	6879      	ldr	r1, [r7, #4]
 8006aee:	4613      	mov	r3, r2
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	1a9b      	subs	r3, r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	440b      	add	r3, r1
 8006af8:	334c      	adds	r3, #76	@ 0x4c
 8006afa:	2202      	movs	r2, #2
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	e0fb      	b.n	8006cf8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006b00:	78fa      	ldrb	r2, [r7, #3]
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	4613      	mov	r3, r2
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	1a9b      	subs	r3, r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	334d      	adds	r3, #77	@ 0x4d
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d13a      	bne.n	8006b8c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006b16:	78fa      	ldrb	r2, [r7, #3]
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	1a9b      	subs	r3, r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	440b      	add	r3, r1
 8006b24:	334d      	adds	r3, #77	@ 0x4d
 8006b26:	2202      	movs	r2, #2
 8006b28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006b2a:	78fa      	ldrb	r2, [r7, #3]
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	1a9b      	subs	r3, r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	334c      	adds	r3, #76	@ 0x4c
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006b3e:	78fa      	ldrb	r2, [r7, #3]
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	1a9b      	subs	r3, r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	331b      	adds	r3, #27
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	f040 80d1 	bne.w	8006cf8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006b56:	78fa      	ldrb	r2, [r7, #3]
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	440b      	add	r3, r1
 8006b64:	331b      	adds	r3, #27
 8006b66:	2200      	movs	r2, #0
 8006b68:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	78fa      	ldrb	r2, [r7, #3]
 8006b7a:	0151      	lsls	r1, r2, #5
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	440a      	add	r2, r1
 8006b80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b88:	6053      	str	r3, [r2, #4]
 8006b8a:	e0b5      	b.n	8006cf8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006b8c:	78fa      	ldrb	r2, [r7, #3]
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	4613      	mov	r3, r2
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	440b      	add	r3, r1
 8006b9a:	334d      	adds	r3, #77	@ 0x4d
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b05      	cmp	r3, #5
 8006ba0:	d114      	bne.n	8006bcc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006ba2:	78fa      	ldrb	r2, [r7, #3]
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	1a9b      	subs	r3, r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	440b      	add	r3, r1
 8006bb0:	334d      	adds	r3, #77	@ 0x4d
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006bb6:	78fa      	ldrb	r2, [r7, #3]
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	1a9b      	subs	r3, r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	334c      	adds	r3, #76	@ 0x4c
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	e095      	b.n	8006cf8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006bcc:	78fa      	ldrb	r2, [r7, #3]
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	334d      	adds	r3, #77	@ 0x4d
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b06      	cmp	r3, #6
 8006be0:	d114      	bne.n	8006c0c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	1a9b      	subs	r3, r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	440b      	add	r3, r1
 8006bf0:	334d      	adds	r3, #77	@ 0x4d
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006bf6:	78fa      	ldrb	r2, [r7, #3]
 8006bf8:	6879      	ldr	r1, [r7, #4]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	1a9b      	subs	r3, r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	440b      	add	r3, r1
 8006c04:	334c      	adds	r3, #76	@ 0x4c
 8006c06:	2205      	movs	r2, #5
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	e075      	b.n	8006cf8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006c0c:	78fa      	ldrb	r2, [r7, #3]
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	4613      	mov	r3, r2
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	1a9b      	subs	r3, r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	440b      	add	r3, r1
 8006c1a:	334d      	adds	r3, #77	@ 0x4d
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b07      	cmp	r3, #7
 8006c20:	d00a      	beq.n	8006c38 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006c22:	78fa      	ldrb	r2, [r7, #3]
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	4613      	mov	r3, r2
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	1a9b      	subs	r3, r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	440b      	add	r3, r1
 8006c30:	334d      	adds	r3, #77	@ 0x4d
 8006c32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006c34:	2b09      	cmp	r3, #9
 8006c36:	d170      	bne.n	8006d1a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006c38:	78fa      	ldrb	r2, [r7, #3]
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	1a9b      	subs	r3, r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	440b      	add	r3, r1
 8006c46:	334d      	adds	r3, #77	@ 0x4d
 8006c48:	2202      	movs	r2, #2
 8006c4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006c4c:	78fa      	ldrb	r2, [r7, #3]
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	4613      	mov	r3, r2
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	440b      	add	r3, r1
 8006c5a:	3344      	adds	r3, #68	@ 0x44
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	1c59      	adds	r1, r3, #1
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	1a9b      	subs	r3, r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4403      	add	r3, r0
 8006c6c:	3344      	adds	r3, #68	@ 0x44
 8006c6e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006c70:	78fa      	ldrb	r2, [r7, #3]
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	1a9b      	subs	r3, r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	3344      	adds	r3, #68	@ 0x44
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d914      	bls.n	8006cb0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006c86:	78fa      	ldrb	r2, [r7, #3]
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	1a9b      	subs	r3, r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	440b      	add	r3, r1
 8006c94:	3344      	adds	r3, #68	@ 0x44
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006c9a:	78fa      	ldrb	r2, [r7, #3]
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	334c      	adds	r3, #76	@ 0x4c
 8006caa:	2204      	movs	r2, #4
 8006cac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006cae:	e022      	b.n	8006cf6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006cb0:	78fa      	ldrb	r2, [r7, #3]
 8006cb2:	6879      	ldr	r1, [r7, #4]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	1a9b      	subs	r3, r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	334c      	adds	r3, #76	@ 0x4c
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006cc4:	78fb      	ldrb	r3, [r7, #3]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006cda:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ce2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006ce4:	78fb      	ldrb	r3, [r7, #3]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006cf6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006cf8:	78fa      	ldrb	r2, [r7, #3]
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	1a9b      	subs	r3, r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	440b      	add	r3, r1
 8006d06:	334c      	adds	r3, #76	@ 0x4c
 8006d08:	781a      	ldrb	r2, [r3, #0]
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f014 f940 	bl	801af94 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006d14:	e002      	b.n	8006d1c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006d16:	bf00      	nop
 8006d18:	e000      	b.n	8006d1c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8006d1a:	bf00      	nop
  }
}
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b08a      	sub	sp, #40	@ 0x28
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d32:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	0c5b      	lsrs	r3, r3, #17
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	091b      	lsrs	r3, r3, #4
 8006d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d56:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d004      	beq.n	8006d68 <HCD_RXQLVL_IRQHandler+0x46>
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b05      	cmp	r3, #5
 8006d62:	f000 80b6 	beq.w	8006ed2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006d66:	e0b7      	b.n	8006ed8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 80b3 	beq.w	8006ed6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	4613      	mov	r3, r2
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	1a9b      	subs	r3, r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	440b      	add	r3, r1
 8006d7e:	332c      	adds	r3, #44	@ 0x2c
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 80a7 	beq.w	8006ed6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	1a9b      	subs	r3, r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	3338      	adds	r3, #56	@ 0x38
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	18d1      	adds	r1, r2, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	4613      	mov	r3, r2
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	1a9b      	subs	r3, r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4403      	add	r3, r0
 8006dac:	3334      	adds	r3, #52	@ 0x34
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4299      	cmp	r1, r3
 8006db2:	f200 8083 	bhi.w	8006ebc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	1a9b      	subs	r3, r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	332c      	adds	r3, #44	@ 0x2c
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	b292      	uxth	r2, r2
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	f007 fb29 	bl	800e428 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	1a9b      	subs	r3, r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	440b      	add	r3, r1
 8006de4:	332c      	adds	r3, #44	@ 0x2c
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	18d1      	adds	r1, r2, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	4613      	mov	r3, r2
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4403      	add	r3, r0
 8006dfa:	332c      	adds	r3, #44	@ 0x2c
 8006dfc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	4613      	mov	r3, r2
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	1a9b      	subs	r3, r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	440b      	add	r3, r1
 8006e0c:	3338      	adds	r3, #56	@ 0x38
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	18d1      	adds	r1, r2, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	1a9b      	subs	r3, r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4403      	add	r3, r0
 8006e22:	3338      	adds	r3, #56	@ 0x38
 8006e24:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	0cdb      	lsrs	r3, r3, #19
 8006e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e3a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006e3c:	6879      	ldr	r1, [r7, #4]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	4613      	mov	r3, r2
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	3328      	adds	r3, #40	@ 0x28
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d13f      	bne.n	8006ed6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d03c      	beq.n	8006ed6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e72:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e7a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e88:	461a      	mov	r2, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	4613      	mov	r3, r2
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	1a9b      	subs	r3, r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	333c      	adds	r3, #60	@ 0x3c
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f083 0301 	eor.w	r3, r3, #1
 8006ea4:	b2d8      	uxtb	r0, r3
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	1a9b      	subs	r3, r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	440b      	add	r3, r1
 8006eb4:	333c      	adds	r3, #60	@ 0x3c
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	701a      	strb	r2, [r3, #0]
      break;
 8006eba:	e00c      	b.n	8006ed6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	334c      	adds	r3, #76	@ 0x4c
 8006ecc:	2204      	movs	r2, #4
 8006ece:	701a      	strb	r2, [r3, #0]
      break;
 8006ed0:	e001      	b.n	8006ed6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006ed2:	bf00      	nop
 8006ed4:	e000      	b.n	8006ed8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006ed6:	bf00      	nop
  }
}
 8006ed8:	bf00      	nop
 8006eda:	3728      	adds	r7, #40	@ 0x28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006f0c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d10b      	bne.n	8006f30 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d102      	bne.n	8006f28 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f014 f81a 	bl	801af5c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f043 0302 	orr.w	r3, r3, #2
 8006f2e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 0308 	and.w	r3, r3, #8
 8006f36:	2b08      	cmp	r3, #8
 8006f38:	d132      	bne.n	8006fa0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f043 0308 	orr.w	r3, r3, #8
 8006f40:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d126      	bne.n	8006f9a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	7a5b      	ldrb	r3, [r3, #9]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d113      	bne.n	8006f7c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006f5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f5e:	d106      	bne.n	8006f6e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2102      	movs	r1, #2
 8006f66:	4618      	mov	r0, r3
 8006f68:	f007 fe12 	bl	800eb90 <USB_InitFSLSPClkSel>
 8006f6c:	e011      	b.n	8006f92 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2101      	movs	r1, #1
 8006f74:	4618      	mov	r0, r3
 8006f76:	f007 fe0b 	bl	800eb90 <USB_InitFSLSPClkSel>
 8006f7a:	e00a      	b.n	8006f92 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	79db      	ldrb	r3, [r3, #7]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d106      	bne.n	8006f92 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006f90:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f014 f80c 	bl	801afb0 <HAL_HCD_PortEnabled_Callback>
 8006f98:	e002      	b.n	8006fa0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f014 f816 	bl	801afcc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d103      	bne.n	8006fb2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f043 0320 	orr.w	r3, r3, #32
 8006fb0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006fb8:	461a      	mov	r2, r3
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	6013      	str	r3, [r2, #0]
}
 8006fbe:	bf00      	nop
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af02      	add	r7, sp, #8
 8006fcc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e0fe      	b.n	80071d6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d106      	bne.n	8006ff2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f013 fbb9 	bl	801a764 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2203      	movs	r2, #3
 8006ff6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f006 fac9 	bl	800d596 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	7c1a      	ldrb	r2, [r3, #16]
 800700c:	f88d 2000 	strb.w	r2, [sp]
 8007010:	3304      	adds	r3, #4
 8007012:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007014:	f006 f99a 	bl	800d34c <USB_CoreInit>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d005      	beq.n	800702a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e0d5      	b.n	80071d6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2100      	movs	r1, #0
 8007030:	4618      	mov	r0, r3
 8007032:	f006 fac1 	bl	800d5b8 <USB_SetCurrentMode>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d005      	beq.n	8007048 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e0c6      	b.n	80071d6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]
 800704c:	e04a      	b.n	80070e4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800704e:	7bfa      	ldrb	r2, [r7, #15]
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	4613      	mov	r3, r2
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	3315      	adds	r3, #21
 800705e:	2201      	movs	r2, #1
 8007060:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007062:	7bfa      	ldrb	r2, [r7, #15]
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	4613      	mov	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	440b      	add	r3, r1
 8007070:	3314      	adds	r3, #20
 8007072:	7bfa      	ldrb	r2, [r7, #15]
 8007074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007076:	7bfa      	ldrb	r2, [r7, #15]
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	b298      	uxth	r0, r3
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	4613      	mov	r3, r2
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	440b      	add	r3, r1
 8007088:	332e      	adds	r3, #46	@ 0x2e
 800708a:	4602      	mov	r2, r0
 800708c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800708e:	7bfa      	ldrb	r2, [r7, #15]
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	4613      	mov	r3, r2
 8007094:	00db      	lsls	r3, r3, #3
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	440b      	add	r3, r1
 800709c:	3318      	adds	r3, #24
 800709e:	2200      	movs	r2, #0
 80070a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80070a2:	7bfa      	ldrb	r2, [r7, #15]
 80070a4:	6879      	ldr	r1, [r7, #4]
 80070a6:	4613      	mov	r3, r2
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	331c      	adds	r3, #28
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80070b6:	7bfa      	ldrb	r2, [r7, #15]
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	4613      	mov	r3, r2
 80070bc:	00db      	lsls	r3, r3, #3
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	440b      	add	r3, r1
 80070c4:	3320      	adds	r3, #32
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80070ca:	7bfa      	ldrb	r2, [r7, #15]
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	3324      	adds	r3, #36	@ 0x24
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	3301      	adds	r3, #1
 80070e2:	73fb      	strb	r3, [r7, #15]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	791b      	ldrb	r3, [r3, #4]
 80070e8:	7bfa      	ldrb	r2, [r7, #15]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d3af      	bcc.n	800704e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070ee:	2300      	movs	r3, #0
 80070f0:	73fb      	strb	r3, [r7, #15]
 80070f2:	e044      	b.n	800717e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80070f4:	7bfa      	ldrb	r2, [r7, #15]
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	4613      	mov	r3, r2
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	440b      	add	r3, r1
 8007102:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800710a:	7bfa      	ldrb	r2, [r7, #15]
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	4613      	mov	r3, r2
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	4413      	add	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	440b      	add	r3, r1
 8007118:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800711c:	7bfa      	ldrb	r2, [r7, #15]
 800711e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007120:	7bfa      	ldrb	r2, [r7, #15]
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	4613      	mov	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007132:	2200      	movs	r2, #0
 8007134:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007136:	7bfa      	ldrb	r2, [r7, #15]
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	4613      	mov	r3, r2
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	440b      	add	r3, r1
 8007144:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800714c:	7bfa      	ldrb	r2, [r7, #15]
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	4613      	mov	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	440b      	add	r3, r1
 800715a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007162:	7bfa      	ldrb	r2, [r7, #15]
 8007164:	6879      	ldr	r1, [r7, #4]
 8007166:	4613      	mov	r3, r2
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	440b      	add	r3, r1
 8007170:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	3301      	adds	r3, #1
 800717c:	73fb      	strb	r3, [r7, #15]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	791b      	ldrb	r3, [r3, #4]
 8007182:	7bfa      	ldrb	r2, [r7, #15]
 8007184:	429a      	cmp	r2, r3
 8007186:	d3b5      	bcc.n	80070f4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7c1a      	ldrb	r2, [r3, #16]
 8007190:	f88d 2000 	strb.w	r2, [sp]
 8007194:	3304      	adds	r3, #4
 8007196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007198:	f006 fa5a 	bl	800d650 <USB_DevInit>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e013      	b.n	80071d6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	7b1b      	ldrb	r3, [r3, #12]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d102      	bne.n	80071ca <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 f957 	bl	8008478 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f007 fa9d 	bl	800e70e <USB_DevDisconnect>

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <HAL_PCD_Start+0x1c>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e022      	b.n	8007240 <HAL_PCD_Start+0x62>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007212:	2b01      	cmp	r3, #1
 8007214:	d105      	bne.n	8007222 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f006 f9a4 	bl	800d574 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4618      	mov	r0, r3
 8007232:	f007 fa4b 	bl	800e6cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007248:	b590      	push	{r4, r7, lr}
 800724a:	b08d      	sub	sp, #52	@ 0x34
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4618      	mov	r0, r3
 8007260:	f007 fb2a 	bl	800e8b8 <USB_GetMode>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	f040 84b9 	bne.w	8007bde <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4618      	mov	r0, r3
 8007272:	f007 fa6d 	bl	800e750 <USB_ReadInterrupts>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 84af 	beq.w	8007bdc <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	0a1b      	lsrs	r3, r3, #8
 8007288:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f007 fa5a 	bl	800e750 <USB_ReadInterrupts>
 800729c:	4603      	mov	r3, r0
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d107      	bne.n	80072b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695a      	ldr	r2, [r3, #20]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f002 0202 	and.w	r2, r2, #2
 80072b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f007 fa48 	bl	800e750 <USB_ReadInterrupts>
 80072c0:	4603      	mov	r3, r0
 80072c2:	f003 0310 	and.w	r3, r3, #16
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d161      	bne.n	800738e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	699a      	ldr	r2, [r3, #24]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0210 	bic.w	r2, r2, #16
 80072d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	f003 020f 	and.w	r2, r3, #15
 80072e6:	4613      	mov	r3, r2
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	4413      	add	r3, r2
 80072f6:	3304      	adds	r3, #4
 80072f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007300:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007304:	d124      	bne.n	8007350 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800730c:	4013      	ands	r3, r2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d035      	beq.n	800737e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	091b      	lsrs	r3, r3, #4
 800731a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800731c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007320:	b29b      	uxth	r3, r3
 8007322:	461a      	mov	r2, r3
 8007324:	6a38      	ldr	r0, [r7, #32]
 8007326:	f007 f87f 	bl	800e428 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	091b      	lsrs	r3, r3, #4
 8007332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007336:	441a      	add	r2, r3
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	695a      	ldr	r2, [r3, #20]
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	091b      	lsrs	r3, r3, #4
 8007344:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007348:	441a      	add	r2, r3
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	615a      	str	r2, [r3, #20]
 800734e:	e016      	b.n	800737e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007356:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800735a:	d110      	bne.n	800737e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007362:	2208      	movs	r2, #8
 8007364:	4619      	mov	r1, r3
 8007366:	6a38      	ldr	r0, [r7, #32]
 8007368:	f007 f85e 	bl	800e428 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	695a      	ldr	r2, [r3, #20]
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	091b      	lsrs	r3, r3, #4
 8007374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007378:	441a      	add	r2, r3
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699a      	ldr	r2, [r3, #24]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f042 0210 	orr.w	r2, r2, #16
 800738c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f007 f9dc 	bl	800e750 <USB_ReadInterrupts>
 8007398:	4603      	mov	r3, r0
 800739a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800739e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80073a2:	f040 80a7 	bne.w	80074f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f007 fa02 	bl	800e7b8 <USB_ReadDevAllOutEpInterrupt>
 80073b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80073b6:	e099      	b.n	80074ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80073b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 808e 	beq.w	80074e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	4611      	mov	r1, r2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f007 fa26 	bl	800e820 <USB_ReadDevOutEPInterrupt>
 80073d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00c      	beq.n	80073fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ec:	461a      	mov	r2, r3
 80073ee:	2301      	movs	r3, #1
 80073f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80073f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 feb9 	bl	800816c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00c      	beq.n	800741e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007410:	461a      	mov	r2, r3
 8007412:	2308      	movs	r3, #8
 8007414:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007416:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 ff8f 	bl	800833c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	2b00      	cmp	r3, #0
 8007426:	d008      	beq.n	800743a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007434:	461a      	mov	r2, r3
 8007436:	2310      	movs	r3, #16
 8007438:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d030      	beq.n	80074a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744c:	2b80      	cmp	r3, #128	@ 0x80
 800744e:	d109      	bne.n	8007464 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	69fa      	ldr	r2, [r7, #28]
 800745a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800745e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007462:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007466:	4613      	mov	r3, r2
 8007468:	00db      	lsls	r3, r3, #3
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	4413      	add	r3, r2
 8007476:	3304      	adds	r3, #4
 8007478:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	78db      	ldrb	r3, [r3, #3]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d108      	bne.n	8007494 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2200      	movs	r2, #0
 8007486:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748a:	b2db      	uxtb	r3, r3
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f013 fa6e 	bl	801a970 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074a0:	461a      	mov	r2, r3
 80074a2:	2302      	movs	r3, #2
 80074a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80074b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074bc:	461a      	mov	r2, r3
 80074be:	2320      	movs	r3, #32
 80074c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d009      	beq.n	80074e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80074cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d8:	461a      	mov	r2, r3
 80074da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80074de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80074e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e2:	3301      	adds	r3, #1
 80074e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80074e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e8:	085b      	lsrs	r3, r3, #1
 80074ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80074ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f47f af62 	bne.w	80073b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f007 f929 	bl	800e750 <USB_ReadInterrupts>
 80074fe:	4603      	mov	r3, r0
 8007500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007504:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007508:	f040 80db 	bne.w	80076c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4618      	mov	r0, r3
 8007512:	f007 f96b 	bl	800e7ec <USB_ReadDevAllInEpInterrupt>
 8007516:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800751c:	e0cd      	b.n	80076ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800751e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 80c2 	beq.w	80076ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	4611      	mov	r1, r2
 8007534:	4618      	mov	r0, r3
 8007536:	f007 f991 	bl	800e85c <USB_ReadDevInEPInterrupt>
 800753a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d057      	beq.n	80075f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	f003 030f 	and.w	r3, r3, #15
 800754c:	2201      	movs	r2, #1
 800754e:	fa02 f303 	lsl.w	r3, r2, r3
 8007552:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800755a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	43db      	mvns	r3, r3
 8007560:	69f9      	ldr	r1, [r7, #28]
 8007562:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007566:	4013      	ands	r3, r2
 8007568:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007576:	461a      	mov	r2, r3
 8007578:	2301      	movs	r3, #1
 800757a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	799b      	ldrb	r3, [r3, #6]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d132      	bne.n	80075ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007584:	6879      	ldr	r1, [r7, #4]
 8007586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007588:	4613      	mov	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	440b      	add	r3, r1
 8007592:	3320      	adds	r3, #32
 8007594:	6819      	ldr	r1, [r3, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800759a:	4613      	mov	r3, r2
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4403      	add	r3, r0
 80075a4:	331c      	adds	r3, #28
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4419      	add	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ae:	4613      	mov	r3, r2
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4403      	add	r3, r0
 80075b8:	3320      	adds	r3, #32
 80075ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d113      	bne.n	80075ea <HAL_PCD_IRQHandler+0x3a2>
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c6:	4613      	mov	r3, r2
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	440b      	add	r3, r1
 80075d0:	3324      	adds	r3, #36	@ 0x24
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d108      	bne.n	80075ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6818      	ldr	r0, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075e2:	461a      	mov	r2, r3
 80075e4:	2101      	movs	r1, #1
 80075e6:	f007 f999 	bl	800e91c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80075ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f013 f938 	bl	801a866 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800760c:	461a      	mov	r2, r3
 800760e:	2308      	movs	r3, #8
 8007610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f003 0310 	and.w	r3, r3, #16
 8007618:	2b00      	cmp	r3, #0
 800761a:	d008      	beq.n	800762e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007628:	461a      	mov	r2, r3
 800762a:	2310      	movs	r3, #16
 800762c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d008      	beq.n	800764a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007644:	461a      	mov	r2, r3
 8007646:	2340      	movs	r3, #64	@ 0x40
 8007648:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d023      	beq.n	800769c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007654:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007656:	6a38      	ldr	r0, [r7, #32]
 8007658:	f006 f958 	bl	800d90c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800765c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800765e:	4613      	mov	r3, r2
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	3310      	adds	r3, #16
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	4413      	add	r3, r2
 800766c:	3304      	adds	r3, #4
 800766e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	78db      	ldrb	r3, [r3, #3]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d108      	bne.n	800768a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2200      	movs	r2, #0
 800767c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	b2db      	uxtb	r3, r3
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f013 f985 	bl	801a994 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007696:	461a      	mov	r2, r3
 8007698:	2302      	movs	r3, #2
 800769a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80076a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fcd2 	bl	8008052 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	3301      	adds	r3, #1
 80076b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80076b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b6:	085b      	lsrs	r3, r3, #1
 80076b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80076ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f47f af2e 	bne.w	800751e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f007 f842 	bl	800e750 <USB_ReadInterrupts>
 80076cc:	4603      	mov	r3, r0
 80076ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076d6:	d122      	bne.n	800771e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	69fa      	ldr	r2, [r7, #28]
 80076e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076e6:	f023 0301 	bic.w	r3, r3, #1
 80076ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d108      	bne.n	8007708 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80076fe:	2100      	movs	r1, #0
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fedd 	bl	80084c0 <HAL_PCDEx_LPM_Callback>
 8007706:	e002      	b.n	800770e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f013 f923 	bl	801a954 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	695a      	ldr	r2, [r3, #20]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800771c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4618      	mov	r0, r3
 8007724:	f007 f814 	bl	800e750 <USB_ReadInterrupts>
 8007728:	4603      	mov	r3, r0
 800772a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800772e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007732:	d112      	bne.n	800775a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b01      	cmp	r3, #1
 8007742:	d102      	bne.n	800774a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f013 f8df 	bl	801a908 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	695a      	ldr	r2, [r3, #20]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007758:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f006 fff6 	bl	800e750 <USB_ReadInterrupts>
 8007764:	4603      	mov	r3, r0
 8007766:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800776a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800776e:	d121      	bne.n	80077b4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695a      	ldr	r2, [r3, #20]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800777e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007786:	2b00      	cmp	r3, #0
 8007788:	d111      	bne.n	80077ae <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007798:	089b      	lsrs	r3, r3, #2
 800779a:	f003 020f 	and.w	r2, r3, #15
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80077a4:	2101      	movs	r1, #1
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fe8a 	bl	80084c0 <HAL_PCDEx_LPM_Callback>
 80077ac:	e002      	b.n	80077b4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f013 f8aa 	bl	801a908 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f006 ffc9 	bl	800e750 <USB_ReadInterrupts>
 80077be:	4603      	mov	r3, r0
 80077c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077c8:	f040 80b7 	bne.w	800793a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	69fa      	ldr	r2, [r7, #28]
 80077d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077da:	f023 0301 	bic.w	r3, r3, #1
 80077de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2110      	movs	r1, #16
 80077e6:	4618      	mov	r0, r3
 80077e8:	f006 f890 	bl	800d90c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077ec:	2300      	movs	r3, #0
 80077ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077f0:	e046      	b.n	8007880 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80077f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077fe:	461a      	mov	r2, r3
 8007800:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007804:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007816:	0151      	lsls	r1, r2, #5
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	440a      	add	r2, r1
 800781c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007820:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007824:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007832:	461a      	mov	r2, r3
 8007834:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007838:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800783a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800784a:	0151      	lsls	r1, r2, #5
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	440a      	add	r2, r1
 8007850:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007854:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007858:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800785a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	4413      	add	r3, r2
 8007862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800786a:	0151      	lsls	r1, r2, #5
 800786c:	69fa      	ldr	r2, [r7, #28]
 800786e:	440a      	add	r2, r1
 8007870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007874:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007878:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800787a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787c:	3301      	adds	r3, #1
 800787e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	791b      	ldrb	r3, [r3, #4]
 8007884:	461a      	mov	r2, r3
 8007886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007888:	4293      	cmp	r3, r2
 800788a:	d3b2      	bcc.n	80077f2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800789a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800789e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	7bdb      	ldrb	r3, [r3, #15]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d016      	beq.n	80078d6 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078b8:	f043 030b 	orr.w	r3, r3, #11
 80078bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078ce:	f043 030b 	orr.w	r3, r3, #11
 80078d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80078d4:	e015      	b.n	8007902 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078dc:	695a      	ldr	r2, [r3, #20]
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e4:	4619      	mov	r1, r3
 80078e6:	f242 032b 	movw	r3, #8235	@ 0x202b
 80078ea:	4313      	orrs	r3, r2
 80078ec:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078fc:	f043 030b 	orr.w	r3, r3, #11
 8007900:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007910:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007914:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6818      	ldr	r0, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007924:	461a      	mov	r2, r3
 8007926:	f006 fff9 	bl	800e91c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695a      	ldr	r2, [r3, #20]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4618      	mov	r0, r3
 8007940:	f006 ff06 	bl	800e750 <USB_ReadInterrupts>
 8007944:	4603      	mov	r3, r0
 8007946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800794a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800794e:	d123      	bne.n	8007998 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4618      	mov	r0, r3
 8007956:	f006 ffbd 	bl	800e8d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f006 f84d 	bl	800d9fe <USB_GetDevSpeed>
 8007964:	4603      	mov	r3, r0
 8007966:	461a      	mov	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681c      	ldr	r4, [r3, #0]
 8007970:	f001 fd86 	bl	8009480 <HAL_RCC_GetHCLKFreq>
 8007974:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800797a:	461a      	mov	r2, r3
 800797c:	4620      	mov	r0, r4
 800797e:	f005 fd57 	bl	800d430 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f012 ff97 	bl	801a8b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	695a      	ldr	r2, [r3, #20]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007996:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4618      	mov	r0, r3
 800799e:	f006 fed7 	bl	800e750 <USB_ReadInterrupts>
 80079a2:	4603      	mov	r3, r0
 80079a4:	f003 0308 	and.w	r3, r3, #8
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d10a      	bne.n	80079c2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f012 ff74 	bl	801a89a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695a      	ldr	r2, [r3, #20]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f002 0208 	and.w	r2, r2, #8
 80079c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f006 fec2 	bl	800e750 <USB_ReadInterrupts>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d2:	2b80      	cmp	r3, #128	@ 0x80
 80079d4:	d123      	bne.n	8007a1e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079e2:	2301      	movs	r3, #1
 80079e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80079e6:	e014      	b.n	8007a12 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ec:	4613      	mov	r3, r2
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d105      	bne.n	8007a0c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 faf2 	bl	8007ff0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0e:	3301      	adds	r3, #1
 8007a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	791b      	ldrb	r3, [r3, #4]
 8007a16:	461a      	mov	r2, r3
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d3e4      	bcc.n	80079e8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f006 fe94 	bl	800e750 <USB_ReadInterrupts>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a32:	d13c      	bne.n	8007aae <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a34:	2301      	movs	r3, #1
 8007a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a38:	e02b      	b.n	8007a92 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a4e:	4613      	mov	r3, r2
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	440b      	add	r3, r1
 8007a58:	3318      	adds	r3, #24
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d115      	bne.n	8007a8c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007a60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	da12      	bge.n	8007a8c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	00db      	lsls	r3, r3, #3
 8007a6e:	4413      	add	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	440b      	add	r3, r1
 8007a74:	3317      	adds	r3, #23
 8007a76:	2201      	movs	r2, #1
 8007a78:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fab2 	bl	8007ff0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8e:	3301      	adds	r3, #1
 8007a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	791b      	ldrb	r3, [r3, #4]
 8007a96:	461a      	mov	r2, r3
 8007a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d3cd      	bcc.n	8007a3a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	695a      	ldr	r2, [r3, #20]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f006 fe4c 	bl	800e750 <USB_ReadInterrupts>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007abe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ac2:	d156      	bne.n	8007b72 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ac8:	e045      	b.n	8007b56 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ade:	4613      	mov	r3, r2
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d12e      	bne.n	8007b50 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007af2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	da2b      	bge.n	8007b50 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	0c1a      	lsrs	r2, r3, #16
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007b02:	4053      	eors	r3, r2
 8007b04:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d121      	bne.n	8007b50 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007b0c:	6879      	ldr	r1, [r7, #4]
 8007b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b10:	4613      	mov	r3, r2
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007b1e:	2201      	movs	r2, #1
 8007b20:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10a      	bne.n	8007b50 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b4c:	6053      	str	r3, [r2, #4]
            break;
 8007b4e:	e008      	b.n	8007b62 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b52:	3301      	adds	r3, #1
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	791b      	ldrb	r3, [r3, #4]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d3b3      	bcc.n	8007aca <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	695a      	ldr	r2, [r3, #20]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f006 fdea 	bl	800e750 <USB_ReadInterrupts>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b86:	d10a      	bne.n	8007b9e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f012 ff15 	bl	801a9b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	695a      	ldr	r2, [r3, #20]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f006 fdd4 	bl	800e750 <USB_ReadInterrupts>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f003 0304 	and.w	r3, r3, #4
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	d115      	bne.n	8007bde <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f012 ff05 	bl	801a9d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6859      	ldr	r1, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
 8007bda:	e000      	b.n	8007bde <HAL_PCD_IRQHandler+0x996>
      return;
 8007bdc:	bf00      	nop
    }
  }
}
 8007bde:	3734      	adds	r7, #52	@ 0x34
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd90      	pop	{r4, r7, pc}

08007be4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <HAL_PCD_SetAddress+0x1a>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e012      	b.n	8007c24 <HAL_PCD_SetAddress+0x40>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	78fa      	ldrb	r2, [r7, #3]
 8007c0a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	78fa      	ldrb	r2, [r7, #3]
 8007c12:	4611      	mov	r1, r2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f006 fd33 	bl	800e680 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	4608      	mov	r0, r1
 8007c36:	4611      	mov	r1, r2
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	70fb      	strb	r3, [r7, #3]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	803b      	strh	r3, [r7, #0]
 8007c42:	4613      	mov	r3, r2
 8007c44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	da0f      	bge.n	8007c72 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c52:	78fb      	ldrb	r3, [r7, #3]
 8007c54:	f003 020f 	and.w	r2, r3, #15
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	3310      	adds	r3, #16
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	4413      	add	r3, r2
 8007c66:	3304      	adds	r3, #4
 8007c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	705a      	strb	r2, [r3, #1]
 8007c70:	e00f      	b.n	8007c92 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c72:	78fb      	ldrb	r3, [r7, #3]
 8007c74:	f003 020f 	and.w	r2, r3, #15
 8007c78:	4613      	mov	r3, r2
 8007c7a:	00db      	lsls	r3, r3, #3
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	4413      	add	r3, r2
 8007c88:	3304      	adds	r3, #4
 8007c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	f003 030f 	and.w	r3, r3, #15
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007c9e:	883b      	ldrh	r3, [r7, #0]
 8007ca0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	78ba      	ldrb	r2, [r7, #2]
 8007cac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	785b      	ldrb	r3, [r3, #1]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d004      	beq.n	8007cc0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007cc0:	78bb      	ldrb	r3, [r7, #2]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d102      	bne.n	8007ccc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d101      	bne.n	8007cda <HAL_PCD_EP_Open+0xae>
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	e00e      	b.n	8007cf8 <HAL_PCD_EP_Open+0xcc>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68f9      	ldr	r1, [r7, #12]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f005 fead 	bl	800da48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007cf6:	7afb      	ldrb	r3, [r7, #11]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	da0f      	bge.n	8007d34 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d14:	78fb      	ldrb	r3, [r7, #3]
 8007d16:	f003 020f 	and.w	r2, r3, #15
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	3310      	adds	r3, #16
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	4413      	add	r3, r2
 8007d28:	3304      	adds	r3, #4
 8007d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	705a      	strb	r2, [r3, #1]
 8007d32:	e00f      	b.n	8007d54 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d34:	78fb      	ldrb	r3, [r7, #3]
 8007d36:	f003 020f 	and.w	r2, r3, #15
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	00db      	lsls	r3, r3, #3
 8007d3e:	4413      	add	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	4413      	add	r3, r2
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	f003 030f 	and.w	r3, r3, #15
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d101      	bne.n	8007d6e <HAL_PCD_EP_Close+0x6e>
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	e00e      	b.n	8007d8c <HAL_PCD_EP_Close+0x8c>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68f9      	ldr	r1, [r7, #12]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f005 feeb 	bl	800db58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	607a      	str	r2, [r7, #4]
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	460b      	mov	r3, r1
 8007da2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007da4:	7afb      	ldrb	r3, [r7, #11]
 8007da6:	f003 020f 	and.w	r2, r3, #15
 8007daa:	4613      	mov	r3, r2
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	4413      	add	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	4413      	add	r3, r2
 8007dba:	3304      	adds	r3, #4
 8007dbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
 8007dd8:	f003 030f 	and.w	r3, r3, #15
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	799b      	ldrb	r3, [r3, #6]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d102      	bne.n	8007df0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	799b      	ldrb	r3, [r3, #6]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	6979      	ldr	r1, [r7, #20]
 8007dfc:	f005 ff88 	bl	800dd10 <USB_EPStartXfer>

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b086      	sub	sp, #24
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	603b      	str	r3, [r7, #0]
 8007e16:	460b      	mov	r3, r1
 8007e18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e1a:	7afb      	ldrb	r3, [r7, #11]
 8007e1c:	f003 020f 	and.w	r2, r3, #15
 8007e20:	4613      	mov	r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	4413      	add	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	3310      	adds	r3, #16
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	3304      	adds	r3, #4
 8007e30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2200      	movs	r2, #0
 8007e42:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2201      	movs	r2, #1
 8007e48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e4a:	7afb      	ldrb	r3, [r7, #11]
 8007e4c:	f003 030f 	and.w	r3, r3, #15
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	799b      	ldrb	r3, [r3, #6]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d102      	bne.n	8007e64 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6818      	ldr	r0, [r3, #0]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	799b      	ldrb	r3, [r3, #6]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	6979      	ldr	r1, [r7, #20]
 8007e70:	f005 ff4e 	bl	800dd10 <USB_EPStartXfer>

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	7912      	ldrb	r2, [r2, #4]
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d901      	bls.n	8007e9c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e04f      	b.n	8007f3c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	da0f      	bge.n	8007ec4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	f003 020f 	and.w	r2, r3, #15
 8007eaa:	4613      	mov	r3, r2
 8007eac:	00db      	lsls	r3, r3, #3
 8007eae:	4413      	add	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	3310      	adds	r3, #16
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	3304      	adds	r3, #4
 8007eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	705a      	strb	r2, [r3, #1]
 8007ec2:	e00d      	b.n	8007ee0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007ec4:	78fa      	ldrb	r2, [r7, #3]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_PCD_EP_SetStall+0x82>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e01d      	b.n	8007f3c <HAL_PCD_EP_SetStall+0xbe>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68f9      	ldr	r1, [r7, #12]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f006 fae2 	bl	800e4d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d109      	bne.n	8007f32 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6818      	ldr	r0, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	7999      	ldrb	r1, [r3, #6]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f006 fcf5 	bl	800e91c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	f003 030f 	and.w	r3, r3, #15
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	7912      	ldrb	r2, [r2, #4]
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d901      	bls.n	8007f62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e042      	b.n	8007fe8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	da0f      	bge.n	8007f8a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f6a:	78fb      	ldrb	r3, [r7, #3]
 8007f6c:	f003 020f 	and.w	r2, r3, #15
 8007f70:	4613      	mov	r3, r2
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	3310      	adds	r3, #16
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	3304      	adds	r3, #4
 8007f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	705a      	strb	r2, [r3, #1]
 8007f88:	e00f      	b.n	8007faa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	f003 020f 	and.w	r2, r3, #15
 8007f90:	4613      	mov	r3, r2
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	4413      	add	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <HAL_PCD_EP_ClrStall+0x86>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e00e      	b.n	8007fe8 <HAL_PCD_EP_ClrStall+0xa4>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68f9      	ldr	r1, [r7, #12]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f006 faeb 	bl	800e5b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008000:	2b00      	cmp	r3, #0
 8008002:	da0c      	bge.n	800801e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	f003 020f 	and.w	r2, r3, #15
 800800a:	4613      	mov	r3, r2
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	3310      	adds	r3, #16
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	4413      	add	r3, r2
 8008018:	3304      	adds	r3, #4
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	e00c      	b.n	8008038 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	f003 020f 	and.w	r2, r3, #15
 8008024:	4613      	mov	r3, r2
 8008026:	00db      	lsls	r3, r3, #3
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	4413      	add	r3, r2
 8008034:	3304      	adds	r3, #4
 8008036:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68f9      	ldr	r1, [r7, #12]
 800803e:	4618      	mov	r0, r3
 8008040:	f006 f90a 	bl	800e258 <USB_EPStopXfer>
 8008044:	4603      	mov	r3, r0
 8008046:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008048:	7afb      	ldrb	r3, [r7, #11]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b08a      	sub	sp, #40	@ 0x28
 8008056:	af02      	add	r7, sp, #8
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	4613      	mov	r3, r2
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	3310      	adds	r3, #16
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	4413      	add	r3, r2
 8008076:	3304      	adds	r3, #4
 8008078:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	695a      	ldr	r2, [r3, #20]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	429a      	cmp	r2, r3
 8008084:	d901      	bls.n	800808a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e06b      	b.n	8008162 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	691a      	ldr	r2, [r3, #16]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	69fa      	ldr	r2, [r7, #28]
 800809c:	429a      	cmp	r2, r3
 800809e:	d902      	bls.n	80080a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	3303      	adds	r3, #3
 80080aa:	089b      	lsrs	r3, r3, #2
 80080ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080ae:	e02a      	b.n	8008106 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	691a      	ldr	r2, [r3, #16]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	69fa      	ldr	r2, [r7, #28]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d902      	bls.n	80080cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	3303      	adds	r3, #3
 80080d0:	089b      	lsrs	r3, r3, #2
 80080d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	68d9      	ldr	r1, [r3, #12]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	4603      	mov	r3, r0
 80080e8:	6978      	ldr	r0, [r7, #20]
 80080ea:	f006 f95f 	bl	800e3ac <USB_WritePacket>

    ep->xfer_buff  += len;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	441a      	add	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	695a      	ldr	r2, [r3, #20]
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	441a      	add	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	429a      	cmp	r2, r3
 800811a:	d809      	bhi.n	8008130 <PCD_WriteEmptyTxFifo+0xde>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	695a      	ldr	r2, [r3, #20]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008124:	429a      	cmp	r2, r3
 8008126:	d203      	bcs.n	8008130 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1bf      	bne.n	80080b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	429a      	cmp	r2, r3
 800813a:	d811      	bhi.n	8008160 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	2201      	movs	r2, #1
 8008144:	fa02 f303 	lsl.w	r3, r2, r3
 8008148:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	43db      	mvns	r3, r3
 8008156:	6939      	ldr	r1, [r7, #16]
 8008158:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800815c:	4013      	ands	r3, r2
 800815e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3720      	adds	r7, #32
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
	...

0800816c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	333c      	adds	r3, #60	@ 0x3c
 8008184:	3304      	adds	r3, #4
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	799b      	ldrb	r3, [r3, #6]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d17b      	bne.n	800829a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f003 0308 	and.w	r3, r3, #8
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d015      	beq.n	80081d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	4a61      	ldr	r2, [pc, #388]	@ (8008334 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	f240 80b9 	bls.w	8008328 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 80b3 	beq.w	8008328 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ce:	461a      	mov	r2, r3
 80081d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081d4:	6093      	str	r3, [r2, #8]
 80081d6:	e0a7      	b.n	8008328 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f003 0320 	and.w	r3, r3, #32
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d009      	beq.n	80081f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ee:	461a      	mov	r2, r3
 80081f0:	2320      	movs	r3, #32
 80081f2:	6093      	str	r3, [r2, #8]
 80081f4:	e098      	b.n	8008328 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f040 8093 	bne.w	8008328 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	4a4b      	ldr	r2, [pc, #300]	@ (8008334 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d90f      	bls.n	800822a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00a      	beq.n	800822a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008220:	461a      	mov	r2, r3
 8008222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008226:	6093      	str	r3, [r2, #8]
 8008228:	e07e      	b.n	8008328 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	4613      	mov	r3, r2
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	4413      	add	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	4413      	add	r3, r2
 800823c:	3304      	adds	r3, #4
 800823e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6a1a      	ldr	r2, [r3, #32]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	0159      	lsls	r1, r3, #5
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	440b      	add	r3, r1
 800824c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008256:	1ad2      	subs	r2, r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d114      	bne.n	800828c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6818      	ldr	r0, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008274:	461a      	mov	r2, r3
 8008276:	2101      	movs	r1, #1
 8008278:	f006 fb50 	bl	800e91c <USB_EP0_OutStart>
 800827c:	e006      	b.n	800828c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	441a      	add	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	b2db      	uxtb	r3, r3
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f012 facc 	bl	801a830 <HAL_PCD_DataOutStageCallback>
 8008298:	e046      	b.n	8008328 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	4a26      	ldr	r2, [pc, #152]	@ (8008338 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d124      	bne.n	80082ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00a      	beq.n	80082c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082b8:	461a      	mov	r2, r3
 80082ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082be:	6093      	str	r3, [r2, #8]
 80082c0:	e032      	b.n	8008328 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f003 0320 	and.w	r3, r3, #32
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d008      	beq.n	80082de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d8:	461a      	mov	r2, r3
 80082da:	2320      	movs	r3, #32
 80082dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f012 faa3 	bl	801a830 <HAL_PCD_DataOutStageCallback>
 80082ea:	e01d      	b.n	8008328 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d114      	bne.n	800831c <PCD_EP_OutXfrComplete_int+0x1b0>
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	4613      	mov	r3, r2
 80082f8:	00db      	lsls	r3, r3, #3
 80082fa:	4413      	add	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	440b      	add	r3, r1
 8008300:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d108      	bne.n	800831c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008314:	461a      	mov	r2, r3
 8008316:	2100      	movs	r1, #0
 8008318:	f006 fb00 	bl	800e91c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	b2db      	uxtb	r3, r3
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f012 fa84 	bl	801a830 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3720      	adds	r7, #32
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	4f54300a 	.word	0x4f54300a
 8008338:	4f54310a 	.word	0x4f54310a

0800833c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	333c      	adds	r3, #60	@ 0x3c
 8008354:	3304      	adds	r3, #4
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	4413      	add	r3, r2
 8008362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4a15      	ldr	r2, [pc, #84]	@ (80083c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d90e      	bls.n	8008390 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008378:	2b00      	cmp	r3, #0
 800837a:	d009      	beq.n	8008390 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008388:	461a      	mov	r2, r3
 800838a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800838e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f012 fa3b 	bl	801a80c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	4a0a      	ldr	r2, [pc, #40]	@ (80083c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d90c      	bls.n	80083b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	799b      	ldrb	r3, [r3, #6]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d108      	bne.n	80083b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6818      	ldr	r0, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80083b0:	461a      	mov	r2, r3
 80083b2:	2101      	movs	r1, #1
 80083b4:	f006 fab2 	bl	800e91c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	4f54300a 	.word	0x4f54300a

080083c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
 80083d4:	4613      	mov	r3, r2
 80083d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d107      	bne.n	80083f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80083e6:	883b      	ldrh	r3, [r7, #0]
 80083e8:	0419      	lsls	r1, r3, #16
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80083f4:	e028      	b.n	8008448 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fc:	0c1b      	lsrs	r3, r3, #16
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	4413      	add	r3, r2
 8008402:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
 8008408:	e00d      	b.n	8008426 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	7bfb      	ldrb	r3, [r7, #15]
 8008410:	3340      	adds	r3, #64	@ 0x40
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	0c1b      	lsrs	r3, r3, #16
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	4413      	add	r3, r2
 800841e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	3301      	adds	r3, #1
 8008424:	73fb      	strb	r3, [r7, #15]
 8008426:	7bfa      	ldrb	r2, [r7, #15]
 8008428:	78fb      	ldrb	r3, [r7, #3]
 800842a:	3b01      	subs	r3, #1
 800842c:	429a      	cmp	r2, r3
 800842e:	d3ec      	bcc.n	800840a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008430:	883b      	ldrh	r3, [r7, #0]
 8008432:	0418      	lsls	r0, r3, #16
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6819      	ldr	r1, [r3, #0]
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	3b01      	subs	r3, #1
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	4302      	orrs	r2, r0
 8008440:	3340      	adds	r3, #64	@ 0x40
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	440b      	add	r3, r1
 8008446:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	460b      	mov	r3, r1
 8008460:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	887a      	ldrh	r2, [r7, #2]
 8008468:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084a6:	4b05      	ldr	r3, [pc, #20]	@ (80084bc <HAL_PCDEx_ActivateLPM+0x44>)
 80084a8:	4313      	orrs	r3, r2
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	10000003 	.word	0x10000003

080084c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80084e0:	4b19      	ldr	r3, [pc, #100]	@ (8008548 <HAL_PWREx_ConfigSupply+0x70>)
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	f003 0304 	and.w	r3, r3, #4
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d00a      	beq.n	8008502 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80084ec:	4b16      	ldr	r3, [pc, #88]	@ (8008548 <HAL_PWREx_ConfigSupply+0x70>)
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f003 0307 	and.w	r3, r3, #7
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d001      	beq.n	80084fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e01f      	b.n	800853e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	e01d      	b.n	800853e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008502:	4b11      	ldr	r3, [pc, #68]	@ (8008548 <HAL_PWREx_ConfigSupply+0x70>)
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f023 0207 	bic.w	r2, r3, #7
 800850a:	490f      	ldr	r1, [pc, #60]	@ (8008548 <HAL_PWREx_ConfigSupply+0x70>)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4313      	orrs	r3, r2
 8008510:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008512:	f7f9 fdb1 	bl	8002078 <HAL_GetTick>
 8008516:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008518:	e009      	b.n	800852e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800851a:	f7f9 fdad 	bl	8002078 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008528:	d901      	bls.n	800852e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e007      	b.n	800853e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800852e:	4b06      	ldr	r3, [pc, #24]	@ (8008548 <HAL_PWREx_ConfigSupply+0x70>)
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800853a:	d1ee      	bne.n	800851a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	58024800 	.word	0x58024800

0800854c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008550:	4b05      	ldr	r3, [pc, #20]	@ (8008568 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	4a04      	ldr	r2, [pc, #16]	@ (8008568 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800855a:	60d3      	str	r3, [r2, #12]
}
 800855c:	bf00      	nop
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	58024800 	.word	0x58024800

0800856c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08c      	sub	sp, #48	@ 0x30
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d102      	bne.n	8008580 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	f000 bc48 	b.w	8008e10 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8088 	beq.w	800869e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800858e:	4b99      	ldr	r3, [pc, #612]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008596:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008598:	4b96      	ldr	r3, [pc, #600]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 800859a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800859c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800859e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a0:	2b10      	cmp	r3, #16
 80085a2:	d007      	beq.n	80085b4 <HAL_RCC_OscConfig+0x48>
 80085a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a6:	2b18      	cmp	r3, #24
 80085a8:	d111      	bne.n	80085ce <HAL_RCC_OscConfig+0x62>
 80085aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ac:	f003 0303 	and.w	r3, r3, #3
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d10c      	bne.n	80085ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085b4:	4b8f      	ldr	r3, [pc, #572]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d06d      	beq.n	800869c <HAL_RCC_OscConfig+0x130>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d169      	bne.n	800869c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	f000 bc21 	b.w	8008e10 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085d6:	d106      	bne.n	80085e6 <HAL_RCC_OscConfig+0x7a>
 80085d8:	4b86      	ldr	r3, [pc, #536]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a85      	ldr	r2, [pc, #532]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80085de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085e2:	6013      	str	r3, [r2, #0]
 80085e4:	e02e      	b.n	8008644 <HAL_RCC_OscConfig+0xd8>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10c      	bne.n	8008608 <HAL_RCC_OscConfig+0x9c>
 80085ee:	4b81      	ldr	r3, [pc, #516]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a80      	ldr	r2, [pc, #512]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80085f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	4b7e      	ldr	r3, [pc, #504]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a7d      	ldr	r2, [pc, #500]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008600:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	e01d      	b.n	8008644 <HAL_RCC_OscConfig+0xd8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008610:	d10c      	bne.n	800862c <HAL_RCC_OscConfig+0xc0>
 8008612:	4b78      	ldr	r3, [pc, #480]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a77      	ldr	r2, [pc, #476]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	4b75      	ldr	r3, [pc, #468]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a74      	ldr	r2, [pc, #464]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	e00b      	b.n	8008644 <HAL_RCC_OscConfig+0xd8>
 800862c:	4b71      	ldr	r3, [pc, #452]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a70      	ldr	r2, [pc, #448]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	4b6e      	ldr	r3, [pc, #440]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a6d      	ldr	r2, [pc, #436]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 800863e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d013      	beq.n	8008674 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864c:	f7f9 fd14 	bl	8002078 <HAL_GetTick>
 8008650:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008652:	e008      	b.n	8008666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008654:	f7f9 fd10 	bl	8002078 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b64      	cmp	r3, #100	@ 0x64
 8008660:	d901      	bls.n	8008666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e3d4      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008666:	4b63      	ldr	r3, [pc, #396]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0f0      	beq.n	8008654 <HAL_RCC_OscConfig+0xe8>
 8008672:	e014      	b.n	800869e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008674:	f7f9 fd00 	bl	8002078 <HAL_GetTick>
 8008678:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800867a:	e008      	b.n	800868e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800867c:	f7f9 fcfc 	bl	8002078 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2b64      	cmp	r3, #100	@ 0x64
 8008688:	d901      	bls.n	800868e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e3c0      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800868e:	4b59      	ldr	r3, [pc, #356]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1f0      	bne.n	800867c <HAL_RCC_OscConfig+0x110>
 800869a:	e000      	b.n	800869e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800869c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0302 	and.w	r3, r3, #2
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 80ca 	beq.w	8008840 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086ac:	4b51      	ldr	r3, [pc, #324]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086b6:	4b4f      	ldr	r3, [pc, #316]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80086b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d007      	beq.n	80086d2 <HAL_RCC_OscConfig+0x166>
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	2b18      	cmp	r3, #24
 80086c6:	d156      	bne.n	8008776 <HAL_RCC_OscConfig+0x20a>
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	f003 0303 	and.w	r3, r3, #3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d151      	bne.n	8008776 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086d2:	4b48      	ldr	r3, [pc, #288]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0304 	and.w	r3, r3, #4
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d005      	beq.n	80086ea <HAL_RCC_OscConfig+0x17e>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e392      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086ea:	4b42      	ldr	r3, [pc, #264]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f023 0219 	bic.w	r2, r3, #25
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	493f      	ldr	r1, [pc, #252]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086fc:	f7f9 fcbc 	bl	8002078 <HAL_GetTick>
 8008700:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008702:	e008      	b.n	8008716 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008704:	f7f9 fcb8 	bl	8002078 <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	2b02      	cmp	r3, #2
 8008710:	d901      	bls.n	8008716 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e37c      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008716:	4b37      	ldr	r3, [pc, #220]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0304 	and.w	r3, r3, #4
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0f0      	beq.n	8008704 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008722:	f7f9 fcd9 	bl	80020d8 <HAL_GetREVID>
 8008726:	4603      	mov	r3, r0
 8008728:	f241 0203 	movw	r2, #4099	@ 0x1003
 800872c:	4293      	cmp	r3, r2
 800872e:	d817      	bhi.n	8008760 <HAL_RCC_OscConfig+0x1f4>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	2b40      	cmp	r3, #64	@ 0x40
 8008736:	d108      	bne.n	800874a <HAL_RCC_OscConfig+0x1de>
 8008738:	4b2e      	ldr	r3, [pc, #184]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008740:	4a2c      	ldr	r2, [pc, #176]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008746:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008748:	e07a      	b.n	8008840 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800874a:	4b2a      	ldr	r3, [pc, #168]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	031b      	lsls	r3, r3, #12
 8008758:	4926      	ldr	r1, [pc, #152]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 800875a:	4313      	orrs	r3, r2
 800875c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800875e:	e06f      	b.n	8008840 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008760:	4b24      	ldr	r3, [pc, #144]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	061b      	lsls	r3, r3, #24
 800876e:	4921      	ldr	r1, [pc, #132]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008770:	4313      	orrs	r3, r2
 8008772:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008774:	e064      	b.n	8008840 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d047      	beq.n	800880e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800877e:	4b1d      	ldr	r3, [pc, #116]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f023 0219 	bic.w	r2, r3, #25
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	491a      	ldr	r1, [pc, #104]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 800878c:	4313      	orrs	r3, r2
 800878e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008790:	f7f9 fc72 	bl	8002078 <HAL_GetTick>
 8008794:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008798:	f7f9 fc6e 	bl	8002078 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e332      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087aa:	4b12      	ldr	r3, [pc, #72]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0f0      	beq.n	8008798 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087b6:	f7f9 fc8f 	bl	80020d8 <HAL_GetREVID>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d819      	bhi.n	80087f8 <HAL_RCC_OscConfig+0x28c>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	2b40      	cmp	r3, #64	@ 0x40
 80087ca:	d108      	bne.n	80087de <HAL_RCC_OscConfig+0x272>
 80087cc:	4b09      	ldr	r3, [pc, #36]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80087d4:	4a07      	ldr	r2, [pc, #28]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80087d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087da:	6053      	str	r3, [r2, #4]
 80087dc:	e030      	b.n	8008840 <HAL_RCC_OscConfig+0x2d4>
 80087de:	4b05      	ldr	r3, [pc, #20]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	031b      	lsls	r3, r3, #12
 80087ec:	4901      	ldr	r1, [pc, #4]	@ (80087f4 <HAL_RCC_OscConfig+0x288>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	604b      	str	r3, [r1, #4]
 80087f2:	e025      	b.n	8008840 <HAL_RCC_OscConfig+0x2d4>
 80087f4:	58024400 	.word	0x58024400
 80087f8:	4b9a      	ldr	r3, [pc, #616]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	061b      	lsls	r3, r3, #24
 8008806:	4997      	ldr	r1, [pc, #604]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008808:	4313      	orrs	r3, r2
 800880a:	604b      	str	r3, [r1, #4]
 800880c:	e018      	b.n	8008840 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800880e:	4b95      	ldr	r3, [pc, #596]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a94      	ldr	r2, [pc, #592]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008814:	f023 0301 	bic.w	r3, r3, #1
 8008818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881a:	f7f9 fc2d 	bl	8002078 <HAL_GetTick>
 800881e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008820:	e008      	b.n	8008834 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008822:	f7f9 fc29 	bl	8002078 <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	d901      	bls.n	8008834 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e2ed      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008834:	4b8b      	ldr	r3, [pc, #556]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0304 	and.w	r3, r3, #4
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1f0      	bne.n	8008822 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0310 	and.w	r3, r3, #16
 8008848:	2b00      	cmp	r3, #0
 800884a:	f000 80a9 	beq.w	80089a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800884e:	4b85      	ldr	r3, [pc, #532]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008856:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008858:	4b82      	ldr	r3, [pc, #520]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 800885a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800885c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	2b08      	cmp	r3, #8
 8008862:	d007      	beq.n	8008874 <HAL_RCC_OscConfig+0x308>
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	2b18      	cmp	r3, #24
 8008868:	d13a      	bne.n	80088e0 <HAL_RCC_OscConfig+0x374>
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f003 0303 	and.w	r3, r3, #3
 8008870:	2b01      	cmp	r3, #1
 8008872:	d135      	bne.n	80088e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008874:	4b7b      	ldr	r3, [pc, #492]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800887c:	2b00      	cmp	r3, #0
 800887e:	d005      	beq.n	800888c <HAL_RCC_OscConfig+0x320>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	69db      	ldr	r3, [r3, #28]
 8008884:	2b80      	cmp	r3, #128	@ 0x80
 8008886:	d001      	beq.n	800888c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e2c1      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800888c:	f7f9 fc24 	bl	80020d8 <HAL_GetREVID>
 8008890:	4603      	mov	r3, r0
 8008892:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008896:	4293      	cmp	r3, r2
 8008898:	d817      	bhi.n	80088ca <HAL_RCC_OscConfig+0x35e>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d108      	bne.n	80088b4 <HAL_RCC_OscConfig+0x348>
 80088a2:	4b70      	ldr	r3, [pc, #448]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80088aa:	4a6e      	ldr	r2, [pc, #440]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80088ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088b2:	e075      	b.n	80089a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088b4:	4b6b      	ldr	r3, [pc, #428]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	069b      	lsls	r3, r3, #26
 80088c2:	4968      	ldr	r1, [pc, #416]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80088c4:	4313      	orrs	r3, r2
 80088c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088c8:	e06a      	b.n	80089a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088ca:	4b66      	ldr	r3, [pc, #408]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	061b      	lsls	r3, r3, #24
 80088d8:	4962      	ldr	r1, [pc, #392]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088de:	e05f      	b.n	80089a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d042      	beq.n	800896e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80088e8:	4b5e      	ldr	r3, [pc, #376]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a5d      	ldr	r2, [pc, #372]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80088ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f4:	f7f9 fbc0 	bl	8002078 <HAL_GetTick>
 80088f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80088fa:	e008      	b.n	800890e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80088fc:	f7f9 fbbc 	bl	8002078 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b02      	cmp	r3, #2
 8008908:	d901      	bls.n	800890e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e280      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800890e:	4b55      	ldr	r3, [pc, #340]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0f0      	beq.n	80088fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800891a:	f7f9 fbdd 	bl	80020d8 <HAL_GetREVID>
 800891e:	4603      	mov	r3, r0
 8008920:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008924:	4293      	cmp	r3, r2
 8008926:	d817      	bhi.n	8008958 <HAL_RCC_OscConfig+0x3ec>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	2b20      	cmp	r3, #32
 800892e:	d108      	bne.n	8008942 <HAL_RCC_OscConfig+0x3d6>
 8008930:	4b4c      	ldr	r3, [pc, #304]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008938:	4a4a      	ldr	r2, [pc, #296]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 800893a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800893e:	6053      	str	r3, [r2, #4]
 8008940:	e02e      	b.n	80089a0 <HAL_RCC_OscConfig+0x434>
 8008942:	4b48      	ldr	r3, [pc, #288]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	069b      	lsls	r3, r3, #26
 8008950:	4944      	ldr	r1, [pc, #272]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008952:	4313      	orrs	r3, r2
 8008954:	604b      	str	r3, [r1, #4]
 8008956:	e023      	b.n	80089a0 <HAL_RCC_OscConfig+0x434>
 8008958:	4b42      	ldr	r3, [pc, #264]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	061b      	lsls	r3, r3, #24
 8008966:	493f      	ldr	r1, [pc, #252]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008968:	4313      	orrs	r3, r2
 800896a:	60cb      	str	r3, [r1, #12]
 800896c:	e018      	b.n	80089a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800896e:	4b3d      	ldr	r3, [pc, #244]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a3c      	ldr	r2, [pc, #240]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008974:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800897a:	f7f9 fb7d 	bl	8002078 <HAL_GetTick>
 800897e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008980:	e008      	b.n	8008994 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008982:	f7f9 fb79 	bl	8002078 <HAL_GetTick>
 8008986:	4602      	mov	r2, r0
 8008988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	2b02      	cmp	r3, #2
 800898e:	d901      	bls.n	8008994 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008990:	2303      	movs	r3, #3
 8008992:	e23d      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008994:	4b33      	ldr	r3, [pc, #204]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1f0      	bne.n	8008982 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0308 	and.w	r3, r3, #8
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d036      	beq.n	8008a1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d019      	beq.n	80089e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80089b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089b8:	4a2a      	ldr	r2, [pc, #168]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80089ba:	f043 0301 	orr.w	r3, r3, #1
 80089be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c0:	f7f9 fb5a 	bl	8002078 <HAL_GetTick>
 80089c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80089c6:	e008      	b.n	80089da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089c8:	f7f9 fb56 	bl	8002078 <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d901      	bls.n	80089da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e21a      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80089da:	4b22      	ldr	r3, [pc, #136]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80089dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d0f0      	beq.n	80089c8 <HAL_RCC_OscConfig+0x45c>
 80089e6:	e018      	b.n	8008a1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089e8:	4b1e      	ldr	r3, [pc, #120]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80089ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 80089ee:	f023 0301 	bic.w	r3, r3, #1
 80089f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089f4:	f7f9 fb40 	bl	8002078 <HAL_GetTick>
 80089f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80089fa:	e008      	b.n	8008a0e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089fc:	f7f9 fb3c 	bl	8002078 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e200      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a0e:	4b15      	ldr	r3, [pc, #84]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1f0      	bne.n	80089fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0320 	and.w	r3, r3, #32
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d039      	beq.n	8008a9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d01c      	beq.n	8008a68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a0c      	ldr	r2, [pc, #48]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008a34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008a38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a3a:	f7f9 fb1d 	bl	8002078 <HAL_GetTick>
 8008a3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a40:	e008      	b.n	8008a54 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a42:	f7f9 fb19 	bl	8002078 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d901      	bls.n	8008a54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e1dd      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a54:	4b03      	ldr	r3, [pc, #12]	@ (8008a64 <HAL_RCC_OscConfig+0x4f8>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d0f0      	beq.n	8008a42 <HAL_RCC_OscConfig+0x4d6>
 8008a60:	e01b      	b.n	8008a9a <HAL_RCC_OscConfig+0x52e>
 8008a62:	bf00      	nop
 8008a64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a68:	4b9b      	ldr	r3, [pc, #620]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a9a      	ldr	r2, [pc, #616]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008a6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a74:	f7f9 fb00 	bl	8002078 <HAL_GetTick>
 8008a78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008a7a:	e008      	b.n	8008a8e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a7c:	f7f9 fafc 	bl	8002078 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d901      	bls.n	8008a8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e1c0      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008a8e:	4b92      	ldr	r3, [pc, #584]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1f0      	bne.n	8008a7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0304 	and.w	r3, r3, #4
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 8081 	beq.w	8008baa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8008cdc <HAL_RCC_OscConfig+0x770>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a8b      	ldr	r2, [pc, #556]	@ (8008cdc <HAL_RCC_OscConfig+0x770>)
 8008aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ab2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ab4:	f7f9 fae0 	bl	8002078 <HAL_GetTick>
 8008ab8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008aba:	e008      	b.n	8008ace <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008abc:	f7f9 fadc 	bl	8002078 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b64      	cmp	r3, #100	@ 0x64
 8008ac8:	d901      	bls.n	8008ace <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e1a0      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ace:	4b83      	ldr	r3, [pc, #524]	@ (8008cdc <HAL_RCC_OscConfig+0x770>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0f0      	beq.n	8008abc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d106      	bne.n	8008af0 <HAL_RCC_OscConfig+0x584>
 8008ae2:	4b7d      	ldr	r3, [pc, #500]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ae6:	4a7c      	ldr	r2, [pc, #496]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008ae8:	f043 0301 	orr.w	r3, r3, #1
 8008aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8008aee:	e02d      	b.n	8008b4c <HAL_RCC_OscConfig+0x5e0>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10c      	bne.n	8008b12 <HAL_RCC_OscConfig+0x5a6>
 8008af8:	4b77      	ldr	r3, [pc, #476]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008afc:	4a76      	ldr	r2, [pc, #472]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008afe:	f023 0301 	bic.w	r3, r3, #1
 8008b02:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b04:	4b74      	ldr	r3, [pc, #464]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b08:	4a73      	ldr	r2, [pc, #460]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008b0a:	f023 0304 	bic.w	r3, r3, #4
 8008b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b10:	e01c      	b.n	8008b4c <HAL_RCC_OscConfig+0x5e0>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	2b05      	cmp	r3, #5
 8008b18:	d10c      	bne.n	8008b34 <HAL_RCC_OscConfig+0x5c8>
 8008b1a:	4b6f      	ldr	r3, [pc, #444]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b1e:	4a6e      	ldr	r2, [pc, #440]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008b20:	f043 0304 	orr.w	r3, r3, #4
 8008b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b26:	4b6c      	ldr	r3, [pc, #432]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b2a:	4a6b      	ldr	r2, [pc, #428]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008b2c:	f043 0301 	orr.w	r3, r3, #1
 8008b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b32:	e00b      	b.n	8008b4c <HAL_RCC_OscConfig+0x5e0>
 8008b34:	4b68      	ldr	r3, [pc, #416]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b38:	4a67      	ldr	r2, [pc, #412]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008b3a:	f023 0301 	bic.w	r3, r3, #1
 8008b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b40:	4b65      	ldr	r3, [pc, #404]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b44:	4a64      	ldr	r2, [pc, #400]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008b46:	f023 0304 	bic.w	r3, r3, #4
 8008b4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d015      	beq.n	8008b80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b54:	f7f9 fa90 	bl	8002078 <HAL_GetTick>
 8008b58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b5a:	e00a      	b.n	8008b72 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b5c:	f7f9 fa8c 	bl	8002078 <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e14e      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b72:	4b59      	ldr	r3, [pc, #356]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d0ee      	beq.n	8008b5c <HAL_RCC_OscConfig+0x5f0>
 8008b7e:	e014      	b.n	8008baa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b80:	f7f9 fa7a 	bl	8002078 <HAL_GetTick>
 8008b84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008b86:	e00a      	b.n	8008b9e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b88:	f7f9 fa76 	bl	8002078 <HAL_GetTick>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e138      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1ee      	bne.n	8008b88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 812d 	beq.w	8008e0e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008bb4:	4b48      	ldr	r3, [pc, #288]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bbc:	2b18      	cmp	r3, #24
 8008bbe:	f000 80bd 	beq.w	8008d3c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	f040 809e 	bne.w	8008d08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bcc:	4b42      	ldr	r3, [pc, #264]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a41      	ldr	r2, [pc, #260]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008bd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd8:	f7f9 fa4e 	bl	8002078 <HAL_GetTick>
 8008bdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bde:	e008      	b.n	8008bf2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008be0:	f7f9 fa4a 	bl	8002078 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d901      	bls.n	8008bf2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e10e      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bf2:	4b39      	ldr	r3, [pc, #228]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1f0      	bne.n	8008be0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bfe:	4b36      	ldr	r3, [pc, #216]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008c00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c02:	4b37      	ldr	r3, [pc, #220]	@ (8008ce0 <HAL_RCC_OscConfig+0x774>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008c0e:	0112      	lsls	r2, r2, #4
 8008c10:	430a      	orrs	r2, r1
 8008c12:	4931      	ldr	r1, [pc, #196]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	628b      	str	r3, [r1, #40]	@ 0x28
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c26:	3b01      	subs	r3, #1
 8008c28:	025b      	lsls	r3, r3, #9
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	431a      	orrs	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c32:	3b01      	subs	r3, #1
 8008c34:	041b      	lsls	r3, r3, #16
 8008c36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c40:	3b01      	subs	r3, #1
 8008c42:	061b      	lsls	r3, r3, #24
 8008c44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008c48:	4923      	ldr	r1, [pc, #140]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008c4e:	4b22      	ldr	r3, [pc, #136]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c52:	4a21      	ldr	r2, [pc, #132]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008c54:	f023 0301 	bic.w	r3, r3, #1
 8008c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008c5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c5e:	4b21      	ldr	r3, [pc, #132]	@ (8008ce4 <HAL_RCC_OscConfig+0x778>)
 8008c60:	4013      	ands	r3, r2
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008c66:	00d2      	lsls	r2, r2, #3
 8008c68:	491b      	ldr	r1, [pc, #108]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c72:	f023 020c 	bic.w	r2, r3, #12
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c7a:	4917      	ldr	r1, [pc, #92]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008c80:	4b15      	ldr	r3, [pc, #84]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c84:	f023 0202 	bic.w	r2, r3, #2
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c8c:	4912      	ldr	r1, [pc, #72]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008c92:	4b11      	ldr	r3, [pc, #68]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c96:	4a10      	ldr	r2, [pc, #64]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca2:	4a0d      	ldr	r2, [pc, #52]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008caa:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cae:	4a0a      	ldr	r2, [pc, #40]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008cb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008cb6:	4b08      	ldr	r3, [pc, #32]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cba:	4a07      	ldr	r2, [pc, #28]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008cbc:	f043 0301 	orr.w	r3, r3, #1
 8008cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cc2:	4b05      	ldr	r3, [pc, #20]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a04      	ldr	r2, [pc, #16]	@ (8008cd8 <HAL_RCC_OscConfig+0x76c>)
 8008cc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cce:	f7f9 f9d3 	bl	8002078 <HAL_GetTick>
 8008cd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008cd4:	e011      	b.n	8008cfa <HAL_RCC_OscConfig+0x78e>
 8008cd6:	bf00      	nop
 8008cd8:	58024400 	.word	0x58024400
 8008cdc:	58024800 	.word	0x58024800
 8008ce0:	fffffc0c 	.word	0xfffffc0c
 8008ce4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ce8:	f7f9 f9c6 	bl	8002078 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e08a      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008cfa:	4b47      	ldr	r3, [pc, #284]	@ (8008e18 <HAL_RCC_OscConfig+0x8ac>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0f0      	beq.n	8008ce8 <HAL_RCC_OscConfig+0x77c>
 8008d06:	e082      	b.n	8008e0e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d08:	4b43      	ldr	r3, [pc, #268]	@ (8008e18 <HAL_RCC_OscConfig+0x8ac>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a42      	ldr	r2, [pc, #264]	@ (8008e18 <HAL_RCC_OscConfig+0x8ac>)
 8008d0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d14:	f7f9 f9b0 	bl	8002078 <HAL_GetTick>
 8008d18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d1a:	e008      	b.n	8008d2e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d1c:	f7f9 f9ac 	bl	8002078 <HAL_GetTick>
 8008d20:	4602      	mov	r2, r0
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d901      	bls.n	8008d2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e070      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8008e18 <HAL_RCC_OscConfig+0x8ac>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1f0      	bne.n	8008d1c <HAL_RCC_OscConfig+0x7b0>
 8008d3a:	e068      	b.n	8008e0e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008d3c:	4b36      	ldr	r3, [pc, #216]	@ (8008e18 <HAL_RCC_OscConfig+0x8ac>)
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008d42:	4b35      	ldr	r3, [pc, #212]	@ (8008e18 <HAL_RCC_OscConfig+0x8ac>)
 8008d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d031      	beq.n	8008db4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f003 0203 	and.w	r2, r3, #3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d12a      	bne.n	8008db4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	091b      	lsrs	r3, r3, #4
 8008d62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d122      	bne.n	8008db4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d11a      	bne.n	8008db4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	0a5b      	lsrs	r3, r3, #9
 8008d82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d111      	bne.n	8008db4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	0c1b      	lsrs	r3, r3, #16
 8008d94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d108      	bne.n	8008db4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	0e1b      	lsrs	r3, r3, #24
 8008da6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d001      	beq.n	8008db8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e02b      	b.n	8008e10 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008db8:	4b17      	ldr	r3, [pc, #92]	@ (8008e18 <HAL_RCC_OscConfig+0x8ac>)
 8008dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dbc:	08db      	lsrs	r3, r3, #3
 8008dbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dc2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d01f      	beq.n	8008e0e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008dce:	4b12      	ldr	r3, [pc, #72]	@ (8008e18 <HAL_RCC_OscConfig+0x8ac>)
 8008dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd2:	4a11      	ldr	r2, [pc, #68]	@ (8008e18 <HAL_RCC_OscConfig+0x8ac>)
 8008dd4:	f023 0301 	bic.w	r3, r3, #1
 8008dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008dda:	f7f9 f94d 	bl	8002078 <HAL_GetTick>
 8008dde:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008de0:	bf00      	nop
 8008de2:	f7f9 f949 	bl	8002078 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d0f9      	beq.n	8008de2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008dee:	4b0a      	ldr	r3, [pc, #40]	@ (8008e18 <HAL_RCC_OscConfig+0x8ac>)
 8008df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008df2:	4b0a      	ldr	r3, [pc, #40]	@ (8008e1c <HAL_RCC_OscConfig+0x8b0>)
 8008df4:	4013      	ands	r3, r2
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008dfa:	00d2      	lsls	r2, r2, #3
 8008dfc:	4906      	ldr	r1, [pc, #24]	@ (8008e18 <HAL_RCC_OscConfig+0x8ac>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008e02:	4b05      	ldr	r3, [pc, #20]	@ (8008e18 <HAL_RCC_OscConfig+0x8ac>)
 8008e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e06:	4a04      	ldr	r2, [pc, #16]	@ (8008e18 <HAL_RCC_OscConfig+0x8ac>)
 8008e08:	f043 0301 	orr.w	r3, r3, #1
 8008e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3730      	adds	r7, #48	@ 0x30
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	58024400 	.word	0x58024400
 8008e1c:	ffff0007 	.word	0xffff0007

08008e20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e19c      	b.n	800916e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e34:	4b8a      	ldr	r3, [pc, #552]	@ (8009060 <HAL_RCC_ClockConfig+0x240>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 030f 	and.w	r3, r3, #15
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d910      	bls.n	8008e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e42:	4b87      	ldr	r3, [pc, #540]	@ (8009060 <HAL_RCC_ClockConfig+0x240>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f023 020f 	bic.w	r2, r3, #15
 8008e4a:	4985      	ldr	r1, [pc, #532]	@ (8009060 <HAL_RCC_ClockConfig+0x240>)
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e52:	4b83      	ldr	r3, [pc, #524]	@ (8009060 <HAL_RCC_ClockConfig+0x240>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 030f 	and.w	r3, r3, #15
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d001      	beq.n	8008e64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e184      	b.n	800916e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d010      	beq.n	8008e92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	691a      	ldr	r2, [r3, #16]
 8008e74:	4b7b      	ldr	r3, [pc, #492]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d908      	bls.n	8008e92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e80:	4b78      	ldr	r3, [pc, #480]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	4975      	ldr	r1, [pc, #468]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0308 	and.w	r3, r3, #8
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d010      	beq.n	8008ec0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	695a      	ldr	r2, [r3, #20]
 8008ea2:	4b70      	ldr	r3, [pc, #448]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d908      	bls.n	8008ec0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008eae:	4b6d      	ldr	r3, [pc, #436]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	496a      	ldr	r1, [pc, #424]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0310 	and.w	r3, r3, #16
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d010      	beq.n	8008eee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	699a      	ldr	r2, [r3, #24]
 8008ed0:	4b64      	ldr	r3, [pc, #400]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d908      	bls.n	8008eee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008edc:	4b61      	ldr	r3, [pc, #388]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	495e      	ldr	r1, [pc, #376]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0320 	and.w	r3, r3, #32
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d010      	beq.n	8008f1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	69da      	ldr	r2, [r3, #28]
 8008efe:	4b59      	ldr	r3, [pc, #356]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d908      	bls.n	8008f1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008f0a:	4b56      	ldr	r3, [pc, #344]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	4953      	ldr	r1, [pc, #332]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0302 	and.w	r3, r3, #2
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d010      	beq.n	8008f4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68da      	ldr	r2, [r3, #12]
 8008f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	f003 030f 	and.w	r3, r3, #15
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d908      	bls.n	8008f4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f38:	4b4a      	ldr	r3, [pc, #296]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	f023 020f 	bic.w	r2, r3, #15
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	4947      	ldr	r1, [pc, #284]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d055      	beq.n	8009002 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008f56:	4b43      	ldr	r3, [pc, #268]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	4940      	ldr	r1, [pc, #256]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d107      	bne.n	8008f80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f70:	4b3c      	ldr	r3, [pc, #240]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d121      	bne.n	8008fc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e0f6      	b.n	800916e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	2b03      	cmp	r3, #3
 8008f86:	d107      	bne.n	8008f98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f88:	4b36      	ldr	r3, [pc, #216]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d115      	bne.n	8008fc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e0ea      	b.n	800916e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d107      	bne.n	8008fb0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008fa0:	4b30      	ldr	r3, [pc, #192]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d109      	bne.n	8008fc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e0de      	b.n	800916e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e0d6      	b.n	800916e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008fc0:	4b28      	ldr	r3, [pc, #160]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	f023 0207 	bic.w	r2, r3, #7
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	4925      	ldr	r1, [pc, #148]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fd2:	f7f9 f851 	bl	8002078 <HAL_GetTick>
 8008fd6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fd8:	e00a      	b.n	8008ff0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fda:	f7f9 f84d 	bl	8002078 <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d901      	bls.n	8008ff0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e0be      	b.n	800916e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d1eb      	bne.n	8008fda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	2b00      	cmp	r3, #0
 800900c:	d010      	beq.n	8009030 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	4b14      	ldr	r3, [pc, #80]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	f003 030f 	and.w	r3, r3, #15
 800901a:	429a      	cmp	r2, r3
 800901c:	d208      	bcs.n	8009030 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800901e:	4b11      	ldr	r3, [pc, #68]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	f023 020f 	bic.w	r2, r3, #15
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	490e      	ldr	r1, [pc, #56]	@ (8009064 <HAL_RCC_ClockConfig+0x244>)
 800902c:	4313      	orrs	r3, r2
 800902e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009030:	4b0b      	ldr	r3, [pc, #44]	@ (8009060 <HAL_RCC_ClockConfig+0x240>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 030f 	and.w	r3, r3, #15
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	429a      	cmp	r2, r3
 800903c:	d214      	bcs.n	8009068 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800903e:	4b08      	ldr	r3, [pc, #32]	@ (8009060 <HAL_RCC_ClockConfig+0x240>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f023 020f 	bic.w	r2, r3, #15
 8009046:	4906      	ldr	r1, [pc, #24]	@ (8009060 <HAL_RCC_ClockConfig+0x240>)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	4313      	orrs	r3, r2
 800904c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800904e:	4b04      	ldr	r3, [pc, #16]	@ (8009060 <HAL_RCC_ClockConfig+0x240>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 030f 	and.w	r3, r3, #15
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	429a      	cmp	r2, r3
 800905a:	d005      	beq.n	8009068 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e086      	b.n	800916e <HAL_RCC_ClockConfig+0x34e>
 8009060:	52002000 	.word	0x52002000
 8009064:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b00      	cmp	r3, #0
 8009072:	d010      	beq.n	8009096 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	691a      	ldr	r2, [r3, #16]
 8009078:	4b3f      	ldr	r3, [pc, #252]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009080:	429a      	cmp	r2, r3
 8009082:	d208      	bcs.n	8009096 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009084:	4b3c      	ldr	r3, [pc, #240]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	4939      	ldr	r1, [pc, #228]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 8009092:	4313      	orrs	r3, r2
 8009094:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0308 	and.w	r3, r3, #8
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d010      	beq.n	80090c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	695a      	ldr	r2, [r3, #20]
 80090a6:	4b34      	ldr	r3, [pc, #208]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d208      	bcs.n	80090c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80090b2:	4b31      	ldr	r3, [pc, #196]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	695b      	ldr	r3, [r3, #20]
 80090be:	492e      	ldr	r1, [pc, #184]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 80090c0:	4313      	orrs	r3, r2
 80090c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0310 	and.w	r3, r3, #16
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d010      	beq.n	80090f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	699a      	ldr	r2, [r3, #24]
 80090d4:	4b28      	ldr	r3, [pc, #160]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 80090d6:	69db      	ldr	r3, [r3, #28]
 80090d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80090dc:	429a      	cmp	r2, r3
 80090de:	d208      	bcs.n	80090f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80090e0:	4b25      	ldr	r3, [pc, #148]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 80090e2:	69db      	ldr	r3, [r3, #28]
 80090e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	4922      	ldr	r1, [pc, #136]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0320 	and.w	r3, r3, #32
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d010      	beq.n	8009120 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	69da      	ldr	r2, [r3, #28]
 8009102:	4b1d      	ldr	r3, [pc, #116]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800910a:	429a      	cmp	r2, r3
 800910c:	d208      	bcs.n	8009120 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800910e:	4b1a      	ldr	r3, [pc, #104]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	4917      	ldr	r1, [pc, #92]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 800911c:	4313      	orrs	r3, r2
 800911e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009120:	f000 f834 	bl	800918c <HAL_RCC_GetSysClockFreq>
 8009124:	4602      	mov	r2, r0
 8009126:	4b14      	ldr	r3, [pc, #80]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	0a1b      	lsrs	r3, r3, #8
 800912c:	f003 030f 	and.w	r3, r3, #15
 8009130:	4912      	ldr	r1, [pc, #72]	@ (800917c <HAL_RCC_ClockConfig+0x35c>)
 8009132:	5ccb      	ldrb	r3, [r1, r3]
 8009134:	f003 031f 	and.w	r3, r3, #31
 8009138:	fa22 f303 	lsr.w	r3, r2, r3
 800913c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800913e:	4b0e      	ldr	r3, [pc, #56]	@ (8009178 <HAL_RCC_ClockConfig+0x358>)
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	f003 030f 	and.w	r3, r3, #15
 8009146:	4a0d      	ldr	r2, [pc, #52]	@ (800917c <HAL_RCC_ClockConfig+0x35c>)
 8009148:	5cd3      	ldrb	r3, [r2, r3]
 800914a:	f003 031f 	and.w	r3, r3, #31
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	fa22 f303 	lsr.w	r3, r2, r3
 8009154:	4a0a      	ldr	r2, [pc, #40]	@ (8009180 <HAL_RCC_ClockConfig+0x360>)
 8009156:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009158:	4a0a      	ldr	r2, [pc, #40]	@ (8009184 <HAL_RCC_ClockConfig+0x364>)
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800915e:	4b0a      	ldr	r3, [pc, #40]	@ (8009188 <HAL_RCC_ClockConfig+0x368>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4618      	mov	r0, r3
 8009164:	f7f8 ff3e 	bl	8001fe4 <HAL_InitTick>
 8009168:	4603      	mov	r3, r0
 800916a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3718      	adds	r7, #24
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	58024400 	.word	0x58024400
 800917c:	0801d774 	.word	0x0801d774
 8009180:	24000004 	.word	0x24000004
 8009184:	24000000 	.word	0x24000000
 8009188:	24000008 	.word	0x24000008

0800918c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800918c:	b480      	push	{r7}
 800918e:	b089      	sub	sp, #36	@ 0x24
 8009190:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009192:	4bb3      	ldr	r3, [pc, #716]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800919a:	2b18      	cmp	r3, #24
 800919c:	f200 8155 	bhi.w	800944a <HAL_RCC_GetSysClockFreq+0x2be>
 80091a0:	a201      	add	r2, pc, #4	@ (adr r2, 80091a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80091a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a6:	bf00      	nop
 80091a8:	0800920d 	.word	0x0800920d
 80091ac:	0800944b 	.word	0x0800944b
 80091b0:	0800944b 	.word	0x0800944b
 80091b4:	0800944b 	.word	0x0800944b
 80091b8:	0800944b 	.word	0x0800944b
 80091bc:	0800944b 	.word	0x0800944b
 80091c0:	0800944b 	.word	0x0800944b
 80091c4:	0800944b 	.word	0x0800944b
 80091c8:	08009233 	.word	0x08009233
 80091cc:	0800944b 	.word	0x0800944b
 80091d0:	0800944b 	.word	0x0800944b
 80091d4:	0800944b 	.word	0x0800944b
 80091d8:	0800944b 	.word	0x0800944b
 80091dc:	0800944b 	.word	0x0800944b
 80091e0:	0800944b 	.word	0x0800944b
 80091e4:	0800944b 	.word	0x0800944b
 80091e8:	08009239 	.word	0x08009239
 80091ec:	0800944b 	.word	0x0800944b
 80091f0:	0800944b 	.word	0x0800944b
 80091f4:	0800944b 	.word	0x0800944b
 80091f8:	0800944b 	.word	0x0800944b
 80091fc:	0800944b 	.word	0x0800944b
 8009200:	0800944b 	.word	0x0800944b
 8009204:	0800944b 	.word	0x0800944b
 8009208:	0800923f 	.word	0x0800923f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800920c:	4b94      	ldr	r3, [pc, #592]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0320 	and.w	r3, r3, #32
 8009214:	2b00      	cmp	r3, #0
 8009216:	d009      	beq.n	800922c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009218:	4b91      	ldr	r3, [pc, #580]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	08db      	lsrs	r3, r3, #3
 800921e:	f003 0303 	and.w	r3, r3, #3
 8009222:	4a90      	ldr	r2, [pc, #576]	@ (8009464 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009224:	fa22 f303 	lsr.w	r3, r2, r3
 8009228:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800922a:	e111      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800922c:	4b8d      	ldr	r3, [pc, #564]	@ (8009464 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800922e:	61bb      	str	r3, [r7, #24]
      break;
 8009230:	e10e      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009232:	4b8d      	ldr	r3, [pc, #564]	@ (8009468 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009234:	61bb      	str	r3, [r7, #24]
      break;
 8009236:	e10b      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009238:	4b8c      	ldr	r3, [pc, #560]	@ (800946c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800923a:	61bb      	str	r3, [r7, #24]
      break;
 800923c:	e108      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800923e:	4b88      	ldr	r3, [pc, #544]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009242:	f003 0303 	and.w	r3, r3, #3
 8009246:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009248:	4b85      	ldr	r3, [pc, #532]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800924a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924c:	091b      	lsrs	r3, r3, #4
 800924e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009252:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009254:	4b82      	ldr	r3, [pc, #520]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800925e:	4b80      	ldr	r3, [pc, #512]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009262:	08db      	lsrs	r3, r3, #3
 8009264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	fb02 f303 	mul.w	r3, r2, r3
 800926e:	ee07 3a90 	vmov	s15, r3
 8009272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009276:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 80e1 	beq.w	8009444 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	2b02      	cmp	r3, #2
 8009286:	f000 8083 	beq.w	8009390 <HAL_RCC_GetSysClockFreq+0x204>
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b02      	cmp	r3, #2
 800928e:	f200 80a1 	bhi.w	80093d4 <HAL_RCC_GetSysClockFreq+0x248>
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <HAL_RCC_GetSysClockFreq+0x114>
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d056      	beq.n	800934c <HAL_RCC_GetSysClockFreq+0x1c0>
 800929e:	e099      	b.n	80093d4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092a0:	4b6f      	ldr	r3, [pc, #444]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0320 	and.w	r3, r3, #32
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d02d      	beq.n	8009308 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092ac:	4b6c      	ldr	r3, [pc, #432]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	08db      	lsrs	r3, r3, #3
 80092b2:	f003 0303 	and.w	r3, r3, #3
 80092b6:	4a6b      	ldr	r2, [pc, #428]	@ (8009464 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80092b8:	fa22 f303 	lsr.w	r3, r2, r3
 80092bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	ee07 3a90 	vmov	s15, r3
 80092c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	ee07 3a90 	vmov	s15, r3
 80092ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d6:	4b62      	ldr	r3, [pc, #392]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80092ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009470 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009302:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009306:	e087      	b.n	8009418 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009312:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009474 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800931a:	4b51      	ldr	r3, [pc, #324]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800931c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009322:	ee07 3a90 	vmov	s15, r3
 8009326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800932a:	ed97 6a02 	vldr	s12, [r7, #8]
 800932e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009470 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800933a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800933e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800934a:	e065      	b.n	8009418 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	ee07 3a90 	vmov	s15, r3
 8009352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009356:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009478 <HAL_RCC_GetSysClockFreq+0x2ec>
 800935a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800935e:	4b40      	ldr	r3, [pc, #256]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009366:	ee07 3a90 	vmov	s15, r3
 800936a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800936e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009372:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009470 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800937a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800937e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800938a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800938e:	e043      	b.n	8009418 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	ee07 3a90 	vmov	s15, r3
 8009396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800939a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800947c <HAL_RCC_GetSysClockFreq+0x2f0>
 800939e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093a2:	4b2f      	ldr	r3, [pc, #188]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80093b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009470 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80093d2:	e021      	b.n	8009418 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	ee07 3a90 	vmov	s15, r3
 80093da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009478 <HAL_RCC_GetSysClockFreq+0x2ec>
 80093e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ee:	ee07 3a90 	vmov	s15, r3
 80093f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80093fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009470 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800940a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800940e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009412:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009416:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009418:	4b11      	ldr	r3, [pc, #68]	@ (8009460 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800941a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800941c:	0a5b      	lsrs	r3, r3, #9
 800941e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009422:	3301      	adds	r3, #1
 8009424:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	ee07 3a90 	vmov	s15, r3
 800942c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009430:	edd7 6a07 	vldr	s13, [r7, #28]
 8009434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800943c:	ee17 3a90 	vmov	r3, s15
 8009440:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009442:	e005      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009444:	2300      	movs	r3, #0
 8009446:	61bb      	str	r3, [r7, #24]
      break;
 8009448:	e002      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800944a:	4b07      	ldr	r3, [pc, #28]	@ (8009468 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800944c:	61bb      	str	r3, [r7, #24]
      break;
 800944e:	bf00      	nop
  }

  return sysclockfreq;
 8009450:	69bb      	ldr	r3, [r7, #24]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3724      	adds	r7, #36	@ 0x24
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	58024400 	.word	0x58024400
 8009464:	03d09000 	.word	0x03d09000
 8009468:	003d0900 	.word	0x003d0900
 800946c:	017d7840 	.word	0x017d7840
 8009470:	46000000 	.word	0x46000000
 8009474:	4c742400 	.word	0x4c742400
 8009478:	4a742400 	.word	0x4a742400
 800947c:	4bbebc20 	.word	0x4bbebc20

08009480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009486:	f7ff fe81 	bl	800918c <HAL_RCC_GetSysClockFreq>
 800948a:	4602      	mov	r2, r0
 800948c:	4b10      	ldr	r3, [pc, #64]	@ (80094d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	0a1b      	lsrs	r3, r3, #8
 8009492:	f003 030f 	and.w	r3, r3, #15
 8009496:	490f      	ldr	r1, [pc, #60]	@ (80094d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009498:	5ccb      	ldrb	r3, [r1, r3]
 800949a:	f003 031f 	and.w	r3, r3, #31
 800949e:	fa22 f303 	lsr.w	r3, r2, r3
 80094a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80094a4:	4b0a      	ldr	r3, [pc, #40]	@ (80094d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	f003 030f 	and.w	r3, r3, #15
 80094ac:	4a09      	ldr	r2, [pc, #36]	@ (80094d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80094ae:	5cd3      	ldrb	r3, [r2, r3]
 80094b0:	f003 031f 	and.w	r3, r3, #31
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	fa22 f303 	lsr.w	r3, r2, r3
 80094ba:	4a07      	ldr	r2, [pc, #28]	@ (80094d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80094bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80094be:	4a07      	ldr	r2, [pc, #28]	@ (80094dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80094c4:	4b04      	ldr	r3, [pc, #16]	@ (80094d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80094c6:	681b      	ldr	r3, [r3, #0]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3708      	adds	r7, #8
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	58024400 	.word	0x58024400
 80094d4:	0801d774 	.word	0x0801d774
 80094d8:	24000004 	.word	0x24000004
 80094dc:	24000000 	.word	0x24000000

080094e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80094e4:	f7ff ffcc 	bl	8009480 <HAL_RCC_GetHCLKFreq>
 80094e8:	4602      	mov	r2, r0
 80094ea:	4b06      	ldr	r3, [pc, #24]	@ (8009504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	091b      	lsrs	r3, r3, #4
 80094f0:	f003 0307 	and.w	r3, r3, #7
 80094f4:	4904      	ldr	r1, [pc, #16]	@ (8009508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80094f6:	5ccb      	ldrb	r3, [r1, r3]
 80094f8:	f003 031f 	and.w	r3, r3, #31
 80094fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009500:	4618      	mov	r0, r3
 8009502:	bd80      	pop	{r7, pc}
 8009504:	58024400 	.word	0x58024400
 8009508:	0801d774 	.word	0x0801d774

0800950c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009510:	f7ff ffb6 	bl	8009480 <HAL_RCC_GetHCLKFreq>
 8009514:	4602      	mov	r2, r0
 8009516:	4b06      	ldr	r3, [pc, #24]	@ (8009530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	0a1b      	lsrs	r3, r3, #8
 800951c:	f003 0307 	and.w	r3, r3, #7
 8009520:	4904      	ldr	r1, [pc, #16]	@ (8009534 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009522:	5ccb      	ldrb	r3, [r1, r3]
 8009524:	f003 031f 	and.w	r3, r3, #31
 8009528:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800952c:	4618      	mov	r0, r3
 800952e:	bd80      	pop	{r7, pc}
 8009530:	58024400 	.word	0x58024400
 8009534:	0801d774 	.word	0x0801d774

08009538 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800953c:	b0ca      	sub	sp, #296	@ 0x128
 800953e:	af00      	add	r7, sp, #0
 8009540:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009544:	2300      	movs	r3, #0
 8009546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800954a:	2300      	movs	r3, #0
 800954c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800955c:	2500      	movs	r5, #0
 800955e:	ea54 0305 	orrs.w	r3, r4, r5
 8009562:	d049      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009568:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800956a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800956e:	d02f      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009570:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009574:	d828      	bhi.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009576:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800957a:	d01a      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800957c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009580:	d822      	bhi.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d003      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009586:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800958a:	d007      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800958c:	e01c      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800958e:	4bb8      	ldr	r3, [pc, #736]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009592:	4ab7      	ldr	r2, [pc, #732]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009598:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800959a:	e01a      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800959c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095a0:	3308      	adds	r3, #8
 80095a2:	2102      	movs	r1, #2
 80095a4:	4618      	mov	r0, r3
 80095a6:	f001 fc8f 	bl	800aec8 <RCCEx_PLL2_Config>
 80095aa:	4603      	mov	r3, r0
 80095ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80095b0:	e00f      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b6:	3328      	adds	r3, #40	@ 0x28
 80095b8:	2102      	movs	r1, #2
 80095ba:	4618      	mov	r0, r3
 80095bc:	f001 fd36 	bl	800b02c <RCCEx_PLL3_Config>
 80095c0:	4603      	mov	r3, r0
 80095c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80095c6:	e004      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095ce:	e000      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80095d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10a      	bne.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80095da:	4ba5      	ldr	r3, [pc, #660]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80095e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095e8:	4aa1      	ldr	r2, [pc, #644]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095ea:	430b      	orrs	r3, r1
 80095ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80095ee:	e003      	b.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80095f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009604:	f04f 0900 	mov.w	r9, #0
 8009608:	ea58 0309 	orrs.w	r3, r8, r9
 800960c:	d047      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800960e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009614:	2b04      	cmp	r3, #4
 8009616:	d82a      	bhi.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009618:	a201      	add	r2, pc, #4	@ (adr r2, 8009620 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009635 	.word	0x08009635
 8009624:	08009643 	.word	0x08009643
 8009628:	08009659 	.word	0x08009659
 800962c:	08009677 	.word	0x08009677
 8009630:	08009677 	.word	0x08009677
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009634:	4b8e      	ldr	r3, [pc, #568]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009638:	4a8d      	ldr	r2, [pc, #564]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800963a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800963e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009640:	e01a      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009646:	3308      	adds	r3, #8
 8009648:	2100      	movs	r1, #0
 800964a:	4618      	mov	r0, r3
 800964c:	f001 fc3c 	bl	800aec8 <RCCEx_PLL2_Config>
 8009650:	4603      	mov	r3, r0
 8009652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009656:	e00f      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800965c:	3328      	adds	r3, #40	@ 0x28
 800965e:	2100      	movs	r1, #0
 8009660:	4618      	mov	r0, r3
 8009662:	f001 fce3 	bl	800b02c <RCCEx_PLL3_Config>
 8009666:	4603      	mov	r3, r0
 8009668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800966c:	e004      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009674:	e000      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10a      	bne.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009680:	4b7b      	ldr	r3, [pc, #492]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009684:	f023 0107 	bic.w	r1, r3, #7
 8009688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800968c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800968e:	4a78      	ldr	r2, [pc, #480]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009690:	430b      	orrs	r3, r1
 8009692:	6513      	str	r3, [r2, #80]	@ 0x50
 8009694:	e003      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800969a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800969e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80096aa:	f04f 0b00 	mov.w	fp, #0
 80096ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80096b2:	d04c      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80096b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096be:	d030      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80096c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096c4:	d829      	bhi.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80096c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80096c8:	d02d      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80096ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80096cc:	d825      	bhi.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80096ce:	2b80      	cmp	r3, #128	@ 0x80
 80096d0:	d018      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80096d2:	2b80      	cmp	r3, #128	@ 0x80
 80096d4:	d821      	bhi.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d002      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80096da:	2b40      	cmp	r3, #64	@ 0x40
 80096dc:	d007      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80096de:	e01c      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e0:	4b63      	ldr	r3, [pc, #396]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e4:	4a62      	ldr	r2, [pc, #392]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80096ec:	e01c      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f2:	3308      	adds	r3, #8
 80096f4:	2100      	movs	r1, #0
 80096f6:	4618      	mov	r0, r3
 80096f8:	f001 fbe6 	bl	800aec8 <RCCEx_PLL2_Config>
 80096fc:	4603      	mov	r3, r0
 80096fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009702:	e011      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009708:	3328      	adds	r3, #40	@ 0x28
 800970a:	2100      	movs	r1, #0
 800970c:	4618      	mov	r0, r3
 800970e:	f001 fc8d 	bl	800b02c <RCCEx_PLL3_Config>
 8009712:	4603      	mov	r3, r0
 8009714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009718:	e006      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009720:	e002      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009722:	bf00      	nop
 8009724:	e000      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10a      	bne.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009730:	4b4f      	ldr	r3, [pc, #316]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009734:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800973c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800973e:	4a4c      	ldr	r2, [pc, #304]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009740:	430b      	orrs	r3, r1
 8009742:	6513      	str	r3, [r2, #80]	@ 0x50
 8009744:	e003      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800974a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800974e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800975a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800975e:	2300      	movs	r3, #0
 8009760:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009764:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009768:	460b      	mov	r3, r1
 800976a:	4313      	orrs	r3, r2
 800976c:	d053      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800976e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009772:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009776:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800977a:	d035      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800977c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009780:	d82e      	bhi.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009782:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009786:	d031      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009788:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800978c:	d828      	bhi.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800978e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009792:	d01a      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009794:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009798:	d822      	bhi.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800979e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097a2:	d007      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80097a4:	e01c      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a6:	4b32      	ldr	r3, [pc, #200]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097aa:	4a31      	ldr	r2, [pc, #196]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097b2:	e01c      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097b8:	3308      	adds	r3, #8
 80097ba:	2100      	movs	r1, #0
 80097bc:	4618      	mov	r0, r3
 80097be:	f001 fb83 	bl	800aec8 <RCCEx_PLL2_Config>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80097c8:	e011      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ce:	3328      	adds	r3, #40	@ 0x28
 80097d0:	2100      	movs	r1, #0
 80097d2:	4618      	mov	r0, r3
 80097d4:	f001 fc2a 	bl	800b02c <RCCEx_PLL3_Config>
 80097d8:	4603      	mov	r3, r0
 80097da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097de:	e006      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097e6:	e002      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80097e8:	bf00      	nop
 80097ea:	e000      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80097ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10b      	bne.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80097f6:	4b1e      	ldr	r3, [pc, #120]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097fa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80097fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009802:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009806:	4a1a      	ldr	r2, [pc, #104]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009808:	430b      	orrs	r3, r1
 800980a:	6593      	str	r3, [r2, #88]	@ 0x58
 800980c:	e003      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800980e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009822:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009826:	2300      	movs	r3, #0
 8009828:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800982c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009830:	460b      	mov	r3, r1
 8009832:	4313      	orrs	r3, r2
 8009834:	d056      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800983a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800983e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009842:	d038      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009844:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009848:	d831      	bhi.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800984a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800984e:	d034      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009850:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009854:	d82b      	bhi.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800985a:	d01d      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800985c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009860:	d825      	bhi.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009862:	2b00      	cmp	r3, #0
 8009864:	d006      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009866:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800986a:	d00a      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800986c:	e01f      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800986e:	bf00      	nop
 8009870:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009874:	4ba2      	ldr	r3, [pc, #648]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009878:	4aa1      	ldr	r2, [pc, #644]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800987a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800987e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009880:	e01c      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009886:	3308      	adds	r3, #8
 8009888:	2100      	movs	r1, #0
 800988a:	4618      	mov	r0, r3
 800988c:	f001 fb1c 	bl	800aec8 <RCCEx_PLL2_Config>
 8009890:	4603      	mov	r3, r0
 8009892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009896:	e011      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800989c:	3328      	adds	r3, #40	@ 0x28
 800989e:	2100      	movs	r1, #0
 80098a0:	4618      	mov	r0, r3
 80098a2:	f001 fbc3 	bl	800b02c <RCCEx_PLL3_Config>
 80098a6:	4603      	mov	r3, r0
 80098a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098ac:	e006      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098b4:	e002      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80098b6:	bf00      	nop
 80098b8:	e000      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80098ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10b      	bne.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80098c4:	4b8e      	ldr	r3, [pc, #568]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80098cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80098d4:	4a8a      	ldr	r2, [pc, #552]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098d6:	430b      	orrs	r3, r1
 80098d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80098da:	e003      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80098e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80098f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80098f4:	2300      	movs	r3, #0
 80098f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80098fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80098fe:	460b      	mov	r3, r1
 8009900:	4313      	orrs	r3, r2
 8009902:	d03a      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800990a:	2b30      	cmp	r3, #48	@ 0x30
 800990c:	d01f      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800990e:	2b30      	cmp	r3, #48	@ 0x30
 8009910:	d819      	bhi.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009912:	2b20      	cmp	r3, #32
 8009914:	d00c      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009916:	2b20      	cmp	r3, #32
 8009918:	d815      	bhi.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d019      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800991e:	2b10      	cmp	r3, #16
 8009920:	d111      	bne.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009922:	4b77      	ldr	r3, [pc, #476]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009926:	4a76      	ldr	r2, [pc, #472]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800992c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800992e:	e011      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009934:	3308      	adds	r3, #8
 8009936:	2102      	movs	r1, #2
 8009938:	4618      	mov	r0, r3
 800993a:	f001 fac5 	bl	800aec8 <RCCEx_PLL2_Config>
 800993e:	4603      	mov	r3, r0
 8009940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009944:	e006      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800994c:	e002      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800994e:	bf00      	nop
 8009950:	e000      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800995c:	4b68      	ldr	r3, [pc, #416]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800995e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009960:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800996a:	4a65      	ldr	r2, [pc, #404]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800996c:	430b      	orrs	r3, r1
 800996e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009970:	e003      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009976:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800997a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009986:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800998a:	2300      	movs	r3, #0
 800998c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009990:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009994:	460b      	mov	r3, r1
 8009996:	4313      	orrs	r3, r2
 8009998:	d051      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800999a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800999e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099a4:	d035      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80099a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099aa:	d82e      	bhi.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80099ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099b0:	d031      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80099b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099b6:	d828      	bhi.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80099b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099bc:	d01a      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80099be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099c2:	d822      	bhi.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d003      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80099c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099cc:	d007      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80099ce:	e01c      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099d0:	4b4b      	ldr	r3, [pc, #300]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d4:	4a4a      	ldr	r2, [pc, #296]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099dc:	e01c      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e2:	3308      	adds	r3, #8
 80099e4:	2100      	movs	r1, #0
 80099e6:	4618      	mov	r0, r3
 80099e8:	f001 fa6e 	bl	800aec8 <RCCEx_PLL2_Config>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099f2:	e011      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099f8:	3328      	adds	r3, #40	@ 0x28
 80099fa:	2100      	movs	r1, #0
 80099fc:	4618      	mov	r0, r3
 80099fe:	f001 fb15 	bl	800b02c <RCCEx_PLL3_Config>
 8009a02:	4603      	mov	r3, r0
 8009a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a08:	e006      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a10:	e002      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009a12:	bf00      	nop
 8009a14:	e000      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a20:	4b37      	ldr	r3, [pc, #220]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a2e:	4a34      	ldr	r2, [pc, #208]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a30:	430b      	orrs	r3, r1
 8009a32:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a34:	e003      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a4e:	2300      	movs	r3, #0
 8009a50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009a54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	d056      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a68:	d033      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009a6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009a6e:	d82c      	bhi.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009a74:	d02f      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009a76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009a7a:	d826      	bhi.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a80:	d02b      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009a82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a86:	d820      	bhi.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a8c:	d012      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009a8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a92:	d81a      	bhi.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d022      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a9c:	d115      	bne.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f001 fa0e 	bl	800aec8 <RCCEx_PLL2_Config>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ab2:	e015      	b.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab8:	3328      	adds	r3, #40	@ 0x28
 8009aba:	2101      	movs	r1, #1
 8009abc:	4618      	mov	r0, r3
 8009abe:	f001 fab5 	bl	800b02c <RCCEx_PLL3_Config>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ac8:	e00a      	b.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ad0:	e006      	b.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009ad2:	bf00      	nop
 8009ad4:	e004      	b.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009ad6:	bf00      	nop
 8009ad8:	e002      	b.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009ada:	bf00      	nop
 8009adc:	e000      	b.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10d      	bne.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009ae8:	4b05      	ldr	r3, [pc, #20]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009af6:	4a02      	ldr	r2, [pc, #8]	@ (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009af8:	430b      	orrs	r3, r1
 8009afa:	6513      	str	r3, [r2, #80]	@ 0x50
 8009afc:	e006      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009afe:	bf00      	nop
 8009b00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009b18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b22:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009b26:	460b      	mov	r3, r1
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	d055      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b38:	d033      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b3e:	d82c      	bhi.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b44:	d02f      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b4a:	d826      	bhi.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b50:	d02b      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009b52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b56:	d820      	bhi.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b5c:	d012      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009b5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b62:	d81a      	bhi.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d022      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009b68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b6c:	d115      	bne.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b72:	3308      	adds	r3, #8
 8009b74:	2101      	movs	r1, #1
 8009b76:	4618      	mov	r0, r3
 8009b78:	f001 f9a6 	bl	800aec8 <RCCEx_PLL2_Config>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009b82:	e015      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b88:	3328      	adds	r3, #40	@ 0x28
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f001 fa4d 	bl	800b02c <RCCEx_PLL3_Config>
 8009b92:	4603      	mov	r3, r0
 8009b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009b98:	e00a      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ba0:	e006      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ba2:	bf00      	nop
 8009ba4:	e004      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ba6:	bf00      	nop
 8009ba8:	e002      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009baa:	bf00      	nop
 8009bac:	e000      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10b      	bne.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009bb8:	4ba3      	ldr	r3, [pc, #652]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bbc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009bc8:	4a9f      	ldr	r2, [pc, #636]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bca:	430b      	orrs	r3, r1
 8009bcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bce:	e003      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009be4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009be8:	2300      	movs	r3, #0
 8009bea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009bee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	d037      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c02:	d00e      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009c04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c08:	d816      	bhi.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d018      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009c0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c12:	d111      	bne.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c14:	4b8c      	ldr	r3, [pc, #560]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c18:	4a8b      	ldr	r2, [pc, #556]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c20:	e00f      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c26:	3308      	adds	r3, #8
 8009c28:	2101      	movs	r1, #1
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f001 f94c 	bl	800aec8 <RCCEx_PLL2_Config>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c36:	e004      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c3e:	e000      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10a      	bne.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c58:	4a7b      	ldr	r2, [pc, #492]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c5a:	430b      	orrs	r3, r1
 8009c5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c5e:	e003      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009c74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009c7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009c82:	460b      	mov	r3, r1
 8009c84:	4313      	orrs	r3, r2
 8009c86:	d039      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	d81c      	bhi.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009c92:	a201      	add	r2, pc, #4	@ (adr r2, 8009c98 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c98:	08009cd5 	.word	0x08009cd5
 8009c9c:	08009ca9 	.word	0x08009ca9
 8009ca0:	08009cb7 	.word	0x08009cb7
 8009ca4:	08009cd5 	.word	0x08009cd5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ca8:	4b67      	ldr	r3, [pc, #412]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cac:	4a66      	ldr	r2, [pc, #408]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009cb4:	e00f      	b.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cba:	3308      	adds	r3, #8
 8009cbc:	2102      	movs	r1, #2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f001 f902 	bl	800aec8 <RCCEx_PLL2_Config>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009cca:	e004      	b.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cd2:	e000      	b.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10a      	bne.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009cde:	4b5a      	ldr	r3, [pc, #360]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ce2:	f023 0103 	bic.w	r1, r3, #3
 8009ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cec:	4a56      	ldr	r2, [pc, #344]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cee:	430b      	orrs	r3, r1
 8009cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009cf2:	e003      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009d08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009d16:	460b      	mov	r3, r1
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	f000 809f 	beq.w	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d1e:	4b4b      	ldr	r3, [pc, #300]	@ (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a4a      	ldr	r2, [pc, #296]	@ (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d2a:	f7f8 f9a5 	bl	8002078 <HAL_GetTick>
 8009d2e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d32:	e00b      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d34:	f7f8 f9a0 	bl	8002078 <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	2b64      	cmp	r3, #100	@ 0x64
 8009d42:	d903      	bls.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d4a:	e005      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d4c:	4b3f      	ldr	r3, [pc, #252]	@ (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d0ed      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d179      	bne.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d60:	4b39      	ldr	r3, [pc, #228]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d6c:	4053      	eors	r3, r2
 8009d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d015      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d76:	4b34      	ldr	r3, [pc, #208]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d7e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d82:	4b31      	ldr	r3, [pc, #196]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d86:	4a30      	ldr	r2, [pc, #192]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d8c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d92:	4a2d      	ldr	r2, [pc, #180]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d98:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d9a:	4a2b      	ldr	r2, [pc, #172]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009da0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dae:	d118      	bne.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009db0:	f7f8 f962 	bl	8002078 <HAL_GetTick>
 8009db4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009db8:	e00d      	b.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dba:	f7f8 f95d 	bl	8002078 <HAL_GetTick>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009dc4:	1ad2      	subs	r2, r2, r3
 8009dc6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d903      	bls.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009dce:	2303      	movs	r3, #3
 8009dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009dd4:	e005      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0eb      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d129      	bne.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009df6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dfa:	d10e      	bne.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009dfc:	4b12      	ldr	r3, [pc, #72]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009e0c:	091a      	lsrs	r2, r3, #4
 8009e0e:	4b10      	ldr	r3, [pc, #64]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	4a0d      	ldr	r2, [pc, #52]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e14:	430b      	orrs	r3, r1
 8009e16:	6113      	str	r3, [r2, #16]
 8009e18:	e005      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009e24:	6113      	str	r3, [r2, #16]
 8009e26:	4b08      	ldr	r3, [pc, #32]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e28:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e36:	4a04      	ldr	r2, [pc, #16]	@ (8009e48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e38:	430b      	orrs	r3, r1
 8009e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e3c:	e00e      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009e46:	e009      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009e48:	58024400 	.word	0x58024400
 8009e4c:	58024800 	.word	0x58024800
 8009e50:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	f002 0301 	and.w	r3, r2, #1
 8009e68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009e76:	460b      	mov	r3, r1
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	f000 8089 	beq.w	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e84:	2b28      	cmp	r3, #40	@ 0x28
 8009e86:	d86b      	bhi.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009e88:	a201      	add	r2, pc, #4	@ (adr r2, 8009e90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009f69 	.word	0x08009f69
 8009e94:	08009f61 	.word	0x08009f61
 8009e98:	08009f61 	.word	0x08009f61
 8009e9c:	08009f61 	.word	0x08009f61
 8009ea0:	08009f61 	.word	0x08009f61
 8009ea4:	08009f61 	.word	0x08009f61
 8009ea8:	08009f61 	.word	0x08009f61
 8009eac:	08009f61 	.word	0x08009f61
 8009eb0:	08009f35 	.word	0x08009f35
 8009eb4:	08009f61 	.word	0x08009f61
 8009eb8:	08009f61 	.word	0x08009f61
 8009ebc:	08009f61 	.word	0x08009f61
 8009ec0:	08009f61 	.word	0x08009f61
 8009ec4:	08009f61 	.word	0x08009f61
 8009ec8:	08009f61 	.word	0x08009f61
 8009ecc:	08009f61 	.word	0x08009f61
 8009ed0:	08009f4b 	.word	0x08009f4b
 8009ed4:	08009f61 	.word	0x08009f61
 8009ed8:	08009f61 	.word	0x08009f61
 8009edc:	08009f61 	.word	0x08009f61
 8009ee0:	08009f61 	.word	0x08009f61
 8009ee4:	08009f61 	.word	0x08009f61
 8009ee8:	08009f61 	.word	0x08009f61
 8009eec:	08009f61 	.word	0x08009f61
 8009ef0:	08009f69 	.word	0x08009f69
 8009ef4:	08009f61 	.word	0x08009f61
 8009ef8:	08009f61 	.word	0x08009f61
 8009efc:	08009f61 	.word	0x08009f61
 8009f00:	08009f61 	.word	0x08009f61
 8009f04:	08009f61 	.word	0x08009f61
 8009f08:	08009f61 	.word	0x08009f61
 8009f0c:	08009f61 	.word	0x08009f61
 8009f10:	08009f69 	.word	0x08009f69
 8009f14:	08009f61 	.word	0x08009f61
 8009f18:	08009f61 	.word	0x08009f61
 8009f1c:	08009f61 	.word	0x08009f61
 8009f20:	08009f61 	.word	0x08009f61
 8009f24:	08009f61 	.word	0x08009f61
 8009f28:	08009f61 	.word	0x08009f61
 8009f2c:	08009f61 	.word	0x08009f61
 8009f30:	08009f69 	.word	0x08009f69
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f38:	3308      	adds	r3, #8
 8009f3a:	2101      	movs	r1, #1
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 ffc3 	bl	800aec8 <RCCEx_PLL2_Config>
 8009f42:	4603      	mov	r3, r0
 8009f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f48:	e00f      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f4e:	3328      	adds	r3, #40	@ 0x28
 8009f50:	2101      	movs	r1, #1
 8009f52:	4618      	mov	r0, r3
 8009f54:	f001 f86a 	bl	800b02c <RCCEx_PLL3_Config>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f5e:	e004      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f66:	e000      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10a      	bne.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f72:	4bbf      	ldr	r3, [pc, #764]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f76:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f80:	4abb      	ldr	r2, [pc, #748]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f82:	430b      	orrs	r3, r1
 8009f84:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f86:	e003      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	f002 0302 	and.w	r3, r2, #2
 8009f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009fa6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009faa:	460b      	mov	r3, r1
 8009fac:	4313      	orrs	r3, r2
 8009fae:	d041      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fb6:	2b05      	cmp	r3, #5
 8009fb8:	d824      	bhi.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009fba:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc0:	0800a00d 	.word	0x0800a00d
 8009fc4:	08009fd9 	.word	0x08009fd9
 8009fc8:	08009fef 	.word	0x08009fef
 8009fcc:	0800a00d 	.word	0x0800a00d
 8009fd0:	0800a00d 	.word	0x0800a00d
 8009fd4:	0800a00d 	.word	0x0800a00d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fdc:	3308      	adds	r3, #8
 8009fde:	2101      	movs	r1, #1
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 ff71 	bl	800aec8 <RCCEx_PLL2_Config>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009fec:	e00f      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff2:	3328      	adds	r3, #40	@ 0x28
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 f818 	bl	800b02c <RCCEx_PLL3_Config>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a002:	e004      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a00a:	e000      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a00c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a00e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a016:	4b96      	ldr	r3, [pc, #600]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a01a:	f023 0107 	bic.w	r1, r3, #7
 800a01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a022:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a024:	4a92      	ldr	r2, [pc, #584]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a026:	430b      	orrs	r3, r1
 800a028:	6553      	str	r3, [r2, #84]	@ 0x54
 800a02a:	e003      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a02c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a030:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03c:	f002 0304 	and.w	r3, r2, #4
 800a040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a044:	2300      	movs	r3, #0
 800a046:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a04a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a04e:	460b      	mov	r3, r1
 800a050:	4313      	orrs	r3, r2
 800a052:	d044      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a05c:	2b05      	cmp	r3, #5
 800a05e:	d825      	bhi.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a060:	a201      	add	r2, pc, #4	@ (adr r2, 800a068 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a066:	bf00      	nop
 800a068:	0800a0b5 	.word	0x0800a0b5
 800a06c:	0800a081 	.word	0x0800a081
 800a070:	0800a097 	.word	0x0800a097
 800a074:	0800a0b5 	.word	0x0800a0b5
 800a078:	0800a0b5 	.word	0x0800a0b5
 800a07c:	0800a0b5 	.word	0x0800a0b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a084:	3308      	adds	r3, #8
 800a086:	2101      	movs	r1, #1
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 ff1d 	bl	800aec8 <RCCEx_PLL2_Config>
 800a08e:	4603      	mov	r3, r0
 800a090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a094:	e00f      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a09a:	3328      	adds	r3, #40	@ 0x28
 800a09c:	2101      	movs	r1, #1
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 ffc4 	bl	800b02c <RCCEx_PLL3_Config>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a0aa:	e004      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0b2:	e000      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a0b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d10b      	bne.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a0be:	4b6c      	ldr	r3, [pc, #432]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0c2:	f023 0107 	bic.w	r1, r3, #7
 800a0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a0ce:	4a68      	ldr	r2, [pc, #416]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0d0:	430b      	orrs	r3, r1
 800a0d2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0d4:	e003      	b.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	f002 0320 	and.w	r3, r2, #32
 800a0ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a0f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	d055      	beq.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a106:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a10a:	d033      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a10c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a110:	d82c      	bhi.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a116:	d02f      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a11c:	d826      	bhi.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a11e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a122:	d02b      	beq.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a124:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a128:	d820      	bhi.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a12a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a12e:	d012      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a134:	d81a      	bhi.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a136:	2b00      	cmp	r3, #0
 800a138:	d022      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a13a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a13e:	d115      	bne.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a144:	3308      	adds	r3, #8
 800a146:	2100      	movs	r1, #0
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 febd 	bl	800aec8 <RCCEx_PLL2_Config>
 800a14e:	4603      	mov	r3, r0
 800a150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a154:	e015      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a15a:	3328      	adds	r3, #40	@ 0x28
 800a15c:	2102      	movs	r1, #2
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 ff64 	bl	800b02c <RCCEx_PLL3_Config>
 800a164:	4603      	mov	r3, r0
 800a166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a16a:	e00a      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a172:	e006      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a174:	bf00      	nop
 800a176:	e004      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a178:	bf00      	nop
 800a17a:	e002      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a17c:	bf00      	nop
 800a17e:	e000      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a180:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10b      	bne.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a18a:	4b39      	ldr	r3, [pc, #228]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a18c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a18e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a19a:	4a35      	ldr	r2, [pc, #212]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a19c:	430b      	orrs	r3, r1
 800a19e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1a0:	e003      	b.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a1b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a1c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	d058      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a1d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a1d6:	d033      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a1d8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a1dc:	d82c      	bhi.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a1de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1e2:	d02f      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a1e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1e8:	d826      	bhi.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a1ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1ee:	d02b      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a1f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a1f4:	d820      	bhi.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a1f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1fa:	d012      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a1fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a200:	d81a      	bhi.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a202:	2b00      	cmp	r3, #0
 800a204:	d022      	beq.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a20a:	d115      	bne.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a210:	3308      	adds	r3, #8
 800a212:	2100      	movs	r1, #0
 800a214:	4618      	mov	r0, r3
 800a216:	f000 fe57 	bl	800aec8 <RCCEx_PLL2_Config>
 800a21a:	4603      	mov	r3, r0
 800a21c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a220:	e015      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a226:	3328      	adds	r3, #40	@ 0x28
 800a228:	2102      	movs	r1, #2
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 fefe 	bl	800b02c <RCCEx_PLL3_Config>
 800a230:	4603      	mov	r3, r0
 800a232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a236:	e00a      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a23e:	e006      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a240:	bf00      	nop
 800a242:	e004      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a244:	bf00      	nop
 800a246:	e002      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a248:	bf00      	nop
 800a24a:	e000      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a24c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a24e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a252:	2b00      	cmp	r3, #0
 800a254:	d10e      	bne.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a256:	4b06      	ldr	r3, [pc, #24]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a25a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a262:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a266:	4a02      	ldr	r2, [pc, #8]	@ (800a270 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a268:	430b      	orrs	r3, r1
 800a26a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a26c:	e006      	b.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a26e:	bf00      	nop
 800a270:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a28c:	2300      	movs	r3, #0
 800a28e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a292:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a296:	460b      	mov	r3, r1
 800a298:	4313      	orrs	r3, r2
 800a29a:	d055      	beq.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a2a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a2a8:	d033      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a2aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a2ae:	d82c      	bhi.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a2b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2b4:	d02f      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a2b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2ba:	d826      	bhi.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a2bc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a2c0:	d02b      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a2c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a2c6:	d820      	bhi.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a2c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2cc:	d012      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a2ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2d2:	d81a      	bhi.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d022      	beq.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a2d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2dc:	d115      	bne.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e2:	3308      	adds	r3, #8
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 fdee 	bl	800aec8 <RCCEx_PLL2_Config>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a2f2:	e015      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2f8:	3328      	adds	r3, #40	@ 0x28
 800a2fa:	2102      	movs	r1, #2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 fe95 	bl	800b02c <RCCEx_PLL3_Config>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a308:	e00a      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a310:	e006      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a312:	bf00      	nop
 800a314:	e004      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a316:	bf00      	nop
 800a318:	e002      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a31a:	bf00      	nop
 800a31c:	e000      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a31e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10b      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a328:	4ba1      	ldr	r3, [pc, #644]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a32a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a32c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a334:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a338:	4a9d      	ldr	r2, [pc, #628]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a33a:	430b      	orrs	r3, r1
 800a33c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a33e:	e003      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f002 0308 	and.w	r3, r2, #8
 800a354:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a358:	2300      	movs	r3, #0
 800a35a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a35e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a362:	460b      	mov	r3, r1
 800a364:	4313      	orrs	r3, r2
 800a366:	d01e      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a36c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a374:	d10c      	bne.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a37a:	3328      	adds	r3, #40	@ 0x28
 800a37c:	2102      	movs	r1, #2
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 fe54 	bl	800b02c <RCCEx_PLL3_Config>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a390:	4b87      	ldr	r3, [pc, #540]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a394:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a39c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3a0:	4a83      	ldr	r2, [pc, #524]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3a2:	430b      	orrs	r3, r1
 800a3a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	f002 0310 	and.w	r3, r2, #16
 800a3b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a3bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	d01e      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a3ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3d2:	d10c      	bne.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3d8:	3328      	adds	r3, #40	@ 0x28
 800a3da:	2102      	movs	r1, #2
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f000 fe25 	bl	800b02c <RCCEx_PLL3_Config>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3ee:	4b70      	ldr	r3, [pc, #448]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a3fe:	4a6c      	ldr	r2, [pc, #432]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a400:	430b      	orrs	r3, r1
 800a402:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a410:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a414:	2300      	movs	r3, #0
 800a416:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a41a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a41e:	460b      	mov	r3, r1
 800a420:	4313      	orrs	r3, r2
 800a422:	d03e      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a428:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a42c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a430:	d022      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a432:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a436:	d81b      	bhi.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d003      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a43c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a440:	d00b      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a442:	e015      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a448:	3308      	adds	r3, #8
 800a44a:	2100      	movs	r1, #0
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fd3b 	bl	800aec8 <RCCEx_PLL2_Config>
 800a452:	4603      	mov	r3, r0
 800a454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a458:	e00f      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a45e:	3328      	adds	r3, #40	@ 0x28
 800a460:	2102      	movs	r1, #2
 800a462:	4618      	mov	r0, r3
 800a464:	f000 fde2 	bl	800b02c <RCCEx_PLL3_Config>
 800a468:	4603      	mov	r3, r0
 800a46a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a46e:	e004      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a476:	e000      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a47a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10b      	bne.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a482:	4b4b      	ldr	r3, [pc, #300]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a486:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a48e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a492:	4a47      	ldr	r2, [pc, #284]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a494:	430b      	orrs	r3, r1
 800a496:	6593      	str	r3, [r2, #88]	@ 0x58
 800a498:	e003      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a49a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a49e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a4ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a4b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	d03b      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a4ca:	d01f      	beq.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a4cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a4d0:	d818      	bhi.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a4d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4d6:	d003      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a4d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4dc:	d007      	beq.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a4de:	e011      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4e0:	4b33      	ldr	r3, [pc, #204]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e4:	4a32      	ldr	r2, [pc, #200]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a4ec:	e00f      	b.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4f2:	3328      	adds	r3, #40	@ 0x28
 800a4f4:	2101      	movs	r1, #1
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 fd98 	bl	800b02c <RCCEx_PLL3_Config>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a502:	e004      	b.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a50a:	e000      	b.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a50c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a50e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10b      	bne.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a516:	4b26      	ldr	r3, [pc, #152]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a51a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a526:	4a22      	ldr	r2, [pc, #136]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a528:	430b      	orrs	r3, r1
 800a52a:	6553      	str	r3, [r2, #84]	@ 0x54
 800a52c:	e003      	b.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a52e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a542:	673b      	str	r3, [r7, #112]	@ 0x70
 800a544:	2300      	movs	r3, #0
 800a546:	677b      	str	r3, [r7, #116]	@ 0x74
 800a548:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a54c:	460b      	mov	r3, r1
 800a54e:	4313      	orrs	r3, r2
 800a550:	d034      	beq.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a55c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a560:	d007      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a562:	e011      	b.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a564:	4b12      	ldr	r3, [pc, #72]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a568:	4a11      	ldr	r2, [pc, #68]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a56a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a56e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a570:	e00e      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a576:	3308      	adds	r3, #8
 800a578:	2102      	movs	r1, #2
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 fca4 	bl	800aec8 <RCCEx_PLL2_Config>
 800a580:	4603      	mov	r3, r0
 800a582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a586:	e003      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a58e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10d      	bne.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a598:	4b05      	ldr	r3, [pc, #20]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a59a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a59c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5a6:	4a02      	ldr	r2, [pc, #8]	@ (800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5a8:	430b      	orrs	r3, r1
 800a5aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a5ac:	e006      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a5ae:	bf00      	nop
 800a5b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a5bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a5c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a5ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	d00c      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5dc:	3328      	adds	r3, #40	@ 0x28
 800a5de:	2102      	movs	r1, #2
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 fd23 	bl	800b02c <RCCEx_PLL3_Config>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a5f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a5fe:	663b      	str	r3, [r7, #96]	@ 0x60
 800a600:	2300      	movs	r3, #0
 800a602:	667b      	str	r3, [r7, #100]	@ 0x64
 800a604:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a608:	460b      	mov	r3, r1
 800a60a:	4313      	orrs	r3, r2
 800a60c:	d038      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a616:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a61a:	d018      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a61c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a620:	d811      	bhi.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a622:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a626:	d014      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a62c:	d80b      	bhi.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d011      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a636:	d106      	bne.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a638:	4bc3      	ldr	r3, [pc, #780]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63c:	4ac2      	ldr	r2, [pc, #776]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a63e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a644:	e008      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a64c:	e004      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a64e:	bf00      	nop
 800a650:	e002      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a652:	bf00      	nop
 800a654:	e000      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a656:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10b      	bne.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a660:	4bb9      	ldr	r3, [pc, #740]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a664:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a66c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a670:	4ab5      	ldr	r2, [pc, #724]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a672:	430b      	orrs	r3, r1
 800a674:	6553      	str	r3, [r2, #84]	@ 0x54
 800a676:	e003      	b.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a67c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a68c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a68e:	2300      	movs	r3, #0
 800a690:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a692:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a696:	460b      	mov	r3, r1
 800a698:	4313      	orrs	r3, r2
 800a69a:	d009      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a69c:	4baa      	ldr	r3, [pc, #680]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a69e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a6a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6aa:	4aa7      	ldr	r2, [pc, #668]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6ac:	430b      	orrs	r3, r1
 800a6ae:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a6bc:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6be:	2300      	movs	r3, #0
 800a6c0:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	d00a      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a6cc:	4b9e      	ldr	r3, [pc, #632]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a6d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a6dc:	4a9a      	ldr	r2, [pc, #616]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6de:	430b      	orrs	r3, r1
 800a6e0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ea:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a6ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	d009      	beq.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a6fe:	4b92      	ldr	r3, [pc, #584]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a702:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a70a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a70c:	4a8e      	ldr	r2, [pc, #568]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a70e:	430b      	orrs	r3, r1
 800a710:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a71e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a720:	2300      	movs	r3, #0
 800a722:	647b      	str	r3, [r7, #68]	@ 0x44
 800a724:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a728:	460b      	mov	r3, r1
 800a72a:	4313      	orrs	r3, r2
 800a72c:	d00e      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a72e:	4b86      	ldr	r3, [pc, #536]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	4a85      	ldr	r2, [pc, #532]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a734:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a738:	6113      	str	r3, [r2, #16]
 800a73a:	4b83      	ldr	r3, [pc, #524]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a73c:	6919      	ldr	r1, [r3, #16]
 800a73e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a742:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a746:	4a80      	ldr	r2, [pc, #512]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a748:	430b      	orrs	r3, r1
 800a74a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a74c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a754:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a758:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a75a:	2300      	movs	r3, #0
 800a75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a75e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a762:	460b      	mov	r3, r1
 800a764:	4313      	orrs	r3, r2
 800a766:	d009      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a768:	4b77      	ldr	r3, [pc, #476]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a76a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a76c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a776:	4a74      	ldr	r2, [pc, #464]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a778:	430b      	orrs	r3, r1
 800a77a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a788:	633b      	str	r3, [r7, #48]	@ 0x30
 800a78a:	2300      	movs	r3, #0
 800a78c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a78e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a792:	460b      	mov	r3, r1
 800a794:	4313      	orrs	r3, r2
 800a796:	d00a      	beq.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a798:	4b6b      	ldr	r3, [pc, #428]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a79a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a79c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7a8:	4a67      	ldr	r2, [pc, #412]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7aa:	430b      	orrs	r3, r1
 800a7ac:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	d011      	beq.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7ce:	3308      	adds	r3, #8
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 fb78 	bl	800aec8 <RCCEx_PLL2_Config>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a7de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d003      	beq.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	6239      	str	r1, [r7, #32]
 800a7fa:	f003 0302 	and.w	r3, r3, #2
 800a7fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800a800:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a804:	460b      	mov	r3, r1
 800a806:	4313      	orrs	r3, r2
 800a808:	d011      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a80e:	3308      	adds	r3, #8
 800a810:	2101      	movs	r1, #1
 800a812:	4618      	mov	r0, r3
 800a814:	f000 fb58 	bl	800aec8 <RCCEx_PLL2_Config>
 800a818:	4603      	mov	r3, r0
 800a81a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a81e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a822:	2b00      	cmp	r3, #0
 800a824:	d003      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a82a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	2100      	movs	r1, #0
 800a838:	61b9      	str	r1, [r7, #24]
 800a83a:	f003 0304 	and.w	r3, r3, #4
 800a83e:	61fb      	str	r3, [r7, #28]
 800a840:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a844:	460b      	mov	r3, r1
 800a846:	4313      	orrs	r3, r2
 800a848:	d011      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a84e:	3308      	adds	r3, #8
 800a850:	2102      	movs	r1, #2
 800a852:	4618      	mov	r0, r3
 800a854:	f000 fb38 	bl	800aec8 <RCCEx_PLL2_Config>
 800a858:	4603      	mov	r3, r0
 800a85a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a85e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a86a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	2100      	movs	r1, #0
 800a878:	6139      	str	r1, [r7, #16]
 800a87a:	f003 0308 	and.w	r3, r3, #8
 800a87e:	617b      	str	r3, [r7, #20]
 800a880:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a884:	460b      	mov	r3, r1
 800a886:	4313      	orrs	r3, r2
 800a888:	d011      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a88e:	3328      	adds	r3, #40	@ 0x28
 800a890:	2100      	movs	r1, #0
 800a892:	4618      	mov	r0, r3
 800a894:	f000 fbca 	bl	800b02c <RCCEx_PLL3_Config>
 800a898:	4603      	mov	r3, r0
 800a89a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a89e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d003      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	f003 0310 	and.w	r3, r3, #16
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	d011      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ce:	3328      	adds	r3, #40	@ 0x28
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 fbaa 	bl	800b02c <RCCEx_PLL3_Config>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a8de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d003      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	6039      	str	r1, [r7, #0]
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	607b      	str	r3, [r7, #4]
 800a900:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a904:	460b      	mov	r3, r1
 800a906:	4313      	orrs	r3, r2
 800a908:	d011      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a90e:	3328      	adds	r3, #40	@ 0x28
 800a910:	2102      	movs	r1, #2
 800a912:	4618      	mov	r0, r3
 800a914:	f000 fb8a 	bl	800b02c <RCCEx_PLL3_Config>
 800a918:	4603      	mov	r3, r0
 800a91a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a91e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a922:	2b00      	cmp	r3, #0
 800a924:	d003      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a92a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a92e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	e000      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a942:	46bd      	mov	sp, r7
 800a944:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a948:	58024400 	.word	0x58024400

0800a94c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a950:	f7fe fd96 	bl	8009480 <HAL_RCC_GetHCLKFreq>
 800a954:	4602      	mov	r2, r0
 800a956:	4b06      	ldr	r3, [pc, #24]	@ (800a970 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	091b      	lsrs	r3, r3, #4
 800a95c:	f003 0307 	and.w	r3, r3, #7
 800a960:	4904      	ldr	r1, [pc, #16]	@ (800a974 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a962:	5ccb      	ldrb	r3, [r1, r3]
 800a964:	f003 031f 	and.w	r3, r3, #31
 800a968:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	58024400 	.word	0x58024400
 800a974:	0801d774 	.word	0x0801d774

0800a978 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a978:	b480      	push	{r7}
 800a97a:	b089      	sub	sp, #36	@ 0x24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a980:	4ba1      	ldr	r3, [pc, #644]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a984:	f003 0303 	and.w	r3, r3, #3
 800a988:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a98a:	4b9f      	ldr	r3, [pc, #636]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a98e:	0b1b      	lsrs	r3, r3, #12
 800a990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a994:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a996:	4b9c      	ldr	r3, [pc, #624]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a99a:	091b      	lsrs	r3, r3, #4
 800a99c:	f003 0301 	and.w	r3, r3, #1
 800a9a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a9a2:	4b99      	ldr	r3, [pc, #612]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9a6:	08db      	lsrs	r3, r3, #3
 800a9a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9ac:	693a      	ldr	r2, [r7, #16]
 800a9ae:	fb02 f303 	mul.w	r3, r2, r3
 800a9b2:	ee07 3a90 	vmov	s15, r3
 800a9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 8111 	beq.w	800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	f000 8083 	beq.w	800aad4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	f200 80a1 	bhi.w	800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d003      	beq.n	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d056      	beq.n	800aa90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a9e2:	e099      	b.n	800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9e4:	4b88      	ldr	r3, [pc, #544]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 0320 	and.w	r3, r3, #32
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d02d      	beq.n	800aa4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9f0:	4b85      	ldr	r3, [pc, #532]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	08db      	lsrs	r3, r3, #3
 800a9f6:	f003 0303 	and.w	r3, r3, #3
 800a9fa:	4a84      	ldr	r2, [pc, #528]	@ (800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a9fc:	fa22 f303 	lsr.w	r3, r2, r3
 800aa00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	ee07 3a90 	vmov	s15, r3
 800aa08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa1a:	4b7b      	ldr	r3, [pc, #492]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa22:	ee07 3a90 	vmov	s15, r3
 800aa26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa4a:	e087      	b.n	800ab5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	ee07 3a90 	vmov	s15, r3
 800aa52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa5e:	4b6a      	ldr	r3, [pc, #424]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa66:	ee07 3a90 	vmov	s15, r3
 800aa6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa8e:	e065      	b.n	800ab5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	ee07 3a90 	vmov	s15, r3
 800aa96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa2:	4b59      	ldr	r3, [pc, #356]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aab6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aabe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aad2:	e043      	b.n	800ab5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	ee07 3a90 	vmov	s15, r3
 800aada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aade:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae6:	4b48      	ldr	r3, [pc, #288]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aafa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aafe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab16:	e021      	b.n	800ab5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	ee07 3a90 	vmov	s15, r3
 800ab1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab2a:	4b37      	ldr	r3, [pc, #220]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ab5c:	4b2a      	ldr	r3, [pc, #168]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab60:	0a5b      	lsrs	r3, r3, #9
 800ab62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab66:	ee07 3a90 	vmov	s15, r3
 800ab6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab76:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab82:	ee17 2a90 	vmov	r2, s15
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ab8a:	4b1f      	ldr	r3, [pc, #124]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab8e:	0c1b      	lsrs	r3, r3, #16
 800ab90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab94:	ee07 3a90 	vmov	s15, r3
 800ab98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aba0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aba4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abb0:	ee17 2a90 	vmov	r2, s15
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800abb8:	4b13      	ldr	r3, [pc, #76]	@ (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abbc:	0e1b      	lsrs	r3, r3, #24
 800abbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abc2:	ee07 3a90 	vmov	s15, r3
 800abc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800abd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abde:	ee17 2a90 	vmov	r2, s15
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abe6:	e008      	b.n	800abfa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	609a      	str	r2, [r3, #8]
}
 800abfa:	bf00      	nop
 800abfc:	3724      	adds	r7, #36	@ 0x24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	58024400 	.word	0x58024400
 800ac0c:	03d09000 	.word	0x03d09000
 800ac10:	46000000 	.word	0x46000000
 800ac14:	4c742400 	.word	0x4c742400
 800ac18:	4a742400 	.word	0x4a742400
 800ac1c:	4bbebc20 	.word	0x4bbebc20

0800ac20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b089      	sub	sp, #36	@ 0x24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac28:	4ba1      	ldr	r3, [pc, #644]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac2c:	f003 0303 	and.w	r3, r3, #3
 800ac30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ac32:	4b9f      	ldr	r3, [pc, #636]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac36:	0d1b      	lsrs	r3, r3, #20
 800ac38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac3e:	4b9c      	ldr	r3, [pc, #624]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac42:	0a1b      	lsrs	r3, r3, #8
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ac4a:	4b99      	ldr	r3, [pc, #612]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac4e:	08db      	lsrs	r3, r3, #3
 800ac50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	fb02 f303 	mul.w	r3, r2, r3
 800ac5a:	ee07 3a90 	vmov	s15, r3
 800ac5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f000 8111 	beq.w	800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	f000 8083 	beq.w	800ad7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	f200 80a1 	bhi.w	800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d003      	beq.n	800ac8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d056      	beq.n	800ad38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac8a:	e099      	b.n	800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac8c:	4b88      	ldr	r3, [pc, #544]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 0320 	and.w	r3, r3, #32
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d02d      	beq.n	800acf4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac98:	4b85      	ldr	r3, [pc, #532]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	08db      	lsrs	r3, r3, #3
 800ac9e:	f003 0303 	and.w	r3, r3, #3
 800aca2:	4a84      	ldr	r2, [pc, #528]	@ (800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aca4:	fa22 f303 	lsr.w	r3, r2, r3
 800aca8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	ee07 3a90 	vmov	s15, r3
 800acb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	ee07 3a90 	vmov	s15, r3
 800acba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acc2:	4b7b      	ldr	r3, [pc, #492]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acd6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ace2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ace6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800acf2:	e087      	b.n	800ae04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	ee07 3a90 	vmov	s15, r3
 800acfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acfe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad06:	4b6a      	ldr	r3, [pc, #424]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad36:	e065      	b.n	800ae04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	ee07 3a90 	vmov	s15, r3
 800ad3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad4a:	4b59      	ldr	r3, [pc, #356]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad52:	ee07 3a90 	vmov	s15, r3
 800ad56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad7a:	e043      	b.n	800ae04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad8e:	4b48      	ldr	r3, [pc, #288]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad96:	ee07 3a90 	vmov	s15, r3
 800ad9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ada2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ada6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adbe:	e021      	b.n	800ae04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800add2:	4b37      	ldr	r3, [pc, #220]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800add4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ade2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ade6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ae04:	4b2a      	ldr	r3, [pc, #168]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae08:	0a5b      	lsrs	r3, r3, #9
 800ae0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae0e:	ee07 3a90 	vmov	s15, r3
 800ae12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae2a:	ee17 2a90 	vmov	r2, s15
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ae32:	4b1f      	ldr	r3, [pc, #124]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae36:	0c1b      	lsrs	r3, r3, #16
 800ae38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae3c:	ee07 3a90 	vmov	s15, r3
 800ae40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae58:	ee17 2a90 	vmov	r2, s15
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ae60:	4b13      	ldr	r3, [pc, #76]	@ (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae64:	0e1b      	lsrs	r3, r3, #24
 800ae66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae6a:	ee07 3a90 	vmov	s15, r3
 800ae6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae86:	ee17 2a90 	vmov	r2, s15
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae8e:	e008      	b.n	800aea2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	609a      	str	r2, [r3, #8]
}
 800aea2:	bf00      	nop
 800aea4:	3724      	adds	r7, #36	@ 0x24
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	58024400 	.word	0x58024400
 800aeb4:	03d09000 	.word	0x03d09000
 800aeb8:	46000000 	.word	0x46000000
 800aebc:	4c742400 	.word	0x4c742400
 800aec0:	4a742400 	.word	0x4a742400
 800aec4:	4bbebc20 	.word	0x4bbebc20

0800aec8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aed6:	4b53      	ldr	r3, [pc, #332]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800aed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeda:	f003 0303 	and.w	r3, r3, #3
 800aede:	2b03      	cmp	r3, #3
 800aee0:	d101      	bne.n	800aee6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e099      	b.n	800b01a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aee6:	4b4f      	ldr	r3, [pc, #316]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a4e      	ldr	r2, [pc, #312]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800aeec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aef2:	f7f7 f8c1 	bl	8002078 <HAL_GetTick>
 800aef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aef8:	e008      	b.n	800af0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aefa:	f7f7 f8bd 	bl	8002078 <HAL_GetTick>
 800aefe:	4602      	mov	r2, r0
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	2b02      	cmp	r3, #2
 800af06:	d901      	bls.n	800af0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af08:	2303      	movs	r3, #3
 800af0a:	e086      	b.n	800b01a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af0c:	4b45      	ldr	r3, [pc, #276]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1f0      	bne.n	800aefa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800af18:	4b42      	ldr	r3, [pc, #264]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800af1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af1c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	031b      	lsls	r3, r3, #12
 800af26:	493f      	ldr	r1, [pc, #252]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800af28:	4313      	orrs	r3, r2
 800af2a:	628b      	str	r3, [r1, #40]	@ 0x28
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	3b01      	subs	r3, #1
 800af32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	3b01      	subs	r3, #1
 800af3c:	025b      	lsls	r3, r3, #9
 800af3e:	b29b      	uxth	r3, r3
 800af40:	431a      	orrs	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	3b01      	subs	r3, #1
 800af48:	041b      	lsls	r3, r3, #16
 800af4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800af4e:	431a      	orrs	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	3b01      	subs	r3, #1
 800af56:	061b      	lsls	r3, r3, #24
 800af58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800af5c:	4931      	ldr	r1, [pc, #196]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800af5e:	4313      	orrs	r3, r2
 800af60:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800af62:	4b30      	ldr	r3, [pc, #192]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800af64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	492d      	ldr	r1, [pc, #180]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800af70:	4313      	orrs	r3, r2
 800af72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800af74:	4b2b      	ldr	r3, [pc, #172]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800af76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af78:	f023 0220 	bic.w	r2, r3, #32
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	4928      	ldr	r1, [pc, #160]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800af82:	4313      	orrs	r3, r2
 800af84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af86:	4b27      	ldr	r3, [pc, #156]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800af88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af8a:	4a26      	ldr	r2, [pc, #152]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800af8c:	f023 0310 	bic.w	r3, r3, #16
 800af90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af92:	4b24      	ldr	r3, [pc, #144]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800af94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af96:	4b24      	ldr	r3, [pc, #144]	@ (800b028 <RCCEx_PLL2_Config+0x160>)
 800af98:	4013      	ands	r3, r2
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	69d2      	ldr	r2, [r2, #28]
 800af9e:	00d2      	lsls	r2, r2, #3
 800afa0:	4920      	ldr	r1, [pc, #128]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800afa2:	4313      	orrs	r3, r2
 800afa4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800afa6:	4b1f      	ldr	r3, [pc, #124]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800afa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afaa:	4a1e      	ldr	r2, [pc, #120]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800afac:	f043 0310 	orr.w	r3, r3, #16
 800afb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d106      	bne.n	800afc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800afb8:	4b1a      	ldr	r3, [pc, #104]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800afba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afbc:	4a19      	ldr	r2, [pc, #100]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800afbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800afc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800afc4:	e00f      	b.n	800afe6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d106      	bne.n	800afda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800afcc:	4b15      	ldr	r3, [pc, #84]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800afce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afd0:	4a14      	ldr	r2, [pc, #80]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800afd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800afd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800afd8:	e005      	b.n	800afe6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800afda:	4b12      	ldr	r3, [pc, #72]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800afdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afde:	4a11      	ldr	r2, [pc, #68]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800afe0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800afe4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800afe6:	4b0f      	ldr	r3, [pc, #60]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a0e      	ldr	r2, [pc, #56]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800afec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aff2:	f7f7 f841 	bl	8002078 <HAL_GetTick>
 800aff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aff8:	e008      	b.n	800b00c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800affa:	f7f7 f83d 	bl	8002078 <HAL_GetTick>
 800affe:	4602      	mov	r2, r0
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	2b02      	cmp	r3, #2
 800b006:	d901      	bls.n	800b00c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b008:	2303      	movs	r3, #3
 800b00a:	e006      	b.n	800b01a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b00c:	4b05      	ldr	r3, [pc, #20]	@ (800b024 <RCCEx_PLL2_Config+0x15c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d0f0      	beq.n	800affa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b018:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	58024400 	.word	0x58024400
 800b028:	ffff0007 	.word	0xffff0007

0800b02c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b03a:	4b53      	ldr	r3, [pc, #332]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b03e:	f003 0303 	and.w	r3, r3, #3
 800b042:	2b03      	cmp	r3, #3
 800b044:	d101      	bne.n	800b04a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	e099      	b.n	800b17e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b04a:	4b4f      	ldr	r3, [pc, #316]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a4e      	ldr	r2, [pc, #312]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b056:	f7f7 f80f 	bl	8002078 <HAL_GetTick>
 800b05a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b05c:	e008      	b.n	800b070 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b05e:	f7f7 f80b 	bl	8002078 <HAL_GetTick>
 800b062:	4602      	mov	r2, r0
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d901      	bls.n	800b070 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b06c:	2303      	movs	r3, #3
 800b06e:	e086      	b.n	800b17e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b070:	4b45      	ldr	r3, [pc, #276]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1f0      	bne.n	800b05e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b07c:	4b42      	ldr	r3, [pc, #264]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b080:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	051b      	lsls	r3, r3, #20
 800b08a:	493f      	ldr	r1, [pc, #252]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b08c:	4313      	orrs	r3, r2
 800b08e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	3b01      	subs	r3, #1
 800b096:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	025b      	lsls	r3, r3, #9
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	431a      	orrs	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	041b      	lsls	r3, r3, #16
 800b0ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b0b2:	431a      	orrs	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	061b      	lsls	r3, r3, #24
 800b0bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b0c0:	4931      	ldr	r1, [pc, #196]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b0c6:	4b30      	ldr	r3, [pc, #192]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	492d      	ldr	r1, [pc, #180]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b0d8:	4b2b      	ldr	r3, [pc, #172]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	4928      	ldr	r1, [pc, #160]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b0ea:	4b27      	ldr	r3, [pc, #156]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ee:	4a26      	ldr	r2, [pc, #152]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b0f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b0f6:	4b24      	ldr	r3, [pc, #144]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b0f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0fa:	4b24      	ldr	r3, [pc, #144]	@ (800b18c <RCCEx_PLL3_Config+0x160>)
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	69d2      	ldr	r2, [r2, #28]
 800b102:	00d2      	lsls	r2, r2, #3
 800b104:	4920      	ldr	r1, [pc, #128]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b106:	4313      	orrs	r3, r2
 800b108:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b10a:	4b1f      	ldr	r3, [pc, #124]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b10e:	4a1e      	ldr	r2, [pc, #120]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b114:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d106      	bne.n	800b12a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b11c:	4b1a      	ldr	r3, [pc, #104]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b120:	4a19      	ldr	r2, [pc, #100]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b122:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b126:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b128:	e00f      	b.n	800b14a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d106      	bne.n	800b13e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b130:	4b15      	ldr	r3, [pc, #84]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b134:	4a14      	ldr	r2, [pc, #80]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b136:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b13a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b13c:	e005      	b.n	800b14a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b13e:	4b12      	ldr	r3, [pc, #72]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b142:	4a11      	ldr	r2, [pc, #68]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b144:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b148:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b14a:	4b0f      	ldr	r3, [pc, #60]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a0e      	ldr	r2, [pc, #56]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b156:	f7f6 ff8f 	bl	8002078 <HAL_GetTick>
 800b15a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b15c:	e008      	b.n	800b170 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b15e:	f7f6 ff8b 	bl	8002078 <HAL_GetTick>
 800b162:	4602      	mov	r2, r0
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d901      	bls.n	800b170 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b16c:	2303      	movs	r3, #3
 800b16e:	e006      	b.n	800b17e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b170:	4b05      	ldr	r3, [pc, #20]	@ (800b188 <RCCEx_PLL3_Config+0x15c>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d0f0      	beq.n	800b15e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	58024400 	.word	0x58024400
 800b18c:	ffff0007 	.word	0xffff0007

0800b190 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d101      	bne.n	800b1a2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e054      	b.n	800b24c <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	7a5b      	ldrb	r3, [r3, #9]
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d105      	bne.n	800b1b8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7f6 fa14 	bl	80015e0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f023 0120 	bic.w	r1, r3, #32
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685a      	ldr	r2, [r3, #4]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	430a      	orrs	r2, r1
 800b1d2:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f042 0204 	orr.w	r2, r2, #4
 800b1e2:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1ee:	2b40      	cmp	r3, #64	@ 0x40
 800b1f0:	d104      	bne.n	800b1fc <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2204      	movs	r2, #4
 800b1f6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e027      	b.n	800b24c <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800b1fc:	f7f6 ff3c 	bl	8002078 <HAL_GetTick>
 800b200:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800b202:	e015      	b.n	800b230 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b204:	f7f6 ff38 	bl	8002078 <HAL_GetTick>
 800b208:	4602      	mov	r2, r0
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	2b02      	cmp	r3, #2
 800b210:	d90e      	bls.n	800b230 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d007      	beq.n	800b230 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2204      	movs	r2, #4
 800b224:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2202      	movs	r2, #2
 800b22a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	e00d      	b.n	800b24c <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	f003 0301 	and.w	r3, r3, #1
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d1e2      	bne.n	800b204 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d101      	bne.n	800b266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	e10f      	b.n	800b486 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a87      	ldr	r2, [pc, #540]	@ (800b490 <HAL_SPI_Init+0x23c>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d00f      	beq.n	800b296 <HAL_SPI_Init+0x42>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a86      	ldr	r2, [pc, #536]	@ (800b494 <HAL_SPI_Init+0x240>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d00a      	beq.n	800b296 <HAL_SPI_Init+0x42>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a84      	ldr	r2, [pc, #528]	@ (800b498 <HAL_SPI_Init+0x244>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d005      	beq.n	800b296 <HAL_SPI_Init+0x42>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	2b0f      	cmp	r3, #15
 800b290:	d901      	bls.n	800b296 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	e0f7      	b.n	800b486 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 feca 	bl	800c030 <SPI_GetPacketSize>
 800b29c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4a7b      	ldr	r2, [pc, #492]	@ (800b490 <HAL_SPI_Init+0x23c>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d00c      	beq.n	800b2c2 <HAL_SPI_Init+0x6e>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a79      	ldr	r2, [pc, #484]	@ (800b494 <HAL_SPI_Init+0x240>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d007      	beq.n	800b2c2 <HAL_SPI_Init+0x6e>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a78      	ldr	r2, [pc, #480]	@ (800b498 <HAL_SPI_Init+0x244>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d002      	beq.n	800b2c2 <HAL_SPI_Init+0x6e>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b08      	cmp	r3, #8
 800b2c0:	d811      	bhi.n	800b2e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b2c6:	4a72      	ldr	r2, [pc, #456]	@ (800b490 <HAL_SPI_Init+0x23c>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d009      	beq.n	800b2e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a70      	ldr	r2, [pc, #448]	@ (800b494 <HAL_SPI_Init+0x240>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d004      	beq.n	800b2e0 <HAL_SPI_Init+0x8c>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a6f      	ldr	r2, [pc, #444]	@ (800b498 <HAL_SPI_Init+0x244>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d104      	bne.n	800b2ea <HAL_SPI_Init+0x96>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b10      	cmp	r3, #16
 800b2e4:	d901      	bls.n	800b2ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e0cd      	b.n	800b486 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d106      	bne.n	800b304 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7f6 f9a8 	bl	8001654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2202      	movs	r2, #2
 800b308:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f022 0201 	bic.w	r2, r2, #1
 800b31a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b326:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	699b      	ldr	r3, [r3, #24]
 800b32c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b330:	d119      	bne.n	800b366 <HAL_SPI_Init+0x112>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b33a:	d103      	bne.n	800b344 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b340:	2b00      	cmp	r3, #0
 800b342:	d008      	beq.n	800b356 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d10c      	bne.n	800b366 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b350:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b354:	d107      	bne.n	800b366 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b364:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00f      	beq.n	800b392 <HAL_SPI_Init+0x13e>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	2b06      	cmp	r3, #6
 800b378:	d90b      	bls.n	800b392 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	430a      	orrs	r2, r1
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	e007      	b.n	800b3a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b3a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	69da      	ldr	r2, [r3, #28]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3aa:	431a      	orrs	r2, r3
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	431a      	orrs	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3b4:	ea42 0103 	orr.w	r1, r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	68da      	ldr	r2, [r3, #12]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3d2:	431a      	orrs	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	431a      	orrs	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	431a      	orrs	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	695b      	ldr	r3, [r3, #20]
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a1b      	ldr	r3, [r3, #32]
 800b3ea:	431a      	orrs	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	431a      	orrs	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3f6:	431a      	orrs	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	431a      	orrs	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b402:	ea42 0103 	orr.w	r1, r2, r3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	430a      	orrs	r2, r1
 800b410:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d113      	bne.n	800b442 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b42c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b440:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f022 0201 	bic.w	r2, r2, #1
 800b450:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00a      	beq.n	800b474 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	430a      	orrs	r2, r1
 800b472:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	40013000 	.word	0x40013000
 800b494:	40003800 	.word	0x40003800
 800b498:	40003c00 	.word	0x40003c00

0800b49c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d001      	beq.n	800b4ba <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	e126      	b.n	800b708 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <HAL_SPI_Transmit_DMA+0x2a>
 800b4c0:	88fb      	ldrh	r3, [r7, #6]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d101      	bne.n	800b4ca <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e11e      	b.n	800b708 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d101      	bne.n	800b4d8 <HAL_SPI_Transmit_DMA+0x3c>
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	e117      	b.n	800b708 <HAL_SPI_Transmit_DMA+0x26c>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2203      	movs	r2, #3
 800b4e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	88fa      	ldrh	r2, [r7, #6]
 800b4fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	88fa      	ldrh	r2, [r7, #6]
 800b502:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2200      	movs	r2, #0
 800b510:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b530:	d108      	bne.n	800b544 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b540:	601a      	str	r2, [r3, #0]
 800b542:	e009      	b.n	800b558 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b556:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	2b0f      	cmp	r3, #15
 800b55e:	d905      	bls.n	800b56c <HAL_SPI_Transmit_DMA+0xd0>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b564:	699b      	ldr	r3, [r3, #24]
 800b566:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b56a:	d10f      	bne.n	800b58c <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b570:	2b07      	cmp	r3, #7
 800b572:	d911      	bls.n	800b598 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b57e:	d00b      	beq.n	800b598 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b584:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b586:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b58a:	d005      	beq.n	800b598 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	e0b7      	b.n	800b708 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	2b07      	cmp	r3, #7
 800b59e:	d820      	bhi.n	800b5e2 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5aa:	d109      	bne.n	800b5c0 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	105b      	asrs	r3, r3, #1
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5ca:	d11e      	bne.n	800b60a <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	3303      	adds	r3, #3
 800b5d6:	109b      	asrs	r3, r3, #2
 800b5d8:	b29a      	uxth	r2, r3
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b5e0:	e013      	b.n	800b60a <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	2b0f      	cmp	r3, #15
 800b5e8:	d80f      	bhi.n	800b60a <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5f4:	d109      	bne.n	800b60a <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	3301      	adds	r3, #1
 800b600:	105b      	asrs	r3, r3, #1
 800b602:	b29a      	uxth	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b60e:	4a40      	ldr	r2, [pc, #256]	@ (800b710 <HAL_SPI_Transmit_DMA+0x274>)
 800b610:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b616:	4a3f      	ldr	r2, [pc, #252]	@ (800b714 <HAL_SPI_Transmit_DMA+0x278>)
 800b618:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b61e:	4a3e      	ldr	r2, [pc, #248]	@ (800b718 <HAL_SPI_Transmit_DMA+0x27c>)
 800b620:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b626:	2200      	movs	r2, #0
 800b628:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	689a      	ldr	r2, [r3, #8]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b638:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b642:	4619      	mov	r1, r3
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	3320      	adds	r3, #32
 800b64a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b652:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b654:	f7f7 f9dc 	bl	8002a10 <HAL_DMA_Start_IT>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d011      	beq.n	800b682 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b664:	f043 0210 	orr.w	r2, r3, #16
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2201      	movs	r2, #1
 800b672:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e042      	b.n	800b708 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b686:	69db      	ldr	r3, [r3, #28]
 800b688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b68c:	d108      	bne.n	800b6a0 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	6859      	ldr	r1, [r3, #4]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	4b20      	ldr	r3, [pc, #128]	@ (800b71c <HAL_SPI_Transmit_DMA+0x280>)
 800b69a:	400b      	ands	r3, r1
 800b69c:	6053      	str	r3, [r2, #4]
 800b69e:	e009      	b.n	800b6b4 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	4b1d      	ldr	r3, [pc, #116]	@ (800b71c <HAL_SPI_Transmit_DMA+0x280>)
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	88f9      	ldrh	r1, [r7, #6]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	6812      	ldr	r2, [r2, #0]
 800b6b0:	430b      	orrs	r3, r1
 800b6b2:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	689a      	ldr	r2, [r3, #8]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b6c2:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	691a      	ldr	r2, [r3, #16]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800b6d2:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f042 0201 	orr.w	r2, r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6ec:	d107      	bne.n	800b6fe <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6fc:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2200      	movs	r2, #0
 800b702:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	0800be3d 	.word	0x0800be3d
 800b714:	0800bdb1 	.word	0x0800bdb1
 800b718:	0800be75 	.word	0x0800be75
 800b71c:	ffff0000 	.word	0xffff0000

0800b720 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	4613      	mov	r3, r2
 800b72c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b01      	cmp	r3, #1
 800b738:	d005      	beq.n	800b746 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_BUSY;
 800b742:	2302      	movs	r3, #2
 800b744:	e127      	b.n	800b996 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d002      	beq.n	800b752 <HAL_SPI_Receive_DMA+0x32>
 800b74c:	88fb      	ldrh	r3, [r7, #6]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d105      	bne.n	800b75e <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e11b      	b.n	800b996 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b764:	2b01      	cmp	r3, #1
 800b766:	d101      	bne.n	800b76c <HAL_SPI_Receive_DMA+0x4c>
 800b768:	2302      	movs	r3, #2
 800b76a:	e114      	b.n	800b996 <HAL_SPI_Receive_DMA+0x276>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2204      	movs	r2, #4
 800b778:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2200      	movs	r2, #0
 800b780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	88fa      	ldrh	r2, [r7, #6]
 800b78e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	88fa      	ldrh	r2, [r7, #6]
 800b796:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2200      	movs	r2, #0
 800b79e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b7be:	d108      	bne.n	800b7d2 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b7ce:	601a      	str	r2, [r3, #0]
 800b7d0:	e009      	b.n	800b7e6 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b7e4:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	2b0f      	cmp	r3, #15
 800b7ec:	d905      	bls.n	800b7fa <HAL_SPI_Receive_DMA+0xda>
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7f8:	d10f      	bne.n	800b81a <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b7fe:	2b07      	cmp	r3, #7
 800b800:	d911      	bls.n	800b826 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b80c:	d00b      	beq.n	800b826 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b812:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b814:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b818:	d005      	beq.n	800b826 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e0b7      	b.n	800b996 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	689a      	ldr	r2, [r3, #8]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b834:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	2b07      	cmp	r3, #7
 800b83c:	d820      	bhi.n	800b880 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b842:	699b      	ldr	r3, [r3, #24]
 800b844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b848:	d109      	bne.n	800b85e <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b850:	b29b      	uxth	r3, r3
 800b852:	3301      	adds	r3, #1
 800b854:	105b      	asrs	r3, r3, #1
 800b856:	b29a      	uxth	r2, r3
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b868:	d11e      	bne.n	800b8a8 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b870:	b29b      	uxth	r3, r3
 800b872:	3303      	adds	r3, #3
 800b874:	109b      	asrs	r3, r3, #2
 800b876:	b29a      	uxth	r2, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b87e:	e013      	b.n	800b8a8 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	2b0f      	cmp	r3, #15
 800b886:	d80f      	bhi.n	800b8a8 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b88c:	699b      	ldr	r3, [r3, #24]
 800b88e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b892:	d109      	bne.n	800b8a8 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	3301      	adds	r3, #1
 800b89e:	105b      	asrs	r3, r3, #1
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8ac:	4a3c      	ldr	r2, [pc, #240]	@ (800b9a0 <HAL_SPI_Receive_DMA+0x280>)
 800b8ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8b4:	4a3b      	ldr	r2, [pc, #236]	@ (800b9a4 <HAL_SPI_Receive_DMA+0x284>)
 800b8b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8bc:	4a3a      	ldr	r2, [pc, #232]	@ (800b9a8 <HAL_SPI_Receive_DMA+0x288>)
 800b8be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3330      	adds	r3, #48	@ 0x30
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8d8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b8e0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b8e2:	f7f7 f895 	bl	8002a10 <HAL_DMA_Start_IT>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d011      	beq.n	800b910 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8f2:	f043 0210 	orr.w	r2, r3, #16
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	e042      	b.n	800b996 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b914:	69db      	ldr	r3, [r3, #28]
 800b916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b91a:	d108      	bne.n	800b92e <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6859      	ldr	r1, [r3, #4]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	4b21      	ldr	r3, [pc, #132]	@ (800b9ac <HAL_SPI_Receive_DMA+0x28c>)
 800b928:	400b      	ands	r3, r1
 800b92a:	6053      	str	r3, [r2, #4]
 800b92c:	e009      	b.n	800b942 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	4b1d      	ldr	r3, [pc, #116]	@ (800b9ac <HAL_SPI_Receive_DMA+0x28c>)
 800b936:	4013      	ands	r3, r2
 800b938:	88f9      	ldrh	r1, [r7, #6]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	6812      	ldr	r2, [r2, #0]
 800b93e:	430b      	orrs	r3, r1
 800b940:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	689a      	ldr	r2, [r3, #8]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b950:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	691a      	ldr	r2, [r3, #16]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f442 7250 	orr.w	r2, r2, #832	@ 0x340
 800b960:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f042 0201 	orr.w	r2, r2, #1
 800b970:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b97a:	d107      	bne.n	800b98c <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b98a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2200      	movs	r2, #0
 800b990:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	0800be59 	.word	0x0800be59
 800b9a4:	0800bdf7 	.word	0x0800bdf7
 800b9a8:	0800be75 	.word	0x0800be75
 800b9ac:	ffff0000 	.word	0xffff0000

0800b9b0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b08a      	sub	sp, #40	@ 0x28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b9c8:	6a3a      	ldr	r2, [r7, #32]
 800b9ca:	69fb      	ldr	r3, [r7, #28]
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b9e2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	3330      	adds	r3, #48	@ 0x30
 800b9ea:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d010      	beq.n	800ba18 <HAL_SPI_IRQHandler+0x68>
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	f003 0308 	and.w	r3, r3, #8
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00b      	beq.n	800ba18 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	699a      	ldr	r2, [r3, #24]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba0e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 f9c3 	bl	800bd9c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800ba16:	e192      	b.n	800bd3e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d113      	bne.n	800ba4a <HAL_SPI_IRQHandler+0x9a>
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	f003 0320 	and.w	r3, r3, #32
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10e      	bne.n	800ba4a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d009      	beq.n	800ba4a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	4798      	blx	r3
    handled = 1UL;
 800ba46:	2301      	movs	r3, #1
 800ba48:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10f      	bne.n	800ba74 <HAL_SPI_IRQHandler+0xc4>
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	f003 0301 	and.w	r3, r3, #1
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00a      	beq.n	800ba74 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d105      	bne.n	800ba74 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	4798      	blx	r3
    handled = 1UL;
 800ba70:	2301      	movs	r3, #1
 800ba72:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	f003 0320 	and.w	r3, r3, #32
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10f      	bne.n	800ba9e <HAL_SPI_IRQHandler+0xee>
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	f003 0302 	and.w	r3, r3, #2
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00a      	beq.n	800ba9e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d105      	bne.n	800ba9e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	4798      	blx	r3
    handled = 1UL;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f040 8147 	bne.w	800bd34 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	f003 0308 	and.w	r3, r3, #8
 800baac:	2b00      	cmp	r3, #0
 800baae:	f000 808b 	beq.w	800bbc8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	699a      	ldr	r2, [r3, #24]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f042 0208 	orr.w	r2, r2, #8
 800bac0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	699a      	ldr	r2, [r3, #24]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f042 0210 	orr.w	r2, r2, #16
 800bad0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	699a      	ldr	r2, [r3, #24]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bae0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	691a      	ldr	r2, [r3, #16]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f022 0208 	bic.w	r2, r2, #8
 800baf0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d13d      	bne.n	800bb7c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800bb00:	e036      	b.n	800bb70 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	2b0f      	cmp	r3, #15
 800bb08:	d90b      	bls.n	800bb22 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb12:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bb14:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb1a:	1d1a      	adds	r2, r3, #4
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	665a      	str	r2, [r3, #100]	@ 0x64
 800bb20:	e01d      	b.n	800bb5e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	2b07      	cmp	r3, #7
 800bb28:	d90b      	bls.n	800bb42 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb2e:	68fa      	ldr	r2, [r7, #12]
 800bb30:	8812      	ldrh	r2, [r2, #0]
 800bb32:	b292      	uxth	r2, r2
 800bb34:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb3a:	1c9a      	adds	r2, r3, #2
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	665a      	str	r2, [r3, #100]	@ 0x64
 800bb40:	e00d      	b.n	800bb5e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb4e:	7812      	ldrb	r2, [r2, #0]
 800bb50:	b2d2      	uxtb	r2, r2
 800bb52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	3b01      	subs	r3, #1
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1c2      	bne.n	800bb02 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 f9b7 	bl	800bef0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d003      	beq.n	800bb9c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 f8f7 	bl	800bd88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800bb9a:	e0d0      	b.n	800bd3e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800bb9c:	7cfb      	ldrb	r3, [r7, #19]
 800bb9e:	2b05      	cmp	r3, #5
 800bba0:	d103      	bne.n	800bbaa <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f8d2 	bl	800bd4c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800bba8:	e0c6      	b.n	800bd38 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800bbaa:	7cfb      	ldrb	r3, [r7, #19]
 800bbac:	2b04      	cmp	r3, #4
 800bbae:	d103      	bne.n	800bbb8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7f5 f90b 	bl	8000dcc <HAL_SPI_RxCpltCallback>
    return;
 800bbb6:	e0bf      	b.n	800bd38 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800bbb8:	7cfb      	ldrb	r3, [r7, #19]
 800bbba:	2b03      	cmp	r3, #3
 800bbbc:	f040 80bc 	bne.w	800bd38 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f7f5 f887 	bl	8000cd4 <HAL_SPI_TxCpltCallback>
    return;
 800bbc6:	e0b7      	b.n	800bd38 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 80b5 	beq.w	800bd3e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00f      	beq.n	800bbfe <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbe4:	f043 0204 	orr.w	r2, r3, #4
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	699a      	ldr	r2, [r3, #24]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbfc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00f      	beq.n	800bc28 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc0e:	f043 0201 	orr.w	r2, r3, #1
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	699a      	ldr	r2, [r3, #24]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc26:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00f      	beq.n	800bc52 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc38:	f043 0208 	orr.w	r2, r3, #8
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	699a      	ldr	r2, [r3, #24]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bc50:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	f003 0320 	and.w	r3, r3, #32
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00f      	beq.n	800bc7c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc62:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	699a      	ldr	r2, [r3, #24]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f042 0220 	orr.w	r2, r2, #32
 800bc7a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d05a      	beq.n	800bd3c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f022 0201 	bic.w	r2, r2, #1
 800bc94:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	6919      	ldr	r1, [r3, #16]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	4b28      	ldr	r3, [pc, #160]	@ (800bd44 <HAL_SPI_IRQHandler+0x394>)
 800bca2:	400b      	ands	r3, r1
 800bca4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bcac:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bcb0:	d138      	bne.n	800bd24 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	689a      	ldr	r2, [r3, #8]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bcc0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d013      	beq.n	800bcf2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bcce:	4a1e      	ldr	r2, [pc, #120]	@ (800bd48 <HAL_SPI_IRQHandler+0x398>)
 800bcd0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7f7 f904 	bl	8002ee4 <HAL_DMA_Abort_IT>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d007      	beq.n	800bcf2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bce8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d020      	beq.n	800bd3c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcfe:	4a12      	ldr	r2, [pc, #72]	@ (800bd48 <HAL_SPI_IRQHandler+0x398>)
 800bd00:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7f7 f8ec 	bl	8002ee4 <HAL_DMA_Abort_IT>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d014      	beq.n	800bd3c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bd22:	e00b      	b.n	800bd3c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 f82b 	bl	800bd88 <HAL_SPI_ErrorCallback>
    return;
 800bd32:	e003      	b.n	800bd3c <HAL_SPI_IRQHandler+0x38c>
    return;
 800bd34:	bf00      	nop
 800bd36:	e002      	b.n	800bd3e <HAL_SPI_IRQHandler+0x38e>
    return;
 800bd38:	bf00      	nop
 800bd3a:	e000      	b.n	800bd3e <HAL_SPI_IRQHandler+0x38e>
    return;
 800bd3c:	bf00      	nop
  }
}
 800bd3e:	3728      	adds	r7, #40	@ 0x28
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	fffffc94 	.word	0xfffffc94
 800bd48:	0800bebb 	.word	0x0800bebb

0800bd4c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800bd7c:	bf00      	nop
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bd90:	bf00      	nop
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800bda4:	bf00      	nop
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdbc:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b07      	cmp	r3, #7
 800bdc8:	d011      	beq.n	800bdee <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bdce:	69db      	ldr	r3, [r3, #28]
 800bdd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdd4:	d103      	bne.n	800bdde <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f7f4 ff7c 	bl	8000cd4 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800bddc:	e007      	b.n	800bdee <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	691a      	ldr	r2, [r3, #16]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f042 0208 	orr.w	r2, r2, #8
 800bdec:	611a      	str	r2, [r3, #16]
}
 800bdee:	bf00      	nop
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b084      	sub	sp, #16
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be02:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	2b07      	cmp	r3, #7
 800be0e:	d011      	beq.n	800be34 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be14:	69db      	ldr	r3, [r3, #28]
 800be16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be1a:	d103      	bne.n	800be24 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f7f4 ffd5 	bl	8000dcc <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800be22:	e007      	b.n	800be34 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	691a      	ldr	r2, [r3, #16]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f042 0208 	orr.w	r2, r2, #8
 800be32:	611a      	str	r2, [r3, #16]
}
 800be34:	bf00      	nop
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be48:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f7ff ff88 	bl	800bd60 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be50:	bf00      	nop
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be64:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f7ff ff84 	bl	800bd74 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be6c:	bf00      	nop
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be80:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7f8 f99e 	bl	80041c4 <HAL_DMA_GetError>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	d011      	beq.n	800beb2 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f000 f82e 	bl	800bef0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be9a:	f043 0210 	orr.w	r2, r3, #16
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f7ff ff6b 	bl	800bd88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800beb2:	bf00      	nop
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b084      	sub	sp, #16
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f7ff ff51 	bl	800bd88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bee6:	bf00      	nop
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
	...

0800bef0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	695b      	ldr	r3, [r3, #20]
 800befe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	699a      	ldr	r2, [r3, #24]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f042 0208 	orr.w	r2, r2, #8
 800bf0e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	699a      	ldr	r2, [r3, #24]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f042 0210 	orr.w	r2, r2, #16
 800bf1e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f022 0201 	bic.w	r2, r2, #1
 800bf2e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6919      	ldr	r1, [r3, #16]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	4b3c      	ldr	r3, [pc, #240]	@ (800c02c <SPI_CloseTransfer+0x13c>)
 800bf3c:	400b      	ands	r3, r1
 800bf3e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	689a      	ldr	r2, [r3, #8]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bf4e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b04      	cmp	r3, #4
 800bf5a:	d014      	beq.n	800bf86 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f003 0320 	and.w	r3, r3, #32
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00f      	beq.n	800bf86 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	699a      	ldr	r2, [r3, #24]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f042 0220 	orr.w	r2, r2, #32
 800bf84:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	2b03      	cmp	r3, #3
 800bf90:	d014      	beq.n	800bfbc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d00f      	beq.n	800bfbc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfa2:	f043 0204 	orr.w	r2, r3, #4
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	699a      	ldr	r2, [r3, #24]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bfba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00f      	beq.n	800bfe6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfcc:	f043 0201 	orr.w	r2, r3, #1
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	699a      	ldr	r2, [r3, #24]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfe4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00f      	beq.n	800c010 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bff6:	f043 0208 	orr.w	r2, r3, #8
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	699a      	ldr	r2, [r3, #24]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c00e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c020:	bf00      	nop
 800c022:	3714      	adds	r7, #20
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	fffffc90 	.word	0xfffffc90

0800c030 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c03c:	095b      	lsrs	r3, r3, #5
 800c03e:	3301      	adds	r3, #1
 800c040:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	3301      	adds	r3, #1
 800c048:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	3307      	adds	r3, #7
 800c04e:	08db      	lsrs	r3, r3, #3
 800c050:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	fb02 f303 	mul.w	r3, r2, r3
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3714      	adds	r7, #20
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b082      	sub	sp, #8
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	e04a      	b.n	800c10e <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d106      	bne.n	800c090 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7f5 fc5a 	bl	8001944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2224      	movs	r2, #36	@ 0x24
 800c094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f022 0201 	bic.w	r2, r2, #1
 800c0a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fe27 	bl	800cd04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 f8bc 	bl	800c234 <UART_SetConfig>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d101      	bne.n	800c0c6 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e023      	b.n	800c10e <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c0d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	689a      	ldr	r2, [r3, #8]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800c0e4:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	689a      	ldr	r2, [r3, #8]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f042 0208 	orr.w	r2, r2, #8
 800c0f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f042 0201 	orr.w	r2, r2, #1
 800c104:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fe9e 	bl	800ce48 <UART_CheckIdleState>
 800c10c:	4603      	mov	r3, r0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b08a      	sub	sp, #40	@ 0x28
 800c11a:	af02      	add	r7, sp, #8
 800c11c:	60f8      	str	r0, [r7, #12]
 800c11e:	60b9      	str	r1, [r7, #8]
 800c120:	603b      	str	r3, [r7, #0]
 800c122:	4613      	mov	r3, r2
 800c124:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c12c:	2b20      	cmp	r3, #32
 800c12e:	d17b      	bne.n	800c228 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d002      	beq.n	800c13c <HAL_UART_Transmit+0x26>
 800c136:	88fb      	ldrh	r3, [r7, #6]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d101      	bne.n	800c140 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c13c:	2301      	movs	r3, #1
 800c13e:	e074      	b.n	800c22a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2221      	movs	r2, #33	@ 0x21
 800c14c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c150:	f7f5 ff92 	bl	8002078 <HAL_GetTick>
 800c154:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	88fa      	ldrh	r2, [r7, #6]
 800c15a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	88fa      	ldrh	r2, [r7, #6]
 800c162:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c16e:	d108      	bne.n	800c182 <HAL_UART_Transmit+0x6c>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d104      	bne.n	800c182 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c178:	2300      	movs	r3, #0
 800c17a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	61bb      	str	r3, [r7, #24]
 800c180:	e003      	b.n	800c18a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c186:	2300      	movs	r3, #0
 800c188:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c18a:	e030      	b.n	800c1ee <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	2200      	movs	r2, #0
 800c194:	2180      	movs	r1, #128	@ 0x80
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f000 ff00 	bl	800cf9c <UART_WaitOnFlagUntilTimeout>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d005      	beq.n	800c1ae <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2220      	movs	r2, #32
 800c1a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c1aa:	2303      	movs	r3, #3
 800c1ac:	e03d      	b.n	800c22a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10b      	bne.n	800c1cc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	881b      	ldrh	r3, [r3, #0]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	3302      	adds	r3, #2
 800c1c8:	61bb      	str	r3, [r7, #24]
 800c1ca:	e007      	b.n	800c1dc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	781a      	ldrb	r2, [r3, #0]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1c8      	bne.n	800c18c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	2200      	movs	r2, #0
 800c202:	2140      	movs	r1, #64	@ 0x40
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f000 fec9 	bl	800cf9c <UART_WaitOnFlagUntilTimeout>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d005      	beq.n	800c21c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2220      	movs	r2, #32
 800c214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c218:	2303      	movs	r3, #3
 800c21a:	e006      	b.n	800c22a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2220      	movs	r2, #32
 800c220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c224:	2300      	movs	r3, #0
 800c226:	e000      	b.n	800c22a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c228:	2302      	movs	r3, #2
  }
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3720      	adds	r7, #32
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
	...

0800c234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c238:	b092      	sub	sp, #72	@ 0x48
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c23e:	2300      	movs	r3, #0
 800c240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	689a      	ldr	r2, [r3, #8]
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	431a      	orrs	r2, r3
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	695b      	ldr	r3, [r3, #20]
 800c252:	431a      	orrs	r2, r3
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	69db      	ldr	r3, [r3, #28]
 800c258:	4313      	orrs	r3, r2
 800c25a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	4bbe      	ldr	r3, [pc, #760]	@ (800c55c <UART_SetConfig+0x328>)
 800c264:	4013      	ands	r3, r2
 800c266:	697a      	ldr	r2, [r7, #20]
 800c268:	6812      	ldr	r2, [r2, #0]
 800c26a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c26c:	430b      	orrs	r3, r1
 800c26e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	68da      	ldr	r2, [r3, #12]
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	430a      	orrs	r2, r1
 800c284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	699b      	ldr	r3, [r3, #24]
 800c28a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4ab3      	ldr	r2, [pc, #716]	@ (800c560 <UART_SetConfig+0x32c>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d004      	beq.n	800c2a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	6a1b      	ldr	r3, [r3, #32]
 800c29a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c29c:	4313      	orrs	r3, r2
 800c29e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	689a      	ldr	r2, [r3, #8]
 800c2a6:	4baf      	ldr	r3, [pc, #700]	@ (800c564 <UART_SetConfig+0x330>)
 800c2a8:	4013      	ands	r3, r2
 800c2aa:	697a      	ldr	r2, [r7, #20]
 800c2ac:	6812      	ldr	r2, [r2, #0]
 800c2ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c2b0:	430b      	orrs	r3, r1
 800c2b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ba:	f023 010f 	bic.w	r1, r3, #15
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	430a      	orrs	r2, r1
 800c2c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4aa6      	ldr	r2, [pc, #664]	@ (800c568 <UART_SetConfig+0x334>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d177      	bne.n	800c3c4 <UART_SetConfig+0x190>
 800c2d4:	4ba5      	ldr	r3, [pc, #660]	@ (800c56c <UART_SetConfig+0x338>)
 800c2d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c2dc:	2b28      	cmp	r3, #40	@ 0x28
 800c2de:	d86d      	bhi.n	800c3bc <UART_SetConfig+0x188>
 800c2e0:	a201      	add	r2, pc, #4	@ (adr r2, 800c2e8 <UART_SetConfig+0xb4>)
 800c2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e6:	bf00      	nop
 800c2e8:	0800c38d 	.word	0x0800c38d
 800c2ec:	0800c3bd 	.word	0x0800c3bd
 800c2f0:	0800c3bd 	.word	0x0800c3bd
 800c2f4:	0800c3bd 	.word	0x0800c3bd
 800c2f8:	0800c3bd 	.word	0x0800c3bd
 800c2fc:	0800c3bd 	.word	0x0800c3bd
 800c300:	0800c3bd 	.word	0x0800c3bd
 800c304:	0800c3bd 	.word	0x0800c3bd
 800c308:	0800c395 	.word	0x0800c395
 800c30c:	0800c3bd 	.word	0x0800c3bd
 800c310:	0800c3bd 	.word	0x0800c3bd
 800c314:	0800c3bd 	.word	0x0800c3bd
 800c318:	0800c3bd 	.word	0x0800c3bd
 800c31c:	0800c3bd 	.word	0x0800c3bd
 800c320:	0800c3bd 	.word	0x0800c3bd
 800c324:	0800c3bd 	.word	0x0800c3bd
 800c328:	0800c39d 	.word	0x0800c39d
 800c32c:	0800c3bd 	.word	0x0800c3bd
 800c330:	0800c3bd 	.word	0x0800c3bd
 800c334:	0800c3bd 	.word	0x0800c3bd
 800c338:	0800c3bd 	.word	0x0800c3bd
 800c33c:	0800c3bd 	.word	0x0800c3bd
 800c340:	0800c3bd 	.word	0x0800c3bd
 800c344:	0800c3bd 	.word	0x0800c3bd
 800c348:	0800c3a5 	.word	0x0800c3a5
 800c34c:	0800c3bd 	.word	0x0800c3bd
 800c350:	0800c3bd 	.word	0x0800c3bd
 800c354:	0800c3bd 	.word	0x0800c3bd
 800c358:	0800c3bd 	.word	0x0800c3bd
 800c35c:	0800c3bd 	.word	0x0800c3bd
 800c360:	0800c3bd 	.word	0x0800c3bd
 800c364:	0800c3bd 	.word	0x0800c3bd
 800c368:	0800c3ad 	.word	0x0800c3ad
 800c36c:	0800c3bd 	.word	0x0800c3bd
 800c370:	0800c3bd 	.word	0x0800c3bd
 800c374:	0800c3bd 	.word	0x0800c3bd
 800c378:	0800c3bd 	.word	0x0800c3bd
 800c37c:	0800c3bd 	.word	0x0800c3bd
 800c380:	0800c3bd 	.word	0x0800c3bd
 800c384:	0800c3bd 	.word	0x0800c3bd
 800c388:	0800c3b5 	.word	0x0800c3b5
 800c38c:	2301      	movs	r3, #1
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c392:	e222      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c394:	2304      	movs	r3, #4
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39a:	e21e      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c39c:	2308      	movs	r3, #8
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a2:	e21a      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c3a4:	2310      	movs	r3, #16
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3aa:	e216      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c3ac:	2320      	movs	r3, #32
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3b2:	e212      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c3b4:	2340      	movs	r3, #64	@ 0x40
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ba:	e20e      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c3bc:	2380      	movs	r3, #128	@ 0x80
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c2:	e20a      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a69      	ldr	r2, [pc, #420]	@ (800c570 <UART_SetConfig+0x33c>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d130      	bne.n	800c430 <UART_SetConfig+0x1fc>
 800c3ce:	4b67      	ldr	r3, [pc, #412]	@ (800c56c <UART_SetConfig+0x338>)
 800c3d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3d2:	f003 0307 	and.w	r3, r3, #7
 800c3d6:	2b05      	cmp	r3, #5
 800c3d8:	d826      	bhi.n	800c428 <UART_SetConfig+0x1f4>
 800c3da:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e0 <UART_SetConfig+0x1ac>)
 800c3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e0:	0800c3f9 	.word	0x0800c3f9
 800c3e4:	0800c401 	.word	0x0800c401
 800c3e8:	0800c409 	.word	0x0800c409
 800c3ec:	0800c411 	.word	0x0800c411
 800c3f0:	0800c419 	.word	0x0800c419
 800c3f4:	0800c421 	.word	0x0800c421
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fe:	e1ec      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c400:	2304      	movs	r3, #4
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c406:	e1e8      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c408:	2308      	movs	r3, #8
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40e:	e1e4      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c410:	2310      	movs	r3, #16
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c416:	e1e0      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c418:	2320      	movs	r3, #32
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c41e:	e1dc      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c420:	2340      	movs	r3, #64	@ 0x40
 800c422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c426:	e1d8      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c428:	2380      	movs	r3, #128	@ 0x80
 800c42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c42e:	e1d4      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a4f      	ldr	r2, [pc, #316]	@ (800c574 <UART_SetConfig+0x340>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d130      	bne.n	800c49c <UART_SetConfig+0x268>
 800c43a:	4b4c      	ldr	r3, [pc, #304]	@ (800c56c <UART_SetConfig+0x338>)
 800c43c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c43e:	f003 0307 	and.w	r3, r3, #7
 800c442:	2b05      	cmp	r3, #5
 800c444:	d826      	bhi.n	800c494 <UART_SetConfig+0x260>
 800c446:	a201      	add	r2, pc, #4	@ (adr r2, 800c44c <UART_SetConfig+0x218>)
 800c448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c44c:	0800c465 	.word	0x0800c465
 800c450:	0800c46d 	.word	0x0800c46d
 800c454:	0800c475 	.word	0x0800c475
 800c458:	0800c47d 	.word	0x0800c47d
 800c45c:	0800c485 	.word	0x0800c485
 800c460:	0800c48d 	.word	0x0800c48d
 800c464:	2300      	movs	r3, #0
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c46a:	e1b6      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c46c:	2304      	movs	r3, #4
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c472:	e1b2      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c474:	2308      	movs	r3, #8
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c47a:	e1ae      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c47c:	2310      	movs	r3, #16
 800c47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c482:	e1aa      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c484:	2320      	movs	r3, #32
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c48a:	e1a6      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c48c:	2340      	movs	r3, #64	@ 0x40
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c492:	e1a2      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c494:	2380      	movs	r3, #128	@ 0x80
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c49a:	e19e      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a35      	ldr	r2, [pc, #212]	@ (800c578 <UART_SetConfig+0x344>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d130      	bne.n	800c508 <UART_SetConfig+0x2d4>
 800c4a6:	4b31      	ldr	r3, [pc, #196]	@ (800c56c <UART_SetConfig+0x338>)
 800c4a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4aa:	f003 0307 	and.w	r3, r3, #7
 800c4ae:	2b05      	cmp	r3, #5
 800c4b0:	d826      	bhi.n	800c500 <UART_SetConfig+0x2cc>
 800c4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b8 <UART_SetConfig+0x284>)
 800c4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b8:	0800c4d1 	.word	0x0800c4d1
 800c4bc:	0800c4d9 	.word	0x0800c4d9
 800c4c0:	0800c4e1 	.word	0x0800c4e1
 800c4c4:	0800c4e9 	.word	0x0800c4e9
 800c4c8:	0800c4f1 	.word	0x0800c4f1
 800c4cc:	0800c4f9 	.word	0x0800c4f9
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4d6:	e180      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c4d8:	2304      	movs	r3, #4
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4de:	e17c      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c4e0:	2308      	movs	r3, #8
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4e6:	e178      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c4e8:	2310      	movs	r3, #16
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ee:	e174      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c4f0:	2320      	movs	r3, #32
 800c4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4f6:	e170      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c4f8:	2340      	movs	r3, #64	@ 0x40
 800c4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4fe:	e16c      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c500:	2380      	movs	r3, #128	@ 0x80
 800c502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c506:	e168      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a1b      	ldr	r2, [pc, #108]	@ (800c57c <UART_SetConfig+0x348>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d142      	bne.n	800c598 <UART_SetConfig+0x364>
 800c512:	4b16      	ldr	r3, [pc, #88]	@ (800c56c <UART_SetConfig+0x338>)
 800c514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c516:	f003 0307 	and.w	r3, r3, #7
 800c51a:	2b05      	cmp	r3, #5
 800c51c:	d838      	bhi.n	800c590 <UART_SetConfig+0x35c>
 800c51e:	a201      	add	r2, pc, #4	@ (adr r2, 800c524 <UART_SetConfig+0x2f0>)
 800c520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c524:	0800c53d 	.word	0x0800c53d
 800c528:	0800c545 	.word	0x0800c545
 800c52c:	0800c54d 	.word	0x0800c54d
 800c530:	0800c555 	.word	0x0800c555
 800c534:	0800c581 	.word	0x0800c581
 800c538:	0800c589 	.word	0x0800c589
 800c53c:	2300      	movs	r3, #0
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c542:	e14a      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c544:	2304      	movs	r3, #4
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c54a:	e146      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c54c:	2308      	movs	r3, #8
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c552:	e142      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c554:	2310      	movs	r3, #16
 800c556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c55a:	e13e      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c55c:	cfff69f3 	.word	0xcfff69f3
 800c560:	58000c00 	.word	0x58000c00
 800c564:	11fff4ff 	.word	0x11fff4ff
 800c568:	40011000 	.word	0x40011000
 800c56c:	58024400 	.word	0x58024400
 800c570:	40004400 	.word	0x40004400
 800c574:	40004800 	.word	0x40004800
 800c578:	40004c00 	.word	0x40004c00
 800c57c:	40005000 	.word	0x40005000
 800c580:	2320      	movs	r3, #32
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c586:	e128      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c588:	2340      	movs	r3, #64	@ 0x40
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58e:	e124      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c590:	2380      	movs	r3, #128	@ 0x80
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c596:	e120      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4acb      	ldr	r2, [pc, #812]	@ (800c8cc <UART_SetConfig+0x698>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d176      	bne.n	800c690 <UART_SetConfig+0x45c>
 800c5a2:	4bcb      	ldr	r3, [pc, #812]	@ (800c8d0 <UART_SetConfig+0x69c>)
 800c5a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c5aa:	2b28      	cmp	r3, #40	@ 0x28
 800c5ac:	d86c      	bhi.n	800c688 <UART_SetConfig+0x454>
 800c5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c5b4 <UART_SetConfig+0x380>)
 800c5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b4:	0800c659 	.word	0x0800c659
 800c5b8:	0800c689 	.word	0x0800c689
 800c5bc:	0800c689 	.word	0x0800c689
 800c5c0:	0800c689 	.word	0x0800c689
 800c5c4:	0800c689 	.word	0x0800c689
 800c5c8:	0800c689 	.word	0x0800c689
 800c5cc:	0800c689 	.word	0x0800c689
 800c5d0:	0800c689 	.word	0x0800c689
 800c5d4:	0800c661 	.word	0x0800c661
 800c5d8:	0800c689 	.word	0x0800c689
 800c5dc:	0800c689 	.word	0x0800c689
 800c5e0:	0800c689 	.word	0x0800c689
 800c5e4:	0800c689 	.word	0x0800c689
 800c5e8:	0800c689 	.word	0x0800c689
 800c5ec:	0800c689 	.word	0x0800c689
 800c5f0:	0800c689 	.word	0x0800c689
 800c5f4:	0800c669 	.word	0x0800c669
 800c5f8:	0800c689 	.word	0x0800c689
 800c5fc:	0800c689 	.word	0x0800c689
 800c600:	0800c689 	.word	0x0800c689
 800c604:	0800c689 	.word	0x0800c689
 800c608:	0800c689 	.word	0x0800c689
 800c60c:	0800c689 	.word	0x0800c689
 800c610:	0800c689 	.word	0x0800c689
 800c614:	0800c671 	.word	0x0800c671
 800c618:	0800c689 	.word	0x0800c689
 800c61c:	0800c689 	.word	0x0800c689
 800c620:	0800c689 	.word	0x0800c689
 800c624:	0800c689 	.word	0x0800c689
 800c628:	0800c689 	.word	0x0800c689
 800c62c:	0800c689 	.word	0x0800c689
 800c630:	0800c689 	.word	0x0800c689
 800c634:	0800c679 	.word	0x0800c679
 800c638:	0800c689 	.word	0x0800c689
 800c63c:	0800c689 	.word	0x0800c689
 800c640:	0800c689 	.word	0x0800c689
 800c644:	0800c689 	.word	0x0800c689
 800c648:	0800c689 	.word	0x0800c689
 800c64c:	0800c689 	.word	0x0800c689
 800c650:	0800c689 	.word	0x0800c689
 800c654:	0800c681 	.word	0x0800c681
 800c658:	2301      	movs	r3, #1
 800c65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c65e:	e0bc      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c660:	2304      	movs	r3, #4
 800c662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c666:	e0b8      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c668:	2308      	movs	r3, #8
 800c66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c66e:	e0b4      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c670:	2310      	movs	r3, #16
 800c672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c676:	e0b0      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c678:	2320      	movs	r3, #32
 800c67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c67e:	e0ac      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c680:	2340      	movs	r3, #64	@ 0x40
 800c682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c686:	e0a8      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c688:	2380      	movs	r3, #128	@ 0x80
 800c68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c68e:	e0a4      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a8f      	ldr	r2, [pc, #572]	@ (800c8d4 <UART_SetConfig+0x6a0>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d130      	bne.n	800c6fc <UART_SetConfig+0x4c8>
 800c69a:	4b8d      	ldr	r3, [pc, #564]	@ (800c8d0 <UART_SetConfig+0x69c>)
 800c69c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c69e:	f003 0307 	and.w	r3, r3, #7
 800c6a2:	2b05      	cmp	r3, #5
 800c6a4:	d826      	bhi.n	800c6f4 <UART_SetConfig+0x4c0>
 800c6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c6ac <UART_SetConfig+0x478>)
 800c6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ac:	0800c6c5 	.word	0x0800c6c5
 800c6b0:	0800c6cd 	.word	0x0800c6cd
 800c6b4:	0800c6d5 	.word	0x0800c6d5
 800c6b8:	0800c6dd 	.word	0x0800c6dd
 800c6bc:	0800c6e5 	.word	0x0800c6e5
 800c6c0:	0800c6ed 	.word	0x0800c6ed
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ca:	e086      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c6cc:	2304      	movs	r3, #4
 800c6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6d2:	e082      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c6d4:	2308      	movs	r3, #8
 800c6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6da:	e07e      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c6dc:	2310      	movs	r3, #16
 800c6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6e2:	e07a      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c6e4:	2320      	movs	r3, #32
 800c6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ea:	e076      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c6ec:	2340      	movs	r3, #64	@ 0x40
 800c6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6f2:	e072      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c6f4:	2380      	movs	r3, #128	@ 0x80
 800c6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6fa:	e06e      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a75      	ldr	r2, [pc, #468]	@ (800c8d8 <UART_SetConfig+0x6a4>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d130      	bne.n	800c768 <UART_SetConfig+0x534>
 800c706:	4b72      	ldr	r3, [pc, #456]	@ (800c8d0 <UART_SetConfig+0x69c>)
 800c708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c70a:	f003 0307 	and.w	r3, r3, #7
 800c70e:	2b05      	cmp	r3, #5
 800c710:	d826      	bhi.n	800c760 <UART_SetConfig+0x52c>
 800c712:	a201      	add	r2, pc, #4	@ (adr r2, 800c718 <UART_SetConfig+0x4e4>)
 800c714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c718:	0800c731 	.word	0x0800c731
 800c71c:	0800c739 	.word	0x0800c739
 800c720:	0800c741 	.word	0x0800c741
 800c724:	0800c749 	.word	0x0800c749
 800c728:	0800c751 	.word	0x0800c751
 800c72c:	0800c759 	.word	0x0800c759
 800c730:	2300      	movs	r3, #0
 800c732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c736:	e050      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c738:	2304      	movs	r3, #4
 800c73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c73e:	e04c      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c740:	2308      	movs	r3, #8
 800c742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c746:	e048      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c748:	2310      	movs	r3, #16
 800c74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c74e:	e044      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c750:	2320      	movs	r3, #32
 800c752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c756:	e040      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c758:	2340      	movs	r3, #64	@ 0x40
 800c75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c75e:	e03c      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c760:	2380      	movs	r3, #128	@ 0x80
 800c762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c766:	e038      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a5b      	ldr	r2, [pc, #364]	@ (800c8dc <UART_SetConfig+0x6a8>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d130      	bne.n	800c7d4 <UART_SetConfig+0x5a0>
 800c772:	4b57      	ldr	r3, [pc, #348]	@ (800c8d0 <UART_SetConfig+0x69c>)
 800c774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c776:	f003 0307 	and.w	r3, r3, #7
 800c77a:	2b05      	cmp	r3, #5
 800c77c:	d826      	bhi.n	800c7cc <UART_SetConfig+0x598>
 800c77e:	a201      	add	r2, pc, #4	@ (adr r2, 800c784 <UART_SetConfig+0x550>)
 800c780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c784:	0800c79d 	.word	0x0800c79d
 800c788:	0800c7a5 	.word	0x0800c7a5
 800c78c:	0800c7ad 	.word	0x0800c7ad
 800c790:	0800c7b5 	.word	0x0800c7b5
 800c794:	0800c7bd 	.word	0x0800c7bd
 800c798:	0800c7c5 	.word	0x0800c7c5
 800c79c:	2302      	movs	r3, #2
 800c79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7a2:	e01a      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c7a4:	2304      	movs	r3, #4
 800c7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7aa:	e016      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c7ac:	2308      	movs	r3, #8
 800c7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7b2:	e012      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c7b4:	2310      	movs	r3, #16
 800c7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7ba:	e00e      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c7bc:	2320      	movs	r3, #32
 800c7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7c2:	e00a      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c7c4:	2340      	movs	r3, #64	@ 0x40
 800c7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7ca:	e006      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c7cc:	2380      	movs	r3, #128	@ 0x80
 800c7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7d2:	e002      	b.n	800c7da <UART_SetConfig+0x5a6>
 800c7d4:	2380      	movs	r3, #128	@ 0x80
 800c7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a3f      	ldr	r2, [pc, #252]	@ (800c8dc <UART_SetConfig+0x6a8>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	f040 80f8 	bne.w	800c9d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c7e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c7ea:	2b20      	cmp	r3, #32
 800c7ec:	dc46      	bgt.n	800c87c <UART_SetConfig+0x648>
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	f2c0 8082 	blt.w	800c8f8 <UART_SetConfig+0x6c4>
 800c7f4:	3b02      	subs	r3, #2
 800c7f6:	2b1e      	cmp	r3, #30
 800c7f8:	d87e      	bhi.n	800c8f8 <UART_SetConfig+0x6c4>
 800c7fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c800 <UART_SetConfig+0x5cc>)
 800c7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c800:	0800c883 	.word	0x0800c883
 800c804:	0800c8f9 	.word	0x0800c8f9
 800c808:	0800c88b 	.word	0x0800c88b
 800c80c:	0800c8f9 	.word	0x0800c8f9
 800c810:	0800c8f9 	.word	0x0800c8f9
 800c814:	0800c8f9 	.word	0x0800c8f9
 800c818:	0800c89b 	.word	0x0800c89b
 800c81c:	0800c8f9 	.word	0x0800c8f9
 800c820:	0800c8f9 	.word	0x0800c8f9
 800c824:	0800c8f9 	.word	0x0800c8f9
 800c828:	0800c8f9 	.word	0x0800c8f9
 800c82c:	0800c8f9 	.word	0x0800c8f9
 800c830:	0800c8f9 	.word	0x0800c8f9
 800c834:	0800c8f9 	.word	0x0800c8f9
 800c838:	0800c8ab 	.word	0x0800c8ab
 800c83c:	0800c8f9 	.word	0x0800c8f9
 800c840:	0800c8f9 	.word	0x0800c8f9
 800c844:	0800c8f9 	.word	0x0800c8f9
 800c848:	0800c8f9 	.word	0x0800c8f9
 800c84c:	0800c8f9 	.word	0x0800c8f9
 800c850:	0800c8f9 	.word	0x0800c8f9
 800c854:	0800c8f9 	.word	0x0800c8f9
 800c858:	0800c8f9 	.word	0x0800c8f9
 800c85c:	0800c8f9 	.word	0x0800c8f9
 800c860:	0800c8f9 	.word	0x0800c8f9
 800c864:	0800c8f9 	.word	0x0800c8f9
 800c868:	0800c8f9 	.word	0x0800c8f9
 800c86c:	0800c8f9 	.word	0x0800c8f9
 800c870:	0800c8f9 	.word	0x0800c8f9
 800c874:	0800c8f9 	.word	0x0800c8f9
 800c878:	0800c8eb 	.word	0x0800c8eb
 800c87c:	2b40      	cmp	r3, #64	@ 0x40
 800c87e:	d037      	beq.n	800c8f0 <UART_SetConfig+0x6bc>
 800c880:	e03a      	b.n	800c8f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c882:	f7fe f863 	bl	800a94c <HAL_RCCEx_GetD3PCLK1Freq>
 800c886:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c888:	e03c      	b.n	800c904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c88a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fe f872 	bl	800a978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c898:	e034      	b.n	800c904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c89a:	f107 0318 	add.w	r3, r7, #24
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fe f9be 	bl	800ac20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8a8:	e02c      	b.n	800c904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8aa:	4b09      	ldr	r3, [pc, #36]	@ (800c8d0 <UART_SetConfig+0x69c>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f003 0320 	and.w	r3, r3, #32
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d016      	beq.n	800c8e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8b6:	4b06      	ldr	r3, [pc, #24]	@ (800c8d0 <UART_SetConfig+0x69c>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	08db      	lsrs	r3, r3, #3
 800c8bc:	f003 0303 	and.w	r3, r3, #3
 800c8c0:	4a07      	ldr	r2, [pc, #28]	@ (800c8e0 <UART_SetConfig+0x6ac>)
 800c8c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8c8:	e01c      	b.n	800c904 <UART_SetConfig+0x6d0>
 800c8ca:	bf00      	nop
 800c8cc:	40011400 	.word	0x40011400
 800c8d0:	58024400 	.word	0x58024400
 800c8d4:	40007800 	.word	0x40007800
 800c8d8:	40007c00 	.word	0x40007c00
 800c8dc:	58000c00 	.word	0x58000c00
 800c8e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c8e4:	4b9d      	ldr	r3, [pc, #628]	@ (800cb5c <UART_SetConfig+0x928>)
 800c8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8e8:	e00c      	b.n	800c904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8ea:	4b9d      	ldr	r3, [pc, #628]	@ (800cb60 <UART_SetConfig+0x92c>)
 800c8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8ee:	e009      	b.n	800c904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8f6:	e005      	b.n	800c904 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c902:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c906:	2b00      	cmp	r3, #0
 800c908:	f000 81de 	beq.w	800ccc8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c910:	4a94      	ldr	r2, [pc, #592]	@ (800cb64 <UART_SetConfig+0x930>)
 800c912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c916:	461a      	mov	r2, r3
 800c918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c91a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c91e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	685a      	ldr	r2, [r3, #4]
 800c924:	4613      	mov	r3, r2
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	4413      	add	r3, r2
 800c92a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d305      	bcc.n	800c93c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c938:	429a      	cmp	r2, r3
 800c93a:	d903      	bls.n	800c944 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c942:	e1c1      	b.n	800ccc8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c946:	2200      	movs	r2, #0
 800c948:	60bb      	str	r3, [r7, #8]
 800c94a:	60fa      	str	r2, [r7, #12]
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c950:	4a84      	ldr	r2, [pc, #528]	@ (800cb64 <UART_SetConfig+0x930>)
 800c952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c956:	b29b      	uxth	r3, r3
 800c958:	2200      	movs	r2, #0
 800c95a:	603b      	str	r3, [r7, #0]
 800c95c:	607a      	str	r2, [r7, #4]
 800c95e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c962:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c966:	f7f3 fd0b 	bl	8000380 <__aeabi_uldivmod>
 800c96a:	4602      	mov	r2, r0
 800c96c:	460b      	mov	r3, r1
 800c96e:	4610      	mov	r0, r2
 800c970:	4619      	mov	r1, r3
 800c972:	f04f 0200 	mov.w	r2, #0
 800c976:	f04f 0300 	mov.w	r3, #0
 800c97a:	020b      	lsls	r3, r1, #8
 800c97c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c980:	0202      	lsls	r2, r0, #8
 800c982:	6979      	ldr	r1, [r7, #20]
 800c984:	6849      	ldr	r1, [r1, #4]
 800c986:	0849      	lsrs	r1, r1, #1
 800c988:	2000      	movs	r0, #0
 800c98a:	460c      	mov	r4, r1
 800c98c:	4605      	mov	r5, r0
 800c98e:	eb12 0804 	adds.w	r8, r2, r4
 800c992:	eb43 0905 	adc.w	r9, r3, r5
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	469a      	mov	sl, r3
 800c99e:	4693      	mov	fp, r2
 800c9a0:	4652      	mov	r2, sl
 800c9a2:	465b      	mov	r3, fp
 800c9a4:	4640      	mov	r0, r8
 800c9a6:	4649      	mov	r1, r9
 800c9a8:	f7f3 fcea 	bl	8000380 <__aeabi_uldivmod>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	4613      	mov	r3, r2
 800c9b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c9ba:	d308      	bcc.n	800c9ce <UART_SetConfig+0x79a>
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c9c2:	d204      	bcs.n	800c9ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9ca:	60da      	str	r2, [r3, #12]
 800c9cc:	e17c      	b.n	800ccc8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c9d4:	e178      	b.n	800ccc8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	69db      	ldr	r3, [r3, #28]
 800c9da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c9de:	f040 80c5 	bne.w	800cb6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c9e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c9e6:	2b20      	cmp	r3, #32
 800c9e8:	dc48      	bgt.n	800ca7c <UART_SetConfig+0x848>
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	db7b      	blt.n	800cae6 <UART_SetConfig+0x8b2>
 800c9ee:	2b20      	cmp	r3, #32
 800c9f0:	d879      	bhi.n	800cae6 <UART_SetConfig+0x8b2>
 800c9f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c9f8 <UART_SetConfig+0x7c4>)
 800c9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f8:	0800ca83 	.word	0x0800ca83
 800c9fc:	0800ca8b 	.word	0x0800ca8b
 800ca00:	0800cae7 	.word	0x0800cae7
 800ca04:	0800cae7 	.word	0x0800cae7
 800ca08:	0800ca93 	.word	0x0800ca93
 800ca0c:	0800cae7 	.word	0x0800cae7
 800ca10:	0800cae7 	.word	0x0800cae7
 800ca14:	0800cae7 	.word	0x0800cae7
 800ca18:	0800caa3 	.word	0x0800caa3
 800ca1c:	0800cae7 	.word	0x0800cae7
 800ca20:	0800cae7 	.word	0x0800cae7
 800ca24:	0800cae7 	.word	0x0800cae7
 800ca28:	0800cae7 	.word	0x0800cae7
 800ca2c:	0800cae7 	.word	0x0800cae7
 800ca30:	0800cae7 	.word	0x0800cae7
 800ca34:	0800cae7 	.word	0x0800cae7
 800ca38:	0800cab3 	.word	0x0800cab3
 800ca3c:	0800cae7 	.word	0x0800cae7
 800ca40:	0800cae7 	.word	0x0800cae7
 800ca44:	0800cae7 	.word	0x0800cae7
 800ca48:	0800cae7 	.word	0x0800cae7
 800ca4c:	0800cae7 	.word	0x0800cae7
 800ca50:	0800cae7 	.word	0x0800cae7
 800ca54:	0800cae7 	.word	0x0800cae7
 800ca58:	0800cae7 	.word	0x0800cae7
 800ca5c:	0800cae7 	.word	0x0800cae7
 800ca60:	0800cae7 	.word	0x0800cae7
 800ca64:	0800cae7 	.word	0x0800cae7
 800ca68:	0800cae7 	.word	0x0800cae7
 800ca6c:	0800cae7 	.word	0x0800cae7
 800ca70:	0800cae7 	.word	0x0800cae7
 800ca74:	0800cae7 	.word	0x0800cae7
 800ca78:	0800cad9 	.word	0x0800cad9
 800ca7c:	2b40      	cmp	r3, #64	@ 0x40
 800ca7e:	d02e      	beq.n	800cade <UART_SetConfig+0x8aa>
 800ca80:	e031      	b.n	800cae6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca82:	f7fc fd2d 	bl	80094e0 <HAL_RCC_GetPCLK1Freq>
 800ca86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca88:	e033      	b.n	800caf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca8a:	f7fc fd3f 	bl	800950c <HAL_RCC_GetPCLK2Freq>
 800ca8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca90:	e02f      	b.n	800caf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fd ff6e 	bl	800a978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800caa0:	e027      	b.n	800caf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800caa2:	f107 0318 	add.w	r3, r7, #24
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7fe f8ba 	bl	800ac20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cab0:	e01f      	b.n	800caf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cab2:	4b2d      	ldr	r3, [pc, #180]	@ (800cb68 <UART_SetConfig+0x934>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f003 0320 	and.w	r3, r3, #32
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d009      	beq.n	800cad2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cabe:	4b2a      	ldr	r3, [pc, #168]	@ (800cb68 <UART_SetConfig+0x934>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	08db      	lsrs	r3, r3, #3
 800cac4:	f003 0303 	and.w	r3, r3, #3
 800cac8:	4a24      	ldr	r2, [pc, #144]	@ (800cb5c <UART_SetConfig+0x928>)
 800caca:	fa22 f303 	lsr.w	r3, r2, r3
 800cace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cad0:	e00f      	b.n	800caf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cad2:	4b22      	ldr	r3, [pc, #136]	@ (800cb5c <UART_SetConfig+0x928>)
 800cad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cad6:	e00c      	b.n	800caf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cad8:	4b21      	ldr	r3, [pc, #132]	@ (800cb60 <UART_SetConfig+0x92c>)
 800cada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cadc:	e009      	b.n	800caf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cae4:	e005      	b.n	800caf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cae6:	2300      	movs	r3, #0
 800cae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800caea:	2301      	movs	r3, #1
 800caec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800caf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800caf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f000 80e7 	beq.w	800ccc8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cafe:	4a19      	ldr	r2, [pc, #100]	@ (800cb64 <UART_SetConfig+0x930>)
 800cb00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb04:	461a      	mov	r2, r3
 800cb06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb08:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb0c:	005a      	lsls	r2, r3, #1
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	085b      	lsrs	r3, r3, #1
 800cb14:	441a      	add	r2, r3
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb22:	2b0f      	cmp	r3, #15
 800cb24:	d916      	bls.n	800cb54 <UART_SetConfig+0x920>
 800cb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb2c:	d212      	bcs.n	800cb54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	f023 030f 	bic.w	r3, r3, #15
 800cb36:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3a:	085b      	lsrs	r3, r3, #1
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	f003 0307 	and.w	r3, r3, #7
 800cb42:	b29a      	uxth	r2, r3
 800cb44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cb46:	4313      	orrs	r3, r2
 800cb48:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800cb50:	60da      	str	r2, [r3, #12]
 800cb52:	e0b9      	b.n	800ccc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cb54:	2301      	movs	r3, #1
 800cb56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cb5a:	e0b5      	b.n	800ccc8 <UART_SetConfig+0xa94>
 800cb5c:	03d09000 	.word	0x03d09000
 800cb60:	003d0900 	.word	0x003d0900
 800cb64:	0801d78c 	.word	0x0801d78c
 800cb68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cb70:	2b20      	cmp	r3, #32
 800cb72:	dc49      	bgt.n	800cc08 <UART_SetConfig+0x9d4>
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	db7c      	blt.n	800cc72 <UART_SetConfig+0xa3e>
 800cb78:	2b20      	cmp	r3, #32
 800cb7a:	d87a      	bhi.n	800cc72 <UART_SetConfig+0xa3e>
 800cb7c:	a201      	add	r2, pc, #4	@ (adr r2, 800cb84 <UART_SetConfig+0x950>)
 800cb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb82:	bf00      	nop
 800cb84:	0800cc0f 	.word	0x0800cc0f
 800cb88:	0800cc17 	.word	0x0800cc17
 800cb8c:	0800cc73 	.word	0x0800cc73
 800cb90:	0800cc73 	.word	0x0800cc73
 800cb94:	0800cc1f 	.word	0x0800cc1f
 800cb98:	0800cc73 	.word	0x0800cc73
 800cb9c:	0800cc73 	.word	0x0800cc73
 800cba0:	0800cc73 	.word	0x0800cc73
 800cba4:	0800cc2f 	.word	0x0800cc2f
 800cba8:	0800cc73 	.word	0x0800cc73
 800cbac:	0800cc73 	.word	0x0800cc73
 800cbb0:	0800cc73 	.word	0x0800cc73
 800cbb4:	0800cc73 	.word	0x0800cc73
 800cbb8:	0800cc73 	.word	0x0800cc73
 800cbbc:	0800cc73 	.word	0x0800cc73
 800cbc0:	0800cc73 	.word	0x0800cc73
 800cbc4:	0800cc3f 	.word	0x0800cc3f
 800cbc8:	0800cc73 	.word	0x0800cc73
 800cbcc:	0800cc73 	.word	0x0800cc73
 800cbd0:	0800cc73 	.word	0x0800cc73
 800cbd4:	0800cc73 	.word	0x0800cc73
 800cbd8:	0800cc73 	.word	0x0800cc73
 800cbdc:	0800cc73 	.word	0x0800cc73
 800cbe0:	0800cc73 	.word	0x0800cc73
 800cbe4:	0800cc73 	.word	0x0800cc73
 800cbe8:	0800cc73 	.word	0x0800cc73
 800cbec:	0800cc73 	.word	0x0800cc73
 800cbf0:	0800cc73 	.word	0x0800cc73
 800cbf4:	0800cc73 	.word	0x0800cc73
 800cbf8:	0800cc73 	.word	0x0800cc73
 800cbfc:	0800cc73 	.word	0x0800cc73
 800cc00:	0800cc73 	.word	0x0800cc73
 800cc04:	0800cc65 	.word	0x0800cc65
 800cc08:	2b40      	cmp	r3, #64	@ 0x40
 800cc0a:	d02e      	beq.n	800cc6a <UART_SetConfig+0xa36>
 800cc0c:	e031      	b.n	800cc72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc0e:	f7fc fc67 	bl	80094e0 <HAL_RCC_GetPCLK1Freq>
 800cc12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cc14:	e033      	b.n	800cc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc16:	f7fc fc79 	bl	800950c <HAL_RCC_GetPCLK2Freq>
 800cc1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cc1c:	e02f      	b.n	800cc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fd fea8 	bl	800a978 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc2c:	e027      	b.n	800cc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc2e:	f107 0318 	add.w	r3, r7, #24
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fd fff4 	bl	800ac20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc3c:	e01f      	b.n	800cc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc3e:	4b2d      	ldr	r3, [pc, #180]	@ (800ccf4 <UART_SetConfig+0xac0>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f003 0320 	and.w	r3, r3, #32
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d009      	beq.n	800cc5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc4a:	4b2a      	ldr	r3, [pc, #168]	@ (800ccf4 <UART_SetConfig+0xac0>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	08db      	lsrs	r3, r3, #3
 800cc50:	f003 0303 	and.w	r3, r3, #3
 800cc54:	4a28      	ldr	r2, [pc, #160]	@ (800ccf8 <UART_SetConfig+0xac4>)
 800cc56:	fa22 f303 	lsr.w	r3, r2, r3
 800cc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc5c:	e00f      	b.n	800cc7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cc5e:	4b26      	ldr	r3, [pc, #152]	@ (800ccf8 <UART_SetConfig+0xac4>)
 800cc60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc62:	e00c      	b.n	800cc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc64:	4b25      	ldr	r3, [pc, #148]	@ (800ccfc <UART_SetConfig+0xac8>)
 800cc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc68:	e009      	b.n	800cc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc70:	e005      	b.n	800cc7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cc72:	2300      	movs	r3, #0
 800cc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cc7c:	bf00      	nop
    }

    if (pclk != 0U)
 800cc7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d021      	beq.n	800ccc8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc88:	4a1d      	ldr	r2, [pc, #116]	@ (800cd00 <UART_SetConfig+0xacc>)
 800cc8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc92:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	085b      	lsrs	r3, r3, #1
 800cc9c:	441a      	add	r2, r3
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cca6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccaa:	2b0f      	cmp	r3, #15
 800ccac:	d909      	bls.n	800ccc2 <UART_SetConfig+0xa8e>
 800ccae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ccb4:	d205      	bcs.n	800ccc2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ccb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	60da      	str	r2, [r3, #12]
 800ccc0:	e002      	b.n	800ccc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	2201      	movs	r2, #1
 800cccc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	2200      	movs	r2, #0
 800cce2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cce4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3748      	adds	r7, #72	@ 0x48
 800ccec:	46bd      	mov	sp, r7
 800ccee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ccf2:	bf00      	nop
 800ccf4:	58024400 	.word	0x58024400
 800ccf8:	03d09000 	.word	0x03d09000
 800ccfc:	003d0900 	.word	0x003d0900
 800cd00:	0801d78c 	.word	0x0801d78c

0800cd04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd10:	f003 0308 	and.w	r3, r3, #8
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00a      	beq.n	800cd2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	430a      	orrs	r2, r1
 800cd2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd32:	f003 0301 	and.w	r3, r3, #1
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00a      	beq.n	800cd50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	430a      	orrs	r2, r1
 800cd4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd54:	f003 0302 	and.w	r3, r3, #2
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00a      	beq.n	800cd72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	430a      	orrs	r2, r1
 800cd70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd76:	f003 0304 	and.w	r3, r3, #4
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00a      	beq.n	800cd94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	430a      	orrs	r2, r1
 800cd92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd98:	f003 0310 	and.w	r3, r3, #16
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00a      	beq.n	800cdb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	430a      	orrs	r2, r1
 800cdb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdba:	f003 0320 	and.w	r3, r3, #32
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d00a      	beq.n	800cdd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	430a      	orrs	r2, r1
 800cdd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d01a      	beq.n	800ce1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	430a      	orrs	r2, r1
 800cdf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce02:	d10a      	bne.n	800ce1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	430a      	orrs	r2, r1
 800ce18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00a      	beq.n	800ce3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	430a      	orrs	r2, r1
 800ce3a:	605a      	str	r2, [r3, #4]
  }
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b098      	sub	sp, #96	@ 0x60
 800ce4c:	af02      	add	r7, sp, #8
 800ce4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce58:	f7f5 f90e 	bl	8002078 <HAL_GetTick>
 800ce5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f003 0308 	and.w	r3, r3, #8
 800ce68:	2b08      	cmp	r3, #8
 800ce6a:	d12f      	bne.n	800cecc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce74:	2200      	movs	r2, #0
 800ce76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 f88e 	bl	800cf9c <UART_WaitOnFlagUntilTimeout>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d022      	beq.n	800cecc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce8e:	e853 3f00 	ldrex	r3, [r3]
 800ce92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ce94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	461a      	mov	r2, r3
 800cea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cea4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cea6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ceaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ceac:	e841 2300 	strex	r3, r2, [r1]
 800ceb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ceb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d1e6      	bne.n	800ce86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2220      	movs	r2, #32
 800cebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cec8:	2303      	movs	r3, #3
 800ceca:	e063      	b.n	800cf94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f003 0304 	and.w	r3, r3, #4
 800ced6:	2b04      	cmp	r3, #4
 800ced8:	d149      	bne.n	800cf6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ceda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cee2:	2200      	movs	r2, #0
 800cee4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 f857 	bl	800cf9c <UART_WaitOnFlagUntilTimeout>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d03c      	beq.n	800cf6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefc:	e853 3f00 	ldrex	r3, [r3]
 800cf00:	623b      	str	r3, [r7, #32]
   return(result);
 800cf02:	6a3b      	ldr	r3, [r7, #32]
 800cf04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cf08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf12:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf1a:	e841 2300 	strex	r3, r2, [r1]
 800cf1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1e6      	bne.n	800cef4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	3308      	adds	r3, #8
 800cf2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	e853 3f00 	ldrex	r3, [r3]
 800cf34:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f023 0301 	bic.w	r3, r3, #1
 800cf3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	3308      	adds	r3, #8
 800cf44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf46:	61fa      	str	r2, [r7, #28]
 800cf48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf4a:	69b9      	ldr	r1, [r7, #24]
 800cf4c:	69fa      	ldr	r2, [r7, #28]
 800cf4e:	e841 2300 	strex	r3, r2, [r1]
 800cf52:	617b      	str	r3, [r7, #20]
   return(result);
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d1e5      	bne.n	800cf26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2220      	movs	r2, #32
 800cf5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2200      	movs	r2, #0
 800cf66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf6a:	2303      	movs	r3, #3
 800cf6c:	e012      	b.n	800cf94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2220      	movs	r2, #32
 800cf72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2220      	movs	r2, #32
 800cf7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3758      	adds	r7, #88	@ 0x58
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	603b      	str	r3, [r7, #0]
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfac:	e04f      	b.n	800d04e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb4:	d04b      	beq.n	800d04e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfb6:	f7f5 f85f 	bl	8002078 <HAL_GetTick>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	1ad3      	subs	r3, r2, r3
 800cfc0:	69ba      	ldr	r2, [r7, #24]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d302      	bcc.n	800cfcc <UART_WaitOnFlagUntilTimeout+0x30>
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d101      	bne.n	800cfd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cfcc:	2303      	movs	r3, #3
 800cfce:	e04e      	b.n	800d06e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f003 0304 	and.w	r3, r3, #4
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d037      	beq.n	800d04e <UART_WaitOnFlagUntilTimeout+0xb2>
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	2b80      	cmp	r3, #128	@ 0x80
 800cfe2:	d034      	beq.n	800d04e <UART_WaitOnFlagUntilTimeout+0xb2>
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	2b40      	cmp	r3, #64	@ 0x40
 800cfe8:	d031      	beq.n	800d04e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	69db      	ldr	r3, [r3, #28]
 800cff0:	f003 0308 	and.w	r3, r3, #8
 800cff4:	2b08      	cmp	r3, #8
 800cff6:	d110      	bne.n	800d01a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2208      	movs	r2, #8
 800cffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d000:	68f8      	ldr	r0, [r7, #12]
 800d002:	f000 f839 	bl	800d078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2208      	movs	r2, #8
 800d00a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d016:	2301      	movs	r3, #1
 800d018:	e029      	b.n	800d06e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	69db      	ldr	r3, [r3, #28]
 800d020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d028:	d111      	bne.n	800d04e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f000 f81f 	bl	800d078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2220      	movs	r2, #32
 800d03e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d04a:	2303      	movs	r3, #3
 800d04c:	e00f      	b.n	800d06e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	69da      	ldr	r2, [r3, #28]
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	4013      	ands	r3, r2
 800d058:	68ba      	ldr	r2, [r7, #8]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	bf0c      	ite	eq
 800d05e:	2301      	moveq	r3, #1
 800d060:	2300      	movne	r3, #0
 800d062:	b2db      	uxtb	r3, r3
 800d064:	461a      	mov	r2, r3
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d0a0      	beq.n	800cfae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
	...

0800d078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d078:	b480      	push	{r7}
 800d07a:	b095      	sub	sp, #84	@ 0x54
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d088:	e853 3f00 	ldrex	r3, [r3]
 800d08c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d094:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	461a      	mov	r2, r3
 800d09c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d09e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d0a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d0a6:	e841 2300 	strex	r3, r2, [r1]
 800d0aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1e6      	bne.n	800d080 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ba:	6a3b      	ldr	r3, [r7, #32]
 800d0bc:	e853 3f00 	ldrex	r3, [r3]
 800d0c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0c2:	69fa      	ldr	r2, [r7, #28]
 800d0c4:	4b1e      	ldr	r3, [pc, #120]	@ (800d140 <UART_EndRxTransfer+0xc8>)
 800d0c6:	4013      	ands	r3, r2
 800d0c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	3308      	adds	r3, #8
 800d0d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d0d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d0d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d0d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0da:	e841 2300 	strex	r3, r2, [r1]
 800d0de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d1e5      	bne.n	800d0b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d118      	bne.n	800d120 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	e853 3f00 	ldrex	r3, [r3]
 800d0fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	f023 0310 	bic.w	r3, r3, #16
 800d102:	647b      	str	r3, [r7, #68]	@ 0x44
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	461a      	mov	r2, r3
 800d10a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d10c:	61bb      	str	r3, [r7, #24]
 800d10e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d110:	6979      	ldr	r1, [r7, #20]
 800d112:	69ba      	ldr	r2, [r7, #24]
 800d114:	e841 2300 	strex	r3, r2, [r1]
 800d118:	613b      	str	r3, [r7, #16]
   return(result);
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d1e6      	bne.n	800d0ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2220      	movs	r2, #32
 800d124:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d134:	bf00      	nop
 800d136:	3754      	adds	r7, #84	@ 0x54
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr
 800d140:	effffffe 	.word	0xeffffffe

0800d144 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d152:	2b01      	cmp	r3, #1
 800d154:	d101      	bne.n	800d15a <HAL_UARTEx_DisableFifoMode+0x16>
 800d156:	2302      	movs	r3, #2
 800d158:	e027      	b.n	800d1aa <HAL_UARTEx_DisableFifoMode+0x66>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2201      	movs	r2, #1
 800d15e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2224      	movs	r2, #36	@ 0x24
 800d166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f022 0201 	bic.w	r2, r2, #1
 800d180:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d188:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	68fa      	ldr	r2, [r7, #12]
 800d196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2220      	movs	r2, #32
 800d19c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3714      	adds	r7, #20
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr

0800d1b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
 800d1be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d101      	bne.n	800d1ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d1ca:	2302      	movs	r3, #2
 800d1cc:	e02d      	b.n	800d22a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2224      	movs	r2, #36	@ 0x24
 800d1da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f022 0201 	bic.w	r2, r2, #1
 800d1f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	430a      	orrs	r2, r1
 800d208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f850 	bl	800d2b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2220      	movs	r2, #32
 800d21c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b084      	sub	sp, #16
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d242:	2b01      	cmp	r3, #1
 800d244:	d101      	bne.n	800d24a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d246:	2302      	movs	r3, #2
 800d248:	e02d      	b.n	800d2a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2224      	movs	r2, #36	@ 0x24
 800d256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f022 0201 	bic.w	r2, r2, #1
 800d270:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	683a      	ldr	r2, [r7, #0]
 800d282:	430a      	orrs	r2, r1
 800d284:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f812 	bl	800d2b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2220      	movs	r2, #32
 800d298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
	...

0800d2b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d108      	bne.n	800d2d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d2d0:	e031      	b.n	800d336 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d2d2:	2310      	movs	r3, #16
 800d2d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d2d6:	2310      	movs	r3, #16
 800d2d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	0e5b      	lsrs	r3, r3, #25
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	f003 0307 	and.w	r3, r3, #7
 800d2e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	0f5b      	lsrs	r3, r3, #29
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	f003 0307 	and.w	r3, r3, #7
 800d2f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2fa:	7bbb      	ldrb	r3, [r7, #14]
 800d2fc:	7b3a      	ldrb	r2, [r7, #12]
 800d2fe:	4911      	ldr	r1, [pc, #68]	@ (800d344 <UARTEx_SetNbDataToProcess+0x94>)
 800d300:	5c8a      	ldrb	r2, [r1, r2]
 800d302:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d306:	7b3a      	ldrb	r2, [r7, #12]
 800d308:	490f      	ldr	r1, [pc, #60]	@ (800d348 <UARTEx_SetNbDataToProcess+0x98>)
 800d30a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d30c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d310:	b29a      	uxth	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d318:	7bfb      	ldrb	r3, [r7, #15]
 800d31a:	7b7a      	ldrb	r2, [r7, #13]
 800d31c:	4909      	ldr	r1, [pc, #36]	@ (800d344 <UARTEx_SetNbDataToProcess+0x94>)
 800d31e:	5c8a      	ldrb	r2, [r1, r2]
 800d320:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d324:	7b7a      	ldrb	r2, [r7, #13]
 800d326:	4908      	ldr	r1, [pc, #32]	@ (800d348 <UARTEx_SetNbDataToProcess+0x98>)
 800d328:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d32a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d32e:	b29a      	uxth	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d336:	bf00      	nop
 800d338:	3714      	adds	r7, #20
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	0801d7a4 	.word	0x0801d7a4
 800d348:	0801d7ac 	.word	0x0801d7ac

0800d34c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d34c:	b084      	sub	sp, #16
 800d34e:	b580      	push	{r7, lr}
 800d350:	b084      	sub	sp, #16
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
 800d356:	f107 001c 	add.w	r0, r7, #28
 800d35a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d35e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d362:	2b01      	cmp	r3, #1
 800d364:	d121      	bne.n	800d3aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d36a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	68da      	ldr	r2, [r3, #12]
 800d376:	4b2c      	ldr	r3, [pc, #176]	@ (800d428 <USB_CoreInit+0xdc>)
 800d378:	4013      	ands	r3, r2
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d38a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d105      	bne.n	800d39e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f001 fb1a 	bl	800e9d8 <USB_CoreReset>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	73fb      	strb	r3, [r7, #15]
 800d3a8:	e01b      	b.n	800d3e2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f001 fb0e 	bl	800e9d8 <USB_CoreReset>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d3c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d106      	bne.n	800d3d6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	639a      	str	r2, [r3, #56]	@ 0x38
 800d3d4:	e005      	b.n	800d3e2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d3e2:	7fbb      	ldrb	r3, [r7, #30]
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d116      	bne.n	800d416 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3ec:	b29a      	uxth	r2, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d42c <USB_CoreInit+0xe0>)
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	f043 0206 	orr.w	r2, r3, #6
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	f043 0220 	orr.w	r2, r3, #32
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d416:	7bfb      	ldrb	r3, [r7, #15]
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d422:	b004      	add	sp, #16
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	ffbdffbf 	.word	0xffbdffbf
 800d42c:	03ee0000 	.word	0x03ee0000

0800d430 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d430:	b480      	push	{r7}
 800d432:	b087      	sub	sp, #28
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	4613      	mov	r3, r2
 800d43c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d43e:	79fb      	ldrb	r3, [r7, #7]
 800d440:	2b02      	cmp	r3, #2
 800d442:	d165      	bne.n	800d510 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	4a41      	ldr	r2, [pc, #260]	@ (800d54c <USB_SetTurnaroundTime+0x11c>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d906      	bls.n	800d45a <USB_SetTurnaroundTime+0x2a>
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	4a40      	ldr	r2, [pc, #256]	@ (800d550 <USB_SetTurnaroundTime+0x120>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d202      	bcs.n	800d45a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d454:	230f      	movs	r3, #15
 800d456:	617b      	str	r3, [r7, #20]
 800d458:	e062      	b.n	800d520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	4a3c      	ldr	r2, [pc, #240]	@ (800d550 <USB_SetTurnaroundTime+0x120>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d306      	bcc.n	800d470 <USB_SetTurnaroundTime+0x40>
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	4a3b      	ldr	r2, [pc, #236]	@ (800d554 <USB_SetTurnaroundTime+0x124>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d202      	bcs.n	800d470 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d46a:	230e      	movs	r3, #14
 800d46c:	617b      	str	r3, [r7, #20]
 800d46e:	e057      	b.n	800d520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	4a38      	ldr	r2, [pc, #224]	@ (800d554 <USB_SetTurnaroundTime+0x124>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d306      	bcc.n	800d486 <USB_SetTurnaroundTime+0x56>
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	4a37      	ldr	r2, [pc, #220]	@ (800d558 <USB_SetTurnaroundTime+0x128>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d202      	bcs.n	800d486 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d480:	230d      	movs	r3, #13
 800d482:	617b      	str	r3, [r7, #20]
 800d484:	e04c      	b.n	800d520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	4a33      	ldr	r2, [pc, #204]	@ (800d558 <USB_SetTurnaroundTime+0x128>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d306      	bcc.n	800d49c <USB_SetTurnaroundTime+0x6c>
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	4a32      	ldr	r2, [pc, #200]	@ (800d55c <USB_SetTurnaroundTime+0x12c>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d802      	bhi.n	800d49c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d496:	230c      	movs	r3, #12
 800d498:	617b      	str	r3, [r7, #20]
 800d49a:	e041      	b.n	800d520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	4a2f      	ldr	r2, [pc, #188]	@ (800d55c <USB_SetTurnaroundTime+0x12c>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d906      	bls.n	800d4b2 <USB_SetTurnaroundTime+0x82>
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	4a2e      	ldr	r2, [pc, #184]	@ (800d560 <USB_SetTurnaroundTime+0x130>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d802      	bhi.n	800d4b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d4ac:	230b      	movs	r3, #11
 800d4ae:	617b      	str	r3, [r7, #20]
 800d4b0:	e036      	b.n	800d520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	4a2a      	ldr	r2, [pc, #168]	@ (800d560 <USB_SetTurnaroundTime+0x130>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d906      	bls.n	800d4c8 <USB_SetTurnaroundTime+0x98>
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	4a29      	ldr	r2, [pc, #164]	@ (800d564 <USB_SetTurnaroundTime+0x134>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d802      	bhi.n	800d4c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d4c2:	230a      	movs	r3, #10
 800d4c4:	617b      	str	r3, [r7, #20]
 800d4c6:	e02b      	b.n	800d520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	4a26      	ldr	r2, [pc, #152]	@ (800d564 <USB_SetTurnaroundTime+0x134>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d906      	bls.n	800d4de <USB_SetTurnaroundTime+0xae>
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	4a25      	ldr	r2, [pc, #148]	@ (800d568 <USB_SetTurnaroundTime+0x138>)
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d202      	bcs.n	800d4de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d4d8:	2309      	movs	r3, #9
 800d4da:	617b      	str	r3, [r7, #20]
 800d4dc:	e020      	b.n	800d520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	4a21      	ldr	r2, [pc, #132]	@ (800d568 <USB_SetTurnaroundTime+0x138>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d306      	bcc.n	800d4f4 <USB_SetTurnaroundTime+0xc4>
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	4a20      	ldr	r2, [pc, #128]	@ (800d56c <USB_SetTurnaroundTime+0x13c>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d802      	bhi.n	800d4f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d4ee:	2308      	movs	r3, #8
 800d4f0:	617b      	str	r3, [r7, #20]
 800d4f2:	e015      	b.n	800d520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	4a1d      	ldr	r2, [pc, #116]	@ (800d56c <USB_SetTurnaroundTime+0x13c>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d906      	bls.n	800d50a <USB_SetTurnaroundTime+0xda>
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	4a1c      	ldr	r2, [pc, #112]	@ (800d570 <USB_SetTurnaroundTime+0x140>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d202      	bcs.n	800d50a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d504:	2307      	movs	r3, #7
 800d506:	617b      	str	r3, [r7, #20]
 800d508:	e00a      	b.n	800d520 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d50a:	2306      	movs	r3, #6
 800d50c:	617b      	str	r3, [r7, #20]
 800d50e:	e007      	b.n	800d520 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d510:	79fb      	ldrb	r3, [r7, #7]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d102      	bne.n	800d51c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d516:	2309      	movs	r3, #9
 800d518:	617b      	str	r3, [r7, #20]
 800d51a:	e001      	b.n	800d520 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d51c:	2309      	movs	r3, #9
 800d51e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	68da      	ldr	r2, [r3, #12]
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	029b      	lsls	r3, r3, #10
 800d534:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800d538:	431a      	orrs	r2, r3
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	371c      	adds	r7, #28
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr
 800d54c:	00d8acbf 	.word	0x00d8acbf
 800d550:	00e4e1c0 	.word	0x00e4e1c0
 800d554:	00f42400 	.word	0x00f42400
 800d558:	01067380 	.word	0x01067380
 800d55c:	011a499f 	.word	0x011a499f
 800d560:	01312cff 	.word	0x01312cff
 800d564:	014ca43f 	.word	0x014ca43f
 800d568:	016e3600 	.word	0x016e3600
 800d56c:	01a6ab1f 	.word	0x01a6ab1f
 800d570:	01e84800 	.word	0x01e84800

0800d574 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	f043 0201 	orr.w	r2, r3, #1
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d588:	2300      	movs	r3, #0
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	370c      	adds	r7, #12
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr

0800d596 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d596:	b480      	push	{r7}
 800d598:	b083      	sub	sp, #12
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	f023 0201 	bic.w	r2, r3, #1
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d5aa:	2300      	movs	r3, #0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d5d4:	78fb      	ldrb	r3, [r7, #3]
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d115      	bne.n	800d606 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d5e6:	200a      	movs	r0, #10
 800d5e8:	f7f4 fd52 	bl	8002090 <HAL_Delay>
      ms += 10U;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	330a      	adds	r3, #10
 800d5f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f001 f960 	bl	800e8b8 <USB_GetMode>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d01e      	beq.n	800d63c <USB_SetCurrentMode+0x84>
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2bc7      	cmp	r3, #199	@ 0xc7
 800d602:	d9f0      	bls.n	800d5e6 <USB_SetCurrentMode+0x2e>
 800d604:	e01a      	b.n	800d63c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d606:	78fb      	ldrb	r3, [r7, #3]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d115      	bne.n	800d638 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d618:	200a      	movs	r0, #10
 800d61a:	f7f4 fd39 	bl	8002090 <HAL_Delay>
      ms += 10U;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	330a      	adds	r3, #10
 800d622:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f001 f947 	bl	800e8b8 <USB_GetMode>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d005      	beq.n	800d63c <USB_SetCurrentMode+0x84>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2bc7      	cmp	r3, #199	@ 0xc7
 800d634:	d9f0      	bls.n	800d618 <USB_SetCurrentMode+0x60>
 800d636:	e001      	b.n	800d63c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d638:	2301      	movs	r3, #1
 800d63a:	e005      	b.n	800d648 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2bc8      	cmp	r3, #200	@ 0xc8
 800d640:	d101      	bne.n	800d646 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d642:	2301      	movs	r3, #1
 800d644:	e000      	b.n	800d648 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d650:	b084      	sub	sp, #16
 800d652:	b580      	push	{r7, lr}
 800d654:	b086      	sub	sp, #24
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
 800d65a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d65e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d662:	2300      	movs	r3, #0
 800d664:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d66a:	2300      	movs	r3, #0
 800d66c:	613b      	str	r3, [r7, #16]
 800d66e:	e009      	b.n	800d684 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	3340      	adds	r3, #64	@ 0x40
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	4413      	add	r3, r2
 800d67a:	2200      	movs	r2, #0
 800d67c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	3301      	adds	r3, #1
 800d682:	613b      	str	r3, [r7, #16]
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	2b0e      	cmp	r3, #14
 800d688:	d9f2      	bls.n	800d670 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d68a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d11c      	bne.n	800d6cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d6a0:	f043 0302 	orr.w	r3, r3, #2
 800d6a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	601a      	str	r2, [r3, #0]
 800d6ca:	e005      	b.n	800d6d8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d6de:	461a      	mov	r2, r3
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d6e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d10d      	bne.n	800d708 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d104      	bne.n	800d6fe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 f968 	bl	800d9cc <USB_SetDevSpeed>
 800d6fc:	e008      	b.n	800d710 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d6fe:	2101      	movs	r1, #1
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 f963 	bl	800d9cc <USB_SetDevSpeed>
 800d706:	e003      	b.n	800d710 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d708:	2103      	movs	r1, #3
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f95e 	bl	800d9cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d710:	2110      	movs	r1, #16
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 f8fa 	bl	800d90c <USB_FlushTxFifo>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d001      	beq.n	800d722 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d71e:	2301      	movs	r3, #1
 800d720:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f000 f924 	bl	800d970 <USB_FlushRxFifo>
 800d728:	4603      	mov	r3, r0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d001      	beq.n	800d732 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d738:	461a      	mov	r2, r3
 800d73a:	2300      	movs	r3, #0
 800d73c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d744:	461a      	mov	r2, r3
 800d746:	2300      	movs	r3, #0
 800d748:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d750:	461a      	mov	r2, r3
 800d752:	2300      	movs	r3, #0
 800d754:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d756:	2300      	movs	r3, #0
 800d758:	613b      	str	r3, [r7, #16]
 800d75a:	e043      	b.n	800d7e4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	015a      	lsls	r2, r3, #5
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	4413      	add	r3, r2
 800d764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d76e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d772:	d118      	bne.n	800d7a6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d10a      	bne.n	800d790 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	015a      	lsls	r2, r3, #5
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	4413      	add	r3, r2
 800d782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d786:	461a      	mov	r2, r3
 800d788:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d78c:	6013      	str	r3, [r2, #0]
 800d78e:	e013      	b.n	800d7b8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	015a      	lsls	r2, r3, #5
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	4413      	add	r3, r2
 800d798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d79c:	461a      	mov	r2, r3
 800d79e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d7a2:	6013      	str	r3, [r2, #0]
 800d7a4:	e008      	b.n	800d7b8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	015a      	lsls	r2, r3, #5
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	015a      	lsls	r2, r3, #5
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	4413      	add	r3, r2
 800d7c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	015a      	lsls	r2, r3, #5
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d7dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	613b      	str	r3, [r7, #16]
 800d7e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d3b5      	bcc.n	800d75c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	613b      	str	r3, [r7, #16]
 800d7f4:	e043      	b.n	800d87e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	015a      	lsls	r2, r3, #5
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d80c:	d118      	bne.n	800d840 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10a      	bne.n	800d82a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	015a      	lsls	r2, r3, #5
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	4413      	add	r3, r2
 800d81c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d820:	461a      	mov	r2, r3
 800d822:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d826:	6013      	str	r3, [r2, #0]
 800d828:	e013      	b.n	800d852 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	015a      	lsls	r2, r3, #5
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	4413      	add	r3, r2
 800d832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d836:	461a      	mov	r2, r3
 800d838:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d83c:	6013      	str	r3, [r2, #0]
 800d83e:	e008      	b.n	800d852 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	015a      	lsls	r2, r3, #5
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	4413      	add	r3, r2
 800d848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d84c:	461a      	mov	r2, r3
 800d84e:	2300      	movs	r3, #0
 800d850:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	015a      	lsls	r2, r3, #5
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	4413      	add	r3, r2
 800d85a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d85e:	461a      	mov	r2, r3
 800d860:	2300      	movs	r3, #0
 800d862:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	015a      	lsls	r2, r3, #5
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	4413      	add	r3, r2
 800d86c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d870:	461a      	mov	r2, r3
 800d872:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d876:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	3301      	adds	r3, #1
 800d87c:	613b      	str	r3, [r7, #16]
 800d87e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d882:	461a      	mov	r2, r3
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	4293      	cmp	r3, r2
 800d888:	d3b5      	bcc.n	800d7f6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d890:	691b      	ldr	r3, [r3, #16]
 800d892:	68fa      	ldr	r2, [r7, #12]
 800d894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d89c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d8aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d8ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d105      	bne.n	800d8c0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	699b      	ldr	r3, [r3, #24]
 800d8b8:	f043 0210 	orr.w	r2, r3, #16
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	699a      	ldr	r2, [r3, #24]
 800d8c4:	4b0f      	ldr	r3, [pc, #60]	@ (800d904 <USB_DevInit+0x2b4>)
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d8cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d005      	beq.n	800d8e0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	699b      	ldr	r3, [r3, #24]
 800d8d8:	f043 0208 	orr.w	r2, r3, #8
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d8e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d105      	bne.n	800d8f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	699a      	ldr	r2, [r3, #24]
 800d8ec:	4b06      	ldr	r3, [pc, #24]	@ (800d908 <USB_DevInit+0x2b8>)
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d8f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3718      	adds	r7, #24
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d900:	b004      	add	sp, #16
 800d902:	4770      	bx	lr
 800d904:	803c3800 	.word	0x803c3800
 800d908:	40000004 	.word	0x40000004

0800d90c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b085      	sub	sp, #20
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d916:	2300      	movs	r3, #0
 800d918:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	3301      	adds	r3, #1
 800d91e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d926:	d901      	bls.n	800d92c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d928:	2303      	movs	r3, #3
 800d92a:	e01b      	b.n	800d964 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	691b      	ldr	r3, [r3, #16]
 800d930:	2b00      	cmp	r3, #0
 800d932:	daf2      	bge.n	800d91a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d934:	2300      	movs	r3, #0
 800d936:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	019b      	lsls	r3, r3, #6
 800d93c:	f043 0220 	orr.w	r2, r3, #32
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	3301      	adds	r3, #1
 800d948:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d950:	d901      	bls.n	800d956 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d952:	2303      	movs	r3, #3
 800d954:	e006      	b.n	800d964 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	691b      	ldr	r3, [r3, #16]
 800d95a:	f003 0320 	and.w	r3, r3, #32
 800d95e:	2b20      	cmp	r3, #32
 800d960:	d0f0      	beq.n	800d944 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3714      	adds	r7, #20
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d970:	b480      	push	{r7}
 800d972:	b085      	sub	sp, #20
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d978:	2300      	movs	r3, #0
 800d97a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	3301      	adds	r3, #1
 800d980:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d988:	d901      	bls.n	800d98e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d98a:	2303      	movs	r3, #3
 800d98c:	e018      	b.n	800d9c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	2b00      	cmp	r3, #0
 800d994:	daf2      	bge.n	800d97c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d996:	2300      	movs	r3, #0
 800d998:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2210      	movs	r2, #16
 800d99e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d9ac:	d901      	bls.n	800d9b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d9ae:	2303      	movs	r3, #3
 800d9b0:	e006      	b.n	800d9c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	f003 0310 	and.w	r3, r3, #16
 800d9ba:	2b10      	cmp	r3, #16
 800d9bc:	d0f0      	beq.n	800d9a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3714      	adds	r7, #20
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b085      	sub	sp, #20
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	78fb      	ldrb	r3, [r7, #3]
 800d9e6:	68f9      	ldr	r1, [r7, #12]
 800d9e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3714      	adds	r7, #20
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr

0800d9fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800d9fe:	b480      	push	{r7}
 800da00:	b087      	sub	sp, #28
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	f003 0306 	and.w	r3, r3, #6
 800da16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d102      	bne.n	800da24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800da1e:	2300      	movs	r3, #0
 800da20:	75fb      	strb	r3, [r7, #23]
 800da22:	e00a      	b.n	800da3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2b02      	cmp	r3, #2
 800da28:	d002      	beq.n	800da30 <USB_GetDevSpeed+0x32>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2b06      	cmp	r3, #6
 800da2e:	d102      	bne.n	800da36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800da30:	2302      	movs	r3, #2
 800da32:	75fb      	strb	r3, [r7, #23]
 800da34:	e001      	b.n	800da3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800da36:	230f      	movs	r3, #15
 800da38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800da3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	371c      	adds	r7, #28
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	785b      	ldrb	r3, [r3, #1]
 800da60:	2b01      	cmp	r3, #1
 800da62:	d139      	bne.n	800dad8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da6a:	69da      	ldr	r2, [r3, #28]
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	f003 030f 	and.w	r3, r3, #15
 800da74:	2101      	movs	r1, #1
 800da76:	fa01 f303 	lsl.w	r3, r1, r3
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	68f9      	ldr	r1, [r7, #12]
 800da7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800da82:	4313      	orrs	r3, r2
 800da84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	015a      	lsls	r2, r3, #5
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	4413      	add	r3, r2
 800da8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d153      	bne.n	800db44 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	015a      	lsls	r2, r3, #5
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	4413      	add	r3, r2
 800daa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	689b      	ldr	r3, [r3, #8]
 800daae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	791b      	ldrb	r3, [r3, #4]
 800dab6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dab8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	059b      	lsls	r3, r3, #22
 800dabe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dac0:	431a      	orrs	r2, r3
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	0159      	lsls	r1, r3, #5
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	440b      	add	r3, r1
 800daca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dace:	4619      	mov	r1, r3
 800dad0:	4b20      	ldr	r3, [pc, #128]	@ (800db54 <USB_ActivateEndpoint+0x10c>)
 800dad2:	4313      	orrs	r3, r2
 800dad4:	600b      	str	r3, [r1, #0]
 800dad6:	e035      	b.n	800db44 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dade:	69da      	ldr	r2, [r3, #28]
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	f003 030f 	and.w	r3, r3, #15
 800dae8:	2101      	movs	r1, #1
 800daea:	fa01 f303 	lsl.w	r3, r1, r3
 800daee:	041b      	lsls	r3, r3, #16
 800daf0:	68f9      	ldr	r1, [r7, #12]
 800daf2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800daf6:	4313      	orrs	r3, r2
 800daf8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	015a      	lsls	r2, r3, #5
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	4413      	add	r3, r2
 800db02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d119      	bne.n	800db44 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	015a      	lsls	r2, r3, #5
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	4413      	add	r3, r2
 800db18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	791b      	ldrb	r3, [r3, #4]
 800db2a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800db2c:	430b      	orrs	r3, r1
 800db2e:	431a      	orrs	r2, r3
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	0159      	lsls	r1, r3, #5
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	440b      	add	r3, r1
 800db38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db3c:	4619      	mov	r1, r3
 800db3e:	4b05      	ldr	r3, [pc, #20]	@ (800db54 <USB_ActivateEndpoint+0x10c>)
 800db40:	4313      	orrs	r3, r2
 800db42:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3714      	adds	r7, #20
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop
 800db54:	10008000 	.word	0x10008000

0800db58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	785b      	ldrb	r3, [r3, #1]
 800db70:	2b01      	cmp	r3, #1
 800db72:	d161      	bne.n	800dc38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	015a      	lsls	r2, r3, #5
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	4413      	add	r3, r2
 800db7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db8a:	d11f      	bne.n	800dbcc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	015a      	lsls	r2, r3, #5
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	4413      	add	r3, r2
 800db94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	0151      	lsls	r1, r2, #5
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	440a      	add	r2, r1
 800dba2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dba6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dbaa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	015a      	lsls	r2, r3, #5
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	68ba      	ldr	r2, [r7, #8]
 800dbbc:	0151      	lsls	r1, r2, #5
 800dbbe:	68fa      	ldr	r2, [r7, #12]
 800dbc0:	440a      	add	r2, r1
 800dbc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dbc6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dbca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	f003 030f 	and.w	r3, r3, #15
 800dbdc:	2101      	movs	r1, #1
 800dbde:	fa01 f303 	lsl.w	r3, r1, r3
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	43db      	mvns	r3, r3
 800dbe6:	68f9      	ldr	r1, [r7, #12]
 800dbe8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dbec:	4013      	ands	r3, r2
 800dbee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbf6:	69da      	ldr	r2, [r3, #28]
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	f003 030f 	and.w	r3, r3, #15
 800dc00:	2101      	movs	r1, #1
 800dc02:	fa01 f303 	lsl.w	r3, r1, r3
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	43db      	mvns	r3, r3
 800dc0a:	68f9      	ldr	r1, [r7, #12]
 800dc0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dc10:	4013      	ands	r3, r2
 800dc12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	015a      	lsls	r2, r3, #5
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	4413      	add	r3, r2
 800dc1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	0159      	lsls	r1, r3, #5
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	440b      	add	r3, r1
 800dc2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc2e:	4619      	mov	r1, r3
 800dc30:	4b35      	ldr	r3, [pc, #212]	@ (800dd08 <USB_DeactivateEndpoint+0x1b0>)
 800dc32:	4013      	ands	r3, r2
 800dc34:	600b      	str	r3, [r1, #0]
 800dc36:	e060      	b.n	800dcfa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	015a      	lsls	r2, r3, #5
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	4413      	add	r3, r2
 800dc40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dc4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc4e:	d11f      	bne.n	800dc90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	015a      	lsls	r2, r3, #5
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	4413      	add	r3, r2
 800dc58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	68ba      	ldr	r2, [r7, #8]
 800dc60:	0151      	lsls	r1, r2, #5
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	440a      	add	r2, r1
 800dc66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dc6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dc6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	015a      	lsls	r2, r3, #5
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	4413      	add	r3, r2
 800dc78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	68ba      	ldr	r2, [r7, #8]
 800dc80:	0151      	lsls	r1, r2, #5
 800dc82:	68fa      	ldr	r2, [r7, #12]
 800dc84:	440a      	add	r2, r1
 800dc86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dc8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dc8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	f003 030f 	and.w	r3, r3, #15
 800dca0:	2101      	movs	r1, #1
 800dca2:	fa01 f303 	lsl.w	r3, r1, r3
 800dca6:	041b      	lsls	r3, r3, #16
 800dca8:	43db      	mvns	r3, r3
 800dcaa:	68f9      	ldr	r1, [r7, #12]
 800dcac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dcb0:	4013      	ands	r3, r2
 800dcb2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcba:	69da      	ldr	r2, [r3, #28]
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	f003 030f 	and.w	r3, r3, #15
 800dcc4:	2101      	movs	r1, #1
 800dcc6:	fa01 f303 	lsl.w	r3, r1, r3
 800dcca:	041b      	lsls	r3, r3, #16
 800dccc:	43db      	mvns	r3, r3
 800dcce:	68f9      	ldr	r1, [r7, #12]
 800dcd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dcd4:	4013      	ands	r3, r2
 800dcd6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	015a      	lsls	r2, r3, #5
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	4413      	add	r3, r2
 800dce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	0159      	lsls	r1, r3, #5
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	440b      	add	r3, r1
 800dcee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	4b05      	ldr	r3, [pc, #20]	@ (800dd0c <USB_DeactivateEndpoint+0x1b4>)
 800dcf6:	4013      	ands	r3, r2
 800dcf8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800dcfa:	2300      	movs	r3, #0
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3714      	adds	r7, #20
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr
 800dd08:	ec337800 	.word	0xec337800
 800dd0c:	eff37800 	.word	0xeff37800

0800dd10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b08a      	sub	sp, #40	@ 0x28
 800dd14:	af02      	add	r7, sp, #8
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	4613      	mov	r3, r2
 800dd1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	785b      	ldrb	r3, [r3, #1]
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	f040 8185 	bne.w	800e03c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	691b      	ldr	r3, [r3, #16]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d132      	bne.n	800dda0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	015a      	lsls	r2, r3, #5
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	4413      	add	r3, r2
 800dd42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd46:	691a      	ldr	r2, [r3, #16]
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	0159      	lsls	r1, r3, #5
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	440b      	add	r3, r1
 800dd50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd54:	4619      	mov	r1, r3
 800dd56:	4ba7      	ldr	r3, [pc, #668]	@ (800dff4 <USB_EPStartXfer+0x2e4>)
 800dd58:	4013      	ands	r3, r2
 800dd5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dd5c:	69bb      	ldr	r3, [r7, #24]
 800dd5e:	015a      	lsls	r2, r3, #5
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	4413      	add	r3, r2
 800dd64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd68:	691b      	ldr	r3, [r3, #16]
 800dd6a:	69ba      	ldr	r2, [r7, #24]
 800dd6c:	0151      	lsls	r1, r2, #5
 800dd6e:	69fa      	ldr	r2, [r7, #28]
 800dd70:	440a      	add	r2, r1
 800dd72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dd76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	015a      	lsls	r2, r3, #5
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	4413      	add	r3, r2
 800dd84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd88:	691a      	ldr	r2, [r3, #16]
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	0159      	lsls	r1, r3, #5
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	440b      	add	r3, r1
 800dd92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd96:	4619      	mov	r1, r3
 800dd98:	4b97      	ldr	r3, [pc, #604]	@ (800dff8 <USB_EPStartXfer+0x2e8>)
 800dd9a:	4013      	ands	r3, r2
 800dd9c:	610b      	str	r3, [r1, #16]
 800dd9e:	e097      	b.n	800ded0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	015a      	lsls	r2, r3, #5
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	4413      	add	r3, r2
 800dda8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddac:	691a      	ldr	r2, [r3, #16]
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	0159      	lsls	r1, r3, #5
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	440b      	add	r3, r1
 800ddb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddba:	4619      	mov	r1, r3
 800ddbc:	4b8e      	ldr	r3, [pc, #568]	@ (800dff8 <USB_EPStartXfer+0x2e8>)
 800ddbe:	4013      	ands	r3, r2
 800ddc0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ddc2:	69bb      	ldr	r3, [r7, #24]
 800ddc4:	015a      	lsls	r2, r3, #5
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	4413      	add	r3, r2
 800ddca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddce:	691a      	ldr	r2, [r3, #16]
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	0159      	lsls	r1, r3, #5
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	440b      	add	r3, r1
 800ddd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dddc:	4619      	mov	r1, r3
 800ddde:	4b85      	ldr	r3, [pc, #532]	@ (800dff4 <USB_EPStartXfer+0x2e4>)
 800dde0:	4013      	ands	r3, r2
 800dde2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d11a      	bne.n	800de20 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	691a      	ldr	r2, [r3, #16]
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d903      	bls.n	800ddfe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	689a      	ldr	r2, [r3, #8]
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	015a      	lsls	r2, r3, #5
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	4413      	add	r3, r2
 800de06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de0a:	691b      	ldr	r3, [r3, #16]
 800de0c:	69ba      	ldr	r2, [r7, #24]
 800de0e:	0151      	lsls	r1, r2, #5
 800de10:	69fa      	ldr	r2, [r7, #28]
 800de12:	440a      	add	r2, r1
 800de14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800de18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800de1c:	6113      	str	r3, [r2, #16]
 800de1e:	e044      	b.n	800deaa <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	691a      	ldr	r2, [r3, #16]
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	689b      	ldr	r3, [r3, #8]
 800de28:	4413      	add	r3, r2
 800de2a:	1e5a      	subs	r2, r3, #1
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	fbb2 f3f3 	udiv	r3, r2, r3
 800de34:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800de36:	69bb      	ldr	r3, [r7, #24]
 800de38:	015a      	lsls	r2, r3, #5
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	4413      	add	r3, r2
 800de3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de42:	691a      	ldr	r2, [r3, #16]
 800de44:	8afb      	ldrh	r3, [r7, #22]
 800de46:	04d9      	lsls	r1, r3, #19
 800de48:	4b6c      	ldr	r3, [pc, #432]	@ (800dffc <USB_EPStartXfer+0x2ec>)
 800de4a:	400b      	ands	r3, r1
 800de4c:	69b9      	ldr	r1, [r7, #24]
 800de4e:	0148      	lsls	r0, r1, #5
 800de50:	69f9      	ldr	r1, [r7, #28]
 800de52:	4401      	add	r1, r0
 800de54:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800de58:	4313      	orrs	r3, r2
 800de5a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	791b      	ldrb	r3, [r3, #4]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d122      	bne.n	800deaa <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800de64:	69bb      	ldr	r3, [r7, #24]
 800de66:	015a      	lsls	r2, r3, #5
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	4413      	add	r3, r2
 800de6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de70:	691b      	ldr	r3, [r3, #16]
 800de72:	69ba      	ldr	r2, [r7, #24]
 800de74:	0151      	lsls	r1, r2, #5
 800de76:	69fa      	ldr	r2, [r7, #28]
 800de78:	440a      	add	r2, r1
 800de7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800de7e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800de82:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800de84:	69bb      	ldr	r3, [r7, #24]
 800de86:	015a      	lsls	r2, r3, #5
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	4413      	add	r3, r2
 800de8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de90:	691a      	ldr	r2, [r3, #16]
 800de92:	8afb      	ldrh	r3, [r7, #22]
 800de94:	075b      	lsls	r3, r3, #29
 800de96:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800de9a:	69b9      	ldr	r1, [r7, #24]
 800de9c:	0148      	lsls	r0, r1, #5
 800de9e:	69f9      	ldr	r1, [r7, #28]
 800dea0:	4401      	add	r1, r0
 800dea2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800dea6:	4313      	orrs	r3, r2
 800dea8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	015a      	lsls	r2, r3, #5
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	4413      	add	r3, r2
 800deb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800deb6:	691a      	ldr	r2, [r3, #16]
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	691b      	ldr	r3, [r3, #16]
 800debc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dec0:	69b9      	ldr	r1, [r7, #24]
 800dec2:	0148      	lsls	r0, r1, #5
 800dec4:	69f9      	ldr	r1, [r7, #28]
 800dec6:	4401      	add	r1, r0
 800dec8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800decc:	4313      	orrs	r3, r2
 800dece:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ded0:	79fb      	ldrb	r3, [r7, #7]
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d14b      	bne.n	800df6e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	69db      	ldr	r3, [r3, #28]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d009      	beq.n	800def2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	015a      	lsls	r2, r3, #5
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	4413      	add	r3, r2
 800dee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800deea:	461a      	mov	r2, r3
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	69db      	ldr	r3, [r3, #28]
 800def0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	791b      	ldrb	r3, [r3, #4]
 800def6:	2b01      	cmp	r3, #1
 800def8:	d128      	bne.n	800df4c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df00:	689b      	ldr	r3, [r3, #8]
 800df02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df06:	2b00      	cmp	r3, #0
 800df08:	d110      	bne.n	800df2c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	015a      	lsls	r2, r3, #5
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	4413      	add	r3, r2
 800df12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	69ba      	ldr	r2, [r7, #24]
 800df1a:	0151      	lsls	r1, r2, #5
 800df1c:	69fa      	ldr	r2, [r7, #28]
 800df1e:	440a      	add	r2, r1
 800df20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800df28:	6013      	str	r3, [r2, #0]
 800df2a:	e00f      	b.n	800df4c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	015a      	lsls	r2, r3, #5
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	4413      	add	r3, r2
 800df34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	69ba      	ldr	r2, [r7, #24]
 800df3c:	0151      	lsls	r1, r2, #5
 800df3e:	69fa      	ldr	r2, [r7, #28]
 800df40:	440a      	add	r2, r1
 800df42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800df4a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	015a      	lsls	r2, r3, #5
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	4413      	add	r3, r2
 800df54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	69ba      	ldr	r2, [r7, #24]
 800df5c:	0151      	lsls	r1, r2, #5
 800df5e:	69fa      	ldr	r2, [r7, #28]
 800df60:	440a      	add	r2, r1
 800df62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df66:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800df6a:	6013      	str	r3, [r2, #0]
 800df6c:	e169      	b.n	800e242 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	015a      	lsls	r2, r3, #5
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	4413      	add	r3, r2
 800df76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	69ba      	ldr	r2, [r7, #24]
 800df7e:	0151      	lsls	r1, r2, #5
 800df80:	69fa      	ldr	r2, [r7, #28]
 800df82:	440a      	add	r2, r1
 800df84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df88:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800df8c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	791b      	ldrb	r3, [r3, #4]
 800df92:	2b01      	cmp	r3, #1
 800df94:	d015      	beq.n	800dfc2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	691b      	ldr	r3, [r3, #16]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	f000 8151 	beq.w	800e242 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	f003 030f 	and.w	r3, r3, #15
 800dfb0:	2101      	movs	r1, #1
 800dfb2:	fa01 f303 	lsl.w	r3, r1, r3
 800dfb6:	69f9      	ldr	r1, [r7, #28]
 800dfb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	634b      	str	r3, [r1, #52]	@ 0x34
 800dfc0:	e13f      	b.n	800e242 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfc8:	689b      	ldr	r3, [r3, #8]
 800dfca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d116      	bne.n	800e000 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dfd2:	69bb      	ldr	r3, [r7, #24]
 800dfd4:	015a      	lsls	r2, r3, #5
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	4413      	add	r3, r2
 800dfda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	69ba      	ldr	r2, [r7, #24]
 800dfe2:	0151      	lsls	r1, r2, #5
 800dfe4:	69fa      	ldr	r2, [r7, #28]
 800dfe6:	440a      	add	r2, r1
 800dfe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dfec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dff0:	6013      	str	r3, [r2, #0]
 800dff2:	e015      	b.n	800e020 <USB_EPStartXfer+0x310>
 800dff4:	e007ffff 	.word	0xe007ffff
 800dff8:	fff80000 	.word	0xfff80000
 800dffc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	015a      	lsls	r2, r3, #5
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	4413      	add	r3, r2
 800e008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	69ba      	ldr	r2, [r7, #24]
 800e010:	0151      	lsls	r1, r2, #5
 800e012:	69fa      	ldr	r2, [r7, #28]
 800e014:	440a      	add	r2, r1
 800e016:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e01a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e01e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	68d9      	ldr	r1, [r3, #12]
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	781a      	ldrb	r2, [r3, #0]
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	b298      	uxth	r0, r3
 800e02e:	79fb      	ldrb	r3, [r7, #7]
 800e030:	9300      	str	r3, [sp, #0]
 800e032:	4603      	mov	r3, r0
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f000 f9b9 	bl	800e3ac <USB_WritePacket>
 800e03a:	e102      	b.n	800e242 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	015a      	lsls	r2, r3, #5
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	4413      	add	r3, r2
 800e044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e048:	691a      	ldr	r2, [r3, #16]
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	0159      	lsls	r1, r3, #5
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	440b      	add	r3, r1
 800e052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e056:	4619      	mov	r1, r3
 800e058:	4b7c      	ldr	r3, [pc, #496]	@ (800e24c <USB_EPStartXfer+0x53c>)
 800e05a:	4013      	ands	r3, r2
 800e05c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e05e:	69bb      	ldr	r3, [r7, #24]
 800e060:	015a      	lsls	r2, r3, #5
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	4413      	add	r3, r2
 800e066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e06a:	691a      	ldr	r2, [r3, #16]
 800e06c:	69bb      	ldr	r3, [r7, #24]
 800e06e:	0159      	lsls	r1, r3, #5
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	440b      	add	r3, r1
 800e074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e078:	4619      	mov	r1, r3
 800e07a:	4b75      	ldr	r3, [pc, #468]	@ (800e250 <USB_EPStartXfer+0x540>)
 800e07c:	4013      	ands	r3, r2
 800e07e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e080:	69bb      	ldr	r3, [r7, #24]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d12f      	bne.n	800e0e6 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	691b      	ldr	r3, [r3, #16]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d003      	beq.n	800e096 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	689a      	ldr	r2, [r3, #8]
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	689a      	ldr	r2, [r3, #8]
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	015a      	lsls	r2, r3, #5
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0aa:	691a      	ldr	r2, [r3, #16]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	6a1b      	ldr	r3, [r3, #32]
 800e0b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e0b4:	69b9      	ldr	r1, [r7, #24]
 800e0b6:	0148      	lsls	r0, r1, #5
 800e0b8:	69f9      	ldr	r1, [r7, #28]
 800e0ba:	4401      	add	r1, r0
 800e0bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e0c0:	4313      	orrs	r3, r2
 800e0c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e0c4:	69bb      	ldr	r3, [r7, #24]
 800e0c6:	015a      	lsls	r2, r3, #5
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0d0:	691b      	ldr	r3, [r3, #16]
 800e0d2:	69ba      	ldr	r2, [r7, #24]
 800e0d4:	0151      	lsls	r1, r2, #5
 800e0d6:	69fa      	ldr	r2, [r7, #28]
 800e0d8:	440a      	add	r2, r1
 800e0da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e0de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e0e2:	6113      	str	r3, [r2, #16]
 800e0e4:	e05f      	b.n	800e1a6 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	691b      	ldr	r3, [r3, #16]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d123      	bne.n	800e136 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e0ee:	69bb      	ldr	r3, [r7, #24]
 800e0f0:	015a      	lsls	r2, r3, #5
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0fa:	691a      	ldr	r2, [r3, #16]
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	689b      	ldr	r3, [r3, #8]
 800e100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e104:	69b9      	ldr	r1, [r7, #24]
 800e106:	0148      	lsls	r0, r1, #5
 800e108:	69f9      	ldr	r1, [r7, #28]
 800e10a:	4401      	add	r1, r0
 800e10c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e110:	4313      	orrs	r3, r2
 800e112:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	015a      	lsls	r2, r3, #5
 800e118:	69fb      	ldr	r3, [r7, #28]
 800e11a:	4413      	add	r3, r2
 800e11c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e120:	691b      	ldr	r3, [r3, #16]
 800e122:	69ba      	ldr	r2, [r7, #24]
 800e124:	0151      	lsls	r1, r2, #5
 800e126:	69fa      	ldr	r2, [r7, #28]
 800e128:	440a      	add	r2, r1
 800e12a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e12e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e132:	6113      	str	r3, [r2, #16]
 800e134:	e037      	b.n	800e1a6 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	691a      	ldr	r2, [r3, #16]
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	689b      	ldr	r3, [r3, #8]
 800e13e:	4413      	add	r3, r2
 800e140:	1e5a      	subs	r2, r3, #1
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	689b      	ldr	r3, [r3, #8]
 800e146:	fbb2 f3f3 	udiv	r3, r2, r3
 800e14a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	8afa      	ldrh	r2, [r7, #22]
 800e152:	fb03 f202 	mul.w	r2, r3, r2
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	015a      	lsls	r2, r3, #5
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	4413      	add	r3, r2
 800e162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e166:	691a      	ldr	r2, [r3, #16]
 800e168:	8afb      	ldrh	r3, [r7, #22]
 800e16a:	04d9      	lsls	r1, r3, #19
 800e16c:	4b39      	ldr	r3, [pc, #228]	@ (800e254 <USB_EPStartXfer+0x544>)
 800e16e:	400b      	ands	r3, r1
 800e170:	69b9      	ldr	r1, [r7, #24]
 800e172:	0148      	lsls	r0, r1, #5
 800e174:	69f9      	ldr	r1, [r7, #28]
 800e176:	4401      	add	r1, r0
 800e178:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e17c:	4313      	orrs	r3, r2
 800e17e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	015a      	lsls	r2, r3, #5
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	4413      	add	r3, r2
 800e188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e18c:	691a      	ldr	r2, [r3, #16]
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	6a1b      	ldr	r3, [r3, #32]
 800e192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e196:	69b9      	ldr	r1, [r7, #24]
 800e198:	0148      	lsls	r0, r1, #5
 800e19a:	69f9      	ldr	r1, [r7, #28]
 800e19c:	4401      	add	r1, r0
 800e19e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e1a6:	79fb      	ldrb	r3, [r7, #7]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d10d      	bne.n	800e1c8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d009      	beq.n	800e1c8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	68d9      	ldr	r1, [r3, #12]
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	015a      	lsls	r2, r3, #5
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	4413      	add	r3, r2
 800e1c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1c4:	460a      	mov	r2, r1
 800e1c6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	791b      	ldrb	r3, [r3, #4]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d128      	bne.n	800e222 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1d6:	689b      	ldr	r3, [r3, #8]
 800e1d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d110      	bne.n	800e202 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	015a      	lsls	r2, r3, #5
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	69ba      	ldr	r2, [r7, #24]
 800e1f0:	0151      	lsls	r1, r2, #5
 800e1f2:	69fa      	ldr	r2, [r7, #28]
 800e1f4:	440a      	add	r2, r1
 800e1f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e1fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e1fe:	6013      	str	r3, [r2, #0]
 800e200:	e00f      	b.n	800e222 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e202:	69bb      	ldr	r3, [r7, #24]
 800e204:	015a      	lsls	r2, r3, #5
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	4413      	add	r3, r2
 800e20a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	69ba      	ldr	r2, [r7, #24]
 800e212:	0151      	lsls	r1, r2, #5
 800e214:	69fa      	ldr	r2, [r7, #28]
 800e216:	440a      	add	r2, r1
 800e218:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e21c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e220:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e222:	69bb      	ldr	r3, [r7, #24]
 800e224:	015a      	lsls	r2, r3, #5
 800e226:	69fb      	ldr	r3, [r7, #28]
 800e228:	4413      	add	r3, r2
 800e22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	69ba      	ldr	r2, [r7, #24]
 800e232:	0151      	lsls	r1, r2, #5
 800e234:	69fa      	ldr	r2, [r7, #28]
 800e236:	440a      	add	r2, r1
 800e238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e23c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e240:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e242:	2300      	movs	r3, #0
}
 800e244:	4618      	mov	r0, r3
 800e246:	3720      	adds	r7, #32
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	fff80000 	.word	0xfff80000
 800e250:	e007ffff 	.word	0xe007ffff
 800e254:	1ff80000 	.word	0x1ff80000

0800e258 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e258:	b480      	push	{r7}
 800e25a:	b087      	sub	sp, #28
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e262:	2300      	movs	r3, #0
 800e264:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e266:	2300      	movs	r3, #0
 800e268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	785b      	ldrb	r3, [r3, #1]
 800e272:	2b01      	cmp	r3, #1
 800e274:	d14a      	bne.n	800e30c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	015a      	lsls	r2, r3, #5
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	4413      	add	r3, r2
 800e280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e28a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e28e:	f040 8086 	bne.w	800e39e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	015a      	lsls	r2, r3, #5
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	4413      	add	r3, r2
 800e29c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	683a      	ldr	r2, [r7, #0]
 800e2a4:	7812      	ldrb	r2, [r2, #0]
 800e2a6:	0151      	lsls	r1, r2, #5
 800e2a8:	693a      	ldr	r2, [r7, #16]
 800e2aa:	440a      	add	r2, r1
 800e2ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e2b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	015a      	lsls	r2, r3, #5
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	4413      	add	r3, r2
 800e2c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	7812      	ldrb	r2, [r2, #0]
 800e2ca:	0151      	lsls	r1, r2, #5
 800e2cc:	693a      	ldr	r2, [r7, #16]
 800e2ce:	440a      	add	r2, r1
 800e2d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e2d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e2d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d902      	bls.n	800e2f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	75fb      	strb	r3, [r7, #23]
          break;
 800e2ee:	e056      	b.n	800e39e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	015a      	lsls	r2, r3, #5
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e304:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e308:	d0e7      	beq.n	800e2da <USB_EPStopXfer+0x82>
 800e30a:	e048      	b.n	800e39e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	015a      	lsls	r2, r3, #5
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	4413      	add	r3, r2
 800e316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e320:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e324:	d13b      	bne.n	800e39e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	015a      	lsls	r2, r3, #5
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	4413      	add	r3, r2
 800e330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	683a      	ldr	r2, [r7, #0]
 800e338:	7812      	ldrb	r2, [r2, #0]
 800e33a:	0151      	lsls	r1, r2, #5
 800e33c:	693a      	ldr	r2, [r7, #16]
 800e33e:	440a      	add	r2, r1
 800e340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e344:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e348:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	015a      	lsls	r2, r3, #5
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	4413      	add	r3, r2
 800e354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	683a      	ldr	r2, [r7, #0]
 800e35c:	7812      	ldrb	r2, [r2, #0]
 800e35e:	0151      	lsls	r1, r2, #5
 800e360:	693a      	ldr	r2, [r7, #16]
 800e362:	440a      	add	r2, r1
 800e364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e368:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e36c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	3301      	adds	r3, #1
 800e372:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d902      	bls.n	800e384 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e37e:	2301      	movs	r3, #1
 800e380:	75fb      	strb	r3, [r7, #23]
          break;
 800e382:	e00c      	b.n	800e39e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	015a      	lsls	r2, r3, #5
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	4413      	add	r3, r2
 800e38e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e398:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e39c:	d0e7      	beq.n	800e36e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	371c      	adds	r7, #28
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b089      	sub	sp, #36	@ 0x24
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	4611      	mov	r1, r2
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	71fb      	strb	r3, [r7, #7]
 800e3be:	4613      	mov	r3, r2
 800e3c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e3ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d123      	bne.n	800e41a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e3d2:	88bb      	ldrh	r3, [r7, #4]
 800e3d4:	3303      	adds	r3, #3
 800e3d6:	089b      	lsrs	r3, r3, #2
 800e3d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e3da:	2300      	movs	r3, #0
 800e3dc:	61bb      	str	r3, [r7, #24]
 800e3de:	e018      	b.n	800e412 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e3e0:	79fb      	ldrb	r3, [r7, #7]
 800e3e2:	031a      	lsls	r2, r3, #12
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	4413      	add	r3, r2
 800e3e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	3301      	adds	r3, #1
 800e404:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	3301      	adds	r3, #1
 800e40a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	3301      	adds	r3, #1
 800e410:	61bb      	str	r3, [r7, #24]
 800e412:	69ba      	ldr	r2, [r7, #24]
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	429a      	cmp	r2, r3
 800e418:	d3e2      	bcc.n	800e3e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e41a:	2300      	movs	r3, #0
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3724      	adds	r7, #36	@ 0x24
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e428:	b480      	push	{r7}
 800e42a:	b08b      	sub	sp, #44	@ 0x2c
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	60f8      	str	r0, [r7, #12]
 800e430:	60b9      	str	r1, [r7, #8]
 800e432:	4613      	mov	r3, r2
 800e434:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e43e:	88fb      	ldrh	r3, [r7, #6]
 800e440:	089b      	lsrs	r3, r3, #2
 800e442:	b29b      	uxth	r3, r3
 800e444:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e446:	88fb      	ldrh	r3, [r7, #6]
 800e448:	f003 0303 	and.w	r3, r3, #3
 800e44c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e44e:	2300      	movs	r3, #0
 800e450:	623b      	str	r3, [r7, #32]
 800e452:	e014      	b.n	800e47e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e454:	69bb      	ldr	r3, [r7, #24]
 800e456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45e:	601a      	str	r2, [r3, #0]
    pDest++;
 800e460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e462:	3301      	adds	r3, #1
 800e464:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e468:	3301      	adds	r3, #1
 800e46a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e46e:	3301      	adds	r3, #1
 800e470:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e474:	3301      	adds	r3, #1
 800e476:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e478:	6a3b      	ldr	r3, [r7, #32]
 800e47a:	3301      	adds	r3, #1
 800e47c:	623b      	str	r3, [r7, #32]
 800e47e:	6a3a      	ldr	r2, [r7, #32]
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	429a      	cmp	r2, r3
 800e484:	d3e6      	bcc.n	800e454 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e486:	8bfb      	ldrh	r3, [r7, #30]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d01e      	beq.n	800e4ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e48c:	2300      	movs	r3, #0
 800e48e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e496:	461a      	mov	r2, r3
 800e498:	f107 0310 	add.w	r3, r7, #16
 800e49c:	6812      	ldr	r2, [r2, #0]
 800e49e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e4a0:	693a      	ldr	r2, [r7, #16]
 800e4a2:	6a3b      	ldr	r3, [r7, #32]
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	00db      	lsls	r3, r3, #3
 800e4a8:	fa22 f303 	lsr.w	r3, r2, r3
 800e4ac:	b2da      	uxtb	r2, r3
 800e4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b0:	701a      	strb	r2, [r3, #0]
      i++;
 800e4b2:	6a3b      	ldr	r3, [r7, #32]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	623b      	str	r3, [r7, #32]
      pDest++;
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e4be:	8bfb      	ldrh	r3, [r7, #30]
 800e4c0:	3b01      	subs	r3, #1
 800e4c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e4c4:	8bfb      	ldrh	r3, [r7, #30]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1ea      	bne.n	800e4a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	372c      	adds	r7, #44	@ 0x2c
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	785b      	ldrb	r3, [r3, #1]
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d12c      	bne.n	800e54e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	015a      	lsls	r2, r3, #5
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	4413      	add	r3, r2
 800e4fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	db12      	blt.n	800e52c <USB_EPSetStall+0x54>
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d00f      	beq.n	800e52c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	015a      	lsls	r2, r3, #5
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	4413      	add	r3, r2
 800e514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	68ba      	ldr	r2, [r7, #8]
 800e51c:	0151      	lsls	r1, r2, #5
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	440a      	add	r2, r1
 800e522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e526:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e52a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	015a      	lsls	r2, r3, #5
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	4413      	add	r3, r2
 800e534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	68ba      	ldr	r2, [r7, #8]
 800e53c:	0151      	lsls	r1, r2, #5
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	440a      	add	r2, r1
 800e542:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e546:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e54a:	6013      	str	r3, [r2, #0]
 800e54c:	e02b      	b.n	800e5a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	015a      	lsls	r2, r3, #5
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	4413      	add	r3, r2
 800e556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	db12      	blt.n	800e586 <USB_EPSetStall+0xae>
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d00f      	beq.n	800e586 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	015a      	lsls	r2, r3, #5
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	4413      	add	r3, r2
 800e56e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	68ba      	ldr	r2, [r7, #8]
 800e576:	0151      	lsls	r1, r2, #5
 800e578:	68fa      	ldr	r2, [r7, #12]
 800e57a:	440a      	add	r2, r1
 800e57c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e580:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e584:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	015a      	lsls	r2, r3, #5
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	4413      	add	r3, r2
 800e58e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	68ba      	ldr	r2, [r7, #8]
 800e596:	0151      	lsls	r1, r2, #5
 800e598:	68fa      	ldr	r2, [r7, #12]
 800e59a:	440a      	add	r2, r1
 800e59c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e5a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e5a6:	2300      	movs	r3, #0
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3714      	adds	r7, #20
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	785b      	ldrb	r3, [r3, #1]
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d128      	bne.n	800e622 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	015a      	lsls	r2, r3, #5
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	68ba      	ldr	r2, [r7, #8]
 800e5e0:	0151      	lsls	r1, r2, #5
 800e5e2:	68fa      	ldr	r2, [r7, #12]
 800e5e4:	440a      	add	r2, r1
 800e5e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e5ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	791b      	ldrb	r3, [r3, #4]
 800e5f4:	2b03      	cmp	r3, #3
 800e5f6:	d003      	beq.n	800e600 <USB_EPClearStall+0x4c>
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	791b      	ldrb	r3, [r3, #4]
 800e5fc:	2b02      	cmp	r3, #2
 800e5fe:	d138      	bne.n	800e672 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	015a      	lsls	r2, r3, #5
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	4413      	add	r3, r2
 800e608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	68ba      	ldr	r2, [r7, #8]
 800e610:	0151      	lsls	r1, r2, #5
 800e612:	68fa      	ldr	r2, [r7, #12]
 800e614:	440a      	add	r2, r1
 800e616:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e61a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e61e:	6013      	str	r3, [r2, #0]
 800e620:	e027      	b.n	800e672 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	015a      	lsls	r2, r3, #5
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	4413      	add	r3, r2
 800e62a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	68ba      	ldr	r2, [r7, #8]
 800e632:	0151      	lsls	r1, r2, #5
 800e634:	68fa      	ldr	r2, [r7, #12]
 800e636:	440a      	add	r2, r1
 800e638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e63c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e640:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	791b      	ldrb	r3, [r3, #4]
 800e646:	2b03      	cmp	r3, #3
 800e648:	d003      	beq.n	800e652 <USB_EPClearStall+0x9e>
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	791b      	ldrb	r3, [r3, #4]
 800e64e:	2b02      	cmp	r3, #2
 800e650:	d10f      	bne.n	800e672 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	015a      	lsls	r2, r3, #5
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	4413      	add	r3, r2
 800e65a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	68ba      	ldr	r2, [r7, #8]
 800e662:	0151      	lsls	r1, r2, #5
 800e664:	68fa      	ldr	r2, [r7, #12]
 800e666:	440a      	add	r2, r1
 800e668:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e66c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e670:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e672:	2300      	movs	r3, #0
}
 800e674:	4618      	mov	r0, r3
 800e676:	3714      	adds	r7, #20
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr

0800e680 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e680:	b480      	push	{r7}
 800e682:	b085      	sub	sp, #20
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	460b      	mov	r3, r1
 800e68a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	68fa      	ldr	r2, [r7, #12]
 800e69a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e69e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800e6a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	78fb      	ldrb	r3, [r7, #3]
 800e6ae:	011b      	lsls	r3, r3, #4
 800e6b0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800e6b4:	68f9      	ldr	r1, [r7, #12]
 800e6b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e6be:	2300      	movs	r3, #0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3714      	adds	r7, #20
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr

0800e6cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	68fa      	ldr	r2, [r7, #12]
 800e6e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e6e6:	f023 0303 	bic.w	r3, r3, #3
 800e6ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	68fa      	ldr	r2, [r7, #12]
 800e6f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e6fa:	f023 0302 	bic.w	r3, r3, #2
 800e6fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e700:	2300      	movs	r3, #0
}
 800e702:	4618      	mov	r0, r3
 800e704:	3714      	adds	r7, #20
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr

0800e70e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e70e:	b480      	push	{r7}
 800e710:	b085      	sub	sp, #20
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	68fa      	ldr	r2, [r7, #12]
 800e724:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e728:	f023 0303 	bic.w	r3, r3, #3
 800e72c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	68fa      	ldr	r2, [r7, #12]
 800e738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e73c:	f043 0302 	orr.w	r3, r3, #2
 800e740:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e742:	2300      	movs	r3, #0
}
 800e744:	4618      	mov	r0, r3
 800e746:	3714      	adds	r7, #20
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	695b      	ldr	r3, [r3, #20]
 800e75c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	699b      	ldr	r3, [r3, #24]
 800e762:	68fa      	ldr	r2, [r7, #12]
 800e764:	4013      	ands	r3, r2
 800e766:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e768:	68fb      	ldr	r3, [r7, #12]
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3714      	adds	r7, #20
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800e776:	b480      	push	{r7}
 800e778:	b085      	sub	sp, #20
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
 800e77e:	460b      	mov	r3, r1
 800e780:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800e786:	78fb      	ldrb	r3, [r7, #3]
 800e788:	015a      	lsls	r2, r3, #5
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	4413      	add	r3, r2
 800e78e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e792:	689b      	ldr	r3, [r3, #8]
 800e794:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800e796:	78fb      	ldrb	r3, [r7, #3]
 800e798:	015a      	lsls	r2, r3, #5
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	4413      	add	r3, r2
 800e79e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	68ba      	ldr	r2, [r7, #8]
 800e7a6:	4013      	ands	r3, r2
 800e7a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e7aa:	68bb      	ldr	r3, [r7, #8]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3714      	adds	r7, #20
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7ca:	699b      	ldr	r3, [r3, #24]
 800e7cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7d4:	69db      	ldr	r3, [r3, #28]
 800e7d6:	68ba      	ldr	r2, [r7, #8]
 800e7d8:	4013      	ands	r3, r2
 800e7da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	0c1b      	lsrs	r3, r3, #16
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3714      	adds	r7, #20
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr

0800e7ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7fe:	699b      	ldr	r3, [r3, #24]
 800e800:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e808:	69db      	ldr	r3, [r3, #28]
 800e80a:	68ba      	ldr	r2, [r7, #8]
 800e80c:	4013      	ands	r3, r2
 800e80e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	b29b      	uxth	r3, r3
}
 800e814:	4618      	mov	r0, r3
 800e816:	3714      	adds	r7, #20
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e820:	b480      	push	{r7}
 800e822:	b085      	sub	sp, #20
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	460b      	mov	r3, r1
 800e82a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e830:	78fb      	ldrb	r3, [r7, #3]
 800e832:	015a      	lsls	r2, r3, #5
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	4413      	add	r3, r2
 800e838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e83c:	689b      	ldr	r3, [r3, #8]
 800e83e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e846:	695b      	ldr	r3, [r3, #20]
 800e848:	68ba      	ldr	r2, [r7, #8]
 800e84a:	4013      	ands	r3, r2
 800e84c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e84e:	68bb      	ldr	r3, [r7, #8]
}
 800e850:	4618      	mov	r0, r3
 800e852:	3714      	adds	r7, #20
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b087      	sub	sp, #28
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	460b      	mov	r3, r1
 800e866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e87c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e87e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e880:	78fb      	ldrb	r3, [r7, #3]
 800e882:	f003 030f 	and.w	r3, r3, #15
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	fa22 f303 	lsr.w	r3, r2, r3
 800e88c:	01db      	lsls	r3, r3, #7
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	693a      	ldr	r2, [r7, #16]
 800e892:	4313      	orrs	r3, r2
 800e894:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e896:	78fb      	ldrb	r3, [r7, #3]
 800e898:	015a      	lsls	r2, r3, #5
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	4413      	add	r3, r2
 800e89e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	693a      	ldr	r2, [r7, #16]
 800e8a6:	4013      	ands	r3, r2
 800e8a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e8aa:	68bb      	ldr	r3, [r7, #8]
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	371c      	adds	r7, #28
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	695b      	ldr	r3, [r3, #20]
 800e8c4:	f003 0301 	and.w	r3, r3, #1
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	4b09      	ldr	r3, [pc, #36]	@ (800e918 <USB_ActivateSetup+0x44>)
 800e8f2:	4013      	ands	r3, r2
 800e8f4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	68fa      	ldr	r2, [r7, #12]
 800e900:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e908:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3714      	adds	r7, #20
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr
 800e918:	fffff800 	.word	0xfffff800

0800e91c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b087      	sub	sp, #28
 800e920:	af00      	add	r7, sp, #0
 800e922:	60f8      	str	r0, [r7, #12]
 800e924:	460b      	mov	r3, r1
 800e926:	607a      	str	r2, [r7, #4]
 800e928:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	333c      	adds	r3, #60	@ 0x3c
 800e932:	3304      	adds	r3, #4
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	4a26      	ldr	r2, [pc, #152]	@ (800e9d4 <USB_EP0_OutStart+0xb8>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d90a      	bls.n	800e956 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e94c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e950:	d101      	bne.n	800e956 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e952:	2300      	movs	r3, #0
 800e954:	e037      	b.n	800e9c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e95c:	461a      	mov	r2, r3
 800e95e:	2300      	movs	r3, #0
 800e960:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e968:	691b      	ldr	r3, [r3, #16]
 800e96a:	697a      	ldr	r2, [r7, #20]
 800e96c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e970:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e974:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e97c:	691b      	ldr	r3, [r3, #16]
 800e97e:	697a      	ldr	r2, [r7, #20]
 800e980:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e984:	f043 0318 	orr.w	r3, r3, #24
 800e988:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e990:	691b      	ldr	r3, [r3, #16]
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e998:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800e99c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e99e:	7afb      	ldrb	r3, [r7, #11]
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d10f      	bne.n	800e9c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	697a      	ldr	r2, [r7, #20]
 800e9ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9be:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800e9c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e9c4:	2300      	movs	r3, #0
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	371c      	adds	r7, #28
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	4f54300a 	.word	0x4f54300a

0800e9d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e9f0:	d901      	bls.n	800e9f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e9f2:	2303      	movs	r3, #3
 800e9f4:	e01b      	b.n	800ea2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	691b      	ldr	r3, [r3, #16]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	daf2      	bge.n	800e9e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	691b      	ldr	r3, [r3, #16]
 800ea06:	f043 0201 	orr.w	r2, r3, #1
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	3301      	adds	r3, #1
 800ea12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ea1a:	d901      	bls.n	800ea20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ea1c:	2303      	movs	r3, #3
 800ea1e:	e006      	b.n	800ea2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	691b      	ldr	r3, [r3, #16]
 800ea24:	f003 0301 	and.w	r3, r3, #1
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d0f0      	beq.n	800ea0e <USB_CoreReset+0x36>

  return HAL_OK;
 800ea2c:	2300      	movs	r3, #0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3714      	adds	r7, #20
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr
	...

0800ea3c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ea3c:	b084      	sub	sp, #16
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b086      	sub	sp, #24
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
 800ea46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ea4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	2300      	movs	r3, #0
 800ea60:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea66:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea72:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	639a      	str	r2, [r3, #56]	@ 0x38


  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	68db      	ldr	r3, [r3, #12]
 800ea7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d119      	bne.n	800eaba <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ea86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d10a      	bne.n	800eaa4 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ea9c:	f043 0304 	orr.w	r3, r3, #4
 800eaa0:	6013      	str	r3, [r2, #0]
 800eaa2:	e014      	b.n	800eace <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800eab2:	f023 0304 	bic.w	r3, r3, #4
 800eab6:	6013      	str	r3, [r2, #0]
 800eab8:	e009      	b.n	800eace <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800eac8:	f023 0304 	bic.w	r3, r3, #4
 800eacc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eace:	2110      	movs	r1, #16
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f7fe ff1b 	bl	800d90c <USB_FlushTxFifo>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d001      	beq.n	800eae0 <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 800eadc:	2301      	movs	r3, #1
 800eade:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f7fe ff45 	bl	800d970 <USB_FlushRxFifo>
 800eae6:	4603      	mov	r3, r0
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d001      	beq.n	800eaf0 <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 800eaec:	2301      	movs	r3, #1
 800eaee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	613b      	str	r3, [r7, #16]
 800eaf4:	e015      	b.n	800eb22 <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	015a      	lsls	r2, r3, #5
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	4413      	add	r3, r2
 800eafe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb02:	461a      	mov	r2, r3
 800eb04:	f04f 33ff 	mov.w	r3, #4294967295
 800eb08:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	015a      	lsls	r2, r3, #5
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	4413      	add	r3, r2
 800eb12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb16:	461a      	mov	r2, r3
 800eb18:	2300      	movs	r3, #0
 800eb1a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	613b      	str	r3, [r7, #16]
 800eb22:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800eb26:	461a      	mov	r2, r3
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d3e3      	bcc.n	800eaf6 <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2200      	movs	r2, #0
 800eb32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f04f 32ff 	mov.w	r2, #4294967295
 800eb3a:	615a      	str	r2, [r3, #20]
  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x200U;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb42:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a0f      	ldr	r2, [pc, #60]	@ (800eb84 <USB_HostInit+0x148>)
 800eb48:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	4a0e      	ldr	r2, [pc, #56]	@ (800eb88 <USB_HostInit+0x14c>)
 800eb4e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800eb52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d105      	bne.n	800eb66 <USB_HostInit+0x12a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	699b      	ldr	r3, [r3, #24]
 800eb5e:	f043 0210 	orr.w	r2, r3, #16
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	699a      	ldr	r2, [r3, #24]
 800eb6a:	4b08      	ldr	r3, [pc, #32]	@ (800eb8c <USB_HostInit+0x150>)
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800eb72:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3718      	adds	r7, #24
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eb7e:	b004      	add	sp, #16
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	01000200 	.word	0x01000200
 800eb88:	00e00300 	.word	0x00e00300
 800eb8c:	a3200008 	.word	0xa3200008

0800eb90 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b085      	sub	sp, #20
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ebae:	f023 0303 	bic.w	r3, r3, #3
 800ebb2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	78fb      	ldrb	r3, [r7, #3]
 800ebbe:	f003 0303 	and.w	r3, r3, #3
 800ebc2:	68f9      	ldr	r1, [r7, #12]
 800ebc4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800ebc8:	4313      	orrs	r3, r2
 800ebca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ebcc:	78fb      	ldrb	r3, [r7, #3]
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d107      	bne.n	800ebe2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ebd8:	461a      	mov	r2, r3
 800ebda:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ebde:	6053      	str	r3, [r2, #4]
 800ebe0:	e00c      	b.n	800ebfc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800ebe2:	78fb      	ldrb	r3, [r7, #3]
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	d107      	bne.n	800ebf8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ebee:	461a      	mov	r2, r3
 800ebf0:	f241 7370 	movw	r3, #6000	@ 0x1770
 800ebf4:	6053      	str	r3, [r2, #4]
 800ebf6:	e001      	b.n	800ebfc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	e000      	b.n	800ebfe <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800ebfc:	2300      	movs	r3, #0
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3714      	adds	r7, #20
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr

0800ec0a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b084      	sub	sp, #16
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ec16:	2300      	movs	r3, #0
 800ec18:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ec2a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	68fa      	ldr	r2, [r7, #12]
 800ec30:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ec34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ec38:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ec3a:	2064      	movs	r0, #100	@ 0x64
 800ec3c:	f7f3 fa28 	bl	8002090 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	68fa      	ldr	r2, [r7, #12]
 800ec44:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ec48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec4c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ec4e:	200a      	movs	r0, #10
 800ec50:	f7f3 fa1e 	bl	8002090 <HAL_Delay>

  return HAL_OK;
 800ec54:	2300      	movs	r3, #0
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ec5e:	b480      	push	{r7}
 800ec60:	b085      	sub	sp, #20
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
 800ec66:	460b      	mov	r3, r1
 800ec68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ec82:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d109      	bne.n	800eca2 <USB_DriveVbus+0x44>
 800ec8e:	78fb      	ldrb	r3, [r7, #3]
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d106      	bne.n	800eca2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	68fa      	ldr	r2, [r7, #12]
 800ec98:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ec9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800eca0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800eca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ecac:	d109      	bne.n	800ecc2 <USB_DriveVbus+0x64>
 800ecae:	78fb      	ldrb	r3, [r7, #3]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d106      	bne.n	800ecc2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ecbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ecc0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ecc2:	2300      	movs	r3, #0
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3714      	adds	r7, #20
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b085      	sub	sp, #20
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	0c5b      	lsrs	r3, r3, #17
 800ecee:	f003 0303 	and.w	r3, r3, #3
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3714      	adds	r7, #20
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr

0800ecfe <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800ecfe:	b480      	push	{r7}
 800ed00:	b085      	sub	sp, #20
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	b29b      	uxth	r3, r3
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3714      	adds	r7, #20
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b088      	sub	sp, #32
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	4608      	mov	r0, r1
 800ed2a:	4611      	mov	r1, r2
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	4603      	mov	r3, r0
 800ed30:	70fb      	strb	r3, [r7, #3]
 800ed32:	460b      	mov	r3, r1
 800ed34:	70bb      	strb	r3, [r7, #2]
 800ed36:	4613      	mov	r3, r2
 800ed38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800ed42:	78fb      	ldrb	r3, [r7, #3]
 800ed44:	015a      	lsls	r2, r3, #5
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	4413      	add	r3, r2
 800ed4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed4e:	461a      	mov	r2, r3
 800ed50:	f04f 33ff 	mov.w	r3, #4294967295
 800ed54:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ed56:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ed5a:	2b03      	cmp	r3, #3
 800ed5c:	d878      	bhi.n	800ee50 <USB_HC_Init+0x130>
 800ed5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ed64 <USB_HC_Init+0x44>)
 800ed60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed64:	0800ed75 	.word	0x0800ed75
 800ed68:	0800ee13 	.word	0x0800ee13
 800ed6c:	0800ed75 	.word	0x0800ed75
 800ed70:	0800edd5 	.word	0x0800edd5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ed74:	78fb      	ldrb	r3, [r7, #3]
 800ed76:	015a      	lsls	r2, r3, #5
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed80:	461a      	mov	r2, r3
 800ed82:	f240 439d 	movw	r3, #1181	@ 0x49d
 800ed86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ed88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	da10      	bge.n	800edb2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ed90:	78fb      	ldrb	r3, [r7, #3]
 800ed92:	015a      	lsls	r2, r3, #5
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	4413      	add	r3, r2
 800ed98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	78fa      	ldrb	r2, [r7, #3]
 800eda0:	0151      	lsls	r1, r2, #5
 800eda2:	693a      	ldr	r2, [r7, #16]
 800eda4:	440a      	add	r2, r1
 800eda6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800edaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800edae:	60d3      	str	r3, [r2, #12]
      else
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                               USB_OTG_HCINTMSK_ACKM;
      }
      break;
 800edb0:	e054      	b.n	800ee5c <USB_HC_Init+0x13c>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800edb2:	78fb      	ldrb	r3, [r7, #3]
 800edb4:	015a      	lsls	r2, r3, #5
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	4413      	add	r3, r2
 800edba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800edbe:	68db      	ldr	r3, [r3, #12]
 800edc0:	78fa      	ldrb	r2, [r7, #3]
 800edc2:	0151      	lsls	r1, r2, #5
 800edc4:	693a      	ldr	r2, [r7, #16]
 800edc6:	440a      	add	r2, r1
 800edc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800edcc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800edd0:	60d3      	str	r3, [r2, #12]
      break;
 800edd2:	e043      	b.n	800ee5c <USB_HC_Init+0x13c>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800edd4:	78fb      	ldrb	r3, [r7, #3]
 800edd6:	015a      	lsls	r2, r3, #5
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	4413      	add	r3, r2
 800eddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ede0:	461a      	mov	r2, r3
 800ede2:	f240 639d 	movw	r3, #1693	@ 0x69d
 800ede6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ede8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800edec:	2b00      	cmp	r3, #0
 800edee:	da32      	bge.n	800ee56 <USB_HC_Init+0x136>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800edf0:	78fb      	ldrb	r3, [r7, #3]
 800edf2:	015a      	lsls	r2, r3, #5
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	4413      	add	r3, r2
 800edf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	78fa      	ldrb	r2, [r7, #3]
 800ee00:	0151      	lsls	r1, r2, #5
 800ee02:	693a      	ldr	r2, [r7, #16]
 800ee04:	440a      	add	r2, r1
 800ee06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ee0e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ee10:	e021      	b.n	800ee56 <USB_HC_Init+0x136>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ee12:	78fb      	ldrb	r3, [r7, #3]
 800ee14:	015a      	lsls	r2, r3, #5
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	4413      	add	r3, r2
 800ee1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee1e:	461a      	mov	r2, r3
 800ee20:	f240 2325 	movw	r3, #549	@ 0x225
 800ee24:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ee26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	da15      	bge.n	800ee5a <USB_HC_Init+0x13a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ee2e:	78fb      	ldrb	r3, [r7, #3]
 800ee30:	015a      	lsls	r2, r3, #5
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	4413      	add	r3, r2
 800ee36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	78fa      	ldrb	r2, [r7, #3]
 800ee3e:	0151      	lsls	r1, r2, #5
 800ee40:	693a      	ldr	r2, [r7, #16]
 800ee42:	440a      	add	r2, r1
 800ee44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee48:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800ee4c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ee4e:	e004      	b.n	800ee5a <USB_HC_Init+0x13a>

    default:
      ret = HAL_ERROR;
 800ee50:	2301      	movs	r3, #1
 800ee52:	77fb      	strb	r3, [r7, #31]
      break;
 800ee54:	e002      	b.n	800ee5c <USB_HC_Init+0x13c>
      break;
 800ee56:	bf00      	nop
 800ee58:	e000      	b.n	800ee5c <USB_HC_Init+0x13c>
      break;
 800ee5a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ee5c:	78fb      	ldrb	r3, [r7, #3]
 800ee5e:	015a      	lsls	r2, r3, #5
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	4413      	add	r3, r2
 800ee64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee68:	461a      	mov	r2, r3
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800ee6e:	78fb      	ldrb	r3, [r7, #3]
 800ee70:	015a      	lsls	r2, r3, #5
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	4413      	add	r3, r2
 800ee76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	78fa      	ldrb	r2, [r7, #3]
 800ee7e:	0151      	lsls	r1, r2, #5
 800ee80:	693a      	ldr	r2, [r7, #16]
 800ee82:	440a      	add	r2, r1
 800ee84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee88:	f043 0302 	orr.w	r3, r3, #2
 800ee8c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ee94:	699a      	ldr	r2, [r3, #24]
 800ee96:	78fb      	ldrb	r3, [r7, #3]
 800ee98:	f003 030f 	and.w	r3, r3, #15
 800ee9c:	2101      	movs	r1, #1
 800ee9e:	fa01 f303 	lsl.w	r3, r1, r3
 800eea2:	6939      	ldr	r1, [r7, #16]
 800eea4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800eea8:	4313      	orrs	r3, r2
 800eeaa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	699b      	ldr	r3, [r3, #24]
 800eeb0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800eeb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	da03      	bge.n	800eec8 <USB_HC_Init+0x1a8>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800eec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eec4:	61bb      	str	r3, [r7, #24]
 800eec6:	e001      	b.n	800eecc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharEpDir = 0U;
 800eec8:	2300      	movs	r3, #0
 800eeca:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f7ff feff 	bl	800ecd0 <USB_GetHostSpeed>
 800eed2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800eed4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800eed8:	2b02      	cmp	r3, #2
 800eeda:	d106      	bne.n	800eeea <USB_HC_Init+0x1ca>
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d003      	beq.n	800eeea <USB_HC_Init+0x1ca>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800eee2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800eee6:	617b      	str	r3, [r7, #20]
 800eee8:	e001      	b.n	800eeee <USB_HC_Init+0x1ce>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800eeea:	2300      	movs	r3, #0
 800eeec:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800eeee:	787b      	ldrb	r3, [r7, #1]
 800eef0:	059b      	lsls	r3, r3, #22
 800eef2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800eef6:	78bb      	ldrb	r3, [r7, #2]
 800eef8:	02db      	lsls	r3, r3, #11
 800eefa:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800eefe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ef00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ef04:	049b      	lsls	r3, r3, #18
 800ef06:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ef0a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800ef0c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ef0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ef12:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	431a      	orrs	r2, r3
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ef1c:	78fa      	ldrb	r2, [r7, #3]
 800ef1e:	0151      	lsls	r1, r2, #5
 800ef20:	693a      	ldr	r2, [r7, #16]
 800ef22:	440a      	add	r2, r1
 800ef24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ef28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ef2c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800ef2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ef32:	2b03      	cmp	r3, #3
 800ef34:	d003      	beq.n	800ef3e <USB_HC_Init+0x21e>
 800ef36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d10f      	bne.n	800ef5e <USB_HC_Init+0x23e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ef3e:	78fb      	ldrb	r3, [r7, #3]
 800ef40:	015a      	lsls	r2, r3, #5
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	4413      	add	r3, r2
 800ef46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	78fa      	ldrb	r2, [r7, #3]
 800ef4e:	0151      	lsls	r1, r2, #5
 800ef50:	693a      	ldr	r2, [r7, #16]
 800ef52:	440a      	add	r2, r1
 800ef54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ef58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ef5c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ef5e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3720      	adds	r7, #32
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b08c      	sub	sp, #48	@ 0x30
 800ef6c:	af02      	add	r7, sp, #8
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	4613      	mov	r3, r2
 800ef74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	785b      	ldrb	r3, [r3, #1]
 800ef7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800ef80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef84:	837b      	strh	r3, [r7, #26]

  /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
  if (dma == 1U)
 800ef86:	79fb      	ldrb	r3, [r7, #7]
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d118      	bne.n	800efbe <USB_HC_StartXfer+0x56>
  {
    if ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK))
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	7c9b      	ldrb	r3, [r3, #18]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d003      	beq.n	800ef9c <USB_HC_StartXfer+0x34>
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	7c9b      	ldrb	r3, [r3, #18]
 800ef98:	2b02      	cmp	r3, #2
 800ef9a:	d120      	bne.n	800efde <USB_HC_StartXfer+0x76>
    {

      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	015a      	lsls	r2, r3, #5
 800efa0:	6a3b      	ldr	r3, [r7, #32]
 800efa2:	4413      	add	r3, r2
 800efa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	69fa      	ldr	r2, [r7, #28]
 800efac:	0151      	lsls	r1, r2, #5
 800efae:	6a3a      	ldr	r2, [r7, #32]
 800efb0:	440a      	add	r2, r1
 800efb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800efb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800efba:	60d3      	str	r3, [r2, #12]
 800efbc:	e00f      	b.n	800efde <USB_HC_StartXfer+0x76>
                                               USB_OTG_HCINTMSK_NAKM);
    }
  }
  else
  {
    if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	791b      	ldrb	r3, [r3, #4]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d10b      	bne.n	800efde <USB_HC_StartXfer+0x76>
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	795b      	ldrb	r3, [r3, #5]
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d107      	bne.n	800efde <USB_HC_StartXfer+0x76>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	785b      	ldrb	r3, [r3, #1]
 800efd2:	4619      	mov	r1, r3
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f000 fb69 	bl	800f6ac <USB_DoPing>
      return HAL_OK;
 800efda:	2300      	movs	r3, #0
 800efdc:	e230      	b.n	800f440 <USB_HC_StartXfer+0x4d8>
    }
  }

  if (hc->do_ssplit == 1U)
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	799b      	ldrb	r3, [r3, #6]
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d158      	bne.n	800f098 <USB_HC_StartXfer+0x130>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800efe6:	2301      	movs	r3, #1
 800efe8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	78db      	ldrb	r3, [r3, #3]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d007      	beq.n	800f002 <USB_HC_StartXfer+0x9a>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800eff2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eff4:	68ba      	ldr	r2, [r7, #8]
 800eff6:	8a92      	ldrh	r2, [r2, #20]
 800eff8:	fb03 f202 	mul.w	r2, r3, r2
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	61da      	str	r2, [r3, #28]
 800f000:	e079      	b.n	800f0f6 <USB_HC_StartXfer+0x18e>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	7c9b      	ldrb	r3, [r3, #18]
 800f006:	2b01      	cmp	r3, #1
 800f008:	d130      	bne.n	800f06c <USB_HC_StartXfer+0x104>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	6a1b      	ldr	r3, [r3, #32]
 800f00e:	2bbc      	cmp	r3, #188	@ 0xbc
 800f010:	d918      	bls.n	800f044 <USB_HC_StartXfer+0xdc>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	8a9b      	ldrh	r3, [r3, #20]
 800f016:	461a      	mov	r2, r3
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	69da      	ldr	r2, [r3, #28]
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	68db      	ldr	r3, [r3, #12]
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d003      	beq.n	800f034 <USB_HC_StartXfer+0xcc>
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	2b02      	cmp	r3, #2
 800f032:	d103      	bne.n	800f03c <USB_HC_StartXfer+0xd4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	2202      	movs	r2, #2
 800f038:	60da      	str	r2, [r3, #12]
 800f03a:	e05c      	b.n	800f0f6 <USB_HC_StartXfer+0x18e>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	2201      	movs	r2, #1
 800f040:	60da      	str	r2, [r3, #12]
 800f042:	e058      	b.n	800f0f6 <USB_HC_StartXfer+0x18e>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	6a1a      	ldr	r2, [r3, #32]
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	2b01      	cmp	r3, #1
 800f052:	d007      	beq.n	800f064 <USB_HC_StartXfer+0xfc>
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	2b02      	cmp	r3, #2
 800f05a:	d003      	beq.n	800f064 <USB_HC_StartXfer+0xfc>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	2204      	movs	r2, #4
 800f060:	60da      	str	r2, [r3, #12]
 800f062:	e048      	b.n	800f0f6 <USB_HC_StartXfer+0x18e>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	2203      	movs	r2, #3
 800f068:	60da      	str	r2, [r3, #12]
 800f06a:	e044      	b.n	800f0f6 <USB_HC_StartXfer+0x18e>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800f06c:	79fb      	ldrb	r3, [r7, #7]
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d10d      	bne.n	800f08e <USB_HC_StartXfer+0x126>
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	6a1b      	ldr	r3, [r3, #32]
 800f076:	68ba      	ldr	r2, [r7, #8]
 800f078:	8a92      	ldrh	r2, [r2, #20]
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d907      	bls.n	800f08e <USB_HC_StartXfer+0x126>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800f07e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f080:	68ba      	ldr	r2, [r7, #8]
 800f082:	8a92      	ldrh	r2, [r2, #20]
 800f084:	fb03 f202 	mul.w	r2, r3, r2
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	61da      	str	r2, [r3, #28]
 800f08c:	e033      	b.n	800f0f6 <USB_HC_StartXfer+0x18e>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	6a1a      	ldr	r2, [r3, #32]
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	61da      	str	r2, [r3, #28]
 800f096:	e02e      	b.n	800f0f6 <USB_HC_StartXfer+0x18e>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	6a1b      	ldr	r3, [r3, #32]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d018      	beq.n	800f0d2 <USB_HC_StartXfer+0x16a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	6a1b      	ldr	r3, [r3, #32]
 800f0a4:	68ba      	ldr	r2, [r7, #8]
 800f0a6:	8a92      	ldrh	r2, [r2, #20]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	3b01      	subs	r3, #1
 800f0ac:	68ba      	ldr	r2, [r7, #8]
 800f0ae:	8a92      	ldrh	r2, [r2, #20]
 800f0b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0b4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800f0b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f0b8:	8b7b      	ldrh	r3, [r7, #26]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d90b      	bls.n	800f0d6 <USB_HC_StartXfer+0x16e>
      {
        num_packets = max_hc_pkt_count;
 800f0be:	8b7b      	ldrh	r3, [r7, #26]
 800f0c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800f0c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f0c4:	68ba      	ldr	r2, [r7, #8]
 800f0c6:	8a92      	ldrh	r2, [r2, #20]
 800f0c8:	fb03 f202 	mul.w	r2, r3, r2
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	61da      	str	r2, [r3, #28]
 800f0d0:	e001      	b.n	800f0d6 <USB_HC_StartXfer+0x16e>
      }
    }
    else
    {
      num_packets = 1U;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	78db      	ldrb	r3, [r3, #3]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d007      	beq.n	800f0ee <USB_HC_StartXfer+0x186>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800f0de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f0e0:	68ba      	ldr	r2, [r7, #8]
 800f0e2:	8a92      	ldrh	r2, [r2, #20]
 800f0e4:	fb03 f202 	mul.w	r2, r3, r2
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	61da      	str	r2, [r3, #28]
 800f0ec:	e003      	b.n	800f0f6 <USB_HC_StartXfer+0x18e>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	6a1a      	ldr	r2, [r3, #32]
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	69db      	ldr	r3, [r3, #28]
 800f0fa:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f0fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f100:	04d9      	lsls	r1, r3, #19
 800f102:	4ba4      	ldr	r3, [pc, #656]	@ (800f394 <USB_HC_StartXfer+0x42c>)
 800f104:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f106:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	7d9b      	ldrb	r3, [r3, #22]
 800f10c:	075b      	lsls	r3, r3, #29
 800f10e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f112:	69f9      	ldr	r1, [r7, #28]
 800f114:	0148      	lsls	r0, r1, #5
 800f116:	6a39      	ldr	r1, [r7, #32]
 800f118:	4401      	add	r1, r0
 800f11a:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f11e:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f120:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800f122:	79fb      	ldrb	r3, [r7, #7]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d009      	beq.n	800f13c <USB_HC_StartXfer+0x1d4>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	6999      	ldr	r1, [r3, #24]
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	015a      	lsls	r2, r3, #5
 800f130:	6a3b      	ldr	r3, [r7, #32]
 800f132:	4413      	add	r3, r2
 800f134:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f138:	460a      	mov	r2, r1
 800f13a:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800f13c:	6a3b      	ldr	r3, [r7, #32]
 800f13e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f142:	689b      	ldr	r3, [r3, #8]
 800f144:	f003 0301 	and.w	r3, r3, #1
 800f148:	2b00      	cmp	r3, #0
 800f14a:	bf0c      	ite	eq
 800f14c:	2301      	moveq	r3, #1
 800f14e:	2300      	movne	r3, #0
 800f150:	b2db      	uxtb	r3, r3
 800f152:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	015a      	lsls	r2, r3, #5
 800f158:	6a3b      	ldr	r3, [r7, #32]
 800f15a:	4413      	add	r3, r2
 800f15c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	69fa      	ldr	r2, [r7, #28]
 800f164:	0151      	lsls	r1, r2, #5
 800f166:	6a3a      	ldr	r2, [r7, #32]
 800f168:	440a      	add	r2, r1
 800f16a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f16e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f172:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	015a      	lsls	r2, r3, #5
 800f178:	6a3b      	ldr	r3, [r7, #32]
 800f17a:	4413      	add	r3, r2
 800f17c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	7e7b      	ldrb	r3, [r7, #25]
 800f184:	075b      	lsls	r3, r3, #29
 800f186:	69f9      	ldr	r1, [r7, #28]
 800f188:	0148      	lsls	r0, r1, #5
 800f18a:	6a39      	ldr	r1, [r7, #32]
 800f18c:	4401      	add	r1, r0
 800f18e:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800f192:	4313      	orrs	r3, r2
 800f194:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	799b      	ldrb	r3, [r3, #6]
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	f040 80c4 	bne.w	800f328 <USB_HC_StartXfer+0x3c0>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	7c5b      	ldrb	r3, [r3, #17]
 800f1a4:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800f1a6:	68ba      	ldr	r2, [r7, #8]
 800f1a8:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	69fa      	ldr	r2, [r7, #28]
 800f1ae:	0151      	lsls	r1, r2, #5
 800f1b0:	6a3a      	ldr	r2, [r7, #32]
 800f1b2:	440a      	add	r2, r1
 800f1b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800f1b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800f1bc:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	015a      	lsls	r2, r3, #5
 800f1c2:	6a3b      	ldr	r3, [r7, #32]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	69fa      	ldr	r2, [r7, #28]
 800f1ce:	0151      	lsls	r1, r2, #5
 800f1d0:	6a3a      	ldr	r2, [r7, #32]
 800f1d2:	440a      	add	r2, r1
 800f1d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f1d8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800f1dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	79db      	ldrb	r3, [r3, #7]
 800f1e2:	2b01      	cmp	r3, #1
 800f1e4:	d123      	bne.n	800f22e <USB_HC_StartXfer+0x2c6>
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	78db      	ldrb	r3, [r3, #3]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d11f      	bne.n	800f22e <USB_HC_StartXfer+0x2c6>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800f1ee:	69fb      	ldr	r3, [r7, #28]
 800f1f0:	015a      	lsls	r2, r3, #5
 800f1f2:	6a3b      	ldr	r3, [r7, #32]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	69fa      	ldr	r2, [r7, #28]
 800f1fe:	0151      	lsls	r1, r2, #5
 800f200:	6a3a      	ldr	r2, [r7, #32]
 800f202:	440a      	add	r2, r1
 800f204:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f20c:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800f20e:	69fb      	ldr	r3, [r7, #28]
 800f210:	015a      	lsls	r2, r3, #5
 800f212:	6a3b      	ldr	r3, [r7, #32]
 800f214:	4413      	add	r3, r2
 800f216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	69fa      	ldr	r2, [r7, #28]
 800f21e:	0151      	lsls	r1, r2, #5
 800f220:	6a3a      	ldr	r2, [r7, #32]
 800f222:	440a      	add	r2, r1
 800f224:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f22c:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	7c9b      	ldrb	r3, [r3, #18]
 800f232:	2b01      	cmp	r3, #1
 800f234:	d003      	beq.n	800f23e <USB_HC_StartXfer+0x2d6>
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	7c9b      	ldrb	r3, [r3, #18]
 800f23a:	2b03      	cmp	r3, #3
 800f23c:	d117      	bne.n	800f26e <USB_HC_StartXfer+0x306>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800f242:	2b01      	cmp	r3, #1
 800f244:	d113      	bne.n	800f26e <USB_HC_StartXfer+0x306>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	78db      	ldrb	r3, [r3, #3]
 800f24a:	2b01      	cmp	r3, #1
 800f24c:	d10f      	bne.n	800f26e <USB_HC_StartXfer+0x306>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800f24e:	69fb      	ldr	r3, [r7, #28]
 800f250:	015a      	lsls	r2, r3, #5
 800f252:	6a3b      	ldr	r3, [r7, #32]
 800f254:	4413      	add	r3, r2
 800f256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	69fa      	ldr	r2, [r7, #28]
 800f25e:	0151      	lsls	r1, r2, #5
 800f260:	6a3a      	ldr	r2, [r7, #32]
 800f262:	440a      	add	r2, r1
 800f264:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f26c:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	7c9b      	ldrb	r3, [r3, #18]
 800f272:	2b01      	cmp	r3, #1
 800f274:	d163      	bne.n	800f33e <USB_HC_StartXfer+0x3d6>
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	78db      	ldrb	r3, [r3, #3]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d15f      	bne.n	800f33e <USB_HC_StartXfer+0x3d6>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	68db      	ldr	r3, [r3, #12]
 800f282:	3b01      	subs	r3, #1
 800f284:	2b03      	cmp	r3, #3
 800f286:	d859      	bhi.n	800f33c <USB_HC_StartXfer+0x3d4>
 800f288:	a201      	add	r2, pc, #4	@ (adr r2, 800f290 <USB_HC_StartXfer+0x328>)
 800f28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f28e:	bf00      	nop
 800f290:	0800f2a1 	.word	0x0800f2a1
 800f294:	0800f2c3 	.word	0x0800f2c3
 800f298:	0800f2e5 	.word	0x0800f2e5
 800f29c:	0800f307 	.word	0x0800f307
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	015a      	lsls	r2, r3, #5
 800f2a4:	6a3b      	ldr	r3, [r7, #32]
 800f2a6:	4413      	add	r3, r2
 800f2a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	69fa      	ldr	r2, [r7, #28]
 800f2b0:	0151      	lsls	r1, r2, #5
 800f2b2:	6a3a      	ldr	r2, [r7, #32]
 800f2b4:	440a      	add	r2, r1
 800f2b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f2ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f2be:	6053      	str	r3, [r2, #4]
          break;
 800f2c0:	e03d      	b.n	800f33e <USB_HC_StartXfer+0x3d6>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	015a      	lsls	r2, r3, #5
 800f2c6:	6a3b      	ldr	r3, [r7, #32]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	69fa      	ldr	r2, [r7, #28]
 800f2d2:	0151      	lsls	r1, r2, #5
 800f2d4:	6a3a      	ldr	r2, [r7, #32]
 800f2d6:	440a      	add	r2, r1
 800f2d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f2dc:	f043 030e 	orr.w	r3, r3, #14
 800f2e0:	6053      	str	r3, [r2, #4]
          break;
 800f2e2:	e02c      	b.n	800f33e <USB_HC_StartXfer+0x3d6>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	015a      	lsls	r2, r3, #5
 800f2e8:	6a3b      	ldr	r3, [r7, #32]
 800f2ea:	4413      	add	r3, r2
 800f2ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	69fa      	ldr	r2, [r7, #28]
 800f2f4:	0151      	lsls	r1, r2, #5
 800f2f6:	6a3a      	ldr	r2, [r7, #32]
 800f2f8:	440a      	add	r2, r1
 800f2fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f2fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f302:	6053      	str	r3, [r2, #4]
          break;
 800f304:	e01b      	b.n	800f33e <USB_HC_StartXfer+0x3d6>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	015a      	lsls	r2, r3, #5
 800f30a:	6a3b      	ldr	r3, [r7, #32]
 800f30c:	4413      	add	r3, r2
 800f30e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	69fa      	ldr	r2, [r7, #28]
 800f316:	0151      	lsls	r1, r2, #5
 800f318:	6a3a      	ldr	r2, [r7, #32]
 800f31a:	440a      	add	r2, r1
 800f31c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f324:	6053      	str	r3, [r2, #4]
          break;
 800f326:	e00a      	b.n	800f33e <USB_HC_StartXfer+0x3d6>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	015a      	lsls	r2, r3, #5
 800f32c:	6a3b      	ldr	r3, [r7, #32]
 800f32e:	4413      	add	r3, r2
 800f330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f334:	461a      	mov	r2, r3
 800f336:	2300      	movs	r3, #0
 800f338:	6053      	str	r3, [r2, #4]
 800f33a:	e000      	b.n	800f33e <USB_HC_StartXfer+0x3d6>
          break;
 800f33c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	015a      	lsls	r2, r3, #5
 800f342:	6a3b      	ldr	r3, [r7, #32]
 800f344:	4413      	add	r3, r2
 800f346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f354:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	78db      	ldrb	r3, [r3, #3]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d004      	beq.n	800f368 <USB_HC_StartXfer+0x400>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f364:	613b      	str	r3, [r7, #16]
 800f366:	e003      	b.n	800f370 <USB_HC_StartXfer+0x408>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f36e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f376:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800f378:	69fb      	ldr	r3, [r7, #28]
 800f37a:	015a      	lsls	r2, r3, #5
 800f37c:	6a3b      	ldr	r3, [r7, #32]
 800f37e:	4413      	add	r3, r2
 800f380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f384:	461a      	mov	r2, r3
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800f38a:	79fb      	ldrb	r3, [r7, #7]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d003      	beq.n	800f398 <USB_HC_StartXfer+0x430>
  {
    return HAL_OK;
 800f390:	2300      	movs	r3, #0
 800f392:	e055      	b.n	800f440 <USB_HC_StartXfer+0x4d8>
 800f394:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	78db      	ldrb	r3, [r3, #3]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d14e      	bne.n	800f43e <USB_HC_StartXfer+0x4d6>
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	6a1b      	ldr	r3, [r3, #32]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d04a      	beq.n	800f43e <USB_HC_StartXfer+0x4d6>
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	79db      	ldrb	r3, [r3, #7]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d146      	bne.n	800f43e <USB_HC_StartXfer+0x4d6>
  {
    switch (hc->ep_type)
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	7c9b      	ldrb	r3, [r3, #18]
 800f3b4:	2b03      	cmp	r3, #3
 800f3b6:	d831      	bhi.n	800f41c <USB_HC_StartXfer+0x4b4>
 800f3b8:	a201      	add	r2, pc, #4	@ (adr r2, 800f3c0 <USB_HC_StartXfer+0x458>)
 800f3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3be:	bf00      	nop
 800f3c0:	0800f3d1 	.word	0x0800f3d1
 800f3c4:	0800f3f5 	.word	0x0800f3f5
 800f3c8:	0800f3d1 	.word	0x0800f3d1
 800f3cc:	0800f3f5 	.word	0x0800f3f5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	6a1b      	ldr	r3, [r3, #32]
 800f3d4:	3303      	adds	r3, #3
 800f3d6:	089b      	lsrs	r3, r3, #2
 800f3d8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800f3da:	8afa      	ldrh	r2, [r7, #22]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d91c      	bls.n	800f420 <USB_HC_StartXfer+0x4b8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	699b      	ldr	r3, [r3, #24]
 800f3ea:	f043 0220 	orr.w	r2, r3, #32
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	619a      	str	r2, [r3, #24]
        }
        break;
 800f3f2:	e015      	b.n	800f420 <USB_HC_StartXfer+0x4b8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	6a1b      	ldr	r3, [r3, #32]
 800f3f8:	3303      	adds	r3, #3
 800f3fa:	089b      	lsrs	r3, r3, #2
 800f3fc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800f3fe:	8afa      	ldrh	r2, [r7, #22]
 800f400:	6a3b      	ldr	r3, [r7, #32]
 800f402:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	b29b      	uxth	r3, r3
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d90a      	bls.n	800f424 <USB_HC_StartXfer+0x4bc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	699b      	ldr	r3, [r3, #24]
 800f412:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	619a      	str	r2, [r3, #24]
        }
        break;
 800f41a:	e003      	b.n	800f424 <USB_HC_StartXfer+0x4bc>

      default:
        break;
 800f41c:	bf00      	nop
 800f41e:	e002      	b.n	800f426 <USB_HC_StartXfer+0x4be>
        break;
 800f420:	bf00      	nop
 800f422:	e000      	b.n	800f426 <USB_HC_StartXfer+0x4be>
        break;
 800f424:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	6999      	ldr	r1, [r3, #24]
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	785a      	ldrb	r2, [r3, #1]
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	6a1b      	ldr	r3, [r3, #32]
 800f432:	b29b      	uxth	r3, r3
 800f434:	2000      	movs	r0, #0
 800f436:	9000      	str	r0, [sp, #0]
 800f438:	68f8      	ldr	r0, [r7, #12]
 800f43a:	f7fe ffb7 	bl	800e3ac <USB_WritePacket>
  }

  return HAL_OK;
 800f43e:	2300      	movs	r3, #0
}
 800f440:	4618      	mov	r0, r3
 800f442:	3728      	adds	r7, #40	@ 0x28
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f448:	b480      	push	{r7}
 800f44a:	b085      	sub	sp, #20
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f45a:	695b      	ldr	r3, [r3, #20]
 800f45c:	b29b      	uxth	r3, r3
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3714      	adds	r7, #20
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr

0800f46a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800f46a:	b480      	push	{r7}
 800f46c:	b089      	sub	sp, #36	@ 0x24
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
 800f472:	460b      	mov	r3, r1
 800f474:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800f47a:	78fb      	ldrb	r3, [r7, #3]
 800f47c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800f47e:	2300      	movs	r3, #0
 800f480:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800f482:	69bb      	ldr	r3, [r7, #24]
 800f484:	015a      	lsls	r2, r3, #5
 800f486:	69fb      	ldr	r3, [r7, #28]
 800f488:	4413      	add	r3, r2
 800f48a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	0c9b      	lsrs	r3, r3, #18
 800f492:	f003 0303 	and.w	r3, r3, #3
 800f496:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	015a      	lsls	r2, r3, #5
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	4413      	add	r3, r2
 800f4a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	0fdb      	lsrs	r3, r3, #31
 800f4a8:	f003 0301 	and.w	r3, r3, #1
 800f4ac:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	015a      	lsls	r2, r3, #5
 800f4b2:	69fb      	ldr	r3, [r7, #28]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	0fdb      	lsrs	r3, r3, #31
 800f4be:	f003 0301 	and.w	r3, r3, #1
 800f4c2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	689b      	ldr	r3, [r3, #8]
 800f4c8:	f003 0320 	and.w	r3, r3, #32
 800f4cc:	2b20      	cmp	r3, #32
 800f4ce:	d10d      	bne.n	800f4ec <USB_HC_Halt+0x82>
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d10a      	bne.n	800f4ec <USB_HC_Halt+0x82>
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d005      	beq.n	800f4e8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d002      	beq.n	800f4e8 <USB_HC_Halt+0x7e>
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	2b03      	cmp	r3, #3
 800f4e6:	d101      	bne.n	800f4ec <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	e0d8      	b.n	800f69e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d002      	beq.n	800f4f8 <USB_HC_Halt+0x8e>
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	2b02      	cmp	r3, #2
 800f4f6:	d173      	bne.n	800f5e0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f4f8:	69bb      	ldr	r3, [r7, #24]
 800f4fa:	015a      	lsls	r2, r3, #5
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	4413      	add	r3, r2
 800f500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	69ba      	ldr	r2, [r7, #24]
 800f508:	0151      	lsls	r1, r2, #5
 800f50a:	69fa      	ldr	r2, [r7, #28]
 800f50c:	440a      	add	r2, r1
 800f50e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f512:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f516:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	f003 0320 	and.w	r3, r3, #32
 800f520:	2b00      	cmp	r3, #0
 800f522:	d14a      	bne.n	800f5ba <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f528:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d133      	bne.n	800f598 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f530:	69bb      	ldr	r3, [r7, #24]
 800f532:	015a      	lsls	r2, r3, #5
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	4413      	add	r3, r2
 800f538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	69ba      	ldr	r2, [r7, #24]
 800f540:	0151      	lsls	r1, r2, #5
 800f542:	69fa      	ldr	r2, [r7, #28]
 800f544:	440a      	add	r2, r1
 800f546:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f54a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f54e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f550:	69bb      	ldr	r3, [r7, #24]
 800f552:	015a      	lsls	r2, r3, #5
 800f554:	69fb      	ldr	r3, [r7, #28]
 800f556:	4413      	add	r3, r2
 800f558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	69ba      	ldr	r2, [r7, #24]
 800f560:	0151      	lsls	r1, r2, #5
 800f562:	69fa      	ldr	r2, [r7, #28]
 800f564:	440a      	add	r2, r1
 800f566:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f56a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f56e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	3301      	adds	r3, #1
 800f574:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f57c:	d82e      	bhi.n	800f5dc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f57e:	69bb      	ldr	r3, [r7, #24]
 800f580:	015a      	lsls	r2, r3, #5
 800f582:	69fb      	ldr	r3, [r7, #28]
 800f584:	4413      	add	r3, r2
 800f586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f590:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f594:	d0ec      	beq.n	800f570 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f596:	e081      	b.n	800f69c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	015a      	lsls	r2, r3, #5
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	4413      	add	r3, r2
 800f5a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	69ba      	ldr	r2, [r7, #24]
 800f5a8:	0151      	lsls	r1, r2, #5
 800f5aa:	69fa      	ldr	r2, [r7, #28]
 800f5ac:	440a      	add	r2, r1
 800f5ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f5b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f5b6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f5b8:	e070      	b.n	800f69c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	015a      	lsls	r2, r3, #5
 800f5be:	69fb      	ldr	r3, [r7, #28]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	69ba      	ldr	r2, [r7, #24]
 800f5ca:	0151      	lsls	r1, r2, #5
 800f5cc:	69fa      	ldr	r2, [r7, #28]
 800f5ce:	440a      	add	r2, r1
 800f5d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f5d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f5d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f5da:	e05f      	b.n	800f69c <USB_HC_Halt+0x232>
            break;
 800f5dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f5de:	e05d      	b.n	800f69c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	015a      	lsls	r2, r3, #5
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	69ba      	ldr	r2, [r7, #24]
 800f5f0:	0151      	lsls	r1, r2, #5
 800f5f2:	69fa      	ldr	r2, [r7, #28]
 800f5f4:	440a      	add	r2, r1
 800f5f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f5fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f5fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f606:	691b      	ldr	r3, [r3, #16]
 800f608:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d133      	bne.n	800f678 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f610:	69bb      	ldr	r3, [r7, #24]
 800f612:	015a      	lsls	r2, r3, #5
 800f614:	69fb      	ldr	r3, [r7, #28]
 800f616:	4413      	add	r3, r2
 800f618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	69ba      	ldr	r2, [r7, #24]
 800f620:	0151      	lsls	r1, r2, #5
 800f622:	69fa      	ldr	r2, [r7, #28]
 800f624:	440a      	add	r2, r1
 800f626:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f62a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f62e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f630:	69bb      	ldr	r3, [r7, #24]
 800f632:	015a      	lsls	r2, r3, #5
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	4413      	add	r3, r2
 800f638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	69ba      	ldr	r2, [r7, #24]
 800f640:	0151      	lsls	r1, r2, #5
 800f642:	69fa      	ldr	r2, [r7, #28]
 800f644:	440a      	add	r2, r1
 800f646:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f64a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f64e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	3301      	adds	r3, #1
 800f654:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f65c:	d81d      	bhi.n	800f69a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	015a      	lsls	r2, r3, #5
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	4413      	add	r3, r2
 800f666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f670:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f674:	d0ec      	beq.n	800f650 <USB_HC_Halt+0x1e6>
 800f676:	e011      	b.n	800f69c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f678:	69bb      	ldr	r3, [r7, #24]
 800f67a:	015a      	lsls	r2, r3, #5
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	4413      	add	r3, r2
 800f680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	69ba      	ldr	r2, [r7, #24]
 800f688:	0151      	lsls	r1, r2, #5
 800f68a:	69fa      	ldr	r2, [r7, #28]
 800f68c:	440a      	add	r2, r1
 800f68e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f692:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f696:	6013      	str	r3, [r2, #0]
 800f698:	e000      	b.n	800f69c <USB_HC_Halt+0x232>
          break;
 800f69a:	bf00      	nop
    }
  }

  return HAL_OK;
 800f69c:	2300      	movs	r3, #0
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3724      	adds	r7, #36	@ 0x24
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr
	...

0800f6ac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b087      	sub	sp, #28
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800f6bc:	78fb      	ldrb	r3, [r7, #3]
 800f6be:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	04da      	lsls	r2, r3, #19
 800f6c8:	4b15      	ldr	r3, [pc, #84]	@ (800f720 <USB_DoPing+0x74>)
 800f6ca:	4013      	ands	r3, r2
 800f6cc:	693a      	ldr	r2, [r7, #16]
 800f6ce:	0151      	lsls	r1, r2, #5
 800f6d0:	697a      	ldr	r2, [r7, #20]
 800f6d2:	440a      	add	r2, r1
 800f6d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f6d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f6dc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	015a      	lsls	r2, r3, #5
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	4413      	add	r3, r2
 800f6e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f6f4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f6fc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	015a      	lsls	r2, r3, #5
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	4413      	add	r3, r2
 800f706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f70a:	461a      	mov	r2, r3
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800f710:	2300      	movs	r3, #0
}
 800f712:	4618      	mov	r0, r3
 800f714:	371c      	adds	r7, #28
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	1ff80000 	.word	0x1ff80000

0800f724 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b088      	sub	sp, #32
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800f72c:	2300      	movs	r3, #0
 800f72e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800f734:	2300      	movs	r3, #0
 800f736:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f7fd ff2c 	bl	800d596 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f73e:	2110      	movs	r1, #16
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f7fe f8e3 	bl	800d90c <USB_FlushTxFifo>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d001      	beq.n	800f750 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800f74c:	2301      	movs	r3, #1
 800f74e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7fe f90d 	bl	800d970 <USB_FlushRxFifo>
 800f756:	4603      	mov	r3, r0
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d001      	beq.n	800f760 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800f75c:	2301      	movs	r3, #1
 800f75e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800f760:	2300      	movs	r3, #0
 800f762:	61bb      	str	r3, [r7, #24]
 800f764:	e01f      	b.n	800f7a6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800f766:	69bb      	ldr	r3, [r7, #24]
 800f768:	015a      	lsls	r2, r3, #5
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	4413      	add	r3, r2
 800f76e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f77c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f784:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f78c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800f78e:	69bb      	ldr	r3, [r7, #24]
 800f790:	015a      	lsls	r2, r3, #5
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	4413      	add	r3, r2
 800f796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f79a:	461a      	mov	r2, r3
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	61bb      	str	r3, [r7, #24]
 800f7a6:	69bb      	ldr	r3, [r7, #24]
 800f7a8:	2b0f      	cmp	r3, #15
 800f7aa:	d9dc      	bls.n	800f766 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	61bb      	str	r3, [r7, #24]
 800f7b0:	e034      	b.n	800f81c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800f7b2:	69bb      	ldr	r3, [r7, #24]
 800f7b4:	015a      	lsls	r2, r3, #5
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	4413      	add	r3, r2
 800f7ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f7c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f7d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f7d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800f7da:	69bb      	ldr	r3, [r7, #24]
 800f7dc:	015a      	lsls	r2, r3, #5
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f7f8:	d80c      	bhi.n	800f814 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f7fa:	69bb      	ldr	r3, [r7, #24]
 800f7fc:	015a      	lsls	r2, r3, #5
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	4413      	add	r3, r2
 800f802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f80c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f810:	d0ec      	beq.n	800f7ec <USB_StopHost+0xc8>
 800f812:	e000      	b.n	800f816 <USB_StopHost+0xf2>
        break;
 800f814:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800f816:	69bb      	ldr	r3, [r7, #24]
 800f818:	3301      	adds	r3, #1
 800f81a:	61bb      	str	r3, [r7, #24]
 800f81c:	69bb      	ldr	r3, [r7, #24]
 800f81e:	2b0f      	cmp	r3, #15
 800f820:	d9c7      	bls.n	800f7b2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f828:	461a      	mov	r2, r3
 800f82a:	f04f 33ff 	mov.w	r3, #4294967295
 800f82e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f04f 32ff 	mov.w	r2, #4294967295
 800f836:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f7fd fe9b 	bl	800d574 <USB_EnableGlobalInt>

  return ret;
 800f83e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f840:	4618      	mov	r0, r3
 800f842:	3720      	adds	r7, #32
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b084      	sub	sp, #16
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	460b      	mov	r3, r1
 800f852:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800f854:	2054      	movs	r0, #84	@ 0x54
 800f856:	f00b fa51 	bl	801acfc <USBD_static_malloc>
 800f85a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d109      	bne.n	800f876 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	32b0      	adds	r2, #176	@ 0xb0
 800f86c:	2100      	movs	r1, #0
 800f86e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f872:	2302      	movs	r3, #2
 800f874:	e09f      	b.n	800f9b6 <USBD_CUSTOM_HID_Init+0x16e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	32b0      	adds	r2, #176	@ 0xb0
 800f880:	68f9      	ldr	r1, [r7, #12]
 800f882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	32b0      	adds	r2, #176	@ 0xb0
 800f890:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	7c1b      	ldrb	r3, [r3, #16]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d11b      	bne.n	800f8da <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800f8a2:	4b47      	ldr	r3, [pc, #284]	@ (800f9c0 <USBD_CUSTOM_HID_Init+0x178>)
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	f003 020f 	and.w	r2, r3, #15
 800f8aa:	6879      	ldr	r1, [r7, #4]
 800f8ac:	4613      	mov	r3, r2
 800f8ae:	009b      	lsls	r3, r3, #2
 800f8b0:	4413      	add	r3, r2
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	440b      	add	r3, r1
 800f8b6:	3326      	adds	r3, #38	@ 0x26
 800f8b8:	2205      	movs	r2, #5
 800f8ba:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800f8bc:	4b41      	ldr	r3, [pc, #260]	@ (800f9c4 <USBD_CUSTOM_HID_Init+0x17c>)
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	f003 020f 	and.w	r2, r3, #15
 800f8c4:	6879      	ldr	r1, [r7, #4]
 800f8c6:	4613      	mov	r3, r2
 800f8c8:	009b      	lsls	r3, r3, #2
 800f8ca:	4413      	add	r3, r2
 800f8cc:	009b      	lsls	r3, r3, #2
 800f8ce:	440b      	add	r3, r1
 800f8d0:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800f8d4:	2205      	movs	r2, #5
 800f8d6:	801a      	strh	r2, [r3, #0]
 800f8d8:	e01a      	b.n	800f910 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800f8da:	4b39      	ldr	r3, [pc, #228]	@ (800f9c0 <USBD_CUSTOM_HID_Init+0x178>)
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	f003 020f 	and.w	r2, r3, #15
 800f8e2:	6879      	ldr	r1, [r7, #4]
 800f8e4:	4613      	mov	r3, r2
 800f8e6:	009b      	lsls	r3, r3, #2
 800f8e8:	4413      	add	r3, r2
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	440b      	add	r3, r1
 800f8ee:	3326      	adds	r3, #38	@ 0x26
 800f8f0:	2205      	movs	r2, #5
 800f8f2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800f8f4:	4b33      	ldr	r3, [pc, #204]	@ (800f9c4 <USBD_CUSTOM_HID_Init+0x17c>)
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	f003 020f 	and.w	r2, r3, #15
 800f8fc:	6879      	ldr	r1, [r7, #4]
 800f8fe:	4613      	mov	r3, r2
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	4413      	add	r3, r2
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	440b      	add	r3, r1
 800f908:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800f90c:	2205      	movs	r2, #5
 800f90e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800f910:	4b2b      	ldr	r3, [pc, #172]	@ (800f9c0 <USBD_CUSTOM_HID_Init+0x178>)
 800f912:	7819      	ldrb	r1, [r3, #0]
 800f914:	2302      	movs	r3, #2
 800f916:	2203      	movs	r2, #3
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f00b f8de 	bl	801aada <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800f91e:	4b28      	ldr	r3, [pc, #160]	@ (800f9c0 <USBD_CUSTOM_HID_Init+0x178>)
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	f003 020f 	and.w	r2, r3, #15
 800f926:	6879      	ldr	r1, [r7, #4]
 800f928:	4613      	mov	r3, r2
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	4413      	add	r3, r2
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	440b      	add	r3, r1
 800f932:	3324      	adds	r3, #36	@ 0x24
 800f934:	2201      	movs	r2, #1
 800f936:	801a      	strh	r2, [r3, #0]

	// =========================================
	//  以下是添加自定义的EP
	(void)USBD_LL_OpenEP(pdev, MOUSE_EP, USBD_EP_TYPE_INTR, MOUSE_EP_SIZE);
 800f938:	230a      	movs	r3, #10
 800f93a:	2203      	movs	r2, #3
 800f93c:	2182      	movs	r1, #130	@ 0x82
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f00b f8cb 	bl	801aada <USBD_LL_OpenEP>
	pdev->ep_in[MOUSE_EP & 0xFU].is_used = 1U;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2201      	movs	r2, #1
 800f948:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

	(void)USBD_LL_OpenEP(pdev, KEYBOARD_EP, USBD_EP_TYPE_INTR, KEYBOARD_EP_SIZE);
 800f94c:	230a      	movs	r3, #10
 800f94e:	2203      	movs	r2, #3
 800f950:	2183      	movs	r1, #131	@ 0x83
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f00b f8c1 	bl	801aada <USBD_LL_OpenEP>
	pdev->ep_in[KEYBOARD_EP & 0xFU].is_used = 1U;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2201      	movs	r2, #1
 800f95c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	// =========================================

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800f960:	4b18      	ldr	r3, [pc, #96]	@ (800f9c4 <USBD_CUSTOM_HID_Init+0x17c>)
 800f962:	7819      	ldrb	r1, [r3, #0]
 800f964:	2302      	movs	r3, #2
 800f966:	2203      	movs	r2, #3
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f00b f8b6 	bl	801aada <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800f96e:	4b15      	ldr	r3, [pc, #84]	@ (800f9c4 <USBD_CUSTOM_HID_Init+0x17c>)
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	f003 020f 	and.w	r2, r3, #15
 800f976:	6879      	ldr	r1, [r7, #4]
 800f978:	4613      	mov	r3, r2
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	4413      	add	r3, r2
 800f97e:	009b      	lsls	r3, r3, #2
 800f980:	440b      	add	r3, r1
 800f982:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f986:	2201      	movs	r2, #1
 800f988:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	2200      	movs	r2, #0
 800f98e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	33b0      	adds	r3, #176	@ 0xb0
 800f99c:	009b      	lsls	r3, r3, #2
 800f99e:	4413      	add	r3, r2
 800f9a0:	685b      	ldr	r3, [r3, #4]
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800f9a6:	4b07      	ldr	r3, [pc, #28]	@ (800f9c4 <USBD_CUSTOM_HID_Init+0x17c>)
 800f9a8:	7819      	ldrb	r1, [r3, #0]
 800f9aa:	68fa      	ldr	r2, [r7, #12]
 800f9ac:	2340      	movs	r3, #64	@ 0x40
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f00b f982 	bl	801acb8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800f9b4:	2300      	movs	r3, #0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	2400012e 	.word	0x2400012e
 800f9c4:	2400012f 	.word	0x2400012f

0800f9c8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800f9d4:	4b43      	ldr	r3, [pc, #268]	@ (800fae4 <USBD_CUSTOM_HID_DeInit+0x11c>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	4619      	mov	r1, r3
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f00b f8a3 	bl	801ab26 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800f9e0:	4b40      	ldr	r3, [pc, #256]	@ (800fae4 <USBD_CUSTOM_HID_DeInit+0x11c>)
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	f003 020f 	and.w	r2, r3, #15
 800f9e8:	6879      	ldr	r1, [r7, #4]
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	4413      	add	r3, r2
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	440b      	add	r3, r1
 800f9f4:	3324      	adds	r3, #36	@ 0x24
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800f9fa:	4b3a      	ldr	r3, [pc, #232]	@ (800fae4 <USBD_CUSTOM_HID_DeInit+0x11c>)
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	f003 020f 	and.w	r2, r3, #15
 800fa02:	6879      	ldr	r1, [r7, #4]
 800fa04:	4613      	mov	r3, r2
 800fa06:	009b      	lsls	r3, r3, #2
 800fa08:	4413      	add	r3, r2
 800fa0a:	009b      	lsls	r3, r3, #2
 800fa0c:	440b      	add	r3, r1
 800fa0e:	3326      	adds	r3, #38	@ 0x26
 800fa10:	2200      	movs	r2, #0
 800fa12:	801a      	strh	r2, [r3, #0]

	// ======================================
	// 以下关闭自定义的端点
	(void)USBD_LL_CloseEP(pdev, MOUSE_EP);
 800fa14:	2182      	movs	r1, #130	@ 0x82
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f00b f885 	bl	801ab26 <USBD_LL_CloseEP>
	pdev->ep_in[MOUSE_EP & 0xFU].is_used = 0U;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	pdev->ep_in[MOUSE_EP & 0xFU].bInterval = 0U;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

	(void)USBD_LL_CloseEP(pdev, KEYBOARD_EP);
 800fa2c:	2183      	movs	r1, #131	@ 0x83
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f00b f879 	bl	801ab26 <USBD_LL_CloseEP>
	pdev->ep_in[KEYBOARD_EP & 0xFU].is_used = 0U;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2200      	movs	r2, #0
 800fa38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	pdev->ep_in[KEYBOARD_EP & 0xFU].bInterval = 0U;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	// ======================================

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800fa44:	4b28      	ldr	r3, [pc, #160]	@ (800fae8 <USBD_CUSTOM_HID_DeInit+0x120>)
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	4619      	mov	r1, r3
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f00b f86b 	bl	801ab26 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800fa50:	4b25      	ldr	r3, [pc, #148]	@ (800fae8 <USBD_CUSTOM_HID_DeInit+0x120>)
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	f003 020f 	and.w	r2, r3, #15
 800fa58:	6879      	ldr	r1, [r7, #4]
 800fa5a:	4613      	mov	r3, r2
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	4413      	add	r3, r2
 800fa60:	009b      	lsls	r3, r3, #2
 800fa62:	440b      	add	r3, r1
 800fa64:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fa68:	2200      	movs	r2, #0
 800fa6a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800fa6c:	4b1e      	ldr	r3, [pc, #120]	@ (800fae8 <USBD_CUSTOM_HID_DeInit+0x120>)
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	f003 020f 	and.w	r2, r3, #15
 800fa74:	6879      	ldr	r1, [r7, #4]
 800fa76:	4613      	mov	r3, r2
 800fa78:	009b      	lsls	r3, r3, #2
 800fa7a:	4413      	add	r3, r2
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	440b      	add	r3, r1
 800fa80:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800fa84:	2200      	movs	r2, #0
 800fa86:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	32b0      	adds	r2, #176	@ 0xb0
 800fa92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d01f      	beq.n	800fada <USBD_CUSTOM_HID_DeInit+0x112>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800faa0:	687a      	ldr	r2, [r7, #4]
 800faa2:	33b0      	adds	r3, #176	@ 0xb0
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	4413      	add	r3, r2
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	32b0      	adds	r2, #176	@ 0xb0
 800fab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fabc:	4618      	mov	r0, r3
 800fabe:	f00b f92b 	bl	801ad18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	32b0      	adds	r2, #176	@ 0xb0
 800facc:	2100      	movs	r1, #0
 800face:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2200      	movs	r2, #0
 800fad6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fada:	2300      	movs	r3, #0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	2400012e 	.word	0x2400012e
 800fae8:	2400012f 	.word	0x2400012f

0800faec <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b088      	sub	sp, #32
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	32b0      	adds	r2, #176	@ 0xb0
 800fb00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb04:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800fb06:	2300      	movs	r3, #0
 800fb08:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb12:	2300      	movs	r3, #0
 800fb14:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d101      	bne.n	800fb20 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800fb1c:	2303      	movs	r3, #3
 800fb1e:	e120      	b.n	800fd62 <USBD_CUSTOM_HID_Setup+0x276>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d056      	beq.n	800fbda <USBD_CUSTOM_HID_Setup+0xee>
 800fb2c:	2b20      	cmp	r3, #32
 800fb2e:	f040 8110 	bne.w	800fd52 <USBD_CUSTOM_HID_Setup+0x266>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	785b      	ldrb	r3, [r3, #1]
 800fb36:	3b02      	subs	r3, #2
 800fb38:	2b09      	cmp	r3, #9
 800fb3a:	d846      	bhi.n	800fbca <USBD_CUSTOM_HID_Setup+0xde>
 800fb3c:	a201      	add	r2, pc, #4	@ (adr r2, 800fb44 <USBD_CUSTOM_HID_Setup+0x58>)
 800fb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb42:	bf00      	nop
 800fb44:	0800fb9d 	.word	0x0800fb9d
 800fb48:	0800fb7b 	.word	0x0800fb7b
 800fb4c:	0800fbcb 	.word	0x0800fbcb
 800fb50:	0800fbcb 	.word	0x0800fbcb
 800fb54:	0800fbcb 	.word	0x0800fbcb
 800fb58:	0800fbcb 	.word	0x0800fbcb
 800fb5c:	0800fbcb 	.word	0x0800fbcb
 800fb60:	0800fbad 	.word	0x0800fbad
 800fb64:	0800fb8b 	.word	0x0800fb8b
 800fb68:	0800fb6d 	.word	0x0800fb6d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	885b      	ldrh	r3, [r3, #2]
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	461a      	mov	r2, r3
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 800fb78:	e02e      	b.n	800fbd8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	3340      	adds	r3, #64	@ 0x40
 800fb7e:	2201      	movs	r2, #1
 800fb80:	4619      	mov	r1, r3
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f001 fd66 	bl	8011654 <USBD_CtlSendData>
          break;
 800fb88:	e026      	b.n	800fbd8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	885b      	ldrh	r3, [r3, #2]
 800fb8e:	0a1b      	lsrs	r3, r3, #8
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	b2db      	uxtb	r3, r3
 800fb94:	461a      	mov	r2, r3
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 800fb9a:	e01d      	b.n	800fbd8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	3344      	adds	r3, #68	@ 0x44
 800fba0:	2201      	movs	r2, #1
 800fba2:	4619      	mov	r1, r3
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f001 fd55 	bl	8011654 <USBD_CtlSendData>
          break;
 800fbaa:	e015      	b.n	800fbd8 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	2201      	movs	r2, #1
 800fbb0:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800fbb2:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	88db      	ldrh	r3, [r3, #6]
 800fbb8:	2b40      	cmp	r3, #64	@ 0x40
 800fbba:	bf28      	it	cs
 800fbbc:	2340      	movcs	r3, #64	@ 0x40
 800fbbe:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f001 fd72 	bl	80116ac <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 800fbc8:	e006      	b.n	800fbd8 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 800fbca:	6839      	ldr	r1, [r7, #0]
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f001 fcc4 	bl	801155a <USBD_CtlError>
          ret = USBD_FAIL;
 800fbd2:	2303      	movs	r3, #3
 800fbd4:	75fb      	strb	r3, [r7, #23]
          break;
 800fbd6:	bf00      	nop
      }
      break;
 800fbd8:	e0c2      	b.n	800fd60 <USBD_CUSTOM_HID_Setup+0x274>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	785b      	ldrb	r3, [r3, #1]
 800fbde:	2b0b      	cmp	r3, #11
 800fbe0:	f200 80ae 	bhi.w	800fd40 <USBD_CUSTOM_HID_Setup+0x254>
 800fbe4:	a201      	add	r2, pc, #4	@ (adr r2, 800fbec <USBD_CUSTOM_HID_Setup+0x100>)
 800fbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbea:	bf00      	nop
 800fbec:	0800fc1d 	.word	0x0800fc1d
 800fbf0:	0800fd4f 	.word	0x0800fd4f
 800fbf4:	0800fd41 	.word	0x0800fd41
 800fbf8:	0800fd41 	.word	0x0800fd41
 800fbfc:	0800fd41 	.word	0x0800fd41
 800fc00:	0800fd41 	.word	0x0800fd41
 800fc04:	0800fc47 	.word	0x0800fc47
 800fc08:	0800fd41 	.word	0x0800fd41
 800fc0c:	0800fd41 	.word	0x0800fd41
 800fc10:	0800fd41 	.word	0x0800fd41
 800fc14:	0800fcef 	.word	0x0800fcef
 800fc18:	0800fd19 	.word	0x0800fd19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	2b03      	cmp	r3, #3
 800fc26:	d107      	bne.n	800fc38 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fc28:	f107 030e 	add.w	r3, r7, #14
 800fc2c:	2202      	movs	r2, #2
 800fc2e:	4619      	mov	r1, r3
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f001 fd0f 	bl	8011654 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fc36:	e08b      	b.n	800fd50 <USBD_CUSTOM_HID_Setup+0x264>
            USBD_CtlError(pdev, req);
 800fc38:	6839      	ldr	r1, [r7, #0]
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f001 fc8d 	bl	801155a <USBD_CtlError>
            ret = USBD_FAIL;
 800fc40:	2303      	movs	r3, #3
 800fc42:	75fb      	strb	r3, [r7, #23]
          break;
 800fc44:	e084      	b.n	800fd50 <USBD_CUSTOM_HID_Setup+0x264>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	885b      	ldrh	r3, [r3, #2]
 800fc4a:	0a1b      	lsrs	r3, r3, #8
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	2b22      	cmp	r3, #34	@ 0x22
 800fc50:	d12e      	bne.n	800fcb0 <USBD_CUSTOM_HID_Setup+0x1c4>
            /* len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
               pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
               */

        	  // 以下判断自定义的端点，进行setup
        	  if (req->wIndex == 0) {
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	889b      	ldrh	r3, [r3, #4]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d110      	bne.n	800fc7c <USBD_CUSTOM_HID_Setup+0x190>
        	    len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	88db      	ldrh	r3, [r3, #6]
 800fc5e:	2b22      	cmp	r3, #34	@ 0x22
 800fc60:	bf28      	it	cs
 800fc62:	2322      	movcs	r3, #34	@ 0x22
 800fc64:	83fb      	strh	r3, [r7, #30]
        	    pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	33b0      	adds	r3, #176	@ 0xb0
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	4413      	add	r3, r2
 800fc74:	685b      	ldr	r3, [r3, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	61bb      	str	r3, [r7, #24]
 800fc7a:	e027      	b.n	800fccc <USBD_CUSTOM_HID_Setup+0x1e0>
        	  } else if (req->wIndex == 1) {
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	889b      	ldrh	r3, [r3, #4]
 800fc80:	2b01      	cmp	r3, #1
 800fc82:	d108      	bne.n	800fc96 <USBD_CUSTOM_HID_Setup+0x1aa>
        	    len = MIN(USBD_CUSTOM_HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	88db      	ldrh	r3, [r3, #6]
 800fc88:	2b34      	cmp	r3, #52	@ 0x34
 800fc8a:	bf28      	it	cs
 800fc8c:	2334      	movcs	r3, #52	@ 0x34
 800fc8e:	83fb      	strh	r3, [r7, #30]
        	    pbuf = CUSTOM_HID_MouseReportDesc_FS;
 800fc90:	4b36      	ldr	r3, [pc, #216]	@ (800fd6c <USBD_CUSTOM_HID_Setup+0x280>)
 800fc92:	61bb      	str	r3, [r7, #24]
 800fc94:	e01a      	b.n	800fccc <USBD_CUSTOM_HID_Setup+0x1e0>
        	  } else if (req->wIndex == 2) {
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	889b      	ldrh	r3, [r3, #4]
 800fc9a:	2b02      	cmp	r3, #2
 800fc9c:	d116      	bne.n	800fccc <USBD_CUSTOM_HID_Setup+0x1e0>
        	    len = MIN(USBD_CUSTOM_HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	88db      	ldrh	r3, [r3, #6]
 800fca2:	2b3f      	cmp	r3, #63	@ 0x3f
 800fca4:	bf28      	it	cs
 800fca6:	233f      	movcs	r3, #63	@ 0x3f
 800fca8:	83fb      	strh	r3, [r7, #30]
        	    pbuf = CUSTOM_HID_KeyboardReportDesc_FS;
 800fcaa:	4b31      	ldr	r3, [pc, #196]	@ (800fd70 <USBD_CUSTOM_HID_Setup+0x284>)
 800fcac:	61bb      	str	r3, [r7, #24]
 800fcae:	e00d      	b.n	800fccc <USBD_CUSTOM_HID_Setup+0x1e0>
        	  }
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	885b      	ldrh	r3, [r3, #2]
 800fcb4:	0a1b      	lsrs	r3, r3, #8
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	2b21      	cmp	r3, #33	@ 0x21
 800fcba:	d107      	bne.n	800fccc <USBD_CUSTOM_HID_Setup+0x1e0>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800fcbc:	4b2d      	ldr	r3, [pc, #180]	@ (800fd74 <USBD_CUSTOM_HID_Setup+0x288>)
 800fcbe:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	88db      	ldrh	r3, [r3, #6]
 800fcc4:	2b09      	cmp	r3, #9
 800fcc6:	bf28      	it	cs
 800fcc8:	2309      	movcs	r3, #9
 800fcca:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 800fccc:	69bb      	ldr	r3, [r7, #24]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d006      	beq.n	800fce0 <USBD_CUSTOM_HID_Setup+0x1f4>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 800fcd2:	8bfb      	ldrh	r3, [r7, #30]
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	69b9      	ldr	r1, [r7, #24]
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f001 fcbb 	bl	8011654 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fcde:	e037      	b.n	800fd50 <USBD_CUSTOM_HID_Setup+0x264>
            USBD_CtlError(pdev, req);
 800fce0:	6839      	ldr	r1, [r7, #0]
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f001 fc39 	bl	801155a <USBD_CtlError>
            ret = USBD_FAIL;
 800fce8:	2303      	movs	r3, #3
 800fcea:	75fb      	strb	r3, [r7, #23]
          break;
 800fcec:	e030      	b.n	800fd50 <USBD_CUSTOM_HID_Setup+0x264>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	2b03      	cmp	r3, #3
 800fcf8:	d107      	bne.n	800fd0a <USBD_CUSTOM_HID_Setup+0x21e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	3348      	adds	r3, #72	@ 0x48
 800fcfe:	2201      	movs	r2, #1
 800fd00:	4619      	mov	r1, r3
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f001 fca6 	bl	8011654 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fd08:	e022      	b.n	800fd50 <USBD_CUSTOM_HID_Setup+0x264>
            USBD_CtlError(pdev, req);
 800fd0a:	6839      	ldr	r1, [r7, #0]
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f001 fc24 	bl	801155a <USBD_CtlError>
            ret = USBD_FAIL;
 800fd12:	2303      	movs	r3, #3
 800fd14:	75fb      	strb	r3, [r7, #23]
          break;
 800fd16:	e01b      	b.n	800fd50 <USBD_CUSTOM_HID_Setup+0x264>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	2b03      	cmp	r3, #3
 800fd22:	d106      	bne.n	800fd32 <USBD_CUSTOM_HID_Setup+0x246>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	885b      	ldrh	r3, [r3, #2]
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fd30:	e00e      	b.n	800fd50 <USBD_CUSTOM_HID_Setup+0x264>
            USBD_CtlError(pdev, req);
 800fd32:	6839      	ldr	r1, [r7, #0]
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f001 fc10 	bl	801155a <USBD_CtlError>
            ret = USBD_FAIL;
 800fd3a:	2303      	movs	r3, #3
 800fd3c:	75fb      	strb	r3, [r7, #23]
          break;
 800fd3e:	e007      	b.n	800fd50 <USBD_CUSTOM_HID_Setup+0x264>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fd40:	6839      	ldr	r1, [r7, #0]
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f001 fc09 	bl	801155a <USBD_CtlError>
          ret = USBD_FAIL;
 800fd48:	2303      	movs	r3, #3
 800fd4a:	75fb      	strb	r3, [r7, #23]
          break;
 800fd4c:	e000      	b.n	800fd50 <USBD_CUSTOM_HID_Setup+0x264>
          break;
 800fd4e:	bf00      	nop
      }
      break;
 800fd50:	e006      	b.n	800fd60 <USBD_CUSTOM_HID_Setup+0x274>

    default:
      USBD_CtlError(pdev, req);
 800fd52:	6839      	ldr	r1, [r7, #0]
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f001 fc00 	bl	801155a <USBD_CtlError>
      ret = USBD_FAIL;
 800fd5a:	2303      	movs	r3, #3
 800fd5c:	75fb      	strb	r3, [r7, #23]
      break;
 800fd5e:	bf00      	nop
  }
  return (uint8_t)ret;
 800fd60:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3720      	adds	r7, #32
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}
 800fd6a:	bf00      	nop
 800fd6c:	24000010 	.word	0x24000010
 800fd70:	24000044 	.word	0x24000044
 800fd74:	24000118 	.word	0x24000118

0800fd78 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800fd80:	2181      	movs	r1, #129	@ 0x81
 800fd82:	4815      	ldr	r0, [pc, #84]	@ (800fdd8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800fd84:	f000 fd89 	bl	801089a <USBD_GetEpDesc>
 800fd88:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800fd8a:	2101      	movs	r1, #1
 800fd8c:	4812      	ldr	r0, [pc, #72]	@ (800fdd8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800fd8e:	f000 fd84 	bl	801089a <USBD_GetEpDesc>
 800fd92:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d009      	beq.n	800fdae <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	f042 0202 	orr.w	r2, r2, #2
 800fda2:	711a      	strb	r2, [r3, #4]
 800fda4:	2200      	movs	r2, #0
 800fda6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2205      	movs	r2, #5
 800fdac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d009      	beq.n	800fdc8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f042 0202 	orr.w	r2, r2, #2
 800fdbc:	711a      	strb	r2, [r3, #4]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	2205      	movs	r2, #5
 800fdc6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	225b      	movs	r2, #91	@ 0x5b
 800fdcc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800fdce:	4b02      	ldr	r3, [pc, #8]	@ (800fdd8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3710      	adds	r7, #16
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	240000bc 	.word	0x240000bc

0800fddc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800fde4:	2181      	movs	r1, #129	@ 0x81
 800fde6:	4815      	ldr	r0, [pc, #84]	@ (800fe3c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800fde8:	f000 fd57 	bl	801089a <USBD_GetEpDesc>
 800fdec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800fdee:	2101      	movs	r1, #1
 800fdf0:	4812      	ldr	r0, [pc, #72]	@ (800fe3c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800fdf2:	f000 fd52 	bl	801089a <USBD_GetEpDesc>
 800fdf6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d009      	beq.n	800fe12 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	2200      	movs	r2, #0
 800fe02:	f042 0202 	orr.w	r2, r2, #2
 800fe06:	711a      	strb	r2, [r3, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2205      	movs	r2, #5
 800fe10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d009      	beq.n	800fe2c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	f042 0202 	orr.w	r2, r2, #2
 800fe20:	711a      	strb	r2, [r3, #4]
 800fe22:	2200      	movs	r2, #0
 800fe24:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	2205      	movs	r2, #5
 800fe2a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	225b      	movs	r2, #91	@ 0x5b
 800fe30:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800fe32:	4b02      	ldr	r3, [pc, #8]	@ (800fe3c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3710      	adds	r7, #16
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	240000bc 	.word	0x240000bc

0800fe40 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800fe48:	2181      	movs	r1, #129	@ 0x81
 800fe4a:	4815      	ldr	r0, [pc, #84]	@ (800fea0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800fe4c:	f000 fd25 	bl	801089a <USBD_GetEpDesc>
 800fe50:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800fe52:	2101      	movs	r1, #1
 800fe54:	4812      	ldr	r0, [pc, #72]	@ (800fea0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800fe56:	f000 fd20 	bl	801089a <USBD_GetEpDesc>
 800fe5a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d009      	beq.n	800fe76 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	2200      	movs	r2, #0
 800fe66:	f042 0202 	orr.w	r2, r2, #2
 800fe6a:	711a      	strb	r2, [r3, #4]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2205      	movs	r2, #5
 800fe74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d009      	beq.n	800fe90 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f042 0202 	orr.w	r2, r2, #2
 800fe84:	711a      	strb	r2, [r3, #4]
 800fe86:	2200      	movs	r2, #0
 800fe88:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	2205      	movs	r2, #5
 800fe8e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	225b      	movs	r2, #91	@ 0x5b
 800fe94:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800fe96:	4b02      	ldr	r3, [pc, #8]	@ (800fea0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3710      	adds	r7, #16
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}
 800fea0:	240000bc 	.word	0x240000bc

0800fea4 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b083      	sub	sp, #12
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	460b      	mov	r3, r1
 800feae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	32b0      	adds	r2, #176	@ 0xb0
 800feba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800febe:	2200      	movs	r2, #0
 800fec0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 800fec4:	2300      	movs	r3, #0
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	370c      	adds	r7, #12
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr

0800fed2 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fed2:	b580      	push	{r7, lr}
 800fed4:	b084      	sub	sp, #16
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
 800feda:	460b      	mov	r3, r1
 800fedc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	32b0      	adds	r2, #176	@ 0xb0
 800fee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d101      	bne.n	800fef4 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fef0:	2303      	movs	r3, #3
 800fef2:	e017      	b.n	800ff24 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	32b0      	adds	r2, #176	@ 0xb0
 800fefe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff02:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	33b0      	adds	r3, #176	@ 0xb0
 800ff0e:	009b      	lsls	r3, r3, #2
 800ff10:	4413      	add	r3, r2
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	68fa      	ldr	r2, [r7, #12]
 800ff18:	7810      	ldrb	r0, [r2, #0]
 800ff1a:	68fa      	ldr	r2, [r7, #12]
 800ff1c:	7852      	ldrb	r2, [r2, #1]
 800ff1e:	4611      	mov	r1, r2
 800ff20:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800ff22:	2300      	movs	r3, #0
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	3710      	adds	r7, #16
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}

0800ff2c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b084      	sub	sp, #16
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	32b0      	adds	r2, #176	@ 0xb0
 800ff3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d101      	bne.n	800ff4a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ff46:	2303      	movs	r3, #3
 800ff48:	e00f      	b.n	800ff6a <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	32b0      	adds	r2, #176	@ 0xb0
 800ff54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff58:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800ff5a:	4b06      	ldr	r3, [pc, #24]	@ (800ff74 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 800ff5c:	7819      	ldrb	r1, [r3, #0]
 800ff5e:	68fa      	ldr	r2, [r7, #12]
 800ff60:	2340      	movs	r3, #64	@ 0x40
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f00a fea8 	bl	801acb8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800ff68:	2300      	movs	r3, #0
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3710      	adds	r7, #16
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	2400012f 	.word	0x2400012f

0800ff78 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	32b0      	adds	r2, #176	@ 0xb0
 800ff8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff8e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d101      	bne.n	800ff9a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ff96:	2303      	movs	r3, #3
 800ff98:	e016      	b.n	800ffc8 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	d111      	bne.n	800ffc6 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	33b0      	adds	r3, #176	@ 0xb0
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	4413      	add	r3, r2
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	68db      	ldr	r3, [r3, #12]
 800ffb4:	68fa      	ldr	r2, [r7, #12]
 800ffb6:	7810      	ldrb	r0, [r2, #0]
 800ffb8:	68fa      	ldr	r2, [r7, #12]
 800ffba:	7852      	ldrb	r2, [r2, #1]
 800ffbc:	4611      	mov	r1, r2
 800ffbe:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 800ffc6:	2300      	movs	r3, #0
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3710      	adds	r7, #16
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b083      	sub	sp, #12
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	220a      	movs	r2, #10
 800ffdc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800ffde:	4b03      	ldr	r3, [pc, #12]	@ (800ffec <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr
 800ffec:	24000124 	.word	0x24000124

0800fff0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d101      	bne.n	8010004 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010000:	2303      	movs	r3, #3
 8010002:	e009      	b.n	8010018 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	33b0      	adds	r3, #176	@ 0xb0
 801000e:	009b      	lsls	r3, r3, #2
 8010010:	4413      	add	r3, r2
 8010012:	683a      	ldr	r2, [r7, #0]
 8010014:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010016:	2300      	movs	r3, #0
}
 8010018:	4618      	mov	r0, r3
 801001a:	370c      	adds	r7, #12
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <USBD_KEYBOADR_HID_SendReport>:
/**
  * @}
  */

// ========================= Send report ===================================
uint8_t USBD_KEYBOADR_HID_SendReport(USBD_HandleTypeDef  *pdev, uint8_t *report, uint16_t len) {
 8010024:	b580      	push	{r7, lr}
 8010026:	b086      	sub	sp, #24
 8010028:	af00      	add	r7, sp, #0
 801002a:	60f8      	str	r0, [r7, #12]
 801002c:	60b9      	str	r1, [r7, #8]
 801002e:	4613      	mov	r3, r2
 8010030:	80fb      	strh	r3, [r7, #6]

    USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010038:	617b      	str	r3, [r7, #20]

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010040:	b2db      	uxtb	r3, r3
 8010042:	2b03      	cmp	r3, #3
 8010044:	d111      	bne.n	801006a <USBD_KEYBOADR_HID_SendReport+0x46>
        if (hhid->state == CUSTOM_HID_IDLE) {
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801004c:	2b00      	cmp	r3, #0
 801004e:	d10a      	bne.n	8010066 <USBD_KEYBOADR_HID_SendReport+0x42>
            hhid->state = CUSTOM_HID_BUSY;
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	2201      	movs	r2, #1
 8010054:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            USBD_LL_Transmit(pdev, KEYBOARD_EP, report, len);
 8010058:	88fb      	ldrh	r3, [r7, #6]
 801005a:	68ba      	ldr	r2, [r7, #8]
 801005c:	2183      	movs	r1, #131	@ 0x83
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f00a fe09 	bl	801ac76 <USBD_LL_Transmit>
 8010064:	e001      	b.n	801006a <USBD_KEYBOADR_HID_SendReport+0x46>
        } else {
            return USBD_BUSY;
 8010066:	2301      	movs	r3, #1
 8010068:	e000      	b.n	801006c <USBD_KEYBOADR_HID_SendReport+0x48>
        }
    }
    return USBD_OK;
 801006a:	2300      	movs	r3, #0
}
 801006c:	4618      	mov	r0, r3
 801006e:	3718      	adds	r7, #24
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <USBD_MOUSE_HID_SendReport>:

// ========================= Send report ===================================
uint8_t USBD_MOUSE_HID_SendReport(USBD_HandleTypeDef  *pdev, uint8_t *report, uint16_t len) {
 8010074:	b580      	push	{r7, lr}
 8010076:	b086      	sub	sp, #24
 8010078:	af00      	add	r7, sp, #0
 801007a:	60f8      	str	r0, [r7, #12]
 801007c:	60b9      	str	r1, [r7, #8]
 801007e:	4613      	mov	r3, r2
 8010080:	80fb      	strh	r3, [r7, #6]

    USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010088:	617b      	str	r3, [r7, #20]

    if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010090:	b2db      	uxtb	r3, r3
 8010092:	2b03      	cmp	r3, #3
 8010094:	d111      	bne.n	80100ba <USBD_MOUSE_HID_SendReport+0x46>
        if (hhid->state == CUSTOM_HID_IDLE) {
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801009c:	2b00      	cmp	r3, #0
 801009e:	d10a      	bne.n	80100b6 <USBD_MOUSE_HID_SendReport+0x42>
            hhid->state = CUSTOM_HID_BUSY;
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	2201      	movs	r2, #1
 80100a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            USBD_LL_Transmit(pdev, MOUSE_EP, report, len);
 80100a8:	88fb      	ldrh	r3, [r7, #6]
 80100aa:	68ba      	ldr	r2, [r7, #8]
 80100ac:	2182      	movs	r1, #130	@ 0x82
 80100ae:	68f8      	ldr	r0, [r7, #12]
 80100b0:	f00a fde1 	bl	801ac76 <USBD_LL_Transmit>
 80100b4:	e001      	b.n	80100ba <USBD_MOUSE_HID_SendReport+0x46>
        } else {
            return USBD_BUSY;
 80100b6:	2301      	movs	r3, #1
 80100b8:	e000      	b.n	80100bc <USBD_MOUSE_HID_SendReport+0x48>
        }
    }
    return USBD_OK;
 80100ba:	2300      	movs	r3, #0
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3718      	adds	r7, #24
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b086      	sub	sp, #24
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	4613      	mov	r3, r2
 80100d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d10a      	bne.n	80100ee <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80100d8:	4817      	ldr	r0, [pc, #92]	@ (8010138 <USBD_Init+0x74>)
 80100da:	f00b fb2b 	bl	801b734 <iprintf>
 80100de:	4817      	ldr	r0, [pc, #92]	@ (801013c <USBD_Init+0x78>)
 80100e0:	f00b fb28 	bl	801b734 <iprintf>
 80100e4:	200a      	movs	r0, #10
 80100e6:	f00b fb37 	bl	801b758 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80100ea:	2303      	movs	r3, #3
 80100ec:	e01f      	b.n	801012e <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2200      	movs	r2, #0
 80100f2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	2200      	movs	r2, #0
 80100fa:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2200      	movs	r2, #0
 8010102:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d003      	beq.n	8010114 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	68ba      	ldr	r2, [r7, #8]
 8010110:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	2201      	movs	r2, #1
 8010118:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	79fa      	ldrb	r2, [r7, #7]
 8010120:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010122:	68f8      	ldr	r0, [r7, #12]
 8010124:	f00a fc64 	bl	801a9f0 <USBD_LL_Init>
 8010128:	4603      	mov	r3, r0
 801012a:	75fb      	strb	r3, [r7, #23]

  return ret;
 801012c:	7dfb      	ldrb	r3, [r7, #23]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3718      	adds	r7, #24
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	0801c634 	.word	0x0801c634
 801013c:	0801c63c 	.word	0x0801c63c

08010140 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801014a:	2300      	movs	r3, #0
 801014c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d10a      	bne.n	801016a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8010154:	481a      	ldr	r0, [pc, #104]	@ (80101c0 <USBD_RegisterClass+0x80>)
 8010156:	f00b faed 	bl	801b734 <iprintf>
 801015a:	481a      	ldr	r0, [pc, #104]	@ (80101c4 <USBD_RegisterClass+0x84>)
 801015c:	f00b faea 	bl	801b734 <iprintf>
 8010160:	200a      	movs	r0, #10
 8010162:	f00b faf9 	bl	801b758 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010166:	2303      	movs	r3, #3
 8010168:	e025      	b.n	80101b6 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	683a      	ldr	r2, [r7, #0]
 801016e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	32ae      	adds	r2, #174	@ 0xae
 801017c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010182:	2b00      	cmp	r3, #0
 8010184:	d00f      	beq.n	80101a6 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	32ae      	adds	r2, #174	@ 0xae
 8010190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010196:	f107 020e 	add.w	r2, r7, #14
 801019a:	4610      	mov	r0, r2
 801019c:	4798      	blx	r3
 801019e:	4602      	mov	r2, r0
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80101ac:	1c5a      	adds	r2, r3, #1
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80101b4:	2300      	movs	r3, #0
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3710      	adds	r7, #16
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	0801c634 	.word	0x0801c634
 80101c4:	0801c654 	.word	0x0801c654

080101c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f00a fc67 	bl	801aaa4 <USBD_LL_Start>
 80101d6:	4603      	mov	r3, r0
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3708      	adds	r7, #8
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80101e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	370c      	adds	r7, #12
 80101ee:	46bd      	mov	sp, r7
 80101f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f4:	4770      	bx	lr

080101f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b084      	sub	sp, #16
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
 80101fe:	460b      	mov	r3, r1
 8010200:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010202:	2300      	movs	r3, #0
 8010204:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801020c:	2b00      	cmp	r3, #0
 801020e:	d009      	beq.n	8010224 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	78fa      	ldrb	r2, [r7, #3]
 801021a:	4611      	mov	r1, r2
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	4798      	blx	r3
 8010220:	4603      	mov	r3, r0
 8010222:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010224:	7bfb      	ldrb	r3, [r7, #15]
}
 8010226:	4618      	mov	r0, r3
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b084      	sub	sp, #16
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
 8010236:	460b      	mov	r3, r1
 8010238:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801023a:	2300      	movs	r3, #0
 801023c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	78fa      	ldrb	r2, [r7, #3]
 8010248:	4611      	mov	r1, r2
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	4798      	blx	r3
 801024e:	4603      	mov	r3, r0
 8010250:	2b00      	cmp	r3, #0
 8010252:	d001      	beq.n	8010258 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010254:	2303      	movs	r3, #3
 8010256:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010258:	7bfb      	ldrb	r3, [r7, #15]
}
 801025a:	4618      	mov	r0, r3
 801025c:	3710      	adds	r7, #16
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}

08010262 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010262:	b580      	push	{r7, lr}
 8010264:	b084      	sub	sp, #16
 8010266:	af00      	add	r7, sp, #0
 8010268:	6078      	str	r0, [r7, #4]
 801026a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010272:	6839      	ldr	r1, [r7, #0]
 8010274:	4618      	mov	r0, r3
 8010276:	f001 f936 	bl	80114e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2201      	movs	r2, #1
 801027e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010288:	461a      	mov	r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010296:	f003 031f 	and.w	r3, r3, #31
 801029a:	2b02      	cmp	r3, #2
 801029c:	d01a      	beq.n	80102d4 <USBD_LL_SetupStage+0x72>
 801029e:	2b02      	cmp	r3, #2
 80102a0:	d822      	bhi.n	80102e8 <USBD_LL_SetupStage+0x86>
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d002      	beq.n	80102ac <USBD_LL_SetupStage+0x4a>
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d00a      	beq.n	80102c0 <USBD_LL_SetupStage+0x5e>
 80102aa:	e01d      	b.n	80102e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80102b2:	4619      	mov	r1, r3
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f000 fb63 	bl	8010980 <USBD_StdDevReq>
 80102ba:	4603      	mov	r3, r0
 80102bc:	73fb      	strb	r3, [r7, #15]
      break;
 80102be:	e020      	b.n	8010302 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80102c6:	4619      	mov	r1, r3
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f000 fbcb 	bl	8010a64 <USBD_StdItfReq>
 80102ce:	4603      	mov	r3, r0
 80102d0:	73fb      	strb	r3, [r7, #15]
      break;
 80102d2:	e016      	b.n	8010302 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80102da:	4619      	mov	r1, r3
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f000 fc2d 	bl	8010b3c <USBD_StdEPReq>
 80102e2:	4603      	mov	r3, r0
 80102e4:	73fb      	strb	r3, [r7, #15]
      break;
 80102e6:	e00c      	b.n	8010302 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80102ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	4619      	mov	r1, r3
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f00a fc34 	bl	801ab64 <USBD_LL_StallEP>
 80102fc:	4603      	mov	r3, r0
 80102fe:	73fb      	strb	r3, [r7, #15]
      break;
 8010300:	bf00      	nop
  }

  return ret;
 8010302:	7bfb      	ldrb	r3, [r7, #15]
}
 8010304:	4618      	mov	r0, r3
 8010306:	3710      	adds	r7, #16
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b086      	sub	sp, #24
 8010310:	af00      	add	r7, sp, #0
 8010312:	60f8      	str	r0, [r7, #12]
 8010314:	460b      	mov	r3, r1
 8010316:	607a      	str	r2, [r7, #4]
 8010318:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801031a:	2300      	movs	r3, #0
 801031c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801031e:	7afb      	ldrb	r3, [r7, #11]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d16e      	bne.n	8010402 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801032a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010332:	2b03      	cmp	r3, #3
 8010334:	f040 8098 	bne.w	8010468 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	689a      	ldr	r2, [r3, #8]
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	429a      	cmp	r2, r3
 8010342:	d913      	bls.n	801036c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	689a      	ldr	r2, [r3, #8]
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	68db      	ldr	r3, [r3, #12]
 801034c:	1ad2      	subs	r2, r2, r3
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	68da      	ldr	r2, [r3, #12]
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	689b      	ldr	r3, [r3, #8]
 801035a:	4293      	cmp	r3, r2
 801035c:	bf28      	it	cs
 801035e:	4613      	movcs	r3, r2
 8010360:	461a      	mov	r2, r3
 8010362:	6879      	ldr	r1, [r7, #4]
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f001 f9be 	bl	80116e6 <USBD_CtlContinueRx>
 801036a:	e07d      	b.n	8010468 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010372:	f003 031f 	and.w	r3, r3, #31
 8010376:	2b02      	cmp	r3, #2
 8010378:	d014      	beq.n	80103a4 <USBD_LL_DataOutStage+0x98>
 801037a:	2b02      	cmp	r3, #2
 801037c:	d81d      	bhi.n	80103ba <USBD_LL_DataOutStage+0xae>
 801037e:	2b00      	cmp	r3, #0
 8010380:	d002      	beq.n	8010388 <USBD_LL_DataOutStage+0x7c>
 8010382:	2b01      	cmp	r3, #1
 8010384:	d003      	beq.n	801038e <USBD_LL_DataOutStage+0x82>
 8010386:	e018      	b.n	80103ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010388:	2300      	movs	r3, #0
 801038a:	75bb      	strb	r3, [r7, #22]
            break;
 801038c:	e018      	b.n	80103c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010394:	b2db      	uxtb	r3, r3
 8010396:	4619      	mov	r1, r3
 8010398:	68f8      	ldr	r0, [r7, #12]
 801039a:	f000 fa64 	bl	8010866 <USBD_CoreFindIF>
 801039e:	4603      	mov	r3, r0
 80103a0:	75bb      	strb	r3, [r7, #22]
            break;
 80103a2:	e00d      	b.n	80103c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	4619      	mov	r1, r3
 80103ae:	68f8      	ldr	r0, [r7, #12]
 80103b0:	f000 fa66 	bl	8010880 <USBD_CoreFindEP>
 80103b4:	4603      	mov	r3, r0
 80103b6:	75bb      	strb	r3, [r7, #22]
            break;
 80103b8:	e002      	b.n	80103c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80103ba:	2300      	movs	r3, #0
 80103bc:	75bb      	strb	r3, [r7, #22]
            break;
 80103be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80103c0:	7dbb      	ldrb	r3, [r7, #22]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d119      	bne.n	80103fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	2b03      	cmp	r3, #3
 80103d0:	d113      	bne.n	80103fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80103d2:	7dba      	ldrb	r2, [r7, #22]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	32ae      	adds	r2, #174	@ 0xae
 80103d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103dc:	691b      	ldr	r3, [r3, #16]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d00b      	beq.n	80103fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80103e2:	7dba      	ldrb	r2, [r7, #22]
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80103ea:	7dba      	ldrb	r2, [r7, #22]
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	32ae      	adds	r2, #174	@ 0xae
 80103f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103f4:	691b      	ldr	r3, [r3, #16]
 80103f6:	68f8      	ldr	r0, [r7, #12]
 80103f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80103fa:	68f8      	ldr	r0, [r7, #12]
 80103fc:	f001 f984 	bl	8011708 <USBD_CtlSendStatus>
 8010400:	e032      	b.n	8010468 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010402:	7afb      	ldrb	r3, [r7, #11]
 8010404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010408:	b2db      	uxtb	r3, r3
 801040a:	4619      	mov	r1, r3
 801040c:	68f8      	ldr	r0, [r7, #12]
 801040e:	f000 fa37 	bl	8010880 <USBD_CoreFindEP>
 8010412:	4603      	mov	r3, r0
 8010414:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010416:	7dbb      	ldrb	r3, [r7, #22]
 8010418:	2bff      	cmp	r3, #255	@ 0xff
 801041a:	d025      	beq.n	8010468 <USBD_LL_DataOutStage+0x15c>
 801041c:	7dbb      	ldrb	r3, [r7, #22]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d122      	bne.n	8010468 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010428:	b2db      	uxtb	r3, r3
 801042a:	2b03      	cmp	r3, #3
 801042c:	d117      	bne.n	801045e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801042e:	7dba      	ldrb	r2, [r7, #22]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	32ae      	adds	r2, #174	@ 0xae
 8010434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010438:	699b      	ldr	r3, [r3, #24]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d00f      	beq.n	801045e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801043e:	7dba      	ldrb	r2, [r7, #22]
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010446:	7dba      	ldrb	r2, [r7, #22]
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	32ae      	adds	r2, #174	@ 0xae
 801044c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010450:	699b      	ldr	r3, [r3, #24]
 8010452:	7afa      	ldrb	r2, [r7, #11]
 8010454:	4611      	mov	r1, r2
 8010456:	68f8      	ldr	r0, [r7, #12]
 8010458:	4798      	blx	r3
 801045a:	4603      	mov	r3, r0
 801045c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801045e:	7dfb      	ldrb	r3, [r7, #23]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d001      	beq.n	8010468 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010464:	7dfb      	ldrb	r3, [r7, #23]
 8010466:	e000      	b.n	801046a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010468:	2300      	movs	r3, #0
}
 801046a:	4618      	mov	r0, r3
 801046c:	3718      	adds	r7, #24
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}

08010472 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010472:	b580      	push	{r7, lr}
 8010474:	b086      	sub	sp, #24
 8010476:	af00      	add	r7, sp, #0
 8010478:	60f8      	str	r0, [r7, #12]
 801047a:	460b      	mov	r3, r1
 801047c:	607a      	str	r2, [r7, #4]
 801047e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010480:	7afb      	ldrb	r3, [r7, #11]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d16f      	bne.n	8010566 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	3314      	adds	r3, #20
 801048a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010492:	2b02      	cmp	r3, #2
 8010494:	d15a      	bne.n	801054c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	689a      	ldr	r2, [r3, #8]
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	68db      	ldr	r3, [r3, #12]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d914      	bls.n	80104cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	689a      	ldr	r2, [r3, #8]
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	68db      	ldr	r3, [r3, #12]
 80104aa:	1ad2      	subs	r2, r2, r3
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	689b      	ldr	r3, [r3, #8]
 80104b4:	461a      	mov	r2, r3
 80104b6:	6879      	ldr	r1, [r7, #4]
 80104b8:	68f8      	ldr	r0, [r7, #12]
 80104ba:	f001 f8e6 	bl	801168a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80104be:	2300      	movs	r3, #0
 80104c0:	2200      	movs	r2, #0
 80104c2:	2100      	movs	r1, #0
 80104c4:	68f8      	ldr	r0, [r7, #12]
 80104c6:	f00a fbf7 	bl	801acb8 <USBD_LL_PrepareReceive>
 80104ca:	e03f      	b.n	801054c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	68da      	ldr	r2, [r3, #12]
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	689b      	ldr	r3, [r3, #8]
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d11c      	bne.n	8010512 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	685a      	ldr	r2, [r3, #4]
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d316      	bcc.n	8010512 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	685a      	ldr	r2, [r3, #4]
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d20f      	bcs.n	8010512 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80104f2:	2200      	movs	r2, #0
 80104f4:	2100      	movs	r1, #0
 80104f6:	68f8      	ldr	r0, [r7, #12]
 80104f8:	f001 f8c7 	bl	801168a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2200      	movs	r2, #0
 8010500:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010504:	2300      	movs	r3, #0
 8010506:	2200      	movs	r2, #0
 8010508:	2100      	movs	r1, #0
 801050a:	68f8      	ldr	r0, [r7, #12]
 801050c:	f00a fbd4 	bl	801acb8 <USBD_LL_PrepareReceive>
 8010510:	e01c      	b.n	801054c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010518:	b2db      	uxtb	r3, r3
 801051a:	2b03      	cmp	r3, #3
 801051c:	d10f      	bne.n	801053e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010524:	68db      	ldr	r3, [r3, #12]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d009      	beq.n	801053e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2200      	movs	r2, #0
 801052e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010538:	68db      	ldr	r3, [r3, #12]
 801053a:	68f8      	ldr	r0, [r7, #12]
 801053c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801053e:	2180      	movs	r1, #128	@ 0x80
 8010540:	68f8      	ldr	r0, [r7, #12]
 8010542:	f00a fb0f 	bl	801ab64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010546:	68f8      	ldr	r0, [r7, #12]
 8010548:	f001 f8f1 	bl	801172e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010552:	2b00      	cmp	r3, #0
 8010554:	d03a      	beq.n	80105cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010556:	68f8      	ldr	r0, [r7, #12]
 8010558:	f7ff fe42 	bl	80101e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2200      	movs	r2, #0
 8010560:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010564:	e032      	b.n	80105cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010566:	7afb      	ldrb	r3, [r7, #11]
 8010568:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801056c:	b2db      	uxtb	r3, r3
 801056e:	4619      	mov	r1, r3
 8010570:	68f8      	ldr	r0, [r7, #12]
 8010572:	f000 f985 	bl	8010880 <USBD_CoreFindEP>
 8010576:	4603      	mov	r3, r0
 8010578:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801057a:	7dfb      	ldrb	r3, [r7, #23]
 801057c:	2bff      	cmp	r3, #255	@ 0xff
 801057e:	d025      	beq.n	80105cc <USBD_LL_DataInStage+0x15a>
 8010580:	7dfb      	ldrb	r3, [r7, #23]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d122      	bne.n	80105cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801058c:	b2db      	uxtb	r3, r3
 801058e:	2b03      	cmp	r3, #3
 8010590:	d11c      	bne.n	80105cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010592:	7dfa      	ldrb	r2, [r7, #23]
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	32ae      	adds	r2, #174	@ 0xae
 8010598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801059c:	695b      	ldr	r3, [r3, #20]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d014      	beq.n	80105cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80105a2:	7dfa      	ldrb	r2, [r7, #23]
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80105aa:	7dfa      	ldrb	r2, [r7, #23]
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	32ae      	adds	r2, #174	@ 0xae
 80105b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105b4:	695b      	ldr	r3, [r3, #20]
 80105b6:	7afa      	ldrb	r2, [r7, #11]
 80105b8:	4611      	mov	r1, r2
 80105ba:	68f8      	ldr	r0, [r7, #12]
 80105bc:	4798      	blx	r3
 80105be:	4603      	mov	r3, r0
 80105c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80105c2:	7dbb      	ldrb	r3, [r7, #22]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d001      	beq.n	80105cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80105c8:	7dbb      	ldrb	r3, [r7, #22]
 80105ca:	e000      	b.n	80105ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80105cc:	2300      	movs	r3, #0
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3718      	adds	r7, #24
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b084      	sub	sp, #16
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80105de:	2300      	movs	r3, #0
 80105e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2201      	movs	r2, #1
 80105e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2200      	movs	r2, #0
 80105ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2200      	movs	r2, #0
 80105f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2200      	movs	r2, #0
 80105fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2200      	movs	r2, #0
 8010604:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801060e:	2b00      	cmp	r3, #0
 8010610:	d014      	beq.n	801063c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d00e      	beq.n	801063c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	687a      	ldr	r2, [r7, #4]
 8010628:	6852      	ldr	r2, [r2, #4]
 801062a:	b2d2      	uxtb	r2, r2
 801062c:	4611      	mov	r1, r2
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	4798      	blx	r3
 8010632:	4603      	mov	r3, r0
 8010634:	2b00      	cmp	r3, #0
 8010636:	d001      	beq.n	801063c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010638:	2303      	movs	r3, #3
 801063a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801063c:	2340      	movs	r3, #64	@ 0x40
 801063e:	2200      	movs	r2, #0
 8010640:	2100      	movs	r1, #0
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f00a fa49 	bl	801aada <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2201      	movs	r2, #1
 801064c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2240      	movs	r2, #64	@ 0x40
 8010654:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010658:	2340      	movs	r3, #64	@ 0x40
 801065a:	2200      	movs	r2, #0
 801065c:	2180      	movs	r1, #128	@ 0x80
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f00a fa3b 	bl	801aada <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2201      	movs	r2, #1
 8010668:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2240      	movs	r2, #64	@ 0x40
 801066e:	621a      	str	r2, [r3, #32]

  return ret;
 8010670:	7bfb      	ldrb	r3, [r7, #15]
}
 8010672:	4618      	mov	r0, r3
 8010674:	3710      	adds	r7, #16
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}

0801067a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801067a:	b480      	push	{r7}
 801067c:	b083      	sub	sp, #12
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
 8010682:	460b      	mov	r3, r1
 8010684:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	78fa      	ldrb	r2, [r7, #3]
 801068a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801068c:	2300      	movs	r3, #0
}
 801068e:	4618      	mov	r0, r3
 8010690:	370c      	adds	r7, #12
 8010692:	46bd      	mov	sp, r7
 8010694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010698:	4770      	bx	lr

0801069a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801069a:	b480      	push	{r7}
 801069c:	b083      	sub	sp, #12
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106a8:	b2db      	uxtb	r3, r3
 80106aa:	2b04      	cmp	r3, #4
 80106ac:	d006      	beq.n	80106bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106b4:	b2da      	uxtb	r2, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2204      	movs	r2, #4
 80106c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80106c4:	2300      	movs	r3, #0
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	370c      	adds	r7, #12
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr

080106d2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80106d2:	b480      	push	{r7}
 80106d4:	b083      	sub	sp, #12
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	2b04      	cmp	r3, #4
 80106e4:	d106      	bne.n	80106f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80106ec:	b2da      	uxtb	r2, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80106f4:	2300      	movs	r3, #0
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	370c      	adds	r7, #12
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr

08010702 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b082      	sub	sp, #8
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010710:	b2db      	uxtb	r3, r3
 8010712:	2b03      	cmp	r3, #3
 8010714:	d110      	bne.n	8010738 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801071c:	2b00      	cmp	r3, #0
 801071e:	d00b      	beq.n	8010738 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010726:	69db      	ldr	r3, [r3, #28]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d005      	beq.n	8010738 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010732:	69db      	ldr	r3, [r3, #28]
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010738:	2300      	movs	r3, #0
}
 801073a:	4618      	mov	r0, r3
 801073c:	3708      	adds	r7, #8
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}

08010742 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010742:	b580      	push	{r7, lr}
 8010744:	b082      	sub	sp, #8
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
 801074a:	460b      	mov	r3, r1
 801074c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	32ae      	adds	r2, #174	@ 0xae
 8010758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d101      	bne.n	8010764 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010760:	2303      	movs	r3, #3
 8010762:	e01c      	b.n	801079e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801076a:	b2db      	uxtb	r3, r3
 801076c:	2b03      	cmp	r3, #3
 801076e:	d115      	bne.n	801079c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	32ae      	adds	r2, #174	@ 0xae
 801077a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801077e:	6a1b      	ldr	r3, [r3, #32]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d00b      	beq.n	801079c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	32ae      	adds	r2, #174	@ 0xae
 801078e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010792:	6a1b      	ldr	r3, [r3, #32]
 8010794:	78fa      	ldrb	r2, [r7, #3]
 8010796:	4611      	mov	r1, r2
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801079c:	2300      	movs	r3, #0
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3708      	adds	r7, #8
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}

080107a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80107a6:	b580      	push	{r7, lr}
 80107a8:	b082      	sub	sp, #8
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	6078      	str	r0, [r7, #4]
 80107ae:	460b      	mov	r3, r1
 80107b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	32ae      	adds	r2, #174	@ 0xae
 80107bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d101      	bne.n	80107c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80107c4:	2303      	movs	r3, #3
 80107c6:	e01c      	b.n	8010802 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80107ce:	b2db      	uxtb	r3, r3
 80107d0:	2b03      	cmp	r3, #3
 80107d2:	d115      	bne.n	8010800 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	32ae      	adds	r2, #174	@ 0xae
 80107de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d00b      	beq.n	8010800 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	32ae      	adds	r2, #174	@ 0xae
 80107f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107f8:	78fa      	ldrb	r2, [r7, #3]
 80107fa:	4611      	mov	r1, r2
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010800:	2300      	movs	r3, #0
}
 8010802:	4618      	mov	r0, r3
 8010804:	3708      	adds	r7, #8
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}

0801080a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801080a:	b480      	push	{r7}
 801080c:	b083      	sub	sp, #12
 801080e:	af00      	add	r7, sp, #0
 8010810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010812:	2300      	movs	r3, #0
}
 8010814:	4618      	mov	r0, r3
 8010816:	370c      	adds	r7, #12
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr

08010820 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b084      	sub	sp, #16
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010828:	2300      	movs	r3, #0
 801082a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2201      	movs	r2, #1
 8010830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801083a:	2b00      	cmp	r3, #0
 801083c:	d00e      	beq.n	801085c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	6852      	ldr	r2, [r2, #4]
 801084a:	b2d2      	uxtb	r2, r2
 801084c:	4611      	mov	r1, r2
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	4798      	blx	r3
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d001      	beq.n	801085c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010858:	2303      	movs	r3, #3
 801085a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801085c:	7bfb      	ldrb	r3, [r7, #15]
}
 801085e:	4618      	mov	r0, r3
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}

08010866 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010866:	b480      	push	{r7}
 8010868:	b083      	sub	sp, #12
 801086a:	af00      	add	r7, sp, #0
 801086c:	6078      	str	r0, [r7, #4]
 801086e:	460b      	mov	r3, r1
 8010870:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010872:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010874:	4618      	mov	r0, r3
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010880:	b480      	push	{r7}
 8010882:	b083      	sub	sp, #12
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	460b      	mov	r3, r1
 801088a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801088c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801088e:	4618      	mov	r0, r3
 8010890:	370c      	adds	r7, #12
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr

0801089a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801089a:	b580      	push	{r7, lr}
 801089c:	b086      	sub	sp, #24
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
 80108a2:	460b      	mov	r3, r1
 80108a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80108ae:	2300      	movs	r3, #0
 80108b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	885b      	ldrh	r3, [r3, #2]
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	68fa      	ldr	r2, [r7, #12]
 80108ba:	7812      	ldrb	r2, [r2, #0]
 80108bc:	4293      	cmp	r3, r2
 80108be:	d91f      	bls.n	8010900 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80108c6:	e013      	b.n	80108f0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80108c8:	f107 030a 	add.w	r3, r7, #10
 80108cc:	4619      	mov	r1, r3
 80108ce:	6978      	ldr	r0, [r7, #20]
 80108d0:	f000 f81b 	bl	801090a <USBD_GetNextDesc>
 80108d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	785b      	ldrb	r3, [r3, #1]
 80108da:	2b05      	cmp	r3, #5
 80108dc:	d108      	bne.n	80108f0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	789b      	ldrb	r3, [r3, #2]
 80108e6:	78fa      	ldrb	r2, [r7, #3]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d008      	beq.n	80108fe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80108ec:	2300      	movs	r3, #0
 80108ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	885b      	ldrh	r3, [r3, #2]
 80108f4:	b29a      	uxth	r2, r3
 80108f6:	897b      	ldrh	r3, [r7, #10]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d8e5      	bhi.n	80108c8 <USBD_GetEpDesc+0x2e>
 80108fc:	e000      	b.n	8010900 <USBD_GetEpDesc+0x66>
          break;
 80108fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010900:	693b      	ldr	r3, [r7, #16]
}
 8010902:	4618      	mov	r0, r3
 8010904:	3718      	adds	r7, #24
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}

0801090a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801090a:	b480      	push	{r7}
 801090c:	b085      	sub	sp, #20
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
 8010912:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	881b      	ldrh	r3, [r3, #0]
 801091c:	68fa      	ldr	r2, [r7, #12]
 801091e:	7812      	ldrb	r2, [r2, #0]
 8010920:	4413      	add	r3, r2
 8010922:	b29a      	uxth	r2, r3
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	461a      	mov	r2, r3
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	4413      	add	r3, r2
 8010932:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010934:	68fb      	ldr	r3, [r7, #12]
}
 8010936:	4618      	mov	r0, r3
 8010938:	3714      	adds	r7, #20
 801093a:	46bd      	mov	sp, r7
 801093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010940:	4770      	bx	lr

08010942 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010942:	b480      	push	{r7}
 8010944:	b087      	sub	sp, #28
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	781b      	ldrb	r3, [r3, #0]
 8010952:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	3301      	adds	r3, #1
 8010958:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010960:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010964:	021b      	lsls	r3, r3, #8
 8010966:	b21a      	sxth	r2, r3
 8010968:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801096c:	4313      	orrs	r3, r2
 801096e:	b21b      	sxth	r3, r3
 8010970:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010972:	89fb      	ldrh	r3, [r7, #14]
}
 8010974:	4618      	mov	r0, r3
 8010976:	371c      	adds	r7, #28
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801098a:	2300      	movs	r3, #0
 801098c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010996:	2b40      	cmp	r3, #64	@ 0x40
 8010998:	d005      	beq.n	80109a6 <USBD_StdDevReq+0x26>
 801099a:	2b40      	cmp	r3, #64	@ 0x40
 801099c:	d857      	bhi.n	8010a4e <USBD_StdDevReq+0xce>
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d00f      	beq.n	80109c2 <USBD_StdDevReq+0x42>
 80109a2:	2b20      	cmp	r3, #32
 80109a4:	d153      	bne.n	8010a4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	32ae      	adds	r2, #174	@ 0xae
 80109b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109b4:	689b      	ldr	r3, [r3, #8]
 80109b6:	6839      	ldr	r1, [r7, #0]
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	4798      	blx	r3
 80109bc:	4603      	mov	r3, r0
 80109be:	73fb      	strb	r3, [r7, #15]
      break;
 80109c0:	e04a      	b.n	8010a58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	785b      	ldrb	r3, [r3, #1]
 80109c6:	2b09      	cmp	r3, #9
 80109c8:	d83b      	bhi.n	8010a42 <USBD_StdDevReq+0xc2>
 80109ca:	a201      	add	r2, pc, #4	@ (adr r2, 80109d0 <USBD_StdDevReq+0x50>)
 80109cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109d0:	08010a25 	.word	0x08010a25
 80109d4:	08010a39 	.word	0x08010a39
 80109d8:	08010a43 	.word	0x08010a43
 80109dc:	08010a2f 	.word	0x08010a2f
 80109e0:	08010a43 	.word	0x08010a43
 80109e4:	08010a03 	.word	0x08010a03
 80109e8:	080109f9 	.word	0x080109f9
 80109ec:	08010a43 	.word	0x08010a43
 80109f0:	08010a1b 	.word	0x08010a1b
 80109f4:	08010a0d 	.word	0x08010a0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80109f8:	6839      	ldr	r1, [r7, #0]
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f000 fa3c 	bl	8010e78 <USBD_GetDescriptor>
          break;
 8010a00:	e024      	b.n	8010a4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010a02:	6839      	ldr	r1, [r7, #0]
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f000 fbcb 	bl	80111a0 <USBD_SetAddress>
          break;
 8010a0a:	e01f      	b.n	8010a4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010a0c:	6839      	ldr	r1, [r7, #0]
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f000 fc0a 	bl	8011228 <USBD_SetConfig>
 8010a14:	4603      	mov	r3, r0
 8010a16:	73fb      	strb	r3, [r7, #15]
          break;
 8010a18:	e018      	b.n	8010a4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010a1a:	6839      	ldr	r1, [r7, #0]
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f000 fcad 	bl	801137c <USBD_GetConfig>
          break;
 8010a22:	e013      	b.n	8010a4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010a24:	6839      	ldr	r1, [r7, #0]
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f000 fcde 	bl	80113e8 <USBD_GetStatus>
          break;
 8010a2c:	e00e      	b.n	8010a4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010a2e:	6839      	ldr	r1, [r7, #0]
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f000 fd0d 	bl	8011450 <USBD_SetFeature>
          break;
 8010a36:	e009      	b.n	8010a4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010a38:	6839      	ldr	r1, [r7, #0]
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 fd31 	bl	80114a2 <USBD_ClrFeature>
          break;
 8010a40:	e004      	b.n	8010a4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010a42:	6839      	ldr	r1, [r7, #0]
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f000 fd88 	bl	801155a <USBD_CtlError>
          break;
 8010a4a:	bf00      	nop
      }
      break;
 8010a4c:	e004      	b.n	8010a58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010a4e:	6839      	ldr	r1, [r7, #0]
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f000 fd82 	bl	801155a <USBD_CtlError>
      break;
 8010a56:	bf00      	nop
  }

  return ret;
 8010a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3710      	adds	r7, #16
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop

08010a64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b084      	sub	sp, #16
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	781b      	ldrb	r3, [r3, #0]
 8010a76:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010a7a:	2b40      	cmp	r3, #64	@ 0x40
 8010a7c:	d005      	beq.n	8010a8a <USBD_StdItfReq+0x26>
 8010a7e:	2b40      	cmp	r3, #64	@ 0x40
 8010a80:	d852      	bhi.n	8010b28 <USBD_StdItfReq+0xc4>
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d001      	beq.n	8010a8a <USBD_StdItfReq+0x26>
 8010a86:	2b20      	cmp	r3, #32
 8010a88:	d14e      	bne.n	8010b28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	3b01      	subs	r3, #1
 8010a94:	2b02      	cmp	r3, #2
 8010a96:	d840      	bhi.n	8010b1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	889b      	ldrh	r3, [r3, #4]
 8010a9c:	b2db      	uxtb	r3, r3
 8010a9e:	2b03      	cmp	r3, #3
 8010aa0:	d836      	bhi.n	8010b10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	889b      	ldrh	r3, [r3, #4]
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7ff fedb 	bl	8010866 <USBD_CoreFindIF>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ab4:	7bbb      	ldrb	r3, [r7, #14]
 8010ab6:	2bff      	cmp	r3, #255	@ 0xff
 8010ab8:	d01d      	beq.n	8010af6 <USBD_StdItfReq+0x92>
 8010aba:	7bbb      	ldrb	r3, [r7, #14]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d11a      	bne.n	8010af6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010ac0:	7bba      	ldrb	r2, [r7, #14]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	32ae      	adds	r2, #174	@ 0xae
 8010ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d00f      	beq.n	8010af0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010ad0:	7bba      	ldrb	r2, [r7, #14]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010ad8:	7bba      	ldrb	r2, [r7, #14]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	32ae      	adds	r2, #174	@ 0xae
 8010ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ae2:	689b      	ldr	r3, [r3, #8]
 8010ae4:	6839      	ldr	r1, [r7, #0]
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	4798      	blx	r3
 8010aea:	4603      	mov	r3, r0
 8010aec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010aee:	e004      	b.n	8010afa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010af0:	2303      	movs	r3, #3
 8010af2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010af4:	e001      	b.n	8010afa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010af6:	2303      	movs	r3, #3
 8010af8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	88db      	ldrh	r3, [r3, #6]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d110      	bne.n	8010b24 <USBD_StdItfReq+0xc0>
 8010b02:	7bfb      	ldrb	r3, [r7, #15]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d10d      	bne.n	8010b24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f000 fdfd 	bl	8011708 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010b0e:	e009      	b.n	8010b24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010b10:	6839      	ldr	r1, [r7, #0]
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f000 fd21 	bl	801155a <USBD_CtlError>
          break;
 8010b18:	e004      	b.n	8010b24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010b1a:	6839      	ldr	r1, [r7, #0]
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	f000 fd1c 	bl	801155a <USBD_CtlError>
          break;
 8010b22:	e000      	b.n	8010b26 <USBD_StdItfReq+0xc2>
          break;
 8010b24:	bf00      	nop
      }
      break;
 8010b26:	e004      	b.n	8010b32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010b28:	6839      	ldr	r1, [r7, #0]
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f000 fd15 	bl	801155a <USBD_CtlError>
      break;
 8010b30:	bf00      	nop
  }

  return ret;
 8010b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3710      	adds	r7, #16
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
 8010b44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010b46:	2300      	movs	r3, #0
 8010b48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	889b      	ldrh	r3, [r3, #4]
 8010b4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010b58:	2b40      	cmp	r3, #64	@ 0x40
 8010b5a:	d007      	beq.n	8010b6c <USBD_StdEPReq+0x30>
 8010b5c:	2b40      	cmp	r3, #64	@ 0x40
 8010b5e:	f200 817f 	bhi.w	8010e60 <USBD_StdEPReq+0x324>
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d02a      	beq.n	8010bbc <USBD_StdEPReq+0x80>
 8010b66:	2b20      	cmp	r3, #32
 8010b68:	f040 817a 	bne.w	8010e60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010b6c:	7bbb      	ldrb	r3, [r7, #14]
 8010b6e:	4619      	mov	r1, r3
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f7ff fe85 	bl	8010880 <USBD_CoreFindEP>
 8010b76:	4603      	mov	r3, r0
 8010b78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010b7a:	7b7b      	ldrb	r3, [r7, #13]
 8010b7c:	2bff      	cmp	r3, #255	@ 0xff
 8010b7e:	f000 8174 	beq.w	8010e6a <USBD_StdEPReq+0x32e>
 8010b82:	7b7b      	ldrb	r3, [r7, #13]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	f040 8170 	bne.w	8010e6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010b8a:	7b7a      	ldrb	r2, [r7, #13]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010b92:	7b7a      	ldrb	r2, [r7, #13]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	32ae      	adds	r2, #174	@ 0xae
 8010b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b9c:	689b      	ldr	r3, [r3, #8]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	f000 8163 	beq.w	8010e6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010ba4:	7b7a      	ldrb	r2, [r7, #13]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	32ae      	adds	r2, #174	@ 0xae
 8010baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bae:	689b      	ldr	r3, [r3, #8]
 8010bb0:	6839      	ldr	r1, [r7, #0]
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	4798      	blx	r3
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010bba:	e156      	b.n	8010e6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	785b      	ldrb	r3, [r3, #1]
 8010bc0:	2b03      	cmp	r3, #3
 8010bc2:	d008      	beq.n	8010bd6 <USBD_StdEPReq+0x9a>
 8010bc4:	2b03      	cmp	r3, #3
 8010bc6:	f300 8145 	bgt.w	8010e54 <USBD_StdEPReq+0x318>
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f000 809b 	beq.w	8010d06 <USBD_StdEPReq+0x1ca>
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d03c      	beq.n	8010c4e <USBD_StdEPReq+0x112>
 8010bd4:	e13e      	b.n	8010e54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	2b02      	cmp	r3, #2
 8010be0:	d002      	beq.n	8010be8 <USBD_StdEPReq+0xac>
 8010be2:	2b03      	cmp	r3, #3
 8010be4:	d016      	beq.n	8010c14 <USBD_StdEPReq+0xd8>
 8010be6:	e02c      	b.n	8010c42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010be8:	7bbb      	ldrb	r3, [r7, #14]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00d      	beq.n	8010c0a <USBD_StdEPReq+0xce>
 8010bee:	7bbb      	ldrb	r3, [r7, #14]
 8010bf0:	2b80      	cmp	r3, #128	@ 0x80
 8010bf2:	d00a      	beq.n	8010c0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010bf4:	7bbb      	ldrb	r3, [r7, #14]
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f009 ffb3 	bl	801ab64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010bfe:	2180      	movs	r1, #128	@ 0x80
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f009 ffaf 	bl	801ab64 <USBD_LL_StallEP>
 8010c06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010c08:	e020      	b.n	8010c4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010c0a:	6839      	ldr	r1, [r7, #0]
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f000 fca4 	bl	801155a <USBD_CtlError>
              break;
 8010c12:	e01b      	b.n	8010c4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	885b      	ldrh	r3, [r3, #2]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10e      	bne.n	8010c3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010c1c:	7bbb      	ldrb	r3, [r7, #14]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d00b      	beq.n	8010c3a <USBD_StdEPReq+0xfe>
 8010c22:	7bbb      	ldrb	r3, [r7, #14]
 8010c24:	2b80      	cmp	r3, #128	@ 0x80
 8010c26:	d008      	beq.n	8010c3a <USBD_StdEPReq+0xfe>
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	88db      	ldrh	r3, [r3, #6]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d104      	bne.n	8010c3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c30:	7bbb      	ldrb	r3, [r7, #14]
 8010c32:	4619      	mov	r1, r3
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f009 ff95 	bl	801ab64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f000 fd64 	bl	8011708 <USBD_CtlSendStatus>

              break;
 8010c40:	e004      	b.n	8010c4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010c42:	6839      	ldr	r1, [r7, #0]
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f000 fc88 	bl	801155a <USBD_CtlError>
              break;
 8010c4a:	bf00      	nop
          }
          break;
 8010c4c:	e107      	b.n	8010e5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	2b02      	cmp	r3, #2
 8010c58:	d002      	beq.n	8010c60 <USBD_StdEPReq+0x124>
 8010c5a:	2b03      	cmp	r3, #3
 8010c5c:	d016      	beq.n	8010c8c <USBD_StdEPReq+0x150>
 8010c5e:	e04b      	b.n	8010cf8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010c60:	7bbb      	ldrb	r3, [r7, #14]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d00d      	beq.n	8010c82 <USBD_StdEPReq+0x146>
 8010c66:	7bbb      	ldrb	r3, [r7, #14]
 8010c68:	2b80      	cmp	r3, #128	@ 0x80
 8010c6a:	d00a      	beq.n	8010c82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c6c:	7bbb      	ldrb	r3, [r7, #14]
 8010c6e:	4619      	mov	r1, r3
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f009 ff77 	bl	801ab64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c76:	2180      	movs	r1, #128	@ 0x80
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f009 ff73 	bl	801ab64 <USBD_LL_StallEP>
 8010c7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010c80:	e040      	b.n	8010d04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010c82:	6839      	ldr	r1, [r7, #0]
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f000 fc68 	bl	801155a <USBD_CtlError>
              break;
 8010c8a:	e03b      	b.n	8010d04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	885b      	ldrh	r3, [r3, #2]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d136      	bne.n	8010d02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010c94:	7bbb      	ldrb	r3, [r7, #14]
 8010c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d004      	beq.n	8010ca8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010c9e:	7bbb      	ldrb	r3, [r7, #14]
 8010ca0:	4619      	mov	r1, r3
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f009 ff7d 	bl	801aba2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f000 fd2d 	bl	8011708 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010cae:	7bbb      	ldrb	r3, [r7, #14]
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f7ff fde4 	bl	8010880 <USBD_CoreFindEP>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010cbc:	7b7b      	ldrb	r3, [r7, #13]
 8010cbe:	2bff      	cmp	r3, #255	@ 0xff
 8010cc0:	d01f      	beq.n	8010d02 <USBD_StdEPReq+0x1c6>
 8010cc2:	7b7b      	ldrb	r3, [r7, #13]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d11c      	bne.n	8010d02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010cc8:	7b7a      	ldrb	r2, [r7, #13]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010cd0:	7b7a      	ldrb	r2, [r7, #13]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	32ae      	adds	r2, #174	@ 0xae
 8010cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cda:	689b      	ldr	r3, [r3, #8]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d010      	beq.n	8010d02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010ce0:	7b7a      	ldrb	r2, [r7, #13]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	32ae      	adds	r2, #174	@ 0xae
 8010ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cea:	689b      	ldr	r3, [r3, #8]
 8010cec:	6839      	ldr	r1, [r7, #0]
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	4798      	blx	r3
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010cf6:	e004      	b.n	8010d02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010cf8:	6839      	ldr	r1, [r7, #0]
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f000 fc2d 	bl	801155a <USBD_CtlError>
              break;
 8010d00:	e000      	b.n	8010d04 <USBD_StdEPReq+0x1c8>
              break;
 8010d02:	bf00      	nop
          }
          break;
 8010d04:	e0ab      	b.n	8010e5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	2b02      	cmp	r3, #2
 8010d10:	d002      	beq.n	8010d18 <USBD_StdEPReq+0x1dc>
 8010d12:	2b03      	cmp	r3, #3
 8010d14:	d032      	beq.n	8010d7c <USBD_StdEPReq+0x240>
 8010d16:	e097      	b.n	8010e48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010d18:	7bbb      	ldrb	r3, [r7, #14]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d007      	beq.n	8010d2e <USBD_StdEPReq+0x1f2>
 8010d1e:	7bbb      	ldrb	r3, [r7, #14]
 8010d20:	2b80      	cmp	r3, #128	@ 0x80
 8010d22:	d004      	beq.n	8010d2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010d24:	6839      	ldr	r1, [r7, #0]
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f000 fc17 	bl	801155a <USBD_CtlError>
                break;
 8010d2c:	e091      	b.n	8010e52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	da0b      	bge.n	8010d4e <USBD_StdEPReq+0x212>
 8010d36:	7bbb      	ldrb	r3, [r7, #14]
 8010d38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010d3c:	4613      	mov	r3, r2
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	4413      	add	r3, r2
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	3310      	adds	r3, #16
 8010d46:	687a      	ldr	r2, [r7, #4]
 8010d48:	4413      	add	r3, r2
 8010d4a:	3304      	adds	r3, #4
 8010d4c:	e00b      	b.n	8010d66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010d4e:	7bbb      	ldrb	r3, [r7, #14]
 8010d50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d54:	4613      	mov	r3, r2
 8010d56:	009b      	lsls	r3, r3, #2
 8010d58:	4413      	add	r3, r2
 8010d5a:	009b      	lsls	r3, r3, #2
 8010d5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010d60:	687a      	ldr	r2, [r7, #4]
 8010d62:	4413      	add	r3, r2
 8010d64:	3304      	adds	r3, #4
 8010d66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	2202      	movs	r2, #2
 8010d72:	4619      	mov	r1, r3
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f000 fc6d 	bl	8011654 <USBD_CtlSendData>
              break;
 8010d7a:	e06a      	b.n	8010e52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	da11      	bge.n	8010da8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010d84:	7bbb      	ldrb	r3, [r7, #14]
 8010d86:	f003 020f 	and.w	r2, r3, #15
 8010d8a:	6879      	ldr	r1, [r7, #4]
 8010d8c:	4613      	mov	r3, r2
 8010d8e:	009b      	lsls	r3, r3, #2
 8010d90:	4413      	add	r3, r2
 8010d92:	009b      	lsls	r3, r3, #2
 8010d94:	440b      	add	r3, r1
 8010d96:	3324      	adds	r3, #36	@ 0x24
 8010d98:	881b      	ldrh	r3, [r3, #0]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d117      	bne.n	8010dce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010d9e:	6839      	ldr	r1, [r7, #0]
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f000 fbda 	bl	801155a <USBD_CtlError>
                  break;
 8010da6:	e054      	b.n	8010e52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010da8:	7bbb      	ldrb	r3, [r7, #14]
 8010daa:	f003 020f 	and.w	r2, r3, #15
 8010dae:	6879      	ldr	r1, [r7, #4]
 8010db0:	4613      	mov	r3, r2
 8010db2:	009b      	lsls	r3, r3, #2
 8010db4:	4413      	add	r3, r2
 8010db6:	009b      	lsls	r3, r3, #2
 8010db8:	440b      	add	r3, r1
 8010dba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010dbe:	881b      	ldrh	r3, [r3, #0]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d104      	bne.n	8010dce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010dc4:	6839      	ldr	r1, [r7, #0]
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f000 fbc7 	bl	801155a <USBD_CtlError>
                  break;
 8010dcc:	e041      	b.n	8010e52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010dce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	da0b      	bge.n	8010dee <USBD_StdEPReq+0x2b2>
 8010dd6:	7bbb      	ldrb	r3, [r7, #14]
 8010dd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010ddc:	4613      	mov	r3, r2
 8010dde:	009b      	lsls	r3, r3, #2
 8010de0:	4413      	add	r3, r2
 8010de2:	009b      	lsls	r3, r3, #2
 8010de4:	3310      	adds	r3, #16
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	4413      	add	r3, r2
 8010dea:	3304      	adds	r3, #4
 8010dec:	e00b      	b.n	8010e06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010dee:	7bbb      	ldrb	r3, [r7, #14]
 8010df0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010df4:	4613      	mov	r3, r2
 8010df6:	009b      	lsls	r3, r3, #2
 8010df8:	4413      	add	r3, r2
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010e00:	687a      	ldr	r2, [r7, #4]
 8010e02:	4413      	add	r3, r2
 8010e04:	3304      	adds	r3, #4
 8010e06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010e08:	7bbb      	ldrb	r3, [r7, #14]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d002      	beq.n	8010e14 <USBD_StdEPReq+0x2d8>
 8010e0e:	7bbb      	ldrb	r3, [r7, #14]
 8010e10:	2b80      	cmp	r3, #128	@ 0x80
 8010e12:	d103      	bne.n	8010e1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	2200      	movs	r2, #0
 8010e18:	601a      	str	r2, [r3, #0]
 8010e1a:	e00e      	b.n	8010e3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010e1c:	7bbb      	ldrb	r3, [r7, #14]
 8010e1e:	4619      	mov	r1, r3
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f009 fedd 	bl	801abe0 <USBD_LL_IsStallEP>
 8010e26:	4603      	mov	r3, r0
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d003      	beq.n	8010e34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	2201      	movs	r2, #1
 8010e30:	601a      	str	r2, [r3, #0]
 8010e32:	e002      	b.n	8010e3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	2200      	movs	r2, #0
 8010e38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	2202      	movs	r2, #2
 8010e3e:	4619      	mov	r1, r3
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f000 fc07 	bl	8011654 <USBD_CtlSendData>
              break;
 8010e46:	e004      	b.n	8010e52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010e48:	6839      	ldr	r1, [r7, #0]
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f000 fb85 	bl	801155a <USBD_CtlError>
              break;
 8010e50:	bf00      	nop
          }
          break;
 8010e52:	e004      	b.n	8010e5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010e54:	6839      	ldr	r1, [r7, #0]
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f000 fb7f 	bl	801155a <USBD_CtlError>
          break;
 8010e5c:	bf00      	nop
      }
      break;
 8010e5e:	e005      	b.n	8010e6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010e60:	6839      	ldr	r1, [r7, #0]
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f000 fb79 	bl	801155a <USBD_CtlError>
      break;
 8010e68:	e000      	b.n	8010e6c <USBD_StdEPReq+0x330>
      break;
 8010e6a:	bf00      	nop
  }

  return ret;
 8010e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3710      	adds	r7, #16
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
	...

08010e78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b084      	sub	sp, #16
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010e82:	2300      	movs	r3, #0
 8010e84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010e86:	2300      	movs	r3, #0
 8010e88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	885b      	ldrh	r3, [r3, #2]
 8010e92:	0a1b      	lsrs	r3, r3, #8
 8010e94:	b29b      	uxth	r3, r3
 8010e96:	3b01      	subs	r3, #1
 8010e98:	2b0e      	cmp	r3, #14
 8010e9a:	f200 8152 	bhi.w	8011142 <USBD_GetDescriptor+0x2ca>
 8010e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8010ea4 <USBD_GetDescriptor+0x2c>)
 8010ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea4:	08010f15 	.word	0x08010f15
 8010ea8:	08010f2d 	.word	0x08010f2d
 8010eac:	08010f6d 	.word	0x08010f6d
 8010eb0:	08011143 	.word	0x08011143
 8010eb4:	08011143 	.word	0x08011143
 8010eb8:	080110e3 	.word	0x080110e3
 8010ebc:	0801110f 	.word	0x0801110f
 8010ec0:	08011143 	.word	0x08011143
 8010ec4:	08011143 	.word	0x08011143
 8010ec8:	08011143 	.word	0x08011143
 8010ecc:	08011143 	.word	0x08011143
 8010ed0:	08011143 	.word	0x08011143
 8010ed4:	08011143 	.word	0x08011143
 8010ed8:	08011143 	.word	0x08011143
 8010edc:	08010ee1 	.word	0x08010ee1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ee6:	69db      	ldr	r3, [r3, #28]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d00b      	beq.n	8010f04 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ef2:	69db      	ldr	r3, [r3, #28]
 8010ef4:	687a      	ldr	r2, [r7, #4]
 8010ef6:	7c12      	ldrb	r2, [r2, #16]
 8010ef8:	f107 0108 	add.w	r1, r7, #8
 8010efc:	4610      	mov	r0, r2
 8010efe:	4798      	blx	r3
 8010f00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f02:	e126      	b.n	8011152 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010f04:	6839      	ldr	r1, [r7, #0]
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	f000 fb27 	bl	801155a <USBD_CtlError>
        err++;
 8010f0c:	7afb      	ldrb	r3, [r7, #11]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	72fb      	strb	r3, [r7, #11]
      break;
 8010f12:	e11e      	b.n	8011152 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	687a      	ldr	r2, [r7, #4]
 8010f1e:	7c12      	ldrb	r2, [r2, #16]
 8010f20:	f107 0108 	add.w	r1, r7, #8
 8010f24:	4610      	mov	r0, r2
 8010f26:	4798      	blx	r3
 8010f28:	60f8      	str	r0, [r7, #12]
      break;
 8010f2a:	e112      	b.n	8011152 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	7c1b      	ldrb	r3, [r3, #16]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10d      	bne.n	8010f50 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f3c:	f107 0208 	add.w	r2, r7, #8
 8010f40:	4610      	mov	r0, r2
 8010f42:	4798      	blx	r3
 8010f44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	3301      	adds	r3, #1
 8010f4a:	2202      	movs	r2, #2
 8010f4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010f4e:	e100      	b.n	8011152 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f58:	f107 0208 	add.w	r2, r7, #8
 8010f5c:	4610      	mov	r0, r2
 8010f5e:	4798      	blx	r3
 8010f60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	3301      	adds	r3, #1
 8010f66:	2202      	movs	r2, #2
 8010f68:	701a      	strb	r2, [r3, #0]
      break;
 8010f6a:	e0f2      	b.n	8011152 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	885b      	ldrh	r3, [r3, #2]
 8010f70:	b2db      	uxtb	r3, r3
 8010f72:	2b05      	cmp	r3, #5
 8010f74:	f200 80ac 	bhi.w	80110d0 <USBD_GetDescriptor+0x258>
 8010f78:	a201      	add	r2, pc, #4	@ (adr r2, 8010f80 <USBD_GetDescriptor+0x108>)
 8010f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f7e:	bf00      	nop
 8010f80:	08010f99 	.word	0x08010f99
 8010f84:	08010fcd 	.word	0x08010fcd
 8010f88:	08011001 	.word	0x08011001
 8010f8c:	08011035 	.word	0x08011035
 8010f90:	08011069 	.word	0x08011069
 8010f94:	0801109d 	.word	0x0801109d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010f9e:	685b      	ldr	r3, [r3, #4]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d00b      	beq.n	8010fbc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	687a      	ldr	r2, [r7, #4]
 8010fae:	7c12      	ldrb	r2, [r2, #16]
 8010fb0:	f107 0108 	add.w	r1, r7, #8
 8010fb4:	4610      	mov	r0, r2
 8010fb6:	4798      	blx	r3
 8010fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010fba:	e091      	b.n	80110e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010fbc:	6839      	ldr	r1, [r7, #0]
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f000 facb 	bl	801155a <USBD_CtlError>
            err++;
 8010fc4:	7afb      	ldrb	r3, [r7, #11]
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8010fca:	e089      	b.n	80110e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010fd2:	689b      	ldr	r3, [r3, #8]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d00b      	beq.n	8010ff0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010fde:	689b      	ldr	r3, [r3, #8]
 8010fe0:	687a      	ldr	r2, [r7, #4]
 8010fe2:	7c12      	ldrb	r2, [r2, #16]
 8010fe4:	f107 0108 	add.w	r1, r7, #8
 8010fe8:	4610      	mov	r0, r2
 8010fea:	4798      	blx	r3
 8010fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010fee:	e077      	b.n	80110e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010ff0:	6839      	ldr	r1, [r7, #0]
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f000 fab1 	bl	801155a <USBD_CtlError>
            err++;
 8010ff8:	7afb      	ldrb	r3, [r7, #11]
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8010ffe:	e06f      	b.n	80110e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d00b      	beq.n	8011024 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	687a      	ldr	r2, [r7, #4]
 8011016:	7c12      	ldrb	r2, [r2, #16]
 8011018:	f107 0108 	add.w	r1, r7, #8
 801101c:	4610      	mov	r0, r2
 801101e:	4798      	blx	r3
 8011020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011022:	e05d      	b.n	80110e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011024:	6839      	ldr	r1, [r7, #0]
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f000 fa97 	bl	801155a <USBD_CtlError>
            err++;
 801102c:	7afb      	ldrb	r3, [r7, #11]
 801102e:	3301      	adds	r3, #1
 8011030:	72fb      	strb	r3, [r7, #11]
          break;
 8011032:	e055      	b.n	80110e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801103a:	691b      	ldr	r3, [r3, #16]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00b      	beq.n	8011058 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011046:	691b      	ldr	r3, [r3, #16]
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	7c12      	ldrb	r2, [r2, #16]
 801104c:	f107 0108 	add.w	r1, r7, #8
 8011050:	4610      	mov	r0, r2
 8011052:	4798      	blx	r3
 8011054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011056:	e043      	b.n	80110e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011058:	6839      	ldr	r1, [r7, #0]
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f000 fa7d 	bl	801155a <USBD_CtlError>
            err++;
 8011060:	7afb      	ldrb	r3, [r7, #11]
 8011062:	3301      	adds	r3, #1
 8011064:	72fb      	strb	r3, [r7, #11]
          break;
 8011066:	e03b      	b.n	80110e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801106e:	695b      	ldr	r3, [r3, #20]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d00b      	beq.n	801108c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801107a:	695b      	ldr	r3, [r3, #20]
 801107c:	687a      	ldr	r2, [r7, #4]
 801107e:	7c12      	ldrb	r2, [r2, #16]
 8011080:	f107 0108 	add.w	r1, r7, #8
 8011084:	4610      	mov	r0, r2
 8011086:	4798      	blx	r3
 8011088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801108a:	e029      	b.n	80110e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801108c:	6839      	ldr	r1, [r7, #0]
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f000 fa63 	bl	801155a <USBD_CtlError>
            err++;
 8011094:	7afb      	ldrb	r3, [r7, #11]
 8011096:	3301      	adds	r3, #1
 8011098:	72fb      	strb	r3, [r7, #11]
          break;
 801109a:	e021      	b.n	80110e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80110a2:	699b      	ldr	r3, [r3, #24]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d00b      	beq.n	80110c0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80110ae:	699b      	ldr	r3, [r3, #24]
 80110b0:	687a      	ldr	r2, [r7, #4]
 80110b2:	7c12      	ldrb	r2, [r2, #16]
 80110b4:	f107 0108 	add.w	r1, r7, #8
 80110b8:	4610      	mov	r0, r2
 80110ba:	4798      	blx	r3
 80110bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80110be:	e00f      	b.n	80110e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80110c0:	6839      	ldr	r1, [r7, #0]
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f000 fa49 	bl	801155a <USBD_CtlError>
            err++;
 80110c8:	7afb      	ldrb	r3, [r7, #11]
 80110ca:	3301      	adds	r3, #1
 80110cc:	72fb      	strb	r3, [r7, #11]
          break;
 80110ce:	e007      	b.n	80110e0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80110d0:	6839      	ldr	r1, [r7, #0]
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f000 fa41 	bl	801155a <USBD_CtlError>
          err++;
 80110d8:	7afb      	ldrb	r3, [r7, #11]
 80110da:	3301      	adds	r3, #1
 80110dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80110de:	bf00      	nop
      }
      break;
 80110e0:	e037      	b.n	8011152 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	7c1b      	ldrb	r3, [r3, #16]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d109      	bne.n	80110fe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110f2:	f107 0208 	add.w	r2, r7, #8
 80110f6:	4610      	mov	r0, r2
 80110f8:	4798      	blx	r3
 80110fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80110fc:	e029      	b.n	8011152 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80110fe:	6839      	ldr	r1, [r7, #0]
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f000 fa2a 	bl	801155a <USBD_CtlError>
        err++;
 8011106:	7afb      	ldrb	r3, [r7, #11]
 8011108:	3301      	adds	r3, #1
 801110a:	72fb      	strb	r3, [r7, #11]
      break;
 801110c:	e021      	b.n	8011152 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	7c1b      	ldrb	r3, [r3, #16]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d10d      	bne.n	8011132 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801111e:	f107 0208 	add.w	r2, r7, #8
 8011122:	4610      	mov	r0, r2
 8011124:	4798      	blx	r3
 8011126:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	3301      	adds	r3, #1
 801112c:	2207      	movs	r2, #7
 801112e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011130:	e00f      	b.n	8011152 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011132:	6839      	ldr	r1, [r7, #0]
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f000 fa10 	bl	801155a <USBD_CtlError>
        err++;
 801113a:	7afb      	ldrb	r3, [r7, #11]
 801113c:	3301      	adds	r3, #1
 801113e:	72fb      	strb	r3, [r7, #11]
      break;
 8011140:	e007      	b.n	8011152 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011142:	6839      	ldr	r1, [r7, #0]
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f000 fa08 	bl	801155a <USBD_CtlError>
      err++;
 801114a:	7afb      	ldrb	r3, [r7, #11]
 801114c:	3301      	adds	r3, #1
 801114e:	72fb      	strb	r3, [r7, #11]
      break;
 8011150:	bf00      	nop
  }

  if (err != 0U)
 8011152:	7afb      	ldrb	r3, [r7, #11]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d11e      	bne.n	8011196 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	88db      	ldrh	r3, [r3, #6]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d016      	beq.n	801118e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011160:	893b      	ldrh	r3, [r7, #8]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d00e      	beq.n	8011184 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	88da      	ldrh	r2, [r3, #6]
 801116a:	893b      	ldrh	r3, [r7, #8]
 801116c:	4293      	cmp	r3, r2
 801116e:	bf28      	it	cs
 8011170:	4613      	movcs	r3, r2
 8011172:	b29b      	uxth	r3, r3
 8011174:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011176:	893b      	ldrh	r3, [r7, #8]
 8011178:	461a      	mov	r2, r3
 801117a:	68f9      	ldr	r1, [r7, #12]
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f000 fa69 	bl	8011654 <USBD_CtlSendData>
 8011182:	e009      	b.n	8011198 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011184:	6839      	ldr	r1, [r7, #0]
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f000 f9e7 	bl	801155a <USBD_CtlError>
 801118c:	e004      	b.n	8011198 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f000 faba 	bl	8011708 <USBD_CtlSendStatus>
 8011194:	e000      	b.n	8011198 <USBD_GetDescriptor+0x320>
    return;
 8011196:	bf00      	nop
  }
}
 8011198:	3710      	adds	r7, #16
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
 801119e:	bf00      	nop

080111a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	889b      	ldrh	r3, [r3, #4]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d131      	bne.n	8011216 <USBD_SetAddress+0x76>
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	88db      	ldrh	r3, [r3, #6]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d12d      	bne.n	8011216 <USBD_SetAddress+0x76>
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	885b      	ldrh	r3, [r3, #2]
 80111be:	2b7f      	cmp	r3, #127	@ 0x7f
 80111c0:	d829      	bhi.n	8011216 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	885b      	ldrh	r3, [r3, #2]
 80111c6:	b2db      	uxtb	r3, r3
 80111c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80111cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	2b03      	cmp	r3, #3
 80111d8:	d104      	bne.n	80111e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80111da:	6839      	ldr	r1, [r7, #0]
 80111dc:	6878      	ldr	r0, [r7, #4]
 80111de:	f000 f9bc 	bl	801155a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111e2:	e01d      	b.n	8011220 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	7bfa      	ldrb	r2, [r7, #15]
 80111e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80111ec:	7bfb      	ldrb	r3, [r7, #15]
 80111ee:	4619      	mov	r1, r3
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f009 fd21 	bl	801ac38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f000 fa86 	bl	8011708 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80111fc:	7bfb      	ldrb	r3, [r7, #15]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d004      	beq.n	801120c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2202      	movs	r2, #2
 8011206:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801120a:	e009      	b.n	8011220 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2201      	movs	r2, #1
 8011210:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011214:	e004      	b.n	8011220 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011216:	6839      	ldr	r1, [r7, #0]
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f000 f99e 	bl	801155a <USBD_CtlError>
  }
}
 801121e:	bf00      	nop
 8011220:	bf00      	nop
 8011222:	3710      	adds	r7, #16
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011232:	2300      	movs	r3, #0
 8011234:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	885b      	ldrh	r3, [r3, #2]
 801123a:	b2da      	uxtb	r2, r3
 801123c:	4b4e      	ldr	r3, [pc, #312]	@ (8011378 <USBD_SetConfig+0x150>)
 801123e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011240:	4b4d      	ldr	r3, [pc, #308]	@ (8011378 <USBD_SetConfig+0x150>)
 8011242:	781b      	ldrb	r3, [r3, #0]
 8011244:	2b01      	cmp	r3, #1
 8011246:	d905      	bls.n	8011254 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011248:	6839      	ldr	r1, [r7, #0]
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f000 f985 	bl	801155a <USBD_CtlError>
    return USBD_FAIL;
 8011250:	2303      	movs	r3, #3
 8011252:	e08c      	b.n	801136e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801125a:	b2db      	uxtb	r3, r3
 801125c:	2b02      	cmp	r3, #2
 801125e:	d002      	beq.n	8011266 <USBD_SetConfig+0x3e>
 8011260:	2b03      	cmp	r3, #3
 8011262:	d029      	beq.n	80112b8 <USBD_SetConfig+0x90>
 8011264:	e075      	b.n	8011352 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011266:	4b44      	ldr	r3, [pc, #272]	@ (8011378 <USBD_SetConfig+0x150>)
 8011268:	781b      	ldrb	r3, [r3, #0]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d020      	beq.n	80112b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801126e:	4b42      	ldr	r3, [pc, #264]	@ (8011378 <USBD_SetConfig+0x150>)
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	461a      	mov	r2, r3
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011278:	4b3f      	ldr	r3, [pc, #252]	@ (8011378 <USBD_SetConfig+0x150>)
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	4619      	mov	r1, r3
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f7fe ffb9 	bl	80101f6 <USBD_SetClassConfig>
 8011284:	4603      	mov	r3, r0
 8011286:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011288:	7bfb      	ldrb	r3, [r7, #15]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d008      	beq.n	80112a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801128e:	6839      	ldr	r1, [r7, #0]
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 f962 	bl	801155a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2202      	movs	r2, #2
 801129a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801129e:	e065      	b.n	801136c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f000 fa31 	bl	8011708 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	2203      	movs	r2, #3
 80112aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80112ae:	e05d      	b.n	801136c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f000 fa29 	bl	8011708 <USBD_CtlSendStatus>
      break;
 80112b6:	e059      	b.n	801136c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80112b8:	4b2f      	ldr	r3, [pc, #188]	@ (8011378 <USBD_SetConfig+0x150>)
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d112      	bne.n	80112e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2202      	movs	r2, #2
 80112c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80112c8:	4b2b      	ldr	r3, [pc, #172]	@ (8011378 <USBD_SetConfig+0x150>)
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	461a      	mov	r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80112d2:	4b29      	ldr	r3, [pc, #164]	@ (8011378 <USBD_SetConfig+0x150>)
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	4619      	mov	r1, r3
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f7fe ffa8 	bl	801022e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f000 fa12 	bl	8011708 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80112e4:	e042      	b.n	801136c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80112e6:	4b24      	ldr	r3, [pc, #144]	@ (8011378 <USBD_SetConfig+0x150>)
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	461a      	mov	r2, r3
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d02a      	beq.n	801134a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	b2db      	uxtb	r3, r3
 80112fa:	4619      	mov	r1, r3
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f7fe ff96 	bl	801022e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011302:	4b1d      	ldr	r3, [pc, #116]	@ (8011378 <USBD_SetConfig+0x150>)
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	461a      	mov	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801130c:	4b1a      	ldr	r3, [pc, #104]	@ (8011378 <USBD_SetConfig+0x150>)
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	4619      	mov	r1, r3
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f7fe ff6f 	bl	80101f6 <USBD_SetClassConfig>
 8011318:	4603      	mov	r3, r0
 801131a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801131c:	7bfb      	ldrb	r3, [r7, #15]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d00f      	beq.n	8011342 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011322:	6839      	ldr	r1, [r7, #0]
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f000 f918 	bl	801155a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	b2db      	uxtb	r3, r3
 8011330:	4619      	mov	r1, r3
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f7fe ff7b 	bl	801022e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2202      	movs	r2, #2
 801133c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011340:	e014      	b.n	801136c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f000 f9e0 	bl	8011708 <USBD_CtlSendStatus>
      break;
 8011348:	e010      	b.n	801136c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f000 f9dc 	bl	8011708 <USBD_CtlSendStatus>
      break;
 8011350:	e00c      	b.n	801136c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011352:	6839      	ldr	r1, [r7, #0]
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f000 f900 	bl	801155a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801135a:	4b07      	ldr	r3, [pc, #28]	@ (8011378 <USBD_SetConfig+0x150>)
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	4619      	mov	r1, r3
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f7fe ff64 	bl	801022e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011366:	2303      	movs	r3, #3
 8011368:	73fb      	strb	r3, [r7, #15]
      break;
 801136a:	bf00      	nop
  }

  return ret;
 801136c:	7bfb      	ldrb	r3, [r7, #15]
}
 801136e:	4618      	mov	r0, r3
 8011370:	3710      	adds	r7, #16
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	240009f8 	.word	0x240009f8

0801137c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	88db      	ldrh	r3, [r3, #6]
 801138a:	2b01      	cmp	r3, #1
 801138c:	d004      	beq.n	8011398 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801138e:	6839      	ldr	r1, [r7, #0]
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f000 f8e2 	bl	801155a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011396:	e023      	b.n	80113e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801139e:	b2db      	uxtb	r3, r3
 80113a0:	2b02      	cmp	r3, #2
 80113a2:	dc02      	bgt.n	80113aa <USBD_GetConfig+0x2e>
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	dc03      	bgt.n	80113b0 <USBD_GetConfig+0x34>
 80113a8:	e015      	b.n	80113d6 <USBD_GetConfig+0x5a>
 80113aa:	2b03      	cmp	r3, #3
 80113ac:	d00b      	beq.n	80113c6 <USBD_GetConfig+0x4a>
 80113ae:	e012      	b.n	80113d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2200      	movs	r2, #0
 80113b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	3308      	adds	r3, #8
 80113ba:	2201      	movs	r2, #1
 80113bc:	4619      	mov	r1, r3
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f000 f948 	bl	8011654 <USBD_CtlSendData>
        break;
 80113c4:	e00c      	b.n	80113e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	3304      	adds	r3, #4
 80113ca:	2201      	movs	r2, #1
 80113cc:	4619      	mov	r1, r3
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f000 f940 	bl	8011654 <USBD_CtlSendData>
        break;
 80113d4:	e004      	b.n	80113e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80113d6:	6839      	ldr	r1, [r7, #0]
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f000 f8be 	bl	801155a <USBD_CtlError>
        break;
 80113de:	bf00      	nop
}
 80113e0:	bf00      	nop
 80113e2:	3708      	adds	r7, #8
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	3b01      	subs	r3, #1
 80113fc:	2b02      	cmp	r3, #2
 80113fe:	d81e      	bhi.n	801143e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	88db      	ldrh	r3, [r3, #6]
 8011404:	2b02      	cmp	r3, #2
 8011406:	d004      	beq.n	8011412 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011408:	6839      	ldr	r1, [r7, #0]
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f000 f8a5 	bl	801155a <USBD_CtlError>
        break;
 8011410:	e01a      	b.n	8011448 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2201      	movs	r2, #1
 8011416:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801141e:	2b00      	cmp	r3, #0
 8011420:	d005      	beq.n	801142e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	68db      	ldr	r3, [r3, #12]
 8011426:	f043 0202 	orr.w	r2, r3, #2
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	330c      	adds	r3, #12
 8011432:	2202      	movs	r2, #2
 8011434:	4619      	mov	r1, r3
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f000 f90c 	bl	8011654 <USBD_CtlSendData>
      break;
 801143c:	e004      	b.n	8011448 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801143e:	6839      	ldr	r1, [r7, #0]
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f000 f88a 	bl	801155a <USBD_CtlError>
      break;
 8011446:	bf00      	nop
  }
}
 8011448:	bf00      	nop
 801144a:	3708      	adds	r7, #8
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}

08011450 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b082      	sub	sp, #8
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	885b      	ldrh	r3, [r3, #2]
 801145e:	2b01      	cmp	r3, #1
 8011460:	d107      	bne.n	8011472 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2201      	movs	r2, #1
 8011466:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f000 f94c 	bl	8011708 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011470:	e013      	b.n	801149a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	885b      	ldrh	r3, [r3, #2]
 8011476:	2b02      	cmp	r3, #2
 8011478:	d10b      	bne.n	8011492 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	889b      	ldrh	r3, [r3, #4]
 801147e:	0a1b      	lsrs	r3, r3, #8
 8011480:	b29b      	uxth	r3, r3
 8011482:	b2da      	uxtb	r2, r3
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f000 f93c 	bl	8011708 <USBD_CtlSendStatus>
}
 8011490:	e003      	b.n	801149a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011492:	6839      	ldr	r1, [r7, #0]
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f000 f860 	bl	801155a <USBD_CtlError>
}
 801149a:	bf00      	nop
 801149c:	3708      	adds	r7, #8
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}

080114a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114a2:	b580      	push	{r7, lr}
 80114a4:	b082      	sub	sp, #8
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	6078      	str	r0, [r7, #4]
 80114aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	3b01      	subs	r3, #1
 80114b6:	2b02      	cmp	r3, #2
 80114b8:	d80b      	bhi.n	80114d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	885b      	ldrh	r3, [r3, #2]
 80114be:	2b01      	cmp	r3, #1
 80114c0:	d10c      	bne.n	80114dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2200      	movs	r2, #0
 80114c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f000 f91c 	bl	8011708 <USBD_CtlSendStatus>
      }
      break;
 80114d0:	e004      	b.n	80114dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80114d2:	6839      	ldr	r1, [r7, #0]
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	f000 f840 	bl	801155a <USBD_CtlError>
      break;
 80114da:	e000      	b.n	80114de <USBD_ClrFeature+0x3c>
      break;
 80114dc:	bf00      	nop
  }
}
 80114de:	bf00      	nop
 80114e0:	3708      	adds	r7, #8
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}

080114e6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80114e6:	b580      	push	{r7, lr}
 80114e8:	b084      	sub	sp, #16
 80114ea:	af00      	add	r7, sp, #0
 80114ec:	6078      	str	r0, [r7, #4]
 80114ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	781a      	ldrb	r2, [r3, #0]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	3301      	adds	r3, #1
 8011500:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	781a      	ldrb	r2, [r3, #0]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	3301      	adds	r3, #1
 801150e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	f7ff fa16 	bl	8010942 <SWAPBYTE>
 8011516:	4603      	mov	r3, r0
 8011518:	461a      	mov	r2, r3
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	3301      	adds	r3, #1
 8011522:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	3301      	adds	r3, #1
 8011528:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801152a:	68f8      	ldr	r0, [r7, #12]
 801152c:	f7ff fa09 	bl	8010942 <SWAPBYTE>
 8011530:	4603      	mov	r3, r0
 8011532:	461a      	mov	r2, r3
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	3301      	adds	r3, #1
 801153c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	3301      	adds	r3, #1
 8011542:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011544:	68f8      	ldr	r0, [r7, #12]
 8011546:	f7ff f9fc 	bl	8010942 <SWAPBYTE>
 801154a:	4603      	mov	r3, r0
 801154c:	461a      	mov	r2, r3
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	80da      	strh	r2, [r3, #6]
}
 8011552:	bf00      	nop
 8011554:	3710      	adds	r7, #16
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}

0801155a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801155a:	b580      	push	{r7, lr}
 801155c:	b082      	sub	sp, #8
 801155e:	af00      	add	r7, sp, #0
 8011560:	6078      	str	r0, [r7, #4]
 8011562:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011564:	2180      	movs	r1, #128	@ 0x80
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f009 fafc 	bl	801ab64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801156c:	2100      	movs	r1, #0
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f009 faf8 	bl	801ab64 <USBD_LL_StallEP>
}
 8011574:	bf00      	nop
 8011576:	3708      	adds	r7, #8
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}

0801157c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b086      	sub	sp, #24
 8011580:	af00      	add	r7, sp, #0
 8011582:	60f8      	str	r0, [r7, #12]
 8011584:	60b9      	str	r1, [r7, #8]
 8011586:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011588:	2300      	movs	r3, #0
 801158a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d042      	beq.n	8011618 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8011596:	6938      	ldr	r0, [r7, #16]
 8011598:	f000 f842 	bl	8011620 <USBD_GetLen>
 801159c:	4603      	mov	r3, r0
 801159e:	3301      	adds	r3, #1
 80115a0:	005b      	lsls	r3, r3, #1
 80115a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80115a6:	d808      	bhi.n	80115ba <USBD_GetString+0x3e>
 80115a8:	6938      	ldr	r0, [r7, #16]
 80115aa:	f000 f839 	bl	8011620 <USBD_GetLen>
 80115ae:	4603      	mov	r3, r0
 80115b0:	3301      	adds	r3, #1
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	005b      	lsls	r3, r3, #1
 80115b6:	b29a      	uxth	r2, r3
 80115b8:	e001      	b.n	80115be <USBD_GetString+0x42>
 80115ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80115c2:	7dfb      	ldrb	r3, [r7, #23]
 80115c4:	68ba      	ldr	r2, [r7, #8]
 80115c6:	4413      	add	r3, r2
 80115c8:	687a      	ldr	r2, [r7, #4]
 80115ca:	7812      	ldrb	r2, [r2, #0]
 80115cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80115ce:	7dfb      	ldrb	r3, [r7, #23]
 80115d0:	3301      	adds	r3, #1
 80115d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80115d4:	7dfb      	ldrb	r3, [r7, #23]
 80115d6:	68ba      	ldr	r2, [r7, #8]
 80115d8:	4413      	add	r3, r2
 80115da:	2203      	movs	r2, #3
 80115dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80115de:	7dfb      	ldrb	r3, [r7, #23]
 80115e0:	3301      	adds	r3, #1
 80115e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80115e4:	e013      	b.n	801160e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80115e6:	7dfb      	ldrb	r3, [r7, #23]
 80115e8:	68ba      	ldr	r2, [r7, #8]
 80115ea:	4413      	add	r3, r2
 80115ec:	693a      	ldr	r2, [r7, #16]
 80115ee:	7812      	ldrb	r2, [r2, #0]
 80115f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	3301      	adds	r3, #1
 80115f6:	613b      	str	r3, [r7, #16]
    idx++;
 80115f8:	7dfb      	ldrb	r3, [r7, #23]
 80115fa:	3301      	adds	r3, #1
 80115fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80115fe:	7dfb      	ldrb	r3, [r7, #23]
 8011600:	68ba      	ldr	r2, [r7, #8]
 8011602:	4413      	add	r3, r2
 8011604:	2200      	movs	r2, #0
 8011606:	701a      	strb	r2, [r3, #0]
    idx++;
 8011608:	7dfb      	ldrb	r3, [r7, #23]
 801160a:	3301      	adds	r3, #1
 801160c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	781b      	ldrb	r3, [r3, #0]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d1e7      	bne.n	80115e6 <USBD_GetString+0x6a>
 8011616:	e000      	b.n	801161a <USBD_GetString+0x9e>
    return;
 8011618:	bf00      	nop
  }
}
 801161a:	3718      	adds	r7, #24
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011620:	b480      	push	{r7}
 8011622:	b085      	sub	sp, #20
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011628:	2300      	movs	r3, #0
 801162a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011630:	e005      	b.n	801163e <USBD_GetLen+0x1e>
  {
    len++;
 8011632:	7bfb      	ldrb	r3, [r7, #15]
 8011634:	3301      	adds	r3, #1
 8011636:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	3301      	adds	r3, #1
 801163c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d1f5      	bne.n	8011632 <USBD_GetLen+0x12>
  }

  return len;
 8011646:	7bfb      	ldrb	r3, [r7, #15]
}
 8011648:	4618      	mov	r0, r3
 801164a:	3714      	adds	r7, #20
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b084      	sub	sp, #16
 8011658:	af00      	add	r7, sp, #0
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	60b9      	str	r1, [r7, #8]
 801165e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2202      	movs	r2, #2
 8011664:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	687a      	ldr	r2, [r7, #4]
 801166c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	68ba      	ldr	r2, [r7, #8]
 8011678:	2100      	movs	r1, #0
 801167a:	68f8      	ldr	r0, [r7, #12]
 801167c:	f009 fafb 	bl	801ac76 <USBD_LL_Transmit>

  return USBD_OK;
 8011680:	2300      	movs	r3, #0
}
 8011682:	4618      	mov	r0, r3
 8011684:	3710      	adds	r7, #16
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}

0801168a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801168a:	b580      	push	{r7, lr}
 801168c:	b084      	sub	sp, #16
 801168e:	af00      	add	r7, sp, #0
 8011690:	60f8      	str	r0, [r7, #12]
 8011692:	60b9      	str	r1, [r7, #8]
 8011694:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	68ba      	ldr	r2, [r7, #8]
 801169a:	2100      	movs	r1, #0
 801169c:	68f8      	ldr	r0, [r7, #12]
 801169e:	f009 faea 	bl	801ac76 <USBD_LL_Transmit>

  return USBD_OK;
 80116a2:	2300      	movs	r3, #0
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3710      	adds	r7, #16
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b084      	sub	sp, #16
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	60f8      	str	r0, [r7, #12]
 80116b4:	60b9      	str	r1, [r7, #8]
 80116b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	2203      	movs	r2, #3
 80116bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	687a      	ldr	r2, [r7, #4]
 80116c4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	687a      	ldr	r2, [r7, #4]
 80116cc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	68ba      	ldr	r2, [r7, #8]
 80116d4:	2100      	movs	r1, #0
 80116d6:	68f8      	ldr	r0, [r7, #12]
 80116d8:	f009 faee 	bl	801acb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80116dc:	2300      	movs	r3, #0
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3710      	adds	r7, #16
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}

080116e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80116e6:	b580      	push	{r7, lr}
 80116e8:	b084      	sub	sp, #16
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	60f8      	str	r0, [r7, #12]
 80116ee:	60b9      	str	r1, [r7, #8]
 80116f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	68ba      	ldr	r2, [r7, #8]
 80116f6:	2100      	movs	r1, #0
 80116f8:	68f8      	ldr	r0, [r7, #12]
 80116fa:	f009 fadd 	bl	801acb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80116fe:	2300      	movs	r3, #0
}
 8011700:	4618      	mov	r0, r3
 8011702:	3710      	adds	r7, #16
 8011704:	46bd      	mov	sp, r7
 8011706:	bd80      	pop	{r7, pc}

08011708 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2204      	movs	r2, #4
 8011714:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011718:	2300      	movs	r3, #0
 801171a:	2200      	movs	r2, #0
 801171c:	2100      	movs	r1, #0
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f009 faa9 	bl	801ac76 <USBD_LL_Transmit>

  return USBD_OK;
 8011724:	2300      	movs	r3, #0
}
 8011726:	4618      	mov	r0, r3
 8011728:	3708      	adds	r7, #8
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}

0801172e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801172e:	b580      	push	{r7, lr}
 8011730:	b082      	sub	sp, #8
 8011732:	af00      	add	r7, sp, #0
 8011734:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2205      	movs	r2, #5
 801173a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801173e:	2300      	movs	r3, #0
 8011740:	2200      	movs	r2, #0
 8011742:	2100      	movs	r1, #0
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f009 fab7 	bl	801acb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801174a:	2300      	movs	r3, #0
}
 801174c:	4618      	mov	r0, r3
 801174e:	3708      	adds	r7, #8
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}

08011754 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8011754:	b590      	push	{r4, r7, lr}
 8011756:	b08b      	sub	sp, #44	@ 0x2c
 8011758:	af04      	add	r7, sp, #16
 801175a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 801175c:	2300      	movs	r3, #0
 801175e:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 8011760:	2300      	movs	r3, #0
 8011762:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8011764:	2300      	movs	r3, #0
 8011766:	2201      	movs	r2, #1
 8011768:	2101      	movs	r1, #1
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f006 ff90 	bl	8018690 <USBH_FindInterface>
 8011770:	4603      	mov	r3, r0
 8011772:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 8011774:	7c7b      	ldrb	r3, [r7, #17]
 8011776:	2bff      	cmp	r3, #255	@ 0xff
 8011778:	d111      	bne.n	801179e <USBH_AUDIO_InterfaceInit+0x4a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 801177a:	482e      	ldr	r0, [pc, #184]	@ (8011834 <USBH_AUDIO_InterfaceInit+0xe0>)
 801177c:	f009 ffda 	bl	801b734 <iprintf>
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011786:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	4619      	mov	r1, r3
 801178e:	482a      	ldr	r0, [pc, #168]	@ (8011838 <USBH_AUDIO_InterfaceInit+0xe4>)
 8011790:	f009 ffd0 	bl	801b734 <iprintf>
 8011794:	200a      	movs	r0, #10
 8011796:	f009 ffdf 	bl	801b758 <putchar>
    return USBH_FAIL;
 801179a:	2302      	movs	r3, #2
 801179c:	e1d6      	b.n	8011b4c <USBH_AUDIO_InterfaceInit+0x3f8>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80117a4:	f8d3 434c 	ldr.w	r4, [r3, #844]	@ 0x34c
 80117a8:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 80117ac:	f009 fe42 	bl	801b434 <malloc>
 80117b0:	4603      	mov	r3, r0
 80117b2:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80117ba:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80117be:	69db      	ldr	r3, [r3, #28]
 80117c0:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d10a      	bne.n	80117de <USBH_AUDIO_InterfaceInit+0x8a>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
 80117c8:	481a      	ldr	r0, [pc, #104]	@ (8011834 <USBH_AUDIO_InterfaceInit+0xe0>)
 80117ca:	f009 ffb3 	bl	801b734 <iprintf>
 80117ce:	481b      	ldr	r0, [pc, #108]	@ (801183c <USBH_AUDIO_InterfaceInit+0xe8>)
 80117d0:	f009 ffb0 	bl	801b734 <iprintf>
 80117d4:	200a      	movs	r0, #10
 80117d6:	f009 ffbf 	bl	801b758 <putchar>
    return USBH_FAIL;
 80117da:	2302      	movs	r3, #2
 80117dc:	e1b6      	b.n	8011b4c <USBH_AUDIO_InterfaceInit+0x3f8>
  }

  /* Initialize audio handler */
  (void)USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 80117de:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 80117e2:	2100      	movs	r1, #0
 80117e4:	68f8      	ldr	r0, [r7, #12]
 80117e6:	f00a f8f5 	bl	801b9d4 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f000 fc6d 	bl	80120ca <USBH_AUDIO_FindAudioStreamingIN>
 80117f0:	4603      	mov	r3, r0
 80117f2:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f000 fd32 	bl	801225e <USBH_AUDIO_FindAudioStreamingOUT>
 80117fa:	4603      	mov	r3, r0
 80117fc:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 80117fe:	7afb      	ldrb	r3, [r7, #11]
 8011800:	2b02      	cmp	r3, #2
 8011802:	d114      	bne.n	801182e <USBH_AUDIO_InterfaceInit+0xda>
 8011804:	7abb      	ldrb	r3, [r7, #10]
 8011806:	2b02      	cmp	r3, #2
 8011808:	d111      	bne.n	801182e <USBH_AUDIO_InterfaceInit+0xda>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
 801180a:	480a      	ldr	r0, [pc, #40]	@ (8011834 <USBH_AUDIO_InterfaceInit+0xe0>)
 801180c:	f009 ff92 	bl	801b734 <iprintf>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011816:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	4619      	mov	r1, r3
 801181e:	4808      	ldr	r0, [pc, #32]	@ (8011840 <USBH_AUDIO_InterfaceInit+0xec>)
 8011820:	f009 ff88 	bl	801b734 <iprintf>
 8011824:	200a      	movs	r0, #10
 8011826:	f009 ff97 	bl	801b758 <putchar>
    return USBH_FAIL;
 801182a:	2302      	movs	r3, #2
 801182c:	e18e      	b.n	8011b4c <USBH_AUDIO_InterfaceInit+0x3f8>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 801182e:	2300      	movs	r3, #0
 8011830:	75fb      	strb	r3, [r7, #23]
 8011832:	e0ce      	b.n	80119d2 <USBH_AUDIO_InterfaceInit+0x27e>
 8011834:	0801c674 	.word	0x0801c674
 8011838:	0801c680 	.word	0x0801c680
 801183c:	0801c6a8 	.word	0x0801c6a8
 8011840:	0801c6d0 	.word	0x0801c6d0
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 8011844:	7dfa      	ldrb	r2, [r7, #23]
 8011846:	68f9      	ldr	r1, [r7, #12]
 8011848:	4613      	mov	r3, r2
 801184a:	009b      	lsls	r3, r3, #2
 801184c:	4413      	add	r3, r2
 801184e:	005b      	lsls	r3, r3, #1
 8011850:	440b      	add	r3, r1
 8011852:	333e      	adds	r3, #62	@ 0x3e
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	2b01      	cmp	r3, #1
 8011858:	d156      	bne.n	8011908 <USBH_AUDIO_InterfaceInit+0x1b4>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 801185a:	7dfa      	ldrb	r2, [r7, #23]
 801185c:	68f9      	ldr	r1, [r7, #12]
 801185e:	4613      	mov	r3, r2
 8011860:	009b      	lsls	r3, r3, #2
 8011862:	4413      	add	r3, r2
 8011864:	005b      	lsls	r3, r3, #1
 8011866:	440b      	add	r3, r1
 8011868:	333a      	adds	r3, #58	@ 0x3a
 801186a:	881b      	ldrh	r3, [r3, #0]
 801186c:	8aba      	ldrh	r2, [r7, #20]
 801186e:	429a      	cmp	r2, r3
 8011870:	d24a      	bcs.n	8011908 <USBH_AUDIO_InterfaceInit+0x1b4>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 8011872:	7dfa      	ldrb	r2, [r7, #23]
 8011874:	68f9      	ldr	r1, [r7, #12]
 8011876:	4613      	mov	r3, r2
 8011878:	009b      	lsls	r3, r3, #2
 801187a:	4413      	add	r3, r2
 801187c:	005b      	lsls	r3, r3, #1
 801187e:	440b      	add	r3, r1
 8011880:	333a      	adds	r3, #58	@ 0x3a
 8011882:	881b      	ldrh	r3, [r3, #0]
 8011884:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 8011886:	7dfa      	ldrb	r2, [r7, #23]
 8011888:	68f9      	ldr	r1, [r7, #12]
 801188a:	4613      	mov	r3, r2
 801188c:	009b      	lsls	r3, r3, #2
 801188e:	4413      	add	r3, r2
 8011890:	005b      	lsls	r3, r3, #1
 8011892:	440b      	add	r3, r1
 8011894:	333d      	adds	r3, #61	@ 0x3d
 8011896:	781a      	ldrb	r2, [r3, #0]
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 801189e:	7dfa      	ldrb	r2, [r7, #23]
 80118a0:	68f9      	ldr	r1, [r7, #12]
 80118a2:	4613      	mov	r3, r2
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	4413      	add	r3, r2
 80118a8:	005b      	lsls	r3, r3, #1
 80118aa:	440b      	add	r3, r1
 80118ac:	333c      	adds	r3, #60	@ 0x3c
 80118ae:	781a      	ldrb	r2, [r3, #0]
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 80118b6:	7dfa      	ldrb	r2, [r7, #23]
 80118b8:	68f9      	ldr	r1, [r7, #12]
 80118ba:	4613      	mov	r3, r2
 80118bc:	009b      	lsls	r3, r3, #2
 80118be:	4413      	add	r3, r2
 80118c0:	005b      	lsls	r3, r3, #1
 80118c2:	440b      	add	r3, r1
 80118c4:	3338      	adds	r3, #56	@ 0x38
 80118c6:	781a      	ldrb	r2, [r3, #0]
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 80118ce:	7dfa      	ldrb	r2, [r7, #23]
 80118d0:	68f9      	ldr	r1, [r7, #12]
 80118d2:	4613      	mov	r3, r2
 80118d4:	009b      	lsls	r3, r3, #2
 80118d6:	4413      	add	r3, r2
 80118d8:	005b      	lsls	r3, r3, #1
 80118da:	440b      	add	r3, r1
 80118dc:	333a      	adds	r3, #58	@ 0x3a
 80118de:	881a      	ldrh	r2, [r3, #0]
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 80118e6:	7dfa      	ldrb	r2, [r7, #23]
 80118e8:	68f9      	ldr	r1, [r7, #12]
 80118ea:	4613      	mov	r3, r2
 80118ec:	009b      	lsls	r3, r3, #2
 80118ee:	4413      	add	r3, r2
 80118f0:	005b      	lsls	r3, r3, #1
 80118f2:	440b      	add	r3, r1
 80118f4:	3340      	adds	r3, #64	@ 0x40
 80118f6:	881b      	ldrh	r3, [r3, #0]
 80118f8:	b2da      	uxtb	r2, r3
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2201      	movs	r2, #1
 8011904:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 8011908:	7dfa      	ldrb	r2, [r7, #23]
 801190a:	68f9      	ldr	r1, [r7, #12]
 801190c:	4613      	mov	r3, r2
 801190e:	009b      	lsls	r3, r3, #2
 8011910:	4413      	add	r3, r2
 8011912:	005b      	lsls	r3, r3, #1
 8011914:	440b      	add	r3, r1
 8011916:	330c      	adds	r3, #12
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	2b01      	cmp	r3, #1
 801191c:	d156      	bne.n	80119cc <USBH_AUDIO_InterfaceInit+0x278>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 801191e:	7dfa      	ldrb	r2, [r7, #23]
 8011920:	68f9      	ldr	r1, [r7, #12]
 8011922:	4613      	mov	r3, r2
 8011924:	009b      	lsls	r3, r3, #2
 8011926:	4413      	add	r3, r2
 8011928:	005b      	lsls	r3, r3, #1
 801192a:	440b      	add	r3, r1
 801192c:	3308      	adds	r3, #8
 801192e:	881b      	ldrh	r3, [r3, #0]
 8011930:	8a7a      	ldrh	r2, [r7, #18]
 8011932:	429a      	cmp	r2, r3
 8011934:	d24a      	bcs.n	80119cc <USBH_AUDIO_InterfaceInit+0x278>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 8011936:	7dfa      	ldrb	r2, [r7, #23]
 8011938:	68f9      	ldr	r1, [r7, #12]
 801193a:	4613      	mov	r3, r2
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	4413      	add	r3, r2
 8011940:	005b      	lsls	r3, r3, #1
 8011942:	440b      	add	r3, r1
 8011944:	3308      	adds	r3, #8
 8011946:	881b      	ldrh	r3, [r3, #0]
 8011948:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 801194a:	7dfa      	ldrb	r2, [r7, #23]
 801194c:	68f9      	ldr	r1, [r7, #12]
 801194e:	4613      	mov	r3, r2
 8011950:	009b      	lsls	r3, r3, #2
 8011952:	4413      	add	r3, r2
 8011954:	005b      	lsls	r3, r3, #1
 8011956:	440b      	add	r3, r1
 8011958:	330b      	adds	r3, #11
 801195a:	781a      	ldrb	r2, [r3, #0]
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 8011962:	7dfa      	ldrb	r2, [r7, #23]
 8011964:	68f9      	ldr	r1, [r7, #12]
 8011966:	4613      	mov	r3, r2
 8011968:	009b      	lsls	r3, r3, #2
 801196a:	4413      	add	r3, r2
 801196c:	005b      	lsls	r3, r3, #1
 801196e:	440b      	add	r3, r1
 8011970:	330a      	adds	r3, #10
 8011972:	781a      	ldrb	r2, [r3, #0]
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 801197a:	7dfa      	ldrb	r2, [r7, #23]
 801197c:	68f9      	ldr	r1, [r7, #12]
 801197e:	4613      	mov	r3, r2
 8011980:	009b      	lsls	r3, r3, #2
 8011982:	4413      	add	r3, r2
 8011984:	005b      	lsls	r3, r3, #1
 8011986:	440b      	add	r3, r1
 8011988:	3306      	adds	r3, #6
 801198a:	781a      	ldrb	r2, [r3, #0]
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 8011992:	7dfa      	ldrb	r2, [r7, #23]
 8011994:	68f9      	ldr	r1, [r7, #12]
 8011996:	4613      	mov	r3, r2
 8011998:	009b      	lsls	r3, r3, #2
 801199a:	4413      	add	r3, r2
 801199c:	005b      	lsls	r3, r3, #1
 801199e:	440b      	add	r3, r1
 80119a0:	3308      	adds	r3, #8
 80119a2:	881a      	ldrh	r2, [r3, #0]
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	f8a3 213e 	strh.w	r2, [r3, #318]	@ 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 80119aa:	7dfa      	ldrb	r2, [r7, #23]
 80119ac:	68f9      	ldr	r1, [r7, #12]
 80119ae:	4613      	mov	r3, r2
 80119b0:	009b      	lsls	r3, r3, #2
 80119b2:	4413      	add	r3, r2
 80119b4:	005b      	lsls	r3, r3, #1
 80119b6:	440b      	add	r3, r1
 80119b8:	3340      	adds	r3, #64	@ 0x40
 80119ba:	881b      	ldrh	r3, [r3, #0]
 80119bc:	b2da      	uxtb	r2, r3
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
        AUDIO_Handle->microphone.supported = 1U;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	2201      	movs	r2, #1
 80119c8:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 80119cc:	7dfb      	ldrb	r3, [r7, #23]
 80119ce:	3301      	adds	r3, #1
 80119d0:	75fb      	strb	r3, [r7, #23]
 80119d2:	7dfb      	ldrb	r3, [r7, #23]
 80119d4:	2b04      	cmp	r3, #4
 80119d6:	f67f af35 	bls.w	8011844 <USBH_AUDIO_InterfaceInit+0xf0>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f000 fd09 	bl	80123f2 <USBH_AUDIO_FindHIDControl>
 80119e0:	4603      	mov	r3, r0
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d103      	bne.n	80119ee <USBH_AUDIO_InterfaceInit+0x29a>
  {
    AUDIO_Handle->control.supported = 1U;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	2201      	movs	r2, #1
 80119ea:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  (void)USBH_AUDIO_ParseCSDescriptors(phost);
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f000 fd8a 	bl	8012508 <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d132      	bne.n	8011a64 <USBH_AUDIO_InterfaceInit+0x310>
  {
    (void)USBH_AUDIO_BuildHeadphonePath(phost);
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f000 ffe4 	bl	80129cc <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f008 fcd4 	bl	801a3ba <USBH_AllocPipe>
 8011a12:	4603      	mov	r3, r0
 8011a14:	461a      	mov	r2, r3
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	f893 10fb 	ldrb.w	r1, [r3, #251]	@ 0xfb
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	f893 00f4 	ldrb.w	r0, [r3, #244]	@ 0xf4
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011a2e:	f893 411c 	ldrb.w	r4, [r3, #284]	@ 0x11c
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011a38:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8011a3c:	68fa      	ldr	r2, [r7, #12]
 8011a3e:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	@ 0xf6
 8011a42:	9202      	str	r2, [sp, #8]
 8011a44:	2201      	movs	r2, #1
 8011a46:	9201      	str	r2, [sp, #4]
 8011a48:	9300      	str	r3, [sp, #0]
 8011a4a:	4623      	mov	r3, r4
 8011a4c:	4602      	mov	r2, r0
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f008 fc84 	bl	801a35c <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->headphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f009 fc47 	bl	801b2f2 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8011a6a:	2b01      	cmp	r3, #1
 8011a6c:	d132      	bne.n	8011ad4 <USBH_AUDIO_InterfaceInit+0x380>
  {
    (void)USBH_AUDIO_BuildMicrophonePath(phost);
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f000 ff22 	bl	80128b8 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f008 fc9c 	bl	801a3ba <USBH_AllocPipe>
 8011a82:	4603      	mov	r3, r0
 8011a84:	461a      	mov	r2, r3
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	f893 1143 	ldrb.w	r1, [r3, #323]	@ 0x143
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	f893 013c 	ldrb.w	r0, [r3, #316]	@ 0x13c
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011a9e:	f893 411c 	ldrb.w	r4, [r3, #284]	@ 0x11c
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011aa8:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8011aac:	68fa      	ldr	r2, [r7, #12]
 8011aae:	f8b2 213e 	ldrh.w	r2, [r2, #318]	@ 0x13e
 8011ab2:	9202      	str	r2, [sp, #8]
 8011ab4:	2201      	movs	r2, #1
 8011ab6:	9201      	str	r2, [sp, #4]
 8011ab8:	9300      	str	r3, [sp, #0]
 8011aba:	4623      	mov	r3, r4
 8011abc:	4602      	mov	r2, r0
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f008 fc4c 	bl	801a35c <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->microphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8011aca:	2200      	movs	r2, #0
 8011acc:	4619      	mov	r1, r3
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f009 fc0f 	bl	801b2f2 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d12f      	bne.n	8011b3e <USBH_AUDIO_InterfaceInit+0x3ea>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f008 fc67 	bl	801a3ba <USBH_AllocPipe>
 8011aec:	4603      	mov	r3, r0
 8011aee:	461a      	mov	r2, r3
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	f883 218a 	strb.w	r2, [r3, #394]	@ 0x18a

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	f893 118a 	ldrb.w	r1, [r3, #394]	@ 0x18a
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	f893 0184 	ldrb.w	r0, [r3, #388]	@ 0x184
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011b08:	f893 411c 	ldrb.w	r4, [r3, #284]	@ 0x11c
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011b12:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8011b16:	68fa      	ldr	r2, [r7, #12]
 8011b18:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 8011b1c:	9202      	str	r2, [sp, #8]
 8011b1e:	2203      	movs	r2, #3
 8011b20:	9201      	str	r2, [sp, #4]
 8011b22:	9300      	str	r3, [sp, #0]
 8011b24:	4623      	mov	r3, r4
 8011b26:	4602      	mov	r2, r0
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f008 fc17 	bl	801a35c <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        AUDIO_Handle->control.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8011b34:	2200      	movs	r2, #0
 8011b36:	4619      	mov	r1, r3
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f009 fbda 	bl	801b2f2 <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2201      	movs	r2, #1
 8011b42:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	2201      	movs	r2, #1
 8011b48:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 8011b4a:	2300      	movs	r3, #0
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	371c      	adds	r7, #28
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd90      	pop	{r4, r7, pc}

08011b54 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b084      	sub	sp, #16
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011b62:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8011b66:	69db      	ldr	r3, [r3, #28]
 8011b68:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d011      	beq.n	8011b98 <USBH_AUDIO_InterfaceDeInit+0x44>
  {
    (void)USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8011b7a:	4619      	mov	r1, r3
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f008 fc0c 	bl	801a39a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8011b88:	4619      	mov	r1, r3
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f008 fc38 	bl	801a400 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	2200      	movs	r2, #0
 8011b94:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d011      	beq.n	8011bc6 <USBH_AUDIO_InterfaceDeInit+0x72>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8011ba8:	4619      	mov	r1, r3
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f008 fbf5 	bl	801a39a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f008 fc21 	bl	801a400 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d011      	beq.n	8011bf4 <USBH_AUDIO_InterfaceDeInit+0xa0>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f008 fbde 	bl	801a39a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8011be4:	4619      	mov	r1, r3
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f008 fc0a 	bl	801a400 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	f883 218a 	strb.w	r2, [r3, #394]	@ 0x18a
  }

  if ((phost->pActiveClass->pData) != 0U)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011bfa:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8011bfe:	69db      	ldr	r3, [r3, #28]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d00f      	beq.n	8011c24 <USBH_AUDIO_InterfaceDeInit+0xd0>
  {
    USBH_free(phost->pActiveClass->pData);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011c0a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8011c0e:	69db      	ldr	r3, [r3, #28]
 8011c10:	4618      	mov	r0, r3
 8011c12:	f009 fc17 	bl	801b444 <free>
    phost->pActiveClass->pData = 0U;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011c1c:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8011c20:	2200      	movs	r2, #0
 8011c22:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK;
 8011c24:	2300      	movs	r3, #0
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3710      	adds	r7, #16
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
	...

08011c30 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b086      	sub	sp, #24
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011c3e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8011c42:	69db      	ldr	r3, [r3, #28]
 8011c44:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8011c46:	2301      	movs	r3, #1
 8011c48:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	3b01      	subs	r3, #1
 8011c54:	2b06      	cmp	r3, #6
 8011c56:	f200 80e5 	bhi.w	8011e24 <USBH_AUDIO_ClassRequest+0x1f4>
 8011c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8011c60 <USBH_AUDIO_ClassRequest+0x30>)
 8011c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c60:	08011c7d 	.word	0x08011c7d
 8011c64:	08011e09 	.word	0x08011e09
 8011c68:	08011c7d 	.word	0x08011c7d
 8011c6c:	08011cd1 	.word	0x08011cd1
 8011c70:	08011d5d 	.word	0x08011d5d
 8011c74:	08011db3 	.word	0x08011db3
 8011c78:	08011d49 	.word	0x08011d49
  {
    case AUDIO_REQ_INIT:
    case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8011c82:	2b01      	cmp	r3, #1
 8011c84:	d120      	bne.n	8011cc8 <USBH_AUDIO_ClassRequest+0x98>
      {
        req_status = USBH_SetInterface(phost,
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	4619      	mov	r1, r3
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f007 fd2f 	bl	80196f4 <USBH_SetInterface>
 8011c96:	4603      	mov	r3, r0
 8011c98:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 8011c9a:	7bfb      	ldrb	r3, [r7, #15]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d103      	bne.n	8011ca8 <USBH_AUDIO_ClassRequest+0x78>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	2204      	movs	r2, #4
 8011ca4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8011ca6:	e0bf      	b.n	8011e28 <USBH_AUDIO_ClassRequest+0x1f8>
        else if (req_status == USBH_NOT_SUPPORTED)
 8011ca8:	7bfb      	ldrb	r3, [r7, #15]
 8011caa:	2b03      	cmp	r3, #3
 8011cac:	f040 80bc 	bne.w	8011e28 <USBH_AUDIO_ClassRequest+0x1f8>
          USBH_ErrLog("Control error: AUDIO: Device Set interface request failed");
 8011cb0:	4864      	ldr	r0, [pc, #400]	@ (8011e44 <USBH_AUDIO_ClassRequest+0x214>)
 8011cb2:	f009 fd3f 	bl	801b734 <iprintf>
 8011cb6:	4864      	ldr	r0, [pc, #400]	@ (8011e48 <USBH_AUDIO_ClassRequest+0x218>)
 8011cb8:	f009 fd3c 	bl	801b734 <iprintf>
 8011cbc:	200a      	movs	r0, #10
 8011cbe:	f009 fd4b 	bl	801b758 <putchar>
          status = USBH_FAIL;
 8011cc2:	2302      	movs	r3, #2
 8011cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8011cc6:	e0af      	b.n	8011e28 <USBH_AUDIO_ClassRequest+0x1f8>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	2204      	movs	r2, #4
 8011ccc:	701a      	strb	r2, [r3, #0]
      break;
 8011cce:	e0ab      	b.n	8011e28 <USBH_AUDIO_ClassRequest+0x1f8>

    case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8011cd6:	2b01      	cmp	r3, #1
 8011cd8:	d12f      	bne.n	8011d3a <USBH_AUDIO_ClassRequest+0x10a>
      {
        req_status = USBH_SetInterface(phost,
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	4619      	mov	r1, r3
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f007 fd05 	bl	80196f4 <USBH_SetInterface>
 8011cea:	4603      	mov	r3, r0
 8011cec:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 8011cee:	7bfb      	ldrb	r3, [r7, #15]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d112      	bne.n	8011d1a <USBH_AUDIO_ClassRequest+0xea>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8011cf4:	693b      	ldr	r3, [r7, #16]
 8011cf6:	2207      	movs	r2, #7
 8011cf8:	701a      	strb	r2, [r3, #0]
          AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	2206      	movs	r2, #6
 8011cfe:	705a      	strb	r2, [r3, #1]

          AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
          AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8011d0c:	693b      	ldr	r3, [r7, #16]
 8011d0e:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8011d18:	e088      	b.n	8011e2c <USBH_AUDIO_ClassRequest+0x1fc>
        else if (req_status == USBH_NOT_SUPPORTED)
 8011d1a:	7bfb      	ldrb	r3, [r7, #15]
 8011d1c:	2b03      	cmp	r3, #3
 8011d1e:	f040 8085 	bne.w	8011e2c <USBH_AUDIO_ClassRequest+0x1fc>
          USBH_ErrLog("Control error: AUDIO: Device Set interface request failed");
 8011d22:	4848      	ldr	r0, [pc, #288]	@ (8011e44 <USBH_AUDIO_ClassRequest+0x214>)
 8011d24:	f009 fd06 	bl	801b734 <iprintf>
 8011d28:	4847      	ldr	r0, [pc, #284]	@ (8011e48 <USBH_AUDIO_ClassRequest+0x218>)
 8011d2a:	f009 fd03 	bl	801b734 <iprintf>
 8011d2e:	200a      	movs	r0, #10
 8011d30:	f009 fd12 	bl	801b758 <putchar>
          status = USBH_FAIL;
 8011d34:	2302      	movs	r3, #2
 8011d36:	75fb      	strb	r3, [r7, #23]
      break;
 8011d38:	e078      	b.n	8011e2c <USBH_AUDIO_ClassRequest+0x1fc>
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	2207      	movs	r2, #7
 8011d3e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	2206      	movs	r2, #6
 8011d44:	705a      	strb	r2, [r3, #1]
      break;
 8011d46:	e071      	b.n	8011e2c <USBH_AUDIO_ClassRequest+0x1fc>

    case AUDIO_REQ_CS_REQUESTS:
      if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 8011d48:	6878      	ldr	r0, [r7, #4]
 8011d4a:	f000 f951 	bl	8011ff0 <USBH_AUDIO_HandleCSRequest>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d16d      	bne.n	8011e30 <USBH_AUDIO_ClassRequest+0x200>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	2205      	movs	r2, #5
 8011d58:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011d5a:	e069      	b.n	8011e30 <USBH_AUDIO_ClassRequest+0x200>

    case AUDIO_REQ_SET_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8011d62:	2b01      	cmp	r3, #1
 8011d64:	d121      	bne.n	8011daa <USBH_AUDIO_ClassRequest+0x17a>
      {
        req_status = USBH_SetInterface(phost,
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	f893 1140 	ldrb.w	r1, [r3, #320]	@ 0x140
 8011d6c:	693b      	ldr	r3, [r7, #16]
 8011d6e:	f893 3141 	ldrb.w	r3, [r3, #321]	@ 0x141
 8011d72:	461a      	mov	r2, r3
 8011d74:	6878      	ldr	r0, [r7, #4]
 8011d76:	f007 fcbd 	bl	80196f4 <USBH_SetInterface>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       AUDIO_Handle->microphone.AltSettings);

        if (req_status == USBH_OK)
 8011d7e:	7bfb      	ldrb	r3, [r7, #15]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d103      	bne.n	8011d8c <USBH_AUDIO_ClassRequest+0x15c>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	2206      	movs	r2, #6
 8011d88:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8011d8a:	e053      	b.n	8011e34 <USBH_AUDIO_ClassRequest+0x204>
        else if (req_status == USBH_NOT_SUPPORTED)
 8011d8c:	7bfb      	ldrb	r3, [r7, #15]
 8011d8e:	2b03      	cmp	r3, #3
 8011d90:	d150      	bne.n	8011e34 <USBH_AUDIO_ClassRequest+0x204>
          USBH_ErrLog("Control error: AUDIO: Device Set interface request failed");
 8011d92:	482c      	ldr	r0, [pc, #176]	@ (8011e44 <USBH_AUDIO_ClassRequest+0x214>)
 8011d94:	f009 fcce 	bl	801b734 <iprintf>
 8011d98:	482b      	ldr	r0, [pc, #172]	@ (8011e48 <USBH_AUDIO_ClassRequest+0x218>)
 8011d9a:	f009 fccb 	bl	801b734 <iprintf>
 8011d9e:	200a      	movs	r0, #10
 8011da0:	f009 fcda 	bl	801b758 <putchar>
          status = USBH_FAIL;
 8011da4:	2302      	movs	r3, #2
 8011da6:	75fb      	strb	r3, [r7, #23]
      break;
 8011da8:	e044      	b.n	8011e34 <USBH_AUDIO_ClassRequest+0x204>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8011daa:	693b      	ldr	r3, [r7, #16]
 8011dac:	2206      	movs	r2, #6
 8011dae:	701a      	strb	r2, [r3, #0]
      break;
 8011db0:	e040      	b.n	8011e34 <USBH_AUDIO_ClassRequest+0x204>
    case AUDIO_REQ_SET_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8011db8:	2b01      	cmp	r3, #1
 8011dba:	d121      	bne.n	8011e00 <USBH_AUDIO_ClassRequest+0x1d0>
      {
        req_status = USBH_SetInterface(phost,
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	f893 10f8 	ldrb.w	r1, [r3, #248]	@ 0xf8
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8011dc8:	461a      	mov	r2, r3
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f007 fc92 	bl	80196f4 <USBH_SetInterface>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       AUDIO_Handle->headphone.AltSettings);

        if (req_status == USBH_OK)
 8011dd4:	7bfb      	ldrb	r3, [r7, #15]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d103      	bne.n	8011de2 <USBH_AUDIO_ClassRequest+0x1b2>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	2202      	movs	r2, #2
 8011dde:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8011de0:	e02a      	b.n	8011e38 <USBH_AUDIO_ClassRequest+0x208>
        else if (req_status == USBH_NOT_SUPPORTED)
 8011de2:	7bfb      	ldrb	r3, [r7, #15]
 8011de4:	2b03      	cmp	r3, #3
 8011de6:	d127      	bne.n	8011e38 <USBH_AUDIO_ClassRequest+0x208>
          USBH_ErrLog("Control error: AUDIO: Device Set interface request failed");
 8011de8:	4816      	ldr	r0, [pc, #88]	@ (8011e44 <USBH_AUDIO_ClassRequest+0x214>)
 8011dea:	f009 fca3 	bl	801b734 <iprintf>
 8011dee:	4816      	ldr	r0, [pc, #88]	@ (8011e48 <USBH_AUDIO_ClassRequest+0x218>)
 8011df0:	f009 fca0 	bl	801b734 <iprintf>
 8011df4:	200a      	movs	r0, #10
 8011df6:	f009 fcaf 	bl	801b758 <putchar>
          status = USBH_FAIL;
 8011dfa:	2302      	movs	r3, #2
 8011dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8011dfe:	e01b      	b.n	8011e38 <USBH_AUDIO_ClassRequest+0x208>
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	2202      	movs	r2, #2
 8011e04:	701a      	strb	r2, [r3, #0]
      break;
 8011e06:	e017      	b.n	8011e38 <USBH_AUDIO_ClassRequest+0x208>
    case AUDIO_REQ_IDLE:
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	2201      	movs	r2, #1
 8011e0c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011e14:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 8011e18:	2102      	movs	r1, #2
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	4798      	blx	r3
      status  = USBH_OK;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8011e22:	e00a      	b.n	8011e3a <USBH_AUDIO_ClassRequest+0x20a>

    default:
      break;
 8011e24:	bf00      	nop
 8011e26:	e008      	b.n	8011e3a <USBH_AUDIO_ClassRequest+0x20a>
      break;
 8011e28:	bf00      	nop
 8011e2a:	e006      	b.n	8011e3a <USBH_AUDIO_ClassRequest+0x20a>
      break;
 8011e2c:	bf00      	nop
 8011e2e:	e004      	b.n	8011e3a <USBH_AUDIO_ClassRequest+0x20a>
      break;
 8011e30:	bf00      	nop
 8011e32:	e002      	b.n	8011e3a <USBH_AUDIO_ClassRequest+0x20a>
      break;
 8011e34:	bf00      	nop
 8011e36:	e000      	b.n	8011e3a <USBH_AUDIO_ClassRequest+0x20a>
      break;
 8011e38:	bf00      	nop
  }
  return status;
 8011e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3718      	adds	r7, #24
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}
 8011e44:	0801c6f8 	.word	0x0801c6f8
 8011e48:	0801c700 	.word	0x0801c700

08011e4c <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b088      	sub	sp, #32
 8011e50:	af02      	add	r7, sp, #8
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	460b      	mov	r3, r1
 8011e56:	70fb      	strb	r3, [r7, #3]
 8011e58:	4613      	mov	r3, r2
 8011e5a:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8011e62:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8011e66:	69db      	ldr	r3, [r3, #28]
 8011e68:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8011e6e:	2301      	movs	r3, #1
 8011e70:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	785b      	ldrb	r3, [r3, #1]
 8011e76:	3b04      	subs	r3, #4
 8011e78:	2b04      	cmp	r3, #4
 8011e7a:	f200 80aa 	bhi.w	8011fd2 <USBH_AUDIO_CSRequest+0x186>
 8011e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8011e84 <USBH_AUDIO_CSRequest+0x38>)
 8011e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e84:	08011ee1 	.word	0x08011ee1
 8011e88:	08011f27 	.word	0x08011f27
 8011e8c:	08011e99 	.word	0x08011e99
 8011e90:	08011f87 	.word	0x08011f87
 8011e94:	08011fcd 	.word	0x08011fcd
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 8011e98:	78fa      	ldrb	r2, [r7, #3]
 8011e9a:	2302      	movs	r3, #2
 8011e9c:	9301      	str	r3, [sp, #4]
 8011e9e:	78bb      	ldrb	r3, [r7, #2]
 8011ea0:	9300      	str	r3, [sp, #0]
 8011ea2:	2302      	movs	r3, #2
 8011ea4:	2106      	movs	r1, #6
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f000 fed0 	bl	8012c4c <USBH_AC_GetCur>
 8011eac:	4603      	mov	r3, r0
 8011eae:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8011eb0:	7bfb      	ldrb	r3, [r7, #15]
 8011eb2:	2b01      	cmp	r3, #1
 8011eb4:	f000 808f 	beq.w	8011fd6 <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	2204      	movs	r2, #4
 8011ebc:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8011eca:	3302      	adds	r3, #2
 8011ecc:	881b      	ldrh	r3, [r3, #0]
 8011ece:	021b      	lsls	r3, r3, #8
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	4313      	orrs	r3, r2
 8011ed4:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8011ed6:	897a      	ldrh	r2, [r7, #10]
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      }
      break;
 8011ede:	e07a      	b.n	8011fd6 <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 8011ee0:	78fa      	ldrb	r2, [r7, #3]
 8011ee2:	2302      	movs	r3, #2
 8011ee4:	9301      	str	r3, [sp, #4]
 8011ee6:	78bb      	ldrb	r3, [r7, #2]
 8011ee8:	9300      	str	r3, [sp, #0]
 8011eea:	2302      	movs	r3, #2
 8011eec:	2106      	movs	r1, #6
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f001 f877 	bl	8012fe2 <USBH_AC_GetMin>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8011ef8:	7bfb      	ldrb	r3, [r7, #15]
 8011efa:	2b01      	cmp	r3, #1
 8011efc:	d06d      	beq.n	8011fda <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	2205      	movs	r2, #5
 8011f02:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8011f04:	693b      	ldr	r3, [r7, #16]
 8011f06:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8011f10:	3302      	adds	r3, #2
 8011f12:	881b      	ldrh	r3, [r3, #0]
 8011f14:	021b      	lsls	r3, r3, #8
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	4313      	orrs	r3, r2
 8011f1a:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8011f1c:	897a      	ldrh	r2, [r7, #10]
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
      }
      break;
 8011f24:	e059      	b.n	8011fda <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8011f26:	78fa      	ldrb	r2, [r7, #3]
 8011f28:	2302      	movs	r3, #2
 8011f2a:	9301      	str	r3, [sp, #4]
 8011f2c:	78bb      	ldrb	r3, [r7, #2]
 8011f2e:	9300      	str	r3, [sp, #0]
 8011f30:	2302      	movs	r3, #2
 8011f32:	2106      	movs	r1, #6
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f000 ff22 	bl	8012d7e <USBH_AC_GetMax>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8011f3e:	7bfb      	ldrb	r3, [r7, #15]
 8011f40:	2b01      	cmp	r3, #1
 8011f42:	d04c      	beq.n	8011fde <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	2207      	movs	r2, #7
 8011f48:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8011f56:	3302      	adds	r3, #2
 8011f58:	881b      	ldrh	r3, [r3, #0]
 8011f5a:	021b      	lsls	r3, r3, #8
 8011f5c:	b29b      	uxth	r3, r3
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8011f62:	897a      	ldrh	r2, [r7, #10]
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8011f6a:	693b      	ldr	r3, [r7, #16]
 8011f6c:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8011f70:	693b      	ldr	r3, [r7, #16]
 8011f72:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8011f76:	429a      	cmp	r2, r3
 8011f78:	d231      	bcs.n	8011fde <USBH_AUDIO_CSRequest+0x192>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8011f80:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        }
      }
      break;
 8011f84:	e02b      	b.n	8011fde <USBH_AUDIO_CSRequest+0x192>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 8011f86:	78fa      	ldrb	r2, [r7, #3]
 8011f88:	2302      	movs	r3, #2
 8011f8a:	9301      	str	r3, [sp, #4]
 8011f8c:	78bb      	ldrb	r3, [r7, #2]
 8011f8e:	9300      	str	r3, [sp, #0]
 8011f90:	2302      	movs	r3, #2
 8011f92:	2106      	movs	r1, #6
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f000 ff8b 	bl	8012eb0 <USBH_AC_GetRes>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8011f9e:	7bfb      	ldrb	r3, [r7, #15]
 8011fa0:	2b01      	cmp	r3, #1
 8011fa2:	d01e      	beq.n	8011fe2 <USBH_AUDIO_CSRequest+0x196>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	2208      	movs	r2, #8
 8011fa8:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8011fb6:	3302      	adds	r3, #2
 8011fb8:	881b      	ldrh	r3, [r3, #0]
 8011fba:	021b      	lsls	r3, r3, #8
 8011fbc:	b29b      	uxth	r3, r3
 8011fbe:	4313      	orrs	r3, r2
 8011fc0:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8011fc2:	89ba      	ldrh	r2, [r7, #12]
 8011fc4:	693b      	ldr	r3, [r7, #16]
 8011fc6:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
      }
      break;
 8011fca:	e00a      	b.n	8011fe2 <USBH_AUDIO_CSRequest+0x196>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	75fb      	strb	r3, [r7, #23]
      break;
 8011fd0:	e008      	b.n	8011fe4 <USBH_AUDIO_CSRequest+0x198>

    default:
      break;
 8011fd2:	bf00      	nop
 8011fd4:	e006      	b.n	8011fe4 <USBH_AUDIO_CSRequest+0x198>
      break;
 8011fd6:	bf00      	nop
 8011fd8:	e004      	b.n	8011fe4 <USBH_AUDIO_CSRequest+0x198>
      break;
 8011fda:	bf00      	nop
 8011fdc:	e002      	b.n	8011fe4 <USBH_AUDIO_CSRequest+0x198>
      break;
 8011fde:	bf00      	nop
 8011fe0:	e000      	b.n	8011fe4 <USBH_AUDIO_CSRequest+0x198>
      break;
 8011fe2:	bf00      	nop
  }
  return status;
 8011fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3718      	adds	r7, #24
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}
 8011fee:	bf00      	nop

08011ff0 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b084      	sub	sp, #16
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8012006:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801200a:	69db      	ldr	r3, [r3, #28]
 801200c:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	f893 11a0 	ldrb.w	r1, [r3, #416]	@ 0x1a0
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 801201a:	461a      	mov	r2, r3
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f7ff ff15 	bl	8011e4c <USBH_AUDIO_CSRequest>
 8012022:	4603      	mov	r3, r0
 8012024:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8012026:	7bbb      	ldrb	r3, [r7, #14]
 8012028:	2b01      	cmp	r3, #1
 801202a:	d01c      	beq.n	8012066 <USBH_AUDIO_HandleCSRequest+0x76>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8012032:	2b01      	cmp	r3, #1
 8012034:	d10c      	bne.n	8012050 <USBH_AUDIO_HandleCSRequest+0x60>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	2200      	movs	r2, #0
 8012046:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
      status = USBH_OK;
 801204a:	2300      	movs	r3, #0
 801204c:	73fb      	strb	r3, [r7, #15]
 801204e:	e007      	b.n	8012060 <USBH_AUDIO_HandleCSRequest+0x70>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8012056:	3b01      	subs	r3, #1
 8012058:	b2da      	uxtb	r2, r3
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	2206      	movs	r2, #6
 8012064:	705a      	strb	r2, [r3, #1]
#if (USBH_USE_OS == 1U)
    USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
  }

  return status;
 8012066:	7bfb      	ldrb	r3, [r7, #15]
}
 8012068:	4618      	mov	r0, r3
 801206a:	3710      	adds	r7, #16
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8012078:	2301      	movs	r3, #1
 801207a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8012082:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8012086:	69db      	ldr	r3, [r3, #28]
 8012088:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8012090:	2b01      	cmp	r3, #1
 8012092:	d102      	bne.n	801209a <USBH_AUDIO_Process+0x2a>
  {
    (void)USBH_AUDIO_OutputStream(phost);
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f001 f931 	bl	80132fc <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 80120a0:	2b01      	cmp	r3, #1
 80120a2:	d102      	bne.n	80120aa <USBH_AUDIO_Process+0x3a>
  {
    (void)USBH_AUDIO_InputStream(phost);
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f001 f85d 	bl	8013164 <USBH_AUDIO_InputStream>
  }

  return status;
 80120aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3710      	adds	r7, #16
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 80120b4:	b480      	push	{r7}
 80120b6:	b083      	sub	sp, #12
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80120bc:	2300      	movs	r3, #0
}
 80120be:	4618      	mov	r0, r3
 80120c0:	370c      	adds	r7, #12
 80120c2:	46bd      	mov	sp, r7
 80120c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c8:	4770      	bx	lr

080120ca <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 80120ca:	b480      	push	{r7}
 80120cc:	b085      	sub	sp, #20
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 80120d2:	2302      	movs	r3, #2
 80120d4:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80120dc:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80120e0:	69db      	ldr	r3, [r3, #28]
 80120e2:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 80120e4:	2300      	movs	r3, #0
 80120e6:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80120e8:	2300      	movs	r3, #0
 80120ea:	73fb      	strb	r3, [r7, #15]
 80120ec:	e0a7      	b.n	801223e <USBH_AUDIO_FindAudioStreamingIN+0x174>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80120ee:	7bfb      	ldrb	r3, [r7, #15]
 80120f0:	687a      	ldr	r2, [r7, #4]
 80120f2:	2132      	movs	r1, #50	@ 0x32
 80120f4:	fb01 f303 	mul.w	r3, r1, r3
 80120f8:	441a      	add	r2, r3
 80120fa:	f248 1347 	movw	r3, #33095	@ 0x8147
 80120fe:	4413      	add	r3, r2
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	2b01      	cmp	r3, #1
 8012104:	f040 8098 	bne.w	8012238 <USBH_AUDIO_FindAudioStreamingIN+0x16e>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8012108:	7bfb      	ldrb	r3, [r7, #15]
 801210a:	687a      	ldr	r2, [r7, #4]
 801210c:	2132      	movs	r1, #50	@ 0x32
 801210e:	fb01 f303 	mul.w	r3, r1, r3
 8012112:	441a      	add	r2, r3
 8012114:	f248 1348 	movw	r3, #33096	@ 0x8148
 8012118:	4413      	add	r3, r2
 801211a:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 801211c:	2b02      	cmp	r3, #2
 801211e:	f040 808b 	bne.w	8012238 <USBH_AUDIO_FindAudioStreamingIN+0x16e>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 8012122:	7bfb      	ldrb	r3, [r7, #15]
 8012124:	687a      	ldr	r2, [r7, #4]
 8012126:	2132      	movs	r1, #50	@ 0x32
 8012128:	fb01 f303 	mul.w	r3, r1, r3
 801212c:	441a      	add	r2, r3
 801212e:	f248 134e 	movw	r3, #33102	@ 0x814e
 8012132:	4413      	add	r3, r2
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	b25b      	sxtb	r3, r3
 8012138:	2b00      	cmp	r3, #0
 801213a:	da7d      	bge.n	8012238 <USBH_AUDIO_FindAudioStreamingIN+0x16e>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 801213c:	7bfb      	ldrb	r3, [r7, #15]
 801213e:	687a      	ldr	r2, [r7, #4]
 8012140:	2132      	movs	r1, #50	@ 0x32
 8012142:	fb01 f303 	mul.w	r3, r1, r3
 8012146:	441a      	add	r2, r3
 8012148:	f248 1350 	movw	r3, #33104	@ 0x8150
 801214c:	4413      	add	r3, r2
 801214e:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 8012150:	2b00      	cmp	r3, #0
 8012152:	d071      	beq.n	8012238 <USBH_AUDIO_FindAudioStreamingIN+0x16e>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012154:	7bfb      	ldrb	r3, [r7, #15]
 8012156:	7bba      	ldrb	r2, [r7, #14]
 8012158:	6879      	ldr	r1, [r7, #4]
 801215a:	2032      	movs	r0, #50	@ 0x32
 801215c:	fb00 f303 	mul.w	r3, r0, r3
 8012160:	4419      	add	r1, r3
 8012162:	f248 134e 	movw	r3, #33102	@ 0x814e
 8012166:	440b      	add	r3, r1
 8012168:	7818      	ldrb	r0, [r3, #0]
 801216a:	68b9      	ldr	r1, [r7, #8]
 801216c:	4613      	mov	r3, r2
 801216e:	009b      	lsls	r3, r3, #2
 8012170:	4413      	add	r3, r2
 8012172:	005b      	lsls	r3, r3, #1
 8012174:	440b      	add	r3, r1
 8012176:	3306      	adds	r3, #6
 8012178:	4602      	mov	r2, r0
 801217a:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801217c:	7bfb      	ldrb	r3, [r7, #15]
 801217e:	7bba      	ldrb	r2, [r7, #14]
 8012180:	6879      	ldr	r1, [r7, #4]
 8012182:	2032      	movs	r0, #50	@ 0x32
 8012184:	fb00 f303 	mul.w	r3, r0, r3
 8012188:	4419      	add	r1, r3
 801218a:	f248 1350 	movw	r3, #33104	@ 0x8150
 801218e:	440b      	add	r3, r1
 8012190:	8818      	ldrh	r0, [r3, #0]
 8012192:	68b9      	ldr	r1, [r7, #8]
 8012194:	4613      	mov	r3, r2
 8012196:	009b      	lsls	r3, r3, #2
 8012198:	4413      	add	r3, r2
 801219a:	005b      	lsls	r3, r3, #1
 801219c:	440b      	add	r3, r1
 801219e:	3308      	adds	r3, #8
 80121a0:	4602      	mov	r2, r0
 80121a2:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80121a4:	7bfb      	ldrb	r3, [r7, #15]
 80121a6:	7bba      	ldrb	r2, [r7, #14]
 80121a8:	6879      	ldr	r1, [r7, #4]
 80121aa:	2032      	movs	r0, #50	@ 0x32
 80121ac:	fb00 f303 	mul.w	r3, r0, r3
 80121b0:	4419      	add	r1, r3
 80121b2:	f248 1344 	movw	r3, #33092	@ 0x8144
 80121b6:	440b      	add	r3, r1
 80121b8:	7818      	ldrb	r0, [r3, #0]
 80121ba:	68b9      	ldr	r1, [r7, #8]
 80121bc:	4613      	mov	r3, r2
 80121be:	009b      	lsls	r3, r3, #2
 80121c0:	4413      	add	r3, r2
 80121c2:	005b      	lsls	r3, r3, #1
 80121c4:	440b      	add	r3, r1
 80121c6:	330b      	adds	r3, #11
 80121c8:	4602      	mov	r2, r0
 80121ca:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 80121cc:	7bfb      	ldrb	r3, [r7, #15]
 80121ce:	7bba      	ldrb	r2, [r7, #14]
 80121d0:	6879      	ldr	r1, [r7, #4]
 80121d2:	2032      	movs	r0, #50	@ 0x32
 80121d4:	fb00 f303 	mul.w	r3, r0, r3
 80121d8:	4419      	add	r1, r3
 80121da:	f248 1345 	movw	r3, #33093	@ 0x8145
 80121de:	440b      	add	r3, r1
 80121e0:	7818      	ldrb	r0, [r3, #0]
 80121e2:	68b9      	ldr	r1, [r7, #8]
 80121e4:	4613      	mov	r3, r2
 80121e6:	009b      	lsls	r3, r3, #2
 80121e8:	4413      	add	r3, r2
 80121ea:	005b      	lsls	r3, r3, #1
 80121ec:	440b      	add	r3, r1
 80121ee:	330a      	adds	r3, #10
 80121f0:	4602      	mov	r2, r0
 80121f2:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80121f4:	7bfb      	ldrb	r3, [r7, #15]
 80121f6:	687a      	ldr	r2, [r7, #4]
 80121f8:	2132      	movs	r1, #50	@ 0x32
 80121fa:	fb01 f303 	mul.w	r3, r1, r3
 80121fe:	441a      	add	r2, r3
 8012200:	f248 1352 	movw	r3, #33106	@ 0x8152
 8012204:	4413      	add	r3, r2
 8012206:	781b      	ldrb	r3, [r3, #0]
 8012208:	7bba      	ldrb	r2, [r7, #14]
 801220a:	4618      	mov	r0, r3
 801220c:	68b9      	ldr	r1, [r7, #8]
 801220e:	4613      	mov	r3, r2
 8012210:	009b      	lsls	r3, r3, #2
 8012212:	4413      	add	r3, r2
 8012214:	005b      	lsls	r3, r3, #1
 8012216:	440b      	add	r3, r1
 8012218:	330e      	adds	r3, #14
 801221a:	4602      	mov	r2, r0
 801221c:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 801221e:	7bba      	ldrb	r2, [r7, #14]
 8012220:	68b9      	ldr	r1, [r7, #8]
 8012222:	4613      	mov	r3, r2
 8012224:	009b      	lsls	r3, r3, #2
 8012226:	4413      	add	r3, r2
 8012228:	005b      	lsls	r3, r3, #1
 801222a:	440b      	add	r3, r1
 801222c:	330c      	adds	r3, #12
 801222e:	2201      	movs	r2, #1
 8012230:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8012232:	7bbb      	ldrb	r3, [r7, #14]
 8012234:	3301      	adds	r3, #1
 8012236:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8012238:	7bfb      	ldrb	r3, [r7, #15]
 801223a:	3301      	adds	r3, #1
 801223c:	73fb      	strb	r3, [r7, #15]
 801223e:	7bfb      	ldrb	r3, [r7, #15]
 8012240:	2b09      	cmp	r3, #9
 8012242:	f67f af54 	bls.w	80120ee <USBH_AUDIO_FindAudioStreamingIN+0x24>
      }
    }
  }

  if (alt_settings > 0U)
 8012246:	7bbb      	ldrb	r3, [r7, #14]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d001      	beq.n	8012250 <USBH_AUDIO_FindAudioStreamingIN+0x186>
  {
    status = USBH_OK;
 801224c:	2300      	movs	r3, #0
 801224e:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8012250:	7b7b      	ldrb	r3, [r7, #13]
}
 8012252:	4618      	mov	r0, r3
 8012254:	3714      	adds	r7, #20
 8012256:	46bd      	mov	sp, r7
 8012258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225c:	4770      	bx	lr

0801225e <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 801225e:	b480      	push	{r7}
 8012260:	b085      	sub	sp, #20
 8012262:	af00      	add	r7, sp, #0
 8012264:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 8012266:	2302      	movs	r3, #2
 8012268:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8012270:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8012274:	69db      	ldr	r3, [r3, #28]
 8012276:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8012278:	2300      	movs	r3, #0
 801227a:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 801227c:	2300      	movs	r3, #0
 801227e:	73fb      	strb	r3, [r7, #15]
 8012280:	e0a7      	b.n	80123d2 <USBH_AUDIO_FindAudioStreamingOUT+0x174>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8012282:	7bfb      	ldrb	r3, [r7, #15]
 8012284:	687a      	ldr	r2, [r7, #4]
 8012286:	2132      	movs	r1, #50	@ 0x32
 8012288:	fb01 f303 	mul.w	r3, r1, r3
 801228c:	441a      	add	r2, r3
 801228e:	f248 1347 	movw	r3, #33095	@ 0x8147
 8012292:	4413      	add	r3, r2
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	2b01      	cmp	r3, #1
 8012298:	f040 8098 	bne.w	80123cc <USBH_AUDIO_FindAudioStreamingOUT+0x16e>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 801229c:	7bfb      	ldrb	r3, [r7, #15]
 801229e:	687a      	ldr	r2, [r7, #4]
 80122a0:	2132      	movs	r1, #50	@ 0x32
 80122a2:	fb01 f303 	mul.w	r3, r1, r3
 80122a6:	441a      	add	r2, r3
 80122a8:	f248 1348 	movw	r3, #33096	@ 0x8148
 80122ac:	4413      	add	r3, r2
 80122ae:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80122b0:	2b02      	cmp	r3, #2
 80122b2:	f040 808b 	bne.w	80123cc <USBH_AUDIO_FindAudioStreamingOUT+0x16e>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 80122b6:	7bfb      	ldrb	r3, [r7, #15]
 80122b8:	687a      	ldr	r2, [r7, #4]
 80122ba:	2132      	movs	r1, #50	@ 0x32
 80122bc:	fb01 f303 	mul.w	r3, r1, r3
 80122c0:	441a      	add	r2, r3
 80122c2:	f248 134e 	movw	r3, #33102	@ 0x814e
 80122c6:	4413      	add	r3, r2
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	b25b      	sxtb	r3, r3
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	db7d      	blt.n	80123cc <USBH_AUDIO_FindAudioStreamingOUT+0x16e>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80122d0:	7bfb      	ldrb	r3, [r7, #15]
 80122d2:	687a      	ldr	r2, [r7, #4]
 80122d4:	2132      	movs	r1, #50	@ 0x32
 80122d6:	fb01 f303 	mul.w	r3, r1, r3
 80122da:	441a      	add	r2, r3
 80122dc:	f248 1350 	movw	r3, #33104	@ 0x8150
 80122e0:	4413      	add	r3, r2
 80122e2:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d071      	beq.n	80123cc <USBH_AUDIO_FindAudioStreamingOUT+0x16e>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80122e8:	7bfb      	ldrb	r3, [r7, #15]
 80122ea:	7bba      	ldrb	r2, [r7, #14]
 80122ec:	6879      	ldr	r1, [r7, #4]
 80122ee:	2032      	movs	r0, #50	@ 0x32
 80122f0:	fb00 f303 	mul.w	r3, r0, r3
 80122f4:	4419      	add	r1, r3
 80122f6:	f248 134e 	movw	r3, #33102	@ 0x814e
 80122fa:	440b      	add	r3, r1
 80122fc:	7818      	ldrb	r0, [r3, #0]
 80122fe:	68b9      	ldr	r1, [r7, #8]
 8012300:	4613      	mov	r3, r2
 8012302:	009b      	lsls	r3, r3, #2
 8012304:	4413      	add	r3, r2
 8012306:	005b      	lsls	r3, r3, #1
 8012308:	440b      	add	r3, r1
 801230a:	3338      	adds	r3, #56	@ 0x38
 801230c:	4602      	mov	r2, r0
 801230e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012310:	7bfb      	ldrb	r3, [r7, #15]
 8012312:	7bba      	ldrb	r2, [r7, #14]
 8012314:	6879      	ldr	r1, [r7, #4]
 8012316:	2032      	movs	r0, #50	@ 0x32
 8012318:	fb00 f303 	mul.w	r3, r0, r3
 801231c:	4419      	add	r1, r3
 801231e:	f248 1350 	movw	r3, #33104	@ 0x8150
 8012322:	440b      	add	r3, r1
 8012324:	8818      	ldrh	r0, [r3, #0]
 8012326:	68b9      	ldr	r1, [r7, #8]
 8012328:	4613      	mov	r3, r2
 801232a:	009b      	lsls	r3, r3, #2
 801232c:	4413      	add	r3, r2
 801232e:	005b      	lsls	r3, r3, #1
 8012330:	440b      	add	r3, r1
 8012332:	333a      	adds	r3, #58	@ 0x3a
 8012334:	4602      	mov	r2, r0
 8012336:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8012338:	7bfb      	ldrb	r3, [r7, #15]
 801233a:	7bba      	ldrb	r2, [r7, #14]
 801233c:	6879      	ldr	r1, [r7, #4]
 801233e:	2032      	movs	r0, #50	@ 0x32
 8012340:	fb00 f303 	mul.w	r3, r0, r3
 8012344:	4419      	add	r1, r3
 8012346:	f248 1344 	movw	r3, #33092	@ 0x8144
 801234a:	440b      	add	r3, r1
 801234c:	7818      	ldrb	r0, [r3, #0]
 801234e:	68b9      	ldr	r1, [r7, #8]
 8012350:	4613      	mov	r3, r2
 8012352:	009b      	lsls	r3, r3, #2
 8012354:	4413      	add	r3, r2
 8012356:	005b      	lsls	r3, r3, #1
 8012358:	440b      	add	r3, r1
 801235a:	333d      	adds	r3, #61	@ 0x3d
 801235c:	4602      	mov	r2, r0
 801235e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8012360:	7bfb      	ldrb	r3, [r7, #15]
 8012362:	7bba      	ldrb	r2, [r7, #14]
 8012364:	6879      	ldr	r1, [r7, #4]
 8012366:	2032      	movs	r0, #50	@ 0x32
 8012368:	fb00 f303 	mul.w	r3, r0, r3
 801236c:	4419      	add	r1, r3
 801236e:	f248 1345 	movw	r3, #33093	@ 0x8145
 8012372:	440b      	add	r3, r1
 8012374:	7818      	ldrb	r0, [r3, #0]
 8012376:	68b9      	ldr	r1, [r7, #8]
 8012378:	4613      	mov	r3, r2
 801237a:	009b      	lsls	r3, r3, #2
 801237c:	4413      	add	r3, r2
 801237e:	005b      	lsls	r3, r3, #1
 8012380:	440b      	add	r3, r1
 8012382:	333c      	adds	r3, #60	@ 0x3c
 8012384:	4602      	mov	r2, r0
 8012386:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8012388:	7bfb      	ldrb	r3, [r7, #15]
 801238a:	687a      	ldr	r2, [r7, #4]
 801238c:	2132      	movs	r1, #50	@ 0x32
 801238e:	fb01 f303 	mul.w	r3, r1, r3
 8012392:	441a      	add	r2, r3
 8012394:	f248 1352 	movw	r3, #33106	@ 0x8152
 8012398:	4413      	add	r3, r2
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	7bba      	ldrb	r2, [r7, #14]
 801239e:	4618      	mov	r0, r3
 80123a0:	68b9      	ldr	r1, [r7, #8]
 80123a2:	4613      	mov	r3, r2
 80123a4:	009b      	lsls	r3, r3, #2
 80123a6:	4413      	add	r3, r2
 80123a8:	005b      	lsls	r3, r3, #1
 80123aa:	440b      	add	r3, r1
 80123ac:	3340      	adds	r3, #64	@ 0x40
 80123ae:	4602      	mov	r2, r0
 80123b0:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 80123b2:	7bba      	ldrb	r2, [r7, #14]
 80123b4:	68b9      	ldr	r1, [r7, #8]
 80123b6:	4613      	mov	r3, r2
 80123b8:	009b      	lsls	r3, r3, #2
 80123ba:	4413      	add	r3, r2
 80123bc:	005b      	lsls	r3, r3, #1
 80123be:	440b      	add	r3, r1
 80123c0:	333e      	adds	r3, #62	@ 0x3e
 80123c2:	2201      	movs	r2, #1
 80123c4:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80123c6:	7bbb      	ldrb	r3, [r7, #14]
 80123c8:	3301      	adds	r3, #1
 80123ca:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80123cc:	7bfb      	ldrb	r3, [r7, #15]
 80123ce:	3301      	adds	r3, #1
 80123d0:	73fb      	strb	r3, [r7, #15]
 80123d2:	7bfb      	ldrb	r3, [r7, #15]
 80123d4:	2b09      	cmp	r3, #9
 80123d6:	f67f af54 	bls.w	8012282 <USBH_AUDIO_FindAudioStreamingOUT+0x24>
      }
    }
  }

  if (alt_settings > 0U)
 80123da:	7bbb      	ldrb	r3, [r7, #14]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d001      	beq.n	80123e4 <USBH_AUDIO_FindAudioStreamingOUT+0x186>
  {
    status = USBH_OK;
 80123e0:	2300      	movs	r3, #0
 80123e2:	737b      	strb	r3, [r7, #13]
  }

  return status;
 80123e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3714      	adds	r7, #20
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr

080123f2 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 80123f2:	b580      	push	{r7, lr}
 80123f4:	b084      	sub	sp, #16
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 80123fa:	2302      	movs	r3, #2
 80123fc:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8012404:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8012408:	69db      	ldr	r3, [r3, #28]
 801240a:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 801240c:	23ff      	movs	r3, #255	@ 0xff
 801240e:	2201      	movs	r2, #1
 8012410:	2101      	movs	r1, #1
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f006 f93c 	bl	8018690 <USBH_FindInterface>
 8012418:	4603      	mov	r3, r0
 801241a:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 801241c:	7bfb      	ldrb	r3, [r7, #15]
 801241e:	2bff      	cmp	r3, #255	@ 0xff
 8012420:	d002      	beq.n	8012428 <USBH_AUDIO_FindHIDControl+0x36>
 8012422:	7bfb      	ldrb	r3, [r7, #15]
 8012424:	2b09      	cmp	r3, #9
 8012426:	d901      	bls.n	801242c <USBH_AUDIO_FindHIDControl+0x3a>
  {
    return USBH_FAIL;
 8012428:	2302      	movs	r3, #2
 801242a:	e069      	b.n	8012500 <USBH_AUDIO_FindHIDControl+0x10e>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 801242c:	2300      	movs	r3, #0
 801242e:	73fb      	strb	r3, [r7, #15]
 8012430:	e062      	b.n	80124f8 <USBH_AUDIO_FindHIDControl+0x106>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8012432:	7bfb      	ldrb	r3, [r7, #15]
 8012434:	687a      	ldr	r2, [r7, #4]
 8012436:	2132      	movs	r1, #50	@ 0x32
 8012438:	fb01 f303 	mul.w	r3, r1, r3
 801243c:	441a      	add	r2, r3
 801243e:	f248 1347 	movw	r3, #33095	@ 0x8147
 8012442:	4413      	add	r3, r2
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	2b03      	cmp	r3, #3
 8012448:	d153      	bne.n	80124f2 <USBH_AUDIO_FindHIDControl+0x100>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 801244a:	7bfb      	ldrb	r3, [r7, #15]
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	2132      	movs	r1, #50	@ 0x32
 8012450:	fb01 f303 	mul.w	r3, r1, r3
 8012454:	441a      	add	r2, r3
 8012456:	f248 1350 	movw	r3, #33104	@ 0x8150
 801245a:	4413      	add	r3, r2
 801245c:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 801245e:	2b00      	cmp	r3, #0
 8012460:	d047      	beq.n	80124f2 <USBH_AUDIO_FindHIDControl+0x100>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 8012462:	7bfb      	ldrb	r3, [r7, #15]
 8012464:	687a      	ldr	r2, [r7, #4]
 8012466:	2132      	movs	r1, #50	@ 0x32
 8012468:	fb01 f303 	mul.w	r3, r1, r3
 801246c:	441a      	add	r2, r3
 801246e:	f248 134e 	movw	r3, #33102	@ 0x814e
 8012472:	4413      	add	r3, r2
 8012474:	781b      	ldrb	r3, [r3, #0]
 8012476:	b25b      	sxtb	r3, r3
 8012478:	2b00      	cmp	r3, #0
 801247a:	da3a      	bge.n	80124f2 <USBH_AUDIO_FindHIDControl+0x100>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801247c:	7bfb      	ldrb	r3, [r7, #15]
 801247e:	687a      	ldr	r2, [r7, #4]
 8012480:	2132      	movs	r1, #50	@ 0x32
 8012482:	fb01 f303 	mul.w	r3, r1, r3
 8012486:	441a      	add	r2, r3
 8012488:	f248 134e 	movw	r3, #33102	@ 0x814e
 801248c:	4413      	add	r3, r2
 801248e:	781a      	ldrb	r2, [r3, #0]
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012496:	7bfb      	ldrb	r3, [r7, #15]
 8012498:	687a      	ldr	r2, [r7, #4]
 801249a:	2132      	movs	r1, #50	@ 0x32
 801249c:	fb01 f303 	mul.w	r3, r1, r3
 80124a0:	441a      	add	r2, r3
 80124a2:	f248 1350 	movw	r3, #33104	@ 0x8150
 80124a6:	4413      	add	r3, r2
 80124a8:	881a      	ldrh	r2, [r3, #0]
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	f8a3 2186 	strh.w	r2, [r3, #390]	@ 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80124b0:	7bfb      	ldrb	r3, [r7, #15]
 80124b2:	687a      	ldr	r2, [r7, #4]
 80124b4:	2132      	movs	r1, #50	@ 0x32
 80124b6:	fb01 f303 	mul.w	r3, r1, r3
 80124ba:	441a      	add	r2, r3
 80124bc:	f248 1344 	movw	r3, #33092	@ 0x8144
 80124c0:	4413      	add	r3, r2
 80124c2:	781a      	ldrb	r2, [r3, #0]
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80124ca:	7bfb      	ldrb	r3, [r7, #15]
 80124cc:	687a      	ldr	r2, [r7, #4]
 80124ce:	2132      	movs	r1, #50	@ 0x32
 80124d0:	fb01 f303 	mul.w	r3, r1, r3
 80124d4:	441a      	add	r2, r3
 80124d6:	f248 1352 	movw	r3, #33106	@ 0x8152
 80124da:	4413      	add	r3, r2
 80124dc:	781a      	ldrb	r2, [r3, #0]
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	f883 218b 	strb.w	r2, [r3, #395]	@ 0x18b
        AUDIO_Handle->control.supported = 1U;
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	2201      	movs	r2, #1
 80124e8:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
        status = USBH_OK;
 80124ec:	2300      	movs	r3, #0
 80124ee:	73bb      	strb	r3, [r7, #14]
        break;
 80124f0:	e005      	b.n	80124fe <USBH_AUDIO_FindHIDControl+0x10c>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80124f2:	7bfb      	ldrb	r3, [r7, #15]
 80124f4:	3301      	adds	r3, #1
 80124f6:	73fb      	strb	r3, [r7, #15]
 80124f8:	7bfb      	ldrb	r3, [r7, #15]
 80124fa:	2b09      	cmp	r3, #9
 80124fc:	d999      	bls.n	8012432 <USBH_AUDIO_FindHIDControl+0x40>
      }
    }
  }

  return status;
 80124fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8012500:	4618      	mov	r0, r3
 8012502:	3710      	adds	r7, #16
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b088      	sub	sp, #32
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8012510:	2300      	movs	r3, #0
 8012512:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 8012514:	2300      	movs	r3, #0
 8012516:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 8012518:	2300      	movs	r3, #0
 801251a:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8012522:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8012526:	69db      	ldr	r3, [r3, #28]
 8012528:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	331c      	adds	r3, #28
 801252e:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 8012530:	2309      	movs	r3, #9
 8012532:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	2200      	movs	r2, #0
 8012538:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	2200      	movs	r2, #0
 8012540:	f8a3 20ea 	strh.w	r2, [r3, #234]	@ 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	2200      	movs	r2, #0
 8012548:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	2200      	movs	r2, #0
 8012550:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 8012554:	e04f      	b.n	80125f6 <USBH_AUDIO_ParseCSDescriptors+0xee>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8012556:	f107 030c 	add.w	r3, r7, #12
 801255a:	4619      	mov	r1, r3
 801255c:	69b8      	ldr	r0, [r7, #24]
 801255e:	f007 fc3c 	bl	8019dda <USBH_GetNextDesc>
 8012562:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 8012564:	69bb      	ldr	r3, [r7, #24]
 8012566:	785b      	ldrb	r3, [r3, #1]
 8012568:	2b04      	cmp	r3, #4
 801256a:	d002      	beq.n	8012572 <USBH_AUDIO_ParseCSDescriptors+0x6a>
 801256c:	2b24      	cmp	r3, #36	@ 0x24
 801256e:	d00f      	beq.n	8012590 <USBH_AUDIO_ParseCSDescriptors+0x88>
          }
        }
        break;

      default:
        break;
 8012570:	e041      	b.n	80125f6 <USBH_AUDIO_ParseCSDescriptors+0xee>
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 8012572:	69bb      	ldr	r3, [r7, #24]
 8012574:	789b      	ldrb	r3, [r3, #2]
 8012576:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	78db      	ldrb	r3, [r3, #3]
 801257c:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 801257e:	7bfa      	ldrb	r2, [r7, #15]
 8012580:	7dbb      	ldrb	r3, [r7, #22]
 8012582:	4619      	mov	r1, r3
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f006 f8ca 	bl	801871e <USBH_FindInterfaceIndex>
 801258a:	4603      	mov	r3, r0
 801258c:	75fb      	strb	r3, [r7, #23]
        break;
 801258e:	e032      	b.n	80125f6 <USBH_AUDIO_ParseCSDescriptors+0xee>
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8012596:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 801259a:	7dba      	ldrb	r2, [r7, #22]
 801259c:	429a      	cmp	r2, r3
 801259e:	d829      	bhi.n	80125f4 <USBH_AUDIO_ParseCSDescriptors+0xec>
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80125a0:	7dfb      	ldrb	r3, [r7, #23]
 80125a2:	2bff      	cmp	r3, #255	@ 0xff
 80125a4:	d002      	beq.n	80125ac <USBH_AUDIO_ParseCSDescriptors+0xa4>
 80125a6:	7dfb      	ldrb	r3, [r7, #23]
 80125a8:	2b09      	cmp	r3, #9
 80125aa:	d912      	bls.n	80125d2 <USBH_AUDIO_ParseCSDescriptors+0xca>
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
 80125ac:	4818      	ldr	r0, [pc, #96]	@ (8012610 <USBH_AUDIO_ParseCSDescriptors+0x108>)
 80125ae:	f009 f8c1 	bl	801b734 <iprintf>
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80125b8:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	4619      	mov	r1, r3
 80125c0:	4814      	ldr	r0, [pc, #80]	@ (8012614 <USBH_AUDIO_ParseCSDescriptors+0x10c>)
 80125c2:	f009 f8b7 	bl	801b734 <iprintf>
 80125c6:	200a      	movs	r0, #10
 80125c8:	f009 f8c6 	bl	801b758 <putchar>
            status = USBH_FAIL;
 80125cc:	2302      	movs	r3, #2
 80125ce:	77fb      	strb	r3, [r7, #31]
        break;
 80125d0:	e010      	b.n	80125f4 <USBH_AUDIO_ParseCSDescriptors+0xec>
            (void)ParseCSDescriptors(&AUDIO_Handle->class_desc,
 80125d2:	693b      	ldr	r3, [r7, #16]
 80125d4:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80125d8:	7dfb      	ldrb	r3, [r7, #23]
 80125da:	687a      	ldr	r2, [r7, #4]
 80125dc:	2132      	movs	r1, #50	@ 0x32
 80125de:	fb01 f303 	mul.w	r3, r1, r3
 80125e2:	441a      	add	r2, r3
 80125e4:	f248 1348 	movw	r3, #33096	@ 0x8148
 80125e8:	4413      	add	r3, r2
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	69ba      	ldr	r2, [r7, #24]
 80125ee:	4619      	mov	r1, r3
 80125f0:	f000 f812 	bl	8012618 <ParseCSDescriptors>
        break;
 80125f4:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80125fc:	f8b3 213a 	ldrh.w	r2, [r3, #314]	@ 0x13a
 8012600:	89bb      	ldrh	r3, [r7, #12]
 8012602:	429a      	cmp	r2, r3
 8012604:	d8a7      	bhi.n	8012556 <USBH_AUDIO_ParseCSDescriptors+0x4e>
    }
  }

  return status;
 8012606:	7ffb      	ldrb	r3, [r7, #31]
}
 8012608:	4618      	mov	r0, r3
 801260a:	3720      	adds	r7, #32
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}
 8012610:	0801c674 	.word	0x0801c674
 8012614:	0801c73c 	.word	0x0801c73c

08012618 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 8012618:	b480      	push	{r7}
 801261a:	b085      	sub	sp, #20
 801261c:	af00      	add	r7, sp, #0
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	460b      	mov	r3, r1
 8012622:	607a      	str	r2, [r7, #4]
 8012624:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 8012626:	7afb      	ldrb	r3, [r7, #11]
 8012628:	2b01      	cmp	r3, #1
 801262a:	d163      	bne.n	80126f4 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	3302      	adds	r3, #2
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	3b01      	subs	r3, #1
 8012634:	2b05      	cmp	r3, #5
 8012636:	f200 8081 	bhi.w	801273c <ParseCSDescriptors+0x124>
 801263a:	a201      	add	r2, pc, #4	@ (adr r2, 8012640 <ParseCSDescriptors+0x28>)
 801263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012640:	08012659 	.word	0x08012659
 8012644:	08012661 	.word	0x08012661
 8012648:	0801267d 	.word	0x0801267d
 801264c:	080126d7 	.word	0x080126d7
 8012650:	080126b9 	.word	0x080126b9
 8012654:	0801269b 	.word	0x0801269b
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	687a      	ldr	r2, [r7, #4]
 801265c:	601a      	str	r2, [r3, #0]
        break;
 801265e:	e06e      	b.n	801273e <ParseCSDescriptors+0x126>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 8012666:	1c5a      	adds	r2, r3, #1
 8012668:	b291      	uxth	r1, r2
 801266a:	68fa      	ldr	r2, [r7, #12]
 801266c:	f8a2 107e 	strh.w	r1, [r2, #126]	@ 0x7e
 8012670:	68fa      	ldr	r2, [r7, #12]
 8012672:	009b      	lsls	r3, r3, #2
 8012674:	4413      	add	r3, r2
 8012676:	687a      	ldr	r2, [r7, #4]
 8012678:	605a      	str	r2, [r3, #4]
        break;
 801267a:	e060      	b.n	801273e <ParseCSDescriptors+0x126>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8012682:	1c5a      	adds	r2, r3, #1
 8012684:	b291      	uxth	r1, r2
 8012686:	68fa      	ldr	r2, [r7, #12]
 8012688:	f8a2 1080 	strh.w	r1, [r2, #128]	@ 0x80
 801268c:	68fa      	ldr	r2, [r7, #12]
 801268e:	3304      	adds	r3, #4
 8012690:	009b      	lsls	r3, r3, #2
 8012692:	4413      	add	r3, r2
 8012694:	687a      	ldr	r2, [r7, #4]
 8012696:	605a      	str	r2, [r3, #4]
        break;
 8012698:	e051      	b.n	801273e <ParseCSDescriptors+0x126>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 80126a0:	1c5a      	adds	r2, r3, #1
 80126a2:	b291      	uxth	r1, r2
 80126a4:	68fa      	ldr	r2, [r7, #12]
 80126a6:	f8a2 1082 	strh.w	r1, [r2, #130]	@ 0x82
 80126aa:	68fa      	ldr	r2, [r7, #12]
 80126ac:	3308      	adds	r3, #8
 80126ae:	009b      	lsls	r3, r3, #2
 80126b0:	4413      	add	r3, r2
 80126b2:	687a      	ldr	r2, [r7, #4]
 80126b4:	605a      	str	r2, [r3, #4]
        break;
 80126b6:	e042      	b.n	801273e <ParseCSDescriptors+0x126>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 80126be:	1c5a      	adds	r2, r3, #1
 80126c0:	b291      	uxth	r1, r2
 80126c2:	68fa      	ldr	r2, [r7, #12]
 80126c4:	f8a2 1084 	strh.w	r1, [r2, #132]	@ 0x84
 80126c8:	68fa      	ldr	r2, [r7, #12]
 80126ca:	3310      	adds	r3, #16
 80126cc:	009b      	lsls	r3, r3, #2
 80126ce:	4413      	add	r3, r2
 80126d0:	687a      	ldr	r2, [r7, #4]
 80126d2:	605a      	str	r2, [r3, #4]
        break;
 80126d4:	e033      	b.n	801273e <ParseCSDescriptors+0x126>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80126dc:	1c5a      	adds	r2, r3, #1
 80126de:	b291      	uxth	r1, r2
 80126e0:	68fa      	ldr	r2, [r7, #12]
 80126e2:	f8a2 1086 	strh.w	r1, [r2, #134]	@ 0x86
 80126e6:	68fa      	ldr	r2, [r7, #12]
 80126e8:	330c      	adds	r3, #12
 80126ea:	009b      	lsls	r3, r3, #2
 80126ec:	4413      	add	r3, r2
 80126ee:	687a      	ldr	r2, [r7, #4]
 80126f0:	605a      	str	r2, [r3, #4]
        break;
 80126f2:	e024      	b.n	801273e <ParseCSDescriptors+0x126>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 80126f4:	7afb      	ldrb	r3, [r7, #11]
 80126f6:	2b02      	cmp	r3, #2
 80126f8:	d121      	bne.n	801273e <ParseCSDescriptors+0x126>
    {
      switch (pdesc[2])
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	3302      	adds	r3, #2
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	2b01      	cmp	r3, #1
 8012702:	d002      	beq.n	801270a <ParseCSDescriptors+0xf2>
 8012704:	2b02      	cmp	r3, #2
 8012706:	d00a      	beq.n	801271e <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 8012708:	e019      	b.n	801273e <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8012710:	68fa      	ldr	r2, [r7, #12]
 8012712:	330a      	adds	r3, #10
 8012714:	00db      	lsls	r3, r3, #3
 8012716:	4413      	add	r3, r2
 8012718:	687a      	ldr	r2, [r7, #4]
 801271a:	605a      	str	r2, [r3, #4]
          break;
 801271c:	e00f      	b.n	801273e <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8012724:	1c5a      	adds	r2, r3, #1
 8012726:	b291      	uxth	r1, r2
 8012728:	68fa      	ldr	r2, [r7, #12]
 801272a:	f8a2 107c 	strh.w	r1, [r2, #124]	@ 0x7c
 801272e:	68fa      	ldr	r2, [r7, #12]
 8012730:	330a      	adds	r3, #10
 8012732:	00db      	lsls	r3, r3, #3
 8012734:	4413      	add	r3, r2
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	609a      	str	r2, [r3, #8]
          break;
 801273a:	e000      	b.n	801273e <ParseCSDescriptors+0x126>
        break;
 801273c:	bf00      	nop
      }
    }
  }

  return USBH_OK;
 801273e:	2300      	movs	r3, #0
}
 8012740:	4618      	mov	r0, r3
 8012742:	3714      	adds	r7, #20
 8012744:	46bd      	mov	sp, r7
 8012746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274a:	4770      	bx	lr

0801274c <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifier
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 801274c:	b480      	push	{r7}
 801274e:	b085      	sub	sp, #20
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
 8012754:	460b      	mov	r3, r1
 8012756:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801275e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8012762:	69db      	ldr	r3, [r3, #28]
 8012764:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8012766:	2300      	movs	r3, #0
 8012768:	73fb      	strb	r3, [r7, #15]
 801276a:	e01b      	b.n	80127a4 <USBH_AUDIO_FindLinkedUnit+0x58>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 801276c:	7bfb      	ldrb	r3, [r7, #15]
 801276e:	68ba      	ldr	r2, [r7, #8]
 8012770:	3322      	adds	r3, #34	@ 0x22
 8012772:	009b      	lsls	r3, r3, #2
 8012774:	4413      	add	r3, r2
 8012776:	689b      	ldr	r3, [r3, #8]
 8012778:	791b      	ldrb	r3, [r3, #4]
 801277a:	78fa      	ldrb	r2, [r7, #3]
 801277c:	429a      	cmp	r2, r3
 801277e:	d10e      	bne.n	801279e <USBH_AUDIO_FindLinkedUnit+0x52>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8012780:	7bfb      	ldrb	r3, [r7, #15]
 8012782:	68ba      	ldr	r2, [r7, #8]
 8012784:	3322      	adds	r3, #34	@ 0x22
 8012786:	009b      	lsls	r3, r3, #2
 8012788:	4413      	add	r3, r2
 801278a:	689b      	ldr	r3, [r3, #8]
 801278c:	78db      	ldrb	r3, [r3, #3]
 801278e:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8012790:	78fb      	ldrb	r3, [r7, #3]
 8012792:	041a      	lsls	r2, r3, #16
 8012794:	7bfb      	ldrb	r3, [r7, #15]
 8012796:	4313      	orrs	r3, r2
 8012798:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 801279c:	e086      	b.n	80128ac <USBH_AUDIO_FindLinkedUnit+0x160>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 801279e:	7bfb      	ldrb	r3, [r7, #15]
 80127a0:	3301      	adds	r3, #1
 80127a2:	73fb      	strb	r3, [r7, #15]
 80127a4:	7bfb      	ldrb	r3, [r7, #15]
 80127a6:	b29a      	uxth	r2, r3
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d3dc      	bcc.n	801276c <USBH_AUDIO_FindLinkedUnit+0x20>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80127b2:	2300      	movs	r3, #0
 80127b4:	73fb      	strb	r3, [r7, #15]
 80127b6:	e025      	b.n	8012804 <USBH_AUDIO_FindLinkedUnit+0xb8>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80127b8:	7bfb      	ldrb	r3, [r7, #15]
 80127ba:	68ba      	ldr	r2, [r7, #8]
 80127bc:	3326      	adds	r3, #38	@ 0x26
 80127be:	009b      	lsls	r3, r3, #2
 80127c0:	4413      	add	r3, r2
 80127c2:	689b      	ldr	r3, [r3, #8]
 80127c4:	795b      	ldrb	r3, [r3, #5]
 80127c6:	78fa      	ldrb	r2, [r7, #3]
 80127c8:	429a      	cmp	r2, r3
 80127ca:	d009      	beq.n	80127e0 <USBH_AUDIO_FindLinkedUnit+0x94>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 80127cc:	7bfb      	ldrb	r3, [r7, #15]
 80127ce:	68ba      	ldr	r2, [r7, #8]
 80127d0:	3326      	adds	r3, #38	@ 0x26
 80127d2:	009b      	lsls	r3, r3, #2
 80127d4:	4413      	add	r3, r2
 80127d6:	689b      	ldr	r3, [r3, #8]
 80127d8:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80127da:	78fa      	ldrb	r2, [r7, #3]
 80127dc:	429a      	cmp	r2, r3
 80127de:	d10e      	bne.n	80127fe <USBH_AUDIO_FindLinkedUnit+0xb2>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 80127e0:	7bfb      	ldrb	r3, [r7, #15]
 80127e2:	68ba      	ldr	r2, [r7, #8]
 80127e4:	3326      	adds	r3, #38	@ 0x26
 80127e6:	009b      	lsls	r3, r3, #2
 80127e8:	4413      	add	r3, r2
 80127ea:	689b      	ldr	r3, [r3, #8]
 80127ec:	78db      	ldrb	r3, [r3, #3]
 80127ee:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 80127f0:	78fb      	ldrb	r3, [r7, #3]
 80127f2:	041a      	lsls	r2, r3, #16
 80127f4:	7bfb      	ldrb	r3, [r7, #15]
 80127f6:	4313      	orrs	r3, r2
 80127f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80127fc:	e056      	b.n	80128ac <USBH_AUDIO_FindLinkedUnit+0x160>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80127fe:	7bfb      	ldrb	r3, [r7, #15]
 8012800:	3301      	adds	r3, #1
 8012802:	73fb      	strb	r3, [r7, #15]
 8012804:	7bfb      	ldrb	r3, [r7, #15]
 8012806:	b29a      	uxth	r2, r3
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 801280e:	429a      	cmp	r2, r3
 8012810:	d3d2      	bcc.n	80127b8 <USBH_AUDIO_FindLinkedUnit+0x6c>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8012812:	2300      	movs	r3, #0
 8012814:	73fb      	strb	r3, [r7, #15]
 8012816:	e01b      	b.n	8012850 <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8012818:	7bfb      	ldrb	r3, [r7, #15]
 801281a:	68ba      	ldr	r2, [r7, #8]
 801281c:	332a      	adds	r3, #42	@ 0x2a
 801281e:	009b      	lsls	r3, r3, #2
 8012820:	4413      	add	r3, r2
 8012822:	689b      	ldr	r3, [r3, #8]
 8012824:	795b      	ldrb	r3, [r3, #5]
 8012826:	78fa      	ldrb	r2, [r7, #3]
 8012828:	429a      	cmp	r2, r3
 801282a:	d10e      	bne.n	801284a <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 801282c:	7bfb      	ldrb	r3, [r7, #15]
 801282e:	68ba      	ldr	r2, [r7, #8]
 8012830:	332a      	adds	r3, #42	@ 0x2a
 8012832:	009b      	lsls	r3, r3, #2
 8012834:	4413      	add	r3, r2
 8012836:	689b      	ldr	r3, [r3, #8]
 8012838:	78db      	ldrb	r3, [r3, #3]
 801283a:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 801283c:	78fb      	ldrb	r3, [r7, #3]
 801283e:	041a      	lsls	r2, r3, #16
 8012840:	7bfb      	ldrb	r3, [r7, #15]
 8012842:	4313      	orrs	r3, r2
 8012844:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8012848:	e030      	b.n	80128ac <USBH_AUDIO_FindLinkedUnit+0x160>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 801284a:	7bfb      	ldrb	r3, [r7, #15]
 801284c:	3301      	adds	r3, #1
 801284e:	73fb      	strb	r3, [r7, #15]
 8012850:	7bfb      	ldrb	r3, [r7, #15]
 8012852:	b29a      	uxth	r2, r3
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 801285a:	429a      	cmp	r2, r3
 801285c:	d3dc      	bcc.n	8012818 <USBH_AUDIO_FindLinkedUnit+0xcc>
    }
  }

  /* Find Output Terminal Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 801285e:	2300      	movs	r3, #0
 8012860:	73fb      	strb	r3, [r7, #15]
 8012862:	e01b      	b.n	801289c <USBH_AUDIO_FindLinkedUnit+0x150>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8012864:	7bfb      	ldrb	r3, [r7, #15]
 8012866:	68ba      	ldr	r2, [r7, #8]
 8012868:	331e      	adds	r3, #30
 801286a:	009b      	lsls	r3, r3, #2
 801286c:	4413      	add	r3, r2
 801286e:	689b      	ldr	r3, [r3, #8]
 8012870:	79db      	ldrb	r3, [r3, #7]
 8012872:	78fa      	ldrb	r2, [r7, #3]
 8012874:	429a      	cmp	r2, r3
 8012876:	d10e      	bne.n	8012896 <USBH_AUDIO_FindLinkedUnit+0x14a>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 8012878:	7bfb      	ldrb	r3, [r7, #15]
 801287a:	68ba      	ldr	r2, [r7, #8]
 801287c:	331e      	adds	r3, #30
 801287e:	009b      	lsls	r3, r3, #2
 8012880:	4413      	add	r3, r2
 8012882:	689b      	ldr	r3, [r3, #8]
 8012884:	78db      	ldrb	r3, [r3, #3]
 8012886:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 8012888:	78fb      	ldrb	r3, [r7, #3]
 801288a:	041a      	lsls	r2, r3, #16
 801288c:	7bfb      	ldrb	r3, [r7, #15]
 801288e:	4313      	orrs	r3, r2
 8012890:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8012894:	e00a      	b.n	80128ac <USBH_AUDIO_FindLinkedUnit+0x160>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8012896:	7bfb      	ldrb	r3, [r7, #15]
 8012898:	3301      	adds	r3, #1
 801289a:	73fb      	strb	r3, [r7, #15]
 801289c:	7bfb      	ldrb	r3, [r7, #15]
 801289e:	b29a      	uxth	r2, r3
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 80128a6:	429a      	cmp	r2, r3
 80128a8:	d3dc      	bcc.n	8012864 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 80128aa:	2300      	movs	r3, #0
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3714      	adds	r7, #20
 80128b0:	46bd      	mov	sp, r7
 80128b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b6:	4770      	bx	lr

080128b8 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b086      	sub	sp, #24
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80128c0:	2300      	movs	r3, #0
 80128c2:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 80128c4:	2300      	movs	r3, #0
 80128c6:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80128ce:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80128d2:	69db      	ldr	r3, [r3, #28]
 80128d4:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80128d6:	2300      	movs	r3, #0
 80128d8:	75bb      	strb	r3, [r7, #22]
 80128da:	e02b      	b.n	8012934 <USBH_AUDIO_BuildMicrophonePath+0x7c>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201U)
 80128dc:	7dbb      	ldrb	r3, [r7, #22]
 80128de:	693a      	ldr	r2, [r7, #16]
 80128e0:	331a      	adds	r3, #26
 80128e2:	009b      	lsls	r3, r3, #2
 80128e4:	4413      	add	r3, r2
 80128e6:	689b      	ldr	r3, [r3, #8]
 80128e8:	791b      	ldrb	r3, [r3, #4]
 80128ea:	4619      	mov	r1, r3
 80128ec:	7dbb      	ldrb	r3, [r7, #22]
 80128ee:	693a      	ldr	r2, [r7, #16]
 80128f0:	331a      	adds	r3, #26
 80128f2:	009b      	lsls	r3, r3, #2
 80128f4:	4413      	add	r3, r2
 80128f6:	689b      	ldr	r3, [r3, #8]
 80128f8:	795b      	ldrb	r3, [r3, #5]
 80128fa:	021b      	lsls	r3, r3, #8
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	430b      	orrs	r3, r1
 8012900:	f240 2201 	movw	r2, #513	@ 0x201
 8012904:	4293      	cmp	r3, r2
 8012906:	d112      	bne.n	801292e <USBH_AUDIO_BuildMicrophonePath+0x76>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8012908:	7dbb      	ldrb	r3, [r7, #22]
 801290a:	693a      	ldr	r2, [r7, #16]
 801290c:	331a      	adds	r3, #26
 801290e:	009b      	lsls	r3, r3, #2
 8012910:	4413      	add	r3, r2
 8012912:	689b      	ldr	r3, [r3, #8]
 8012914:	78db      	ldrb	r3, [r3, #3]
 8012916:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8012918:	7dbb      	ldrb	r3, [r7, #22]
 801291a:	693a      	ldr	r2, [r7, #16]
 801291c:	331a      	adds	r3, #26
 801291e:	009b      	lsls	r3, r3, #2
 8012920:	4413      	add	r3, r2
 8012922:	689b      	ldr	r3, [r3, #8]
 8012924:	79da      	ldrb	r2, [r3, #7]
 8012926:	693b      	ldr	r3, [r7, #16]
 8012928:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
      break;
 801292c:	e009      	b.n	8012942 <USBH_AUDIO_BuildMicrophonePath+0x8a>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 801292e:	7dbb      	ldrb	r3, [r7, #22]
 8012930:	3301      	adds	r3, #1
 8012932:	75bb      	strb	r3, [r7, #22]
 8012934:	7dbb      	ldrb	r3, [r7, #22]
 8012936:	b29a      	uxth	r2, r3
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 801293e:	429a      	cmp	r2, r3
 8012940:	d3cc      	bcc.n	80128dc <USBH_AUDIO_BuildMicrophonePath+0x24>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8012942:	7dfb      	ldrb	r3, [r7, #23]
 8012944:	4619      	mov	r1, r3
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f7ff ff00 	bl	801274c <USBH_AUDIO_FindLinkedUnit>
 801294c:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d101      	bne.n	8012958 <USBH_AUDIO_BuildMicrophonePath+0xa0>
    {
      return USBH_FAIL;
 8012954:	2302      	movs	r3, #2
 8012956:	e035      	b.n	80129c4 <USBH_AUDIO_BuildMicrophonePath+0x10c>
    }

    Index = (uint8_t)(value & 0xFFU);
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	0a1b      	lsrs	r3, r3, #8
 8012960:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	0c1b      	lsrs	r3, r3, #16
 8012966:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8012968:	7abb      	ldrb	r3, [r7, #10]
 801296a:	3b03      	subs	r3, #3
 801296c:	2b03      	cmp	r3, #3
 801296e:	d81f      	bhi.n	80129b0 <USBH_AUDIO_BuildMicrophonePath+0xf8>
 8012970:	a201      	add	r2, pc, #4	@ (adr r2, 8012978 <USBH_AUDIO_BuildMicrophonePath+0xc0>)
 8012972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012976:	bf00      	nop
 8012978:	080129a7 	.word	0x080129a7
 801297c:	08012993 	.word	0x08012993
 8012980:	0801299d 	.word	0x0801299d
 8012984:	08012989 	.word	0x08012989
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	7afa      	ldrb	r2, [r7, #11]
 801298c:	f883 214f 	strb.w	r2, [r3, #335]	@ 0x14f
        break;
 8012990:	e011      	b.n	80129b6 <USBH_AUDIO_BuildMicrophonePath+0xfe>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	7afa      	ldrb	r2, [r7, #11]
 8012996:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
        break;
 801299a:	e00c      	b.n	80129b6 <USBH_AUDIO_BuildMicrophonePath+0xfe>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	7afa      	ldrb	r2, [r7, #11]
 80129a0:	f883 214e 	strb.w	r2, [r3, #334]	@ 0x14e
        break;
 80129a4:	e007      	b.n	80129b6 <USBH_AUDIO_BuildMicrophonePath+0xfe>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 80129a6:	693b      	ldr	r3, [r7, #16]
 80129a8:	7afa      	ldrb	r2, [r7, #11]
 80129aa:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
        break;
 80129ae:	e002      	b.n	80129b6 <USBH_AUDIO_BuildMicrophonePath+0xfe>

      default:
        ret = USBH_FAIL;
 80129b0:	2302      	movs	r3, #2
 80129b2:	757b      	strb	r3, [r7, #21]
        break;
 80129b4:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 80129b6:	7abb      	ldrb	r3, [r7, #10]
 80129b8:	2b03      	cmp	r3, #3
 80129ba:	d002      	beq.n	80129c2 <USBH_AUDIO_BuildMicrophonePath+0x10a>
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d1bf      	bne.n	8012942 <USBH_AUDIO_BuildMicrophonePath+0x8a>

  return ret;
 80129c2:	7d7b      	ldrb	r3, [r7, #21]
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	3718      	adds	r7, #24
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}

080129cc <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b086      	sub	sp, #24
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80129d4:	2300      	movs	r3, #0
 80129d6:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 80129d8:	2300      	movs	r3, #0
 80129da:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80129e2:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80129e6:	69db      	ldr	r3, [r3, #28]
 80129e8:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80129ea:	2300      	movs	r3, #0
 80129ec:	757b      	strb	r3, [r7, #21]
 80129ee:	e02b      	b.n	8012a48 <USBH_AUDIO_BuildHeadphonePath+0x7c>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101U)
 80129f0:	7d7b      	ldrb	r3, [r7, #21]
 80129f2:	693a      	ldr	r2, [r7, #16]
 80129f4:	331a      	adds	r3, #26
 80129f6:	009b      	lsls	r3, r3, #2
 80129f8:	4413      	add	r3, r2
 80129fa:	689b      	ldr	r3, [r3, #8]
 80129fc:	791b      	ldrb	r3, [r3, #4]
 80129fe:	4619      	mov	r1, r3
 8012a00:	7d7b      	ldrb	r3, [r7, #21]
 8012a02:	693a      	ldr	r2, [r7, #16]
 8012a04:	331a      	adds	r3, #26
 8012a06:	009b      	lsls	r3, r3, #2
 8012a08:	4413      	add	r3, r2
 8012a0a:	689b      	ldr	r3, [r3, #8]
 8012a0c:	795b      	ldrb	r3, [r3, #5]
 8012a0e:	021b      	lsls	r3, r3, #8
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	430b      	orrs	r3, r1
 8012a14:	f240 1201 	movw	r2, #257	@ 0x101
 8012a18:	4293      	cmp	r3, r2
 8012a1a:	d112      	bne.n	8012a42 <USBH_AUDIO_BuildHeadphonePath+0x76>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8012a1c:	7d7b      	ldrb	r3, [r7, #21]
 8012a1e:	693a      	ldr	r2, [r7, #16]
 8012a20:	331a      	adds	r3, #26
 8012a22:	009b      	lsls	r3, r3, #2
 8012a24:	4413      	add	r3, r2
 8012a26:	689b      	ldr	r3, [r3, #8]
 8012a28:	78db      	ldrb	r3, [r3, #3]
 8012a2a:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8012a2c:	7d7b      	ldrb	r3, [r7, #21]
 8012a2e:	693a      	ldr	r2, [r7, #16]
 8012a30:	331a      	adds	r3, #26
 8012a32:	009b      	lsls	r3, r3, #2
 8012a34:	4413      	add	r3, r2
 8012a36:	689b      	ldr	r3, [r3, #8]
 8012a38:	79da      	ldrb	r2, [r3, #7]
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
      break;
 8012a40:	e009      	b.n	8012a56 <USBH_AUDIO_BuildHeadphonePath+0x8a>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8012a42:	7d7b      	ldrb	r3, [r7, #21]
 8012a44:	3301      	adds	r3, #1
 8012a46:	757b      	strb	r3, [r7, #21]
 8012a48:	7d7b      	ldrb	r3, [r7, #21]
 8012a4a:	b29a      	uxth	r2, r3
 8012a4c:	693b      	ldr	r3, [r7, #16]
 8012a4e:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d3cc      	bcc.n	80129f0 <USBH_AUDIO_BuildHeadphonePath+0x24>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8012a56:	2300      	movs	r3, #0
 8012a58:	75bb      	strb	r3, [r7, #22]
 8012a5a:	e011      	b.n	8012a80 <USBH_AUDIO_BuildHeadphonePath+0xb4>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 8012a5c:	7dbb      	ldrb	r3, [r7, #22]
 8012a5e:	693a      	ldr	r2, [r7, #16]
 8012a60:	3317      	adds	r3, #23
 8012a62:	00db      	lsls	r3, r3, #3
 8012a64:	4413      	add	r3, r2
 8012a66:	689b      	ldr	r3, [r3, #8]
 8012a68:	78db      	ldrb	r3, [r3, #3]
 8012a6a:	7dfa      	ldrb	r2, [r7, #23]
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d104      	bne.n	8012a7a <USBH_AUDIO_BuildHeadphonePath+0xae>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	7dba      	ldrb	r2, [r7, #22]
 8012a74:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
      break;
 8012a78:	e009      	b.n	8012a8e <USBH_AUDIO_BuildHeadphonePath+0xc2>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8012a7a:	7dbb      	ldrb	r3, [r7, #22]
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	75bb      	strb	r3, [r7, #22]
 8012a80:	7dbb      	ldrb	r3, [r7, #22]
 8012a82:	b29a      	uxth	r2, r3
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d3e6      	bcc.n	8012a5c <USBH_AUDIO_BuildHeadphonePath+0x90>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8012a8e:	7dfb      	ldrb	r3, [r7, #23]
 8012a90:	4619      	mov	r1, r3
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	f7ff fe5a 	bl	801274c <USBH_AUDIO_FindLinkedUnit>
 8012a98:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d101      	bne.n	8012aa4 <USBH_AUDIO_BuildHeadphonePath+0xd8>
    {
      return USBH_FAIL;
 8012aa0:	2302      	movs	r3, #2
 8012aa2:	e053      	b.n	8012b4c <USBH_AUDIO_BuildHeadphonePath+0x180>
    }

    Index = (uint8_t)(value & 0xFFU);
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	0a1b      	lsrs	r3, r3, #8
 8012aac:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	0c1b      	lsrs	r3, r3, #16
 8012ab2:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8012ab4:	7afb      	ldrb	r3, [r7, #11]
 8012ab6:	3b03      	subs	r3, #3
 8012ab8:	2b03      	cmp	r3, #3
 8012aba:	d83c      	bhi.n	8012b36 <USBH_AUDIO_BuildHeadphonePath+0x16a>
 8012abc:	a201      	add	r2, pc, #4	@ (adr r2, 8012ac4 <USBH_AUDIO_BuildHeadphonePath+0xf8>)
 8012abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ac2:	bf00      	nop
 8012ac4:	08012af3 	.word	0x08012af3
 8012ac8:	08012adf 	.word	0x08012adf
 8012acc:	08012ae9 	.word	0x08012ae9
 8012ad0:	08012ad5 	.word	0x08012ad5
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	7dba      	ldrb	r2, [r7, #22]
 8012ad8:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
        break;
 8012adc:	e02f      	b.n	8012b3e <USBH_AUDIO_BuildHeadphonePath+0x172>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 8012ade:	693b      	ldr	r3, [r7, #16]
 8012ae0:	7dba      	ldrb	r2, [r7, #22]
 8012ae2:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
        break;
 8012ae6:	e02a      	b.n	8012b3e <USBH_AUDIO_BuildHeadphonePath+0x172>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	7dba      	ldrb	r2, [r7, #22]
 8012aec:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
        break;
 8012af0:	e025      	b.n	8012b3e <USBH_AUDIO_BuildHeadphonePath+0x172>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	7dba      	ldrb	r2, [r7, #22]
 8012af6:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 8012afa:	7dbb      	ldrb	r3, [r7, #22]
 8012afc:	2b03      	cmp	r3, #3
 8012afe:	d817      	bhi.n	8012b30 <USBH_AUDIO_BuildHeadphonePath+0x164>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103U)
 8012b00:	7dbb      	ldrb	r3, [r7, #22]
 8012b02:	693a      	ldr	r2, [r7, #16]
 8012b04:	331e      	adds	r3, #30
 8012b06:	009b      	lsls	r3, r3, #2
 8012b08:	4413      	add	r3, r2
 8012b0a:	689b      	ldr	r3, [r3, #8]
 8012b0c:	791b      	ldrb	r3, [r3, #4]
 8012b0e:	4619      	mov	r1, r3
 8012b10:	7dbb      	ldrb	r3, [r7, #22]
 8012b12:	693a      	ldr	r2, [r7, #16]
 8012b14:	331e      	adds	r3, #30
 8012b16:	009b      	lsls	r3, r3, #2
 8012b18:	4413      	add	r3, r2
 8012b1a:	689b      	ldr	r3, [r3, #8]
 8012b1c:	795b      	ldrb	r3, [r3, #5]
 8012b1e:	021b      	lsls	r3, r3, #8
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	430b      	orrs	r3, r1
 8012b24:	f240 1203 	movw	r2, #259	@ 0x103
 8012b28:	4293      	cmp	r3, r2
 8012b2a:	d007      	beq.n	8012b3c <USBH_AUDIO_BuildHeadphonePath+0x170>
          {
            return  USBH_OK;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	e00d      	b.n	8012b4c <USBH_AUDIO_BuildHeadphonePath+0x180>
          }
        }
        else
        {
          ret = USBH_FAIL;
 8012b30:	2302      	movs	r3, #2
 8012b32:	753b      	strb	r3, [r7, #20]
        }
        break;
 8012b34:	e002      	b.n	8012b3c <USBH_AUDIO_BuildHeadphonePath+0x170>

      default:
        ret = USBH_FAIL;
 8012b36:	2302      	movs	r3, #2
 8012b38:	753b      	strb	r3, [r7, #20]
        break;
 8012b3a:	e000      	b.n	8012b3e <USBH_AUDIO_BuildHeadphonePath+0x172>
        break;
 8012b3c:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8012b3e:	7afb      	ldrb	r3, [r7, #11]
 8012b40:	2b03      	cmp	r3, #3
 8012b42:	d002      	beq.n	8012b4a <USBH_AUDIO_BuildHeadphonePath+0x17e>
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d1a1      	bne.n	8012a8e <USBH_AUDIO_BuildHeadphonePath+0xc2>

  return ret;
 8012b4a:	7d3b      	ldrb	r3, [r7, #20]
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	3718      	adds	r7, #24
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}

08012b54 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b086      	sub	sp, #24
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
 8012b5c:	4608      	mov	r0, r1
 8012b5e:	4611      	mov	r1, r2
 8012b60:	461a      	mov	r2, r3
 8012b62:	4603      	mov	r3, r0
 8012b64:	70fb      	strb	r3, [r7, #3]
 8012b66:	460b      	mov	r3, r1
 8012b68:	70bb      	strb	r3, [r7, #2]
 8012b6a:	4613      	mov	r3, r2
 8012b6c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	82fb      	strh	r3, [r7, #22]
 8012b72:	2300      	movs	r3, #0
 8012b74:	82bb      	strh	r3, [r7, #20]
 8012b76:	2300      	movs	r3, #0
 8012b78:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8012b80:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8012b84:	69db      	ldr	r3, [r3, #28]
 8012b86:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8012b8c:	78fb      	ldrb	r3, [r7, #3]
 8012b8e:	2b02      	cmp	r3, #2
 8012b90:	d002      	beq.n	8012b98 <USBH_AC_SetCur+0x44>
 8012b92:	2b06      	cmp	r3, #6
 8012b94:	d018      	beq.n	8012bc8 <USBH_AC_SetCur+0x74>
 8012b96:	e035      	b.n	8012c04 <USBH_AC_SetCur+0xb0>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b9c:	78db      	ldrb	r3, [r3, #3]
 8012b9e:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012ba4:	7afb      	ldrb	r3, [r7, #11]
 8012ba6:	b29b      	uxth	r3, r3
 8012ba8:	021b      	lsls	r3, r3, #8
 8012baa:	b29a      	uxth	r2, r3
 8012bac:	7abb      	ldrb	r3, [r7, #10]
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	4313      	orrs	r3, r2
 8012bb2:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8012bb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012bb8:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	827b      	strh	r3, [r7, #18]
      break;
 8012bc6:	e020      	b.n	8012c0a <USBH_AC_SetCur+0xb6>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8012bc8:	78bb      	ldrb	r3, [r7, #2]
 8012bca:	68fa      	ldr	r2, [r7, #12]
 8012bcc:	3322      	adds	r3, #34	@ 0x22
 8012bce:	009b      	lsls	r3, r3, #2
 8012bd0:	4413      	add	r3, r2
 8012bd2:	689b      	ldr	r3, [r3, #8]
 8012bd4:	78db      	ldrb	r3, [r3, #3]
 8012bd6:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8012bd8:	2300      	movs	r3, #0
 8012bda:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012bdc:	7afb      	ldrb	r3, [r7, #11]
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	021b      	lsls	r3, r3, #8
 8012be2:	b29a      	uxth	r2, r3
 8012be4:	7abb      	ldrb	r3, [r7, #10]
 8012be6:	b29b      	uxth	r3, r3
 8012be8:	4313      	orrs	r3, r2
 8012bea:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8012bec:	787b      	ldrb	r3, [r7, #1]
 8012bee:	b29b      	uxth	r3, r3
 8012bf0:	021b      	lsls	r3, r3, #8
 8012bf2:	b29a      	uxth	r2, r3
 8012bf4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012bf8:	b29b      	uxth	r3, r3
 8012bfa:	4313      	orrs	r3, r2
 8012bfc:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8012bfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c00:	827b      	strh	r3, [r7, #18]
      break;
 8012c02:	e002      	b.n	8012c0a <USBH_AC_SetCur+0xb6>

    default:
      ret = USBH_FAIL;
 8012c04:	2302      	movs	r3, #2
 8012c06:	747b      	strb	r3, [r7, #17]
      break;
 8012c08:	bf00      	nop
  }

  if (ret != USBH_OK)
 8012c0a:	7c7b      	ldrb	r3, [r7, #17]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d001      	beq.n	8012c14 <USBH_AC_SetCur+0xc0>
  {
    return ret;
 8012c10:	7c7b      	ldrb	r3, [r7, #17]
 8012c12:	e017      	b.n	8012c44 <USBH_AC_SetCur+0xf0>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2221      	movs	r2, #33	@ 0x21
 8012c18:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2201      	movs	r2, #1
 8012c1e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	8afa      	ldrh	r2, [r7, #22]
 8012c24:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	8aba      	ldrh	r2, [r7, #20]
 8012c2a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	8a7a      	ldrh	r2, [r7, #18]
 8012c30:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8012c38:	8a7a      	ldrh	r2, [r7, #18]
 8012c3a:	4619      	mov	r1, r3
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f007 f8e6 	bl	8019e0e <USBH_CtlReq>
 8012c42:	4603      	mov	r3, r0
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	3718      	adds	r7, #24
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}

08012c4c <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b086      	sub	sp, #24
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	4608      	mov	r0, r1
 8012c56:	4611      	mov	r1, r2
 8012c58:	461a      	mov	r2, r3
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	70fb      	strb	r3, [r7, #3]
 8012c5e:	460b      	mov	r3, r1
 8012c60:	70bb      	strb	r3, [r7, #2]
 8012c62:	4613      	mov	r3, r2
 8012c64:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8012c66:	2300      	movs	r3, #0
 8012c68:	82fb      	strh	r3, [r7, #22]
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	82bb      	strh	r3, [r7, #20]
 8012c6e:	2300      	movs	r3, #0
 8012c70:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8012c72:	2300      	movs	r3, #0
 8012c74:	743b      	strb	r3, [r7, #16]
 8012c76:	2300      	movs	r3, #0
 8012c78:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8012c80:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8012c84:	69db      	ldr	r3, [r3, #28]
 8012c86:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8012c88:	2300      	movs	r3, #0
 8012c8a:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8012c8c:	78fb      	ldrb	r3, [r7, #3]
 8012c8e:	2b06      	cmp	r3, #6
 8012c90:	d01e      	beq.n	8012cd0 <USBH_AC_GetCur+0x84>
 8012c92:	2b06      	cmp	r3, #6
 8012c94:	dc4f      	bgt.n	8012d36 <USBH_AC_GetCur+0xea>
 8012c96:	2b02      	cmp	r3, #2
 8012c98:	d002      	beq.n	8012ca0 <USBH_AC_GetCur+0x54>
 8012c9a:	2b03      	cmp	r3, #3
 8012c9c:	d036      	beq.n	8012d0c <USBH_AC_GetCur+0xc0>
 8012c9e:	e04a      	b.n	8012d36 <USBH_AC_GetCur+0xea>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ca4:	78db      	ldrb	r3, [r3, #3]
 8012ca6:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8012ca8:	2300      	movs	r3, #0
 8012caa:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012cac:	7c3b      	ldrb	r3, [r7, #16]
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	021b      	lsls	r3, r3, #8
 8012cb2:	b29a      	uxth	r2, r3
 8012cb4:	7bfb      	ldrb	r3, [r7, #15]
 8012cb6:	b29b      	uxth	r3, r3
 8012cb8:	4313      	orrs	r3, r2
 8012cba:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8012cbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012cc0:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8012cca:	2301      	movs	r3, #1
 8012ccc:	827b      	strh	r3, [r7, #18]
      break;
 8012cce:	e035      	b.n	8012d3c <USBH_AC_GetCur+0xf0>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8012cd0:	78bb      	ldrb	r3, [r7, #2]
 8012cd2:	68ba      	ldr	r2, [r7, #8]
 8012cd4:	3322      	adds	r3, #34	@ 0x22
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	4413      	add	r3, r2
 8012cda:	689b      	ldr	r3, [r3, #8]
 8012cdc:	78db      	ldrb	r3, [r3, #3]
 8012cde:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012ce4:	7c3b      	ldrb	r3, [r7, #16]
 8012ce6:	b29b      	uxth	r3, r3
 8012ce8:	021b      	lsls	r3, r3, #8
 8012cea:	b29a      	uxth	r2, r3
 8012cec:	7bfb      	ldrb	r3, [r7, #15]
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	4313      	orrs	r3, r2
 8012cf2:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8012cf4:	787b      	ldrb	r3, [r7, #1]
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	021b      	lsls	r3, r3, #8
 8012cfa:	b29a      	uxth	r2, r3
 8012cfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d00:	b29b      	uxth	r3, r3
 8012d02:	4313      	orrs	r3, r2
 8012d04:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8012d06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012d08:	827b      	strh	r3, [r7, #18]
      break;
 8012d0a:	e017      	b.n	8012d3c <USBH_AC_GetCur+0xf0>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012d12:	78db      	ldrb	r3, [r3, #3]
 8012d14:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8012d16:	2300      	movs	r3, #0
 8012d18:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012d1a:	7c3b      	ldrb	r3, [r7, #16]
 8012d1c:	b29b      	uxth	r3, r3
 8012d1e:	021b      	lsls	r3, r3, #8
 8012d20:	b29a      	uxth	r2, r3
 8012d22:	7bfb      	ldrb	r3, [r7, #15]
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	4313      	orrs	r3, r2
 8012d28:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8012d2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012d2e:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8012d30:	2301      	movs	r3, #1
 8012d32:	827b      	strh	r3, [r7, #18]
      break;
 8012d34:	e002      	b.n	8012d3c <USBH_AC_GetCur+0xf0>

    default:
      ret = USBH_FAIL;
 8012d36:	2302      	movs	r3, #2
 8012d38:	747b      	strb	r3, [r7, #17]
      break;
 8012d3a:	bf00      	nop
  }

  if (ret != USBH_OK)
 8012d3c:	7c7b      	ldrb	r3, [r7, #17]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d001      	beq.n	8012d46 <USBH_AC_GetCur+0xfa>
  {
    return ret;
 8012d42:	7c7b      	ldrb	r3, [r7, #17]
 8012d44:	e017      	b.n	8012d76 <USBH_AC_GetCur+0x12a>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	22a1      	movs	r2, #161	@ 0xa1
 8012d4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2281      	movs	r2, #129	@ 0x81
 8012d50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	8afa      	ldrh	r2, [r7, #22]
 8012d56:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	8aba      	ldrh	r2, [r7, #20]
 8012d5c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	8a7a      	ldrh	r2, [r7, #18]
 8012d62:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8012d6a:	8a7a      	ldrh	r2, [r7, #18]
 8012d6c:	4619      	mov	r1, r3
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f007 f84d 	bl	8019e0e <USBH_CtlReq>
 8012d74:	4603      	mov	r3, r0
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3718      	adds	r7, #24
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}

08012d7e <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8012d7e:	b580      	push	{r7, lr}
 8012d80:	b086      	sub	sp, #24
 8012d82:	af00      	add	r7, sp, #0
 8012d84:	6078      	str	r0, [r7, #4]
 8012d86:	4608      	mov	r0, r1
 8012d88:	4611      	mov	r1, r2
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	70fb      	strb	r3, [r7, #3]
 8012d90:	460b      	mov	r3, r1
 8012d92:	70bb      	strb	r3, [r7, #2]
 8012d94:	4613      	mov	r3, r2
 8012d96:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	82fb      	strh	r3, [r7, #22]
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	82bb      	strh	r3, [r7, #20]
 8012da0:	2300      	movs	r3, #0
 8012da2:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8012da4:	2300      	movs	r3, #0
 8012da6:	743b      	strb	r3, [r7, #16]
 8012da8:	2300      	movs	r3, #0
 8012daa:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8012db2:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8012db6:	69db      	ldr	r3, [r3, #28]
 8012db8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8012dbe:	78fb      	ldrb	r3, [r7, #3]
 8012dc0:	2b06      	cmp	r3, #6
 8012dc2:	d01e      	beq.n	8012e02 <USBH_AC_GetMax+0x84>
 8012dc4:	2b06      	cmp	r3, #6
 8012dc6:	dc4f      	bgt.n	8012e68 <USBH_AC_GetMax+0xea>
 8012dc8:	2b02      	cmp	r3, #2
 8012dca:	d002      	beq.n	8012dd2 <USBH_AC_GetMax+0x54>
 8012dcc:	2b03      	cmp	r3, #3
 8012dce:	d036      	beq.n	8012e3e <USBH_AC_GetMax+0xc0>
 8012dd0:	e04a      	b.n	8012e68 <USBH_AC_GetMax+0xea>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012dd6:	78db      	ldrb	r3, [r3, #3]
 8012dd8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8012dda:	2300      	movs	r3, #0
 8012ddc:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012dde:	7c3b      	ldrb	r3, [r7, #16]
 8012de0:	b29b      	uxth	r3, r3
 8012de2:	021b      	lsls	r3, r3, #8
 8012de4:	b29a      	uxth	r2, r3
 8012de6:	7bfb      	ldrb	r3, [r7, #15]
 8012de8:	b29b      	uxth	r3, r3
 8012dea:	4313      	orrs	r3, r2
 8012dec:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8012dee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012df2:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	2200      	movs	r2, #0
 8012df8:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	827b      	strh	r3, [r7, #18]
      break;
 8012e00:	e035      	b.n	8012e6e <USBH_AC_GetMax+0xf0>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8012e02:	78bb      	ldrb	r3, [r7, #2]
 8012e04:	68ba      	ldr	r2, [r7, #8]
 8012e06:	3322      	adds	r3, #34	@ 0x22
 8012e08:	009b      	lsls	r3, r3, #2
 8012e0a:	4413      	add	r3, r2
 8012e0c:	689b      	ldr	r3, [r3, #8]
 8012e0e:	78db      	ldrb	r3, [r3, #3]
 8012e10:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8012e12:	2300      	movs	r3, #0
 8012e14:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012e16:	7c3b      	ldrb	r3, [r7, #16]
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	021b      	lsls	r3, r3, #8
 8012e1c:	b29a      	uxth	r2, r3
 8012e1e:	7bfb      	ldrb	r3, [r7, #15]
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	4313      	orrs	r3, r2
 8012e24:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8012e26:	787b      	ldrb	r3, [r7, #1]
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	021b      	lsls	r3, r3, #8
 8012e2c:	b29a      	uxth	r2, r3
 8012e2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	4313      	orrs	r3, r2
 8012e36:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8012e38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012e3a:	827b      	strh	r3, [r7, #18]
      break;
 8012e3c:	e017      	b.n	8012e6e <USBH_AC_GetMax+0xf0>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e44:	78db      	ldrb	r3, [r3, #3]
 8012e46:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8012e48:	2300      	movs	r3, #0
 8012e4a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012e4c:	7c3b      	ldrb	r3, [r7, #16]
 8012e4e:	b29b      	uxth	r3, r3
 8012e50:	021b      	lsls	r3, r3, #8
 8012e52:	b29a      	uxth	r2, r3
 8012e54:	7bfb      	ldrb	r3, [r7, #15]
 8012e56:	b29b      	uxth	r3, r3
 8012e58:	4313      	orrs	r3, r2
 8012e5a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8012e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012e60:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8012e62:	2301      	movs	r3, #1
 8012e64:	827b      	strh	r3, [r7, #18]
      break;
 8012e66:	e002      	b.n	8012e6e <USBH_AC_GetMax+0xf0>

    default:
      ret = USBH_FAIL;
 8012e68:	2302      	movs	r3, #2
 8012e6a:	747b      	strb	r3, [r7, #17]
      break;
 8012e6c:	bf00      	nop
  }

  if (ret != USBH_OK)
 8012e6e:	7c7b      	ldrb	r3, [r7, #17]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d001      	beq.n	8012e78 <USBH_AC_GetMax+0xfa>
  {
    return ret;
 8012e74:	7c7b      	ldrb	r3, [r7, #17]
 8012e76:	e017      	b.n	8012ea8 <USBH_AC_GetMax+0x12a>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	22a1      	movs	r2, #161	@ 0xa1
 8012e7c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	2283      	movs	r2, #131	@ 0x83
 8012e82:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	8afa      	ldrh	r2, [r7, #22]
 8012e88:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	8aba      	ldrh	r2, [r7, #20]
 8012e8e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	8a7a      	ldrh	r2, [r7, #18]
 8012e94:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8012e9c:	8a7a      	ldrh	r2, [r7, #18]
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f006 ffb4 	bl	8019e0e <USBH_CtlReq>
 8012ea6:	4603      	mov	r3, r0

}
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3718      	adds	r7, #24
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b086      	sub	sp, #24
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	4608      	mov	r0, r1
 8012eba:	4611      	mov	r1, r2
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	70fb      	strb	r3, [r7, #3]
 8012ec2:	460b      	mov	r3, r1
 8012ec4:	70bb      	strb	r3, [r7, #2]
 8012ec6:	4613      	mov	r3, r2
 8012ec8:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	82fb      	strh	r3, [r7, #22]
 8012ece:	2300      	movs	r3, #0
 8012ed0:	82bb      	strh	r3, [r7, #20]
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	743b      	strb	r3, [r7, #16]
 8012eda:	2300      	movs	r3, #0
 8012edc:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8012ee4:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8012ee8:	69db      	ldr	r3, [r3, #28]
 8012eea:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8012eec:	2300      	movs	r3, #0
 8012eee:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8012ef0:	78fb      	ldrb	r3, [r7, #3]
 8012ef2:	2b06      	cmp	r3, #6
 8012ef4:	d01e      	beq.n	8012f34 <USBH_AC_GetRes+0x84>
 8012ef6:	2b06      	cmp	r3, #6
 8012ef8:	dc4f      	bgt.n	8012f9a <USBH_AC_GetRes+0xea>
 8012efa:	2b02      	cmp	r3, #2
 8012efc:	d002      	beq.n	8012f04 <USBH_AC_GetRes+0x54>
 8012efe:	2b03      	cmp	r3, #3
 8012f00:	d036      	beq.n	8012f70 <USBH_AC_GetRes+0xc0>
 8012f02:	e04a      	b.n	8012f9a <USBH_AC_GetRes+0xea>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f08:	78db      	ldrb	r3, [r3, #3]
 8012f0a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012f10:	7c3b      	ldrb	r3, [r7, #16]
 8012f12:	b29b      	uxth	r3, r3
 8012f14:	021b      	lsls	r3, r3, #8
 8012f16:	b29a      	uxth	r2, r3
 8012f18:	7bfb      	ldrb	r3, [r7, #15]
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	4313      	orrs	r3, r2
 8012f1e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8012f20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012f24:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8012f2e:	2301      	movs	r3, #1
 8012f30:	827b      	strh	r3, [r7, #18]
      break;
 8012f32:	e035      	b.n	8012fa0 <USBH_AC_GetRes+0xf0>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8012f34:	78bb      	ldrb	r3, [r7, #2]
 8012f36:	68ba      	ldr	r2, [r7, #8]
 8012f38:	3322      	adds	r3, #34	@ 0x22
 8012f3a:	009b      	lsls	r3, r3, #2
 8012f3c:	4413      	add	r3, r2
 8012f3e:	689b      	ldr	r3, [r3, #8]
 8012f40:	78db      	ldrb	r3, [r3, #3]
 8012f42:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8012f44:	2300      	movs	r3, #0
 8012f46:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012f48:	7c3b      	ldrb	r3, [r7, #16]
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	021b      	lsls	r3, r3, #8
 8012f4e:	b29a      	uxth	r2, r3
 8012f50:	7bfb      	ldrb	r3, [r7, #15]
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	4313      	orrs	r3, r2
 8012f56:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8012f58:	787b      	ldrb	r3, [r7, #1]
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	021b      	lsls	r3, r3, #8
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012f64:	b29b      	uxth	r3, r3
 8012f66:	4313      	orrs	r3, r2
 8012f68:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8012f6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012f6c:	827b      	strh	r3, [r7, #18]
      break;
 8012f6e:	e017      	b.n	8012fa0 <USBH_AC_GetRes+0xf0>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012f76:	78db      	ldrb	r3, [r3, #3]
 8012f78:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8012f7e:	7c3b      	ldrb	r3, [r7, #16]
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	021b      	lsls	r3, r3, #8
 8012f84:	b29a      	uxth	r2, r3
 8012f86:	7bfb      	ldrb	r3, [r7, #15]
 8012f88:	b29b      	uxth	r3, r3
 8012f8a:	4313      	orrs	r3, r2
 8012f8c:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8012f8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012f92:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8012f94:	2301      	movs	r3, #1
 8012f96:	827b      	strh	r3, [r7, #18]
      break;
 8012f98:	e002      	b.n	8012fa0 <USBH_AC_GetRes+0xf0>

    default:
      ret = USBH_FAIL;
 8012f9a:	2302      	movs	r3, #2
 8012f9c:	747b      	strb	r3, [r7, #17]
      break;
 8012f9e:	bf00      	nop
  }

  if (ret != USBH_OK)
 8012fa0:	7c7b      	ldrb	r3, [r7, #17]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d001      	beq.n	8012faa <USBH_AC_GetRes+0xfa>
  {
    return ret;
 8012fa6:	7c7b      	ldrb	r3, [r7, #17]
 8012fa8:	e017      	b.n	8012fda <USBH_AC_GetRes+0x12a>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	22a1      	movs	r2, #161	@ 0xa1
 8012fae:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2284      	movs	r2, #132	@ 0x84
 8012fb4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	8afa      	ldrh	r2, [r7, #22]
 8012fba:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	8aba      	ldrh	r2, [r7, #20]
 8012fc0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	8a7a      	ldrh	r2, [r7, #18]
 8012fc6:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8012fce:	8a7a      	ldrh	r2, [r7, #18]
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f006 ff1b 	bl	8019e0e <USBH_CtlReq>
 8012fd8:	4603      	mov	r3, r0

}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3718      	adds	r7, #24
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}

08012fe2 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8012fe2:	b580      	push	{r7, lr}
 8012fe4:	b086      	sub	sp, #24
 8012fe6:	af00      	add	r7, sp, #0
 8012fe8:	6078      	str	r0, [r7, #4]
 8012fea:	4608      	mov	r0, r1
 8012fec:	4611      	mov	r1, r2
 8012fee:	461a      	mov	r2, r3
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	70fb      	strb	r3, [r7, #3]
 8012ff4:	460b      	mov	r3, r1
 8012ff6:	70bb      	strb	r3, [r7, #2]
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	82fb      	strh	r3, [r7, #22]
 8013000:	2300      	movs	r3, #0
 8013002:	82bb      	strh	r3, [r7, #20]
 8013004:	2300      	movs	r3, #0
 8013006:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8013008:	2300      	movs	r3, #0
 801300a:	743b      	strb	r3, [r7, #16]
 801300c:	2300      	movs	r3, #0
 801300e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013016:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801301a:	69db      	ldr	r3, [r3, #28]
 801301c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 801301e:	2300      	movs	r3, #0
 8013020:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8013022:	78fb      	ldrb	r3, [r7, #3]
 8013024:	2b06      	cmp	r3, #6
 8013026:	d01e      	beq.n	8013066 <USBH_AC_GetMin+0x84>
 8013028:	2b06      	cmp	r3, #6
 801302a:	dc4f      	bgt.n	80130cc <USBH_AC_GetMin+0xea>
 801302c:	2b02      	cmp	r3, #2
 801302e:	d002      	beq.n	8013036 <USBH_AC_GetMin+0x54>
 8013030:	2b03      	cmp	r3, #3
 8013032:	d036      	beq.n	80130a2 <USBH_AC_GetMin+0xc0>
 8013034:	e04a      	b.n	80130cc <USBH_AC_GetMin+0xea>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801303a:	78db      	ldrb	r3, [r3, #3]
 801303c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 801303e:	2300      	movs	r3, #0
 8013040:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8013042:	7c3b      	ldrb	r3, [r7, #16]
 8013044:	b29b      	uxth	r3, r3
 8013046:	021b      	lsls	r3, r3, #8
 8013048:	b29a      	uxth	r2, r3
 801304a:	7bfb      	ldrb	r3, [r7, #15]
 801304c:	b29b      	uxth	r3, r3
 801304e:	4313      	orrs	r3, r2
 8013050:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8013052:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013056:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8013058:	68bb      	ldr	r3, [r7, #8]
 801305a:	2200      	movs	r2, #0
 801305c:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8013060:	2301      	movs	r3, #1
 8013062:	827b      	strh	r3, [r7, #18]
      break;
 8013064:	e035      	b.n	80130d2 <USBH_AC_GetMin+0xf0>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8013066:	78bb      	ldrb	r3, [r7, #2]
 8013068:	68ba      	ldr	r2, [r7, #8]
 801306a:	3322      	adds	r3, #34	@ 0x22
 801306c:	009b      	lsls	r3, r3, #2
 801306e:	4413      	add	r3, r2
 8013070:	689b      	ldr	r3, [r3, #8]
 8013072:	78db      	ldrb	r3, [r3, #3]
 8013074:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8013076:	2300      	movs	r3, #0
 8013078:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 801307a:	7c3b      	ldrb	r3, [r7, #16]
 801307c:	b29b      	uxth	r3, r3
 801307e:	021b      	lsls	r3, r3, #8
 8013080:	b29a      	uxth	r2, r3
 8013082:	7bfb      	ldrb	r3, [r7, #15]
 8013084:	b29b      	uxth	r3, r3
 8013086:	4313      	orrs	r3, r2
 8013088:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 801308a:	787b      	ldrb	r3, [r7, #1]
 801308c:	b29b      	uxth	r3, r3
 801308e:	021b      	lsls	r3, r3, #8
 8013090:	b29a      	uxth	r2, r3
 8013092:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013096:	b29b      	uxth	r3, r3
 8013098:	4313      	orrs	r3, r2
 801309a:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 801309c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801309e:	827b      	strh	r3, [r7, #18]
      break;
 80130a0:	e017      	b.n	80130d2 <USBH_AC_GetMin+0xf0>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80130a2:	68bb      	ldr	r3, [r7, #8]
 80130a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80130a8:	78db      	ldrb	r3, [r3, #3]
 80130aa:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80130ac:	2300      	movs	r3, #0
 80130ae:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80130b0:	7c3b      	ldrb	r3, [r7, #16]
 80130b2:	b29b      	uxth	r3, r3
 80130b4:	021b      	lsls	r3, r3, #8
 80130b6:	b29a      	uxth	r2, r3
 80130b8:	7bfb      	ldrb	r3, [r7, #15]
 80130ba:	b29b      	uxth	r3, r3
 80130bc:	4313      	orrs	r3, r2
 80130be:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80130c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80130c4:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 80130c6:	2301      	movs	r3, #1
 80130c8:	827b      	strh	r3, [r7, #18]
      break;
 80130ca:	e002      	b.n	80130d2 <USBH_AC_GetMin+0xf0>

    default:
      ret = USBH_FAIL;
 80130cc:	2302      	movs	r3, #2
 80130ce:	747b      	strb	r3, [r7, #17]
      break;
 80130d0:	bf00      	nop
  }

  if (ret != USBH_OK)
 80130d2:	7c7b      	ldrb	r3, [r7, #17]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d001      	beq.n	80130dc <USBH_AC_GetMin+0xfa>
  {
    return ret;
 80130d8:	7c7b      	ldrb	r3, [r7, #17]
 80130da:	e017      	b.n	801310c <USBH_AC_GetMin+0x12a>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	22a1      	movs	r2, #161	@ 0xa1
 80130e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2282      	movs	r2, #130	@ 0x82
 80130e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	8afa      	ldrh	r2, [r7, #22]
 80130ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	8aba      	ldrh	r2, [r7, #20]
 80130f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	8a7a      	ldrh	r2, [r7, #18]
 80130f8:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8013100:	8a7a      	ldrh	r2, [r7, #18]
 8013102:	4619      	mov	r1, r3
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f006 fe82 	bl	8019e0e <USBH_CtlReq>
 801310a:	4603      	mov	r3, r0

}
 801310c:	4618      	mov	r0, r3
 801310e:	3718      	adds	r7, #24
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}

08013114 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b086      	sub	sp, #24
 8013118:	af00      	add	r7, sp, #0
 801311a:	60f8      	str	r0, [r7, #12]
 801311c:	460b      	mov	r3, r1
 801311e:	607a      	str	r2, [r7, #4]
 8013120:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8013122:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013126:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8013128:	7afb      	ldrb	r3, [r7, #11]
 801312a:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /* length of the frequency parameter */
 801312c:	2303      	movs	r3, #3
 801312e:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	2222      	movs	r2, #34	@ 0x22
 8013134:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	2201      	movs	r2, #1
 801313a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	8afa      	ldrh	r2, [r7, #22]
 8013140:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	8aba      	ldrh	r2, [r7, #20]
 8013146:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	8a7a      	ldrh	r2, [r7, #18]
 801314c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 801314e:	8a7b      	ldrh	r3, [r7, #18]
 8013150:	461a      	mov	r2, r3
 8013152:	6879      	ldr	r1, [r7, #4]
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	f006 fe5a 	bl	8019e0e <USBH_CtlReq>
 801315a:	4603      	mov	r3, r0
}
 801315c:	4618      	mov	r0, r3
 801315e:	3718      	adds	r7, #24
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}

08013164 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 8013164:	b480      	push	{r7}
 8013166:	b085      	sub	sp, #20
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 801316c:	2301      	movs	r3, #1
 801316e:	73fb      	strb	r3, [r7, #15]

  return status;
 8013170:	7bfb      	ldrb	r3, [r7, #15]
}
 8013172:	4618      	mov	r0, r3
 8013174:	3714      	adds	r7, #20
 8013176:	46bd      	mov	sp, r7
 8013178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317c:	4770      	bx	lr
	...

08013180 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b086      	sub	sp, #24
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8013188:	2301      	movs	r3, #1
 801318a:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013192:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013196:	69db      	ldr	r3, [r3, #28]
 8013198:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 801319a:	2300      	movs	r3, #0
 801319c:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	78db      	ldrb	r3, [r3, #3]
 80131a2:	3b01      	subs	r3, #1
 80131a4:	2b04      	cmp	r3, #4
 80131a6:	f200 8099 	bhi.w	80132dc <USBH_AUDIO_Control+0x15c>
 80131aa:	a201      	add	r2, pc, #4	@ (adr r2, 80131b0 <USBH_AUDIO_Control+0x30>)
 80131ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131b0:	080131c5 	.word	0x080131c5
 80131b4:	08013223 	.word	0x08013223
 80131b8:	080132dd 	.word	0x080132dd
 80131bc:	080132a9 	.word	0x080132a9
 80131c0:	080132c3 	.word	0x080132c3
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80131ca:	f8d3 3394 	ldr.w	r3, [r3, #916]	@ 0x394
 80131ce:	f003 0301 	and.w	r3, r3, #1
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	f040 8084 	bne.w	80132e0 <USBH_AUDIO_Control+0x160>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80131de:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	f8b3 3186 	ldrh.w	r3, [r3, #390]	@ 0x186
        (void)USBH_InterruptReceiveData(phost,
 80131f4:	b2da      	uxtb	r2, r3
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f007 f873 	bl	801a2e8 <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8013208:	693b      	ldr	r3, [r7, #16]
 801320a:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE;
 801321a:	693b      	ldr	r3, [r7, #16]
 801321c:	2202      	movs	r2, #2
 801321e:	70da      	strb	r2, [r3, #3]
      }
      break;
 8013220:	e05e      	b.n	80132e0 <USBH_AUDIO_Control+0x160>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8013228:	4619      	mov	r1, r3
 801322a:	6878      	ldr	r0, [r7, #4]
 801322c:	f008 f83e 	bl	801b2ac <USBH_LL_GetURBState>
 8013230:	4603      	mov	r3, r0
 8013232:	2b01      	cmp	r3, #1
 8013234:	d114      	bne.n	8013260 <USBH_AUDIO_Control+0xe0>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8013242:	3302      	adds	r3, #2
 8013244:	881b      	ldrh	r3, [r3, #0]
 8013246:	021b      	lsls	r3, r3, #8
 8013248:	b29b      	uxth	r3, r3
 801324a:	4313      	orrs	r3, r2
 801324c:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 801324e:	89fb      	ldrh	r3, [r7, #14]
 8013250:	b2db      	uxtb	r3, r3
 8013252:	4619      	mov	r1, r3
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f000 f989 	bl	801356c <USBH_AUDIO_SetControlAttribute>
 801325a:	4603      	mov	r3, r0
 801325c:	2b01      	cmp	r3, #1
 801325e:	d041      	beq.n	80132e4 <USBH_AUDIO_Control+0x164>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013266:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 801326a:	693b      	ldr	r3, [r7, #16]
 801326c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8013270:	1ad3      	subs	r3, r2, r3
 8013272:	693a      	ldr	r2, [r7, #16]
 8013274:	f892 218b 	ldrb.w	r2, [r2, #395]	@ 0x18b
 8013278:	4293      	cmp	r3, r2
 801327a:	d335      	bcc.n	80132e8 <USBH_AUDIO_Control+0x168>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013282:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	f8b3 3186 	ldrh.w	r3, [r3, #390]	@ 0x186
        (void)USBH_InterruptReceiveData(phost,
 8013298:	b2da      	uxtb	r2, r3
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	f007 f821 	bl	801a2e8 <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

      }
      break;
 80132a6:	e01f      	b.n	80132e8 <USBH_AUDIO_Control+0x168>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 80132a8:	2101      	movs	r1, #1
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f000 f95e 	bl	801356c <USBH_AUDIO_SetControlAttribute>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d11a      	bne.n	80132ec <USBH_AUDIO_Control+0x16c>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	2201      	movs	r2, #1
 80132ba:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 80132bc:	2300      	movs	r3, #0
 80132be:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80132c0:	e014      	b.n	80132ec <USBH_AUDIO_Control+0x16c>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 80132c2:	2102      	movs	r1, #2
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 f951 	bl	801356c <USBH_AUDIO_SetControlAttribute>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d10f      	bne.n	80132f0 <USBH_AUDIO_Control+0x170>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	2201      	movs	r2, #1
 80132d4:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 80132d6:	2300      	movs	r3, #0
 80132d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80132da:	e009      	b.n	80132f0 <USBH_AUDIO_Control+0x170>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 80132dc:	bf00      	nop
 80132de:	e008      	b.n	80132f2 <USBH_AUDIO_Control+0x172>
      break;
 80132e0:	bf00      	nop
 80132e2:	e006      	b.n	80132f2 <USBH_AUDIO_Control+0x172>
          break;
 80132e4:	bf00      	nop
 80132e6:	e004      	b.n	80132f2 <USBH_AUDIO_Control+0x172>
      break;
 80132e8:	bf00      	nop
 80132ea:	e002      	b.n	80132f2 <USBH_AUDIO_Control+0x172>
      break;
 80132ec:	bf00      	nop
 80132ee:	e000      	b.n	80132f2 <USBH_AUDIO_Control+0x172>
      break;
 80132f0:	bf00      	nop
  }

  return status;
 80132f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	3718      	adds	r7, #24
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}

080132fc <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b086      	sub	sp, #24
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8013304:	2301      	movs	r3, #1
 8013306:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801330e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013312:	69db      	ldr	r3, [r3, #28]
 8013314:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	789b      	ldrb	r3, [r3, #2]
 801331a:	3b01      	subs	r3, #1
 801331c:	2b04      	cmp	r3, #4
 801331e:	d85c      	bhi.n	80133da <USBH_AUDIO_OutputStream+0xde>
 8013320:	a201      	add	r2, pc, #4	@ (adr r2, 8013328 <USBH_AUDIO_OutputStream+0x2c>)
 8013322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013326:	bf00      	nop
 8013328:	0801333d 	.word	0x0801333d
 801332c:	08013399 	.word	0x08013399
 8013330:	08013363 	.word	0x08013363
 8013334:	080133cf 	.word	0x080133cf
 8013338:	080133c9 	.word	0x080133c9
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8013342:	693a      	ldr	r2, [r7, #16]
 8013344:	3317      	adds	r3, #23
 8013346:	00db      	lsls	r3, r3, #3
 8013348:	4413      	add	r3, r2
 801334a:	68db      	ldr	r3, [r3, #12]
 801334c:	79db      	ldrb	r3, [r3, #7]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d103      	bne.n	801335a <USBH_AUDIO_OutputStream+0x5e>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	2203      	movs	r2, #3
 8013356:	709a      	strb	r2, [r3, #2]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013358:	e044      	b.n	80133e4 <USBH_AUDIO_OutputStream+0xe8>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	2202      	movs	r2, #2
 801335e:	709a      	strb	r2, [r3, #2]
      break;
 8013360:	e040      	b.n	80133e4 <USBH_AUDIO_OutputStream+0xe8>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8013368:	693a      	ldr	r2, [r7, #16]
 801336a:	3317      	adds	r3, #23
 801336c:	00db      	lsls	r3, r3, #3
 801336e:	4413      	add	r3, r2
 8013370:	68db      	ldr	r3, [r3, #12]
 8013372:	3308      	adds	r3, #8
 8013374:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 801337c:	68fa      	ldr	r2, [r7, #12]
 801337e:	4619      	mov	r1, r3
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f7ff fec7 	bl	8013114 <USBH_AUDIO_SetEndpointControls>
 8013386:	4603      	mov	r3, r0
 8013388:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 801338a:	7dfb      	ldrb	r3, [r7, #23]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d126      	bne.n	80133de <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8013390:	693b      	ldr	r3, [r7, #16]
 8013392:	2205      	movs	r2, #5
 8013394:	709a      	strb	r2, [r3, #2]
      }
      break;
 8013396:	e022      	b.n	80133de <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 801339e:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 80133a0:	693b      	ldr	r3, [r7, #16]
 80133a2:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 80133a6:	68fa      	ldr	r2, [r7, #12]
 80133a8:	4619      	mov	r1, r3
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	f7ff feb2 	bl	8013114 <USBH_AUDIO_SetEndpointControls>
 80133b0:	4603      	mov	r3, r0
 80133b2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80133b4:	7dfb      	ldrb	r3, [r7, #23]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d113      	bne.n	80133e2 <USBH_AUDIO_OutputStream+0xe6>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	2205      	movs	r2, #5
 80133be:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 80133c0:	6878      	ldr	r0, [r7, #4]
 80133c2:	f000 f97c 	bl	80136be <USBH_AUDIO_FrequencySet>
      }
      break;
 80133c6:	e00c      	b.n	80133e2 <USBH_AUDIO_OutputStream+0xe6>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 80133c8:	2300      	movs	r3, #0
 80133ca:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80133cc:	e00a      	b.n	80133e4 <USBH_AUDIO_OutputStream+0xe8>

    case AUDIO_PLAYBACK_PLAY:
      (void)USBH_AUDIO_Transmit(phost);
 80133ce:	6878      	ldr	r0, [r7, #4]
 80133d0:	f000 f80e 	bl	80133f0 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 80133d4:	2300      	movs	r3, #0
 80133d6:	75fb      	strb	r3, [r7, #23]
      break;
 80133d8:	e004      	b.n	80133e4 <USBH_AUDIO_OutputStream+0xe8>

    default:
      break;
 80133da:	bf00      	nop
 80133dc:	e002      	b.n	80133e4 <USBH_AUDIO_OutputStream+0xe8>
      break;
 80133de:	bf00      	nop
 80133e0:	e000      	b.n	80133e4 <USBH_AUDIO_OutputStream+0xe8>
      break;
 80133e2:	bf00      	nop
  }

  return status;
 80133e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3718      	adds	r7, #24
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}
 80133ee:	bf00      	nop

080133f0 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b084      	sub	sp, #16
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80133f8:	2301      	movs	r3, #1
 80133fa:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013402:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013406:	69db      	ldr	r3, [r3, #28]
 8013408:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	791b      	ldrb	r3, [r3, #4]
 801340e:	2b01      	cmp	r3, #1
 8013410:	d002      	beq.n	8013418 <USBH_AUDIO_Transmit+0x28>
 8013412:	2b02      	cmp	r3, #2
 8013414:	d037      	beq.n	8013486 <USBH_AUDIO_Transmit+0x96>
 8013416:	e09e      	b.n	8013556 <USBH_AUDIO_Transmit+0x166>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801341e:	f8d3 3394 	ldr.w	r3, [r3, #916]	@ 0x394
 8013422:	f003 0301 	and.w	r3, r3, #1
 8013426:	2b00      	cmp	r3, #0
 8013428:	f040 8098 	bne.w	801355c <USBH_AUDIO_Transmit+0x16c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013432:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 8013436:	68bb      	ldr	r3, [r7, #8]
 8013438:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	2202      	movs	r2, #2
 8013440:	711a      	strb	r2, [r3, #4]
        (void)USBH_IsocSendData(phost,
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	f8d3 1110 	ldr.w	r1, [r3, #272]	@ 0x110
                                AUDIO_Handle->headphone.buf,
                                (uint32_t)AUDIO_Handle->headphone.frame_length,
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
        (void)USBH_IsocSendData(phost,
 801344e:	461a      	mov	r2, r3
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f006 ff65 	bl	801a326 <USBH_IsocSendData>
                                AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 801345c:	68bb      	ldr	r3, [r7, #8]
 801345e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8013462:	461a      	mov	r2, r3
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8013470:	461a      	mov	r2, r3
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
#if (USBH_USE_OS == 1U)
        osDelay(1);
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8013484:	e06a      	b.n	801355c <USBH_AUDIO_Transmit+0x16c>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 801348c:	4619      	mov	r1, r3
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f007 ff0c 	bl	801b2ac <USBH_LL_GetURBState>
 8013494:	4603      	mov	r3, r0
 8013496:	2b01      	cmp	r3, #1
 8013498:	d162      	bne.n	8013560 <USBH_AUDIO_Transmit+0x170>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80134a0:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80134aa:	1ad3      	subs	r3, r2, r3
 80134ac:	68ba      	ldr	r2, [r7, #8]
 80134ae:	f892 20fc 	ldrb.w	r2, [r2, #252]	@ 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 80134b2:	4293      	cmp	r3, r2
 80134b4:	d354      	bcc.n	8013560 <USBH_AUDIO_Transmit+0x170>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80134bc:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 80134c0:	68bb      	ldr	r3, [r7, #8]
 80134c2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

        if (AUDIO_Handle->control.supported == 1U)
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 80134cc:	2b01      	cmp	r3, #1
 80134ce:	d102      	bne.n	80134d6 <USBH_AUDIO_Transmit+0xe6>
        {
          (void)USBH_AUDIO_Control(phost);
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f7ff fe55 	bl	8013180 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d82b      	bhi.n	801353e <USBH_AUDIO_Transmit+0x14e>
        {
          (void)USBH_IsocSendData(phost,
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
                                  AUDIO_Handle->headphone.cbuf,
                                  (uint32_t)AUDIO_Handle->headphone.frame_length,
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
          (void)USBH_IsocSendData(phost,
 80134f2:	461a      	mov	r2, r3
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f006 ff13 	bl	801a326 <USBH_IsocSendData>
                                  AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8013506:	68ba      	ldr	r2, [r7, #8]
 8013508:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 801350c:	441a      	add	r2, r3
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801351a:	68ba      	ldr	r2, [r7, #8]
 801351c:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 8013520:	441a      	add	r2, r3
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801352e:	68ba      	ldr	r2, [r7, #8]
 8013530:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 8013534:	441a      	add	r2, r3
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 801353c:	e010      	b.n	8013560 <USBH_AUDIO_Transmit+0x170>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	f04f 32ff 	mov.w	r2, #4294967295
 8013544:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	2205      	movs	r2, #5
 801354c:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f000 f8bf 	bl	80136d2 <USBH_AUDIO_BufferEmptyCallback>
      break;
 8013554:	e004      	b.n	8013560 <USBH_AUDIO_Transmit+0x170>

    default:
      status = USBH_FAIL;
 8013556:	2302      	movs	r3, #2
 8013558:	73fb      	strb	r3, [r7, #15]
      break;
 801355a:	e002      	b.n	8013562 <USBH_AUDIO_Transmit+0x172>
      break;
 801355c:	bf00      	nop
 801355e:	e000      	b.n	8013562 <USBH_AUDIO_Transmit+0x172>
      break;
 8013560:	bf00      	nop
  }
  return status;
 8013562:	7bfb      	ldrb	r3, [r7, #15]
}
 8013564:	4618      	mov	r0, r3
 8013566:	3710      	adds	r7, #16
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}

0801356c <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b084      	sub	sp, #16
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
 8013574:	460b      	mov	r3, r1
 8013576:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 8013578:	2301      	movs	r3, #1
 801357a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013582:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013586:	69db      	ldr	r3, [r3, #28]
 8013588:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 801358a:	78fb      	ldrb	r3, [r7, #3]
 801358c:	2b01      	cmp	r3, #1
 801358e:	d002      	beq.n	8013596 <USBH_AUDIO_SetControlAttribute+0x2a>
 8013590:	2b02      	cmp	r3, #2
 8013592:	d00b      	beq.n	80135ac <USBH_AUDIO_SetControlAttribute+0x40>
 8013594:	e015      	b.n	80135c2 <USBH_AUDIO_SetControlAttribute+0x56>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80135a2:	441a      	add	r2, r3
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      break;
 80135aa:	e00d      	b.n	80135c8 <USBH_AUDIO_SetControlAttribute+0x5c>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80135b8:	1ad2      	subs	r2, r2, r3
 80135ba:	68bb      	ldr	r3, [r7, #8]
 80135bc:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      break;
 80135c0:	e002      	b.n	80135c8 <USBH_AUDIO_SetControlAttribute+0x5c>

    default :
      status = USBH_FAIL;
 80135c2:	2302      	movs	r3, #2
 80135c4:	73fb      	strb	r3, [r7, #15]
      break;
 80135c6:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d905      	bls.n	80135e4 <USBH_AUDIO_SetControlAttribute+0x78>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d205      	bcs.n	8013600 <USBH_AUDIO_SetControlAttribute+0x94>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  }

  if (AUDIO_SetVolume(phost,
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	f893 11a0 	ldrb.w	r1, [r3, #416]	@ 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	f893 21a1 	ldrb.w	r2, [r3, #417]	@ 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 801360c:	68bb      	ldr	r3, [r7, #8]
 801360e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
  if (AUDIO_SetVolume(phost,
 8013612:	b29b      	uxth	r3, r3
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f000 f827 	bl	8013668 <AUDIO_SetVolume>
 801361a:	4603      	mov	r3, r0
 801361c:	2b01      	cmp	r3, #1
 801361e:	d01e      	beq.n	801365e <USBH_AUDIO_SetControlAttribute+0xf2>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8013626:	2b01      	cmp	r3, #1
 8013628:	d10e      	bne.n	8013648 <USBH_AUDIO_SetControlAttribute+0xdc>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
      status = USBH_OK;
 8013642:	2300      	movs	r3, #0
 8013644:	73fb      	strb	r3, [r7, #15]
 8013646:	e007      	b.n	8013658 <USBH_AUDIO_SetControlAttribute+0xec>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 801364e:	3b01      	subs	r3, #1
 8013650:	b2da      	uxtb	r2, r3
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	2206      	movs	r2, #6
 801365c:	705a      	strb	r2, [r3, #1]
  }


  return status;
 801365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013660:	4618      	mov	r0, r3
 8013662:	3710      	adds	r7, #16
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b086      	sub	sp, #24
 801366c:	af02      	add	r7, sp, #8
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	4608      	mov	r0, r1
 8013672:	4611      	mov	r1, r2
 8013674:	461a      	mov	r2, r3
 8013676:	4603      	mov	r3, r0
 8013678:	70fb      	strb	r3, [r7, #3]
 801367a:	460b      	mov	r3, r1
 801367c:	70bb      	strb	r3, [r7, #2]
 801367e:	4613      	mov	r3, r2
 8013680:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 8013682:	2301      	movs	r3, #1
 8013684:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801368c:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013690:	69db      	ldr	r3, [r3, #28]
 8013692:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	883a      	ldrh	r2, [r7, #0]
 8013698:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 801369c:	78fa      	ldrb	r2, [r7, #3]
 801369e:	2302      	movs	r3, #2
 80136a0:	9301      	str	r3, [sp, #4]
 80136a2:	78bb      	ldrb	r3, [r7, #2]
 80136a4:	9300      	str	r3, [sp, #0]
 80136a6:	2302      	movs	r3, #2
 80136a8:	2106      	movs	r1, #6
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f7ff fa52 	bl	8012b54 <USBH_AC_SetCur>
 80136b0:	4603      	mov	r3, r0
 80136b2:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 80136b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	3710      	adds	r7, #16
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}

080136be <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 80136be:	b480      	push	{r7}
 80136c0:	b083      	sub	sp, #12
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80136c6:	bf00      	nop
 80136c8:	370c      	adds	r7, #12
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr

080136d2 <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 80136d2:	b480      	push	{r7}
 80136d4:	b083      	sub	sp, #12
 80136d6:	af00      	add	r7, sp, #0
 80136d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80136da:	bf00      	nop
 80136dc:	370c      	adds	r7, #12
 80136de:	46bd      	mov	sp, r7
 80136e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e4:	4770      	bx	lr
	...

080136e8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80136e8:	b590      	push	{r4, r7, lr}
 80136ea:	b089      	sub	sp, #36	@ 0x24
 80136ec:	af04      	add	r7, sp, #16
 80136ee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80136f0:	2301      	movs	r3, #1
 80136f2:	2202      	movs	r2, #2
 80136f4:	2102      	movs	r1, #2
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f004 ffca 	bl	8018690 <USBH_FindInterface>
 80136fc:	4603      	mov	r3, r0
 80136fe:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8013700:	7bfb      	ldrb	r3, [r7, #15]
 8013702:	2bff      	cmp	r3, #255	@ 0xff
 8013704:	d002      	beq.n	801370c <USBH_CDC_InterfaceInit+0x24>
 8013706:	7bfb      	ldrb	r3, [r7, #15]
 8013708:	2b09      	cmp	r3, #9
 801370a:	d911      	bls.n	8013730 <USBH_CDC_InterfaceInit+0x48>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
 801370c:	488a      	ldr	r0, [pc, #552]	@ (8013938 <USBH_CDC_InterfaceInit+0x250>)
 801370e:	f008 f811 	bl	801b734 <iprintf>
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013718:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	4619      	mov	r1, r3
 8013720:	4886      	ldr	r0, [pc, #536]	@ (801393c <USBH_CDC_InterfaceInit+0x254>)
 8013722:	f008 f807 	bl	801b734 <iprintf>
 8013726:	200a      	movs	r0, #10
 8013728:	f008 f816 	bl	801b758 <putchar>
    return USBH_FAIL;
 801372c:	2302      	movs	r3, #2
 801372e:	e17c      	b.n	8013a2a <USBH_CDC_InterfaceInit+0x342>
  }

  status = USBH_SelectInterface(phost, interface);
 8013730:	7bfb      	ldrb	r3, [r7, #15]
 8013732:	4619      	mov	r1, r3
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f004 ff3b 	bl	80185b0 <USBH_SelectInterface>
 801373a:	4603      	mov	r3, r0
 801373c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 801373e:	7bbb      	ldrb	r3, [r7, #14]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d001      	beq.n	8013748 <USBH_CDC_InterfaceInit+0x60>
  {
    return USBH_FAIL;
 8013744:	2302      	movs	r3, #2
 8013746:	e170      	b.n	8013a2a <USBH_CDC_InterfaceInit+0x342>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801374e:	f8d3 434c 	ldr.w	r4, [r3, #844]	@ 0x34c
 8013752:	2050      	movs	r0, #80	@ 0x50
 8013754:	f007 fe6e 	bl	801b434 <malloc>
 8013758:	4603      	mov	r3, r0
 801375a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013762:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013766:	69db      	ldr	r3, [r3, #28]
 8013768:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d10a      	bne.n	8013786 <USBH_CDC_InterfaceInit+0x9e>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
 8013770:	4871      	ldr	r0, [pc, #452]	@ (8013938 <USBH_CDC_InterfaceInit+0x250>)
 8013772:	f007 ffdf 	bl	801b734 <iprintf>
 8013776:	4872      	ldr	r0, [pc, #456]	@ (8013940 <USBH_CDC_InterfaceInit+0x258>)
 8013778:	f007 ffdc 	bl	801b734 <iprintf>
 801377c:	200a      	movs	r0, #10
 801377e:	f007 ffeb 	bl	801b758 <putchar>
    return USBH_FAIL;
 8013782:	2302      	movs	r3, #2
 8013784:	e151      	b.n	8013a2a <USBH_CDC_InterfaceInit+0x342>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8013786:	2250      	movs	r2, #80	@ 0x50
 8013788:	2100      	movs	r1, #0
 801378a:	68b8      	ldr	r0, [r7, #8]
 801378c:	f008 f922 	bl	801b9d4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8013790:	7bfb      	ldrb	r3, [r7, #15]
 8013792:	687a      	ldr	r2, [r7, #4]
 8013794:	2132      	movs	r1, #50	@ 0x32
 8013796:	fb01 f303 	mul.w	r3, r1, r3
 801379a:	441a      	add	r2, r3
 801379c:	f248 134e 	movw	r3, #33102	@ 0x814e
 80137a0:	4413      	add	r3, r2
 80137a2:	781b      	ldrb	r3, [r3, #0]
 80137a4:	b25b      	sxtb	r3, r3
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	da17      	bge.n	80137da <USBH_CDC_InterfaceInit+0xf2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80137aa:	7bfb      	ldrb	r3, [r7, #15]
 80137ac:	687a      	ldr	r2, [r7, #4]
 80137ae:	2132      	movs	r1, #50	@ 0x32
 80137b0:	fb01 f303 	mul.w	r3, r1, r3
 80137b4:	441a      	add	r2, r3
 80137b6:	f248 134e 	movw	r3, #33102	@ 0x814e
 80137ba:	4413      	add	r3, r2
 80137bc:	781a      	ldrb	r2, [r3, #0]
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80137c2:	7bfb      	ldrb	r3, [r7, #15]
 80137c4:	687a      	ldr	r2, [r7, #4]
 80137c6:	2132      	movs	r1, #50	@ 0x32
 80137c8:	fb01 f303 	mul.w	r3, r1, r3
 80137cc:	441a      	add	r2, r3
 80137ce:	f248 1350 	movw	r3, #33104	@ 0x8150
 80137d2:	4413      	add	r3, r2
 80137d4:	881a      	ldrh	r2, [r3, #0]
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80137da:	68bb      	ldr	r3, [r7, #8]
 80137dc:	785b      	ldrb	r3, [r3, #1]
 80137de:	4619      	mov	r1, r3
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f006 fdea 	bl	801a3ba <USBH_AllocPipe>
 80137e6:	4603      	mov	r3, r0
 80137e8:	461a      	mov	r2, r3
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	7819      	ldrb	r1, [r3, #0]
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	7858      	ldrb	r0, [r3, #1]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80137fc:	f893 411c 	ldrb.w	r4, [r3, #284]	@ 0x11c
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013806:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 801380a:	68ba      	ldr	r2, [r7, #8]
 801380c:	8952      	ldrh	r2, [r2, #10]
 801380e:	9202      	str	r2, [sp, #8]
 8013810:	2203      	movs	r2, #3
 8013812:	9201      	str	r2, [sp, #4]
 8013814:	9300      	str	r3, [sp, #0]
 8013816:	4623      	mov	r3, r4
 8013818:	4602      	mov	r2, r0
 801381a:	6878      	ldr	r0, [r7, #4]
 801381c:	f006 fd9e 	bl	801a35c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	2200      	movs	r2, #0
 8013826:	4619      	mov	r1, r3
 8013828:	6878      	ldr	r0, [r7, #4]
 801382a:	f007 fd62 	bl	801b2f2 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 801382e:	2300      	movs	r3, #0
 8013830:	2200      	movs	r2, #0
 8013832:	210a      	movs	r1, #10
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f004 ff2b 	bl	8018690 <USBH_FindInterface>
 801383a:	4603      	mov	r3, r0
 801383c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801383e:	7bfb      	ldrb	r3, [r7, #15]
 8013840:	2bff      	cmp	r3, #255	@ 0xff
 8013842:	d002      	beq.n	801384a <USBH_CDC_InterfaceInit+0x162>
 8013844:	7bfb      	ldrb	r3, [r7, #15]
 8013846:	2b09      	cmp	r3, #9
 8013848:	d911      	bls.n	801386e <USBH_CDC_InterfaceInit+0x186>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
 801384a:	483b      	ldr	r0, [pc, #236]	@ (8013938 <USBH_CDC_InterfaceInit+0x250>)
 801384c:	f007 ff72 	bl	801b734 <iprintf>
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013856:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	4619      	mov	r1, r3
 801385e:	4839      	ldr	r0, [pc, #228]	@ (8013944 <USBH_CDC_InterfaceInit+0x25c>)
 8013860:	f007 ff68 	bl	801b734 <iprintf>
 8013864:	200a      	movs	r0, #10
 8013866:	f007 ff77 	bl	801b758 <putchar>
    return USBH_FAIL;
 801386a:	2302      	movs	r3, #2
 801386c:	e0dd      	b.n	8013a2a <USBH_CDC_InterfaceInit+0x342>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 801386e:	7bfb      	ldrb	r3, [r7, #15]
 8013870:	687a      	ldr	r2, [r7, #4]
 8013872:	2132      	movs	r1, #50	@ 0x32
 8013874:	fb01 f303 	mul.w	r3, r1, r3
 8013878:	441a      	add	r2, r3
 801387a:	f248 134e 	movw	r3, #33102	@ 0x814e
 801387e:	4413      	add	r3, r2
 8013880:	781b      	ldrb	r3, [r3, #0]
 8013882:	b25b      	sxtb	r3, r3
 8013884:	2b00      	cmp	r3, #0
 8013886:	da18      	bge.n	80138ba <USBH_CDC_InterfaceInit+0x1d2>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8013888:	7bfb      	ldrb	r3, [r7, #15]
 801388a:	687a      	ldr	r2, [r7, #4]
 801388c:	2132      	movs	r1, #50	@ 0x32
 801388e:	fb01 f303 	mul.w	r3, r1, r3
 8013892:	441a      	add	r2, r3
 8013894:	f248 134e 	movw	r3, #33102	@ 0x814e
 8013898:	4413      	add	r3, r2
 801389a:	781a      	ldrb	r2, [r3, #0]
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80138a0:	7bfb      	ldrb	r3, [r7, #15]
 80138a2:	687a      	ldr	r2, [r7, #4]
 80138a4:	2132      	movs	r1, #50	@ 0x32
 80138a6:	fb01 f303 	mul.w	r3, r1, r3
 80138aa:	441a      	add	r2, r3
 80138ac:	f248 1350 	movw	r3, #33104	@ 0x8150
 80138b0:	4413      	add	r3, r2
 80138b2:	881a      	ldrh	r2, [r3, #0]
 80138b4:	68bb      	ldr	r3, [r7, #8]
 80138b6:	835a      	strh	r2, [r3, #26]
 80138b8:	e017      	b.n	80138ea <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80138ba:	7bfb      	ldrb	r3, [r7, #15]
 80138bc:	687a      	ldr	r2, [r7, #4]
 80138be:	2132      	movs	r1, #50	@ 0x32
 80138c0:	fb01 f303 	mul.w	r3, r1, r3
 80138c4:	441a      	add	r2, r3
 80138c6:	f248 134e 	movw	r3, #33102	@ 0x814e
 80138ca:	4413      	add	r3, r2
 80138cc:	781a      	ldrb	r2, [r3, #0]
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80138d2:	7bfb      	ldrb	r3, [r7, #15]
 80138d4:	687a      	ldr	r2, [r7, #4]
 80138d6:	2132      	movs	r1, #50	@ 0x32
 80138d8:	fb01 f303 	mul.w	r3, r1, r3
 80138dc:	441a      	add	r2, r3
 80138de:	f248 1350 	movw	r3, #33104	@ 0x8150
 80138e2:	4413      	add	r3, r2
 80138e4:	881a      	ldrh	r2, [r3, #0]
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80138ea:	7bfb      	ldrb	r3, [r7, #15]
 80138ec:	687a      	ldr	r2, [r7, #4]
 80138ee:	2132      	movs	r1, #50	@ 0x32
 80138f0:	fb01 f303 	mul.w	r3, r1, r3
 80138f4:	441a      	add	r2, r3
 80138f6:	f248 1356 	movw	r3, #33110	@ 0x8156
 80138fa:	4413      	add	r3, r2
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	b25b      	sxtb	r3, r3
 8013900:	2b00      	cmp	r3, #0
 8013902:	da21      	bge.n	8013948 <USBH_CDC_InterfaceInit+0x260>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8013904:	7bfb      	ldrb	r3, [r7, #15]
 8013906:	687a      	ldr	r2, [r7, #4]
 8013908:	2132      	movs	r1, #50	@ 0x32
 801390a:	fb01 f303 	mul.w	r3, r1, r3
 801390e:	441a      	add	r2, r3
 8013910:	f248 1356 	movw	r3, #33110	@ 0x8156
 8013914:	4413      	add	r3, r2
 8013916:	781a      	ldrb	r2, [r3, #0]
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801391c:	7bfb      	ldrb	r3, [r7, #15]
 801391e:	687a      	ldr	r2, [r7, #4]
 8013920:	2132      	movs	r1, #50	@ 0x32
 8013922:	fb01 f303 	mul.w	r3, r1, r3
 8013926:	441a      	add	r2, r3
 8013928:	f248 1358 	movw	r3, #33112	@ 0x8158
 801392c:	4413      	add	r3, r2
 801392e:	881a      	ldrh	r2, [r3, #0]
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	835a      	strh	r2, [r3, #26]
 8013934:	e020      	b.n	8013978 <USBH_CDC_InterfaceInit+0x290>
 8013936:	bf00      	nop
 8013938:	0801c7a4 	.word	0x0801c7a4
 801393c:	0801c7b0 	.word	0x0801c7b0
 8013940:	0801c7f0 	.word	0x0801c7f0
 8013944:	0801c818 	.word	0x0801c818
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8013948:	7bfb      	ldrb	r3, [r7, #15]
 801394a:	687a      	ldr	r2, [r7, #4]
 801394c:	2132      	movs	r1, #50	@ 0x32
 801394e:	fb01 f303 	mul.w	r3, r1, r3
 8013952:	441a      	add	r2, r3
 8013954:	f248 1356 	movw	r3, #33110	@ 0x8156
 8013958:	4413      	add	r3, r2
 801395a:	781a      	ldrb	r2, [r3, #0]
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8013960:	7bfb      	ldrb	r3, [r7, #15]
 8013962:	687a      	ldr	r2, [r7, #4]
 8013964:	2132      	movs	r1, #50	@ 0x32
 8013966:	fb01 f303 	mul.w	r3, r1, r3
 801396a:	441a      	add	r2, r3
 801396c:	f248 1358 	movw	r3, #33112	@ 0x8158
 8013970:	4413      	add	r3, r2
 8013972:	881a      	ldrh	r2, [r3, #0]
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	7b9b      	ldrb	r3, [r3, #14]
 801397c:	4619      	mov	r1, r3
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f006 fd1b 	bl	801a3ba <USBH_AllocPipe>
 8013984:	4603      	mov	r3, r0
 8013986:	461a      	mov	r2, r3
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	7bdb      	ldrb	r3, [r3, #15]
 8013990:	4619      	mov	r1, r3
 8013992:	6878      	ldr	r0, [r7, #4]
 8013994:	f006 fd11 	bl	801a3ba <USBH_AllocPipe>
 8013998:	4603      	mov	r3, r0
 801399a:	461a      	mov	r2, r3
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	7b59      	ldrb	r1, [r3, #13]
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	7b98      	ldrb	r0, [r3, #14]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80139ae:	f893 411c 	ldrb.w	r4, [r3, #284]	@ 0x11c
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80139b8:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 80139bc:	68ba      	ldr	r2, [r7, #8]
 80139be:	8b12      	ldrh	r2, [r2, #24]
 80139c0:	9202      	str	r2, [sp, #8]
 80139c2:	2202      	movs	r2, #2
 80139c4:	9201      	str	r2, [sp, #4]
 80139c6:	9300      	str	r3, [sp, #0]
 80139c8:	4623      	mov	r3, r4
 80139ca:	4602      	mov	r2, r0
 80139cc:	6878      	ldr	r0, [r7, #4]
 80139ce:	f006 fcc5 	bl	801a35c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	7b19      	ldrb	r1, [r3, #12]
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	7bd8      	ldrb	r0, [r3, #15]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80139e0:	f893 411c 	ldrb.w	r4, [r3, #284]	@ 0x11c
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80139ea:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 80139ee:	68ba      	ldr	r2, [r7, #8]
 80139f0:	8b52      	ldrh	r2, [r2, #26]
 80139f2:	9202      	str	r2, [sp, #8]
 80139f4:	2202      	movs	r2, #2
 80139f6:	9201      	str	r2, [sp, #4]
 80139f8:	9300      	str	r3, [sp, #0]
 80139fa:	4623      	mov	r3, r4
 80139fc:	4602      	mov	r2, r0
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f006 fcac 	bl	801a35c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	2200      	movs	r2, #0
 8013a08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	7b5b      	ldrb	r3, [r3, #13]
 8013a10:	2200      	movs	r2, #0
 8013a12:	4619      	mov	r1, r3
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f007 fc6c 	bl	801b2f2 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	7b1b      	ldrb	r3, [r3, #12]
 8013a1e:	2200      	movs	r2, #0
 8013a20:	4619      	mov	r1, r3
 8013a22:	6878      	ldr	r0, [r7, #4]
 8013a24:	f007 fc65 	bl	801b2f2 <USBH_LL_SetToggle>

  return USBH_OK;
 8013a28:	2300      	movs	r3, #0
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	3714      	adds	r7, #20
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd90      	pop	{r4, r7, pc}
 8013a32:	bf00      	nop

08013a34 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b084      	sub	sp, #16
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013a42:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013a46:	69db      	ldr	r3, [r3, #28]
 8013a48:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	781b      	ldrb	r3, [r3, #0]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d00e      	beq.n	8013a70 <USBH_CDC_InterfaceDeInit+0x3c>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	4619      	mov	r1, r3
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f006 fc9e 	bl	801a39a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	781b      	ldrb	r3, [r3, #0]
 8013a62:	4619      	mov	r1, r3
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f006 fccb 	bl	801a400 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	7b1b      	ldrb	r3, [r3, #12]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d00e      	beq.n	8013a96 <USBH_CDC_InterfaceDeInit+0x62>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	7b1b      	ldrb	r3, [r3, #12]
 8013a7c:	4619      	mov	r1, r3
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f006 fc8b 	bl	801a39a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	7b1b      	ldrb	r3, [r3, #12]
 8013a88:	4619      	mov	r1, r3
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f006 fcb8 	bl	801a400 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	2200      	movs	r2, #0
 8013a94:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	7b5b      	ldrb	r3, [r3, #13]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d00e      	beq.n	8013abc <USBH_CDC_InterfaceDeInit+0x88>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	7b5b      	ldrb	r3, [r3, #13]
 8013aa2:	4619      	mov	r1, r3
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f006 fc78 	bl	801a39a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	7b5b      	ldrb	r3, [r3, #13]
 8013aae:	4619      	mov	r1, r3
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f006 fca5 	bl	801a400 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013ac2:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013ac6:	69db      	ldr	r3, [r3, #28]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d00f      	beq.n	8013aec <USBH_CDC_InterfaceDeInit+0xb8>
  {
    USBH_free(phost->pActiveClass->pData);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013ad2:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013ad6:	69db      	ldr	r3, [r3, #28]
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f007 fcb3 	bl	801b444 <free>
    phost->pActiveClass->pData = 0U;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013ae4:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013ae8:	2200      	movs	r2, #0
 8013aea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8013aec:	2300      	movs	r3, #0
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	3710      	adds	r7, #16
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}
	...

08013af8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b084      	sub	sp, #16
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013b06:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013b0a:	69db      	ldr	r3, [r3, #28]
 8013b0c:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	3340      	adds	r3, #64	@ 0x40
 8013b12:	4619      	mov	r1, r3
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f000 f8c6 	bl	8013ca6 <GetLineCoding>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8013b1e:	7afb      	ldrb	r3, [r7, #11]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d108      	bne.n	8013b36 <USBH_CDC_ClassRequest+0x3e>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013b2a:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 8013b2e:	2102      	movs	r1, #2
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	4798      	blx	r3
 8013b34:	e00b      	b.n	8013b4e <USBH_CDC_ClassRequest+0x56>
  }
  else if (status == USBH_NOT_SUPPORTED)
 8013b36:	7afb      	ldrb	r3, [r7, #11]
 8013b38:	2b03      	cmp	r3, #3
 8013b3a:	d108      	bne.n	8013b4e <USBH_CDC_ClassRequest+0x56>
  {
    USBH_ErrLog("Control error: CDC: Device Get Line Coding configuration failed");
 8013b3c:	4806      	ldr	r0, [pc, #24]	@ (8013b58 <USBH_CDC_ClassRequest+0x60>)
 8013b3e:	f007 fdf9 	bl	801b734 <iprintf>
 8013b42:	4806      	ldr	r0, [pc, #24]	@ (8013b5c <USBH_CDC_ClassRequest+0x64>)
 8013b44:	f007 fdf6 	bl	801b734 <iprintf>
 8013b48:	200a      	movs	r0, #10
 8013b4a:	f007 fe05 	bl	801b758 <putchar>
  else
  {
    /* .. */
  }

  return status;
 8013b4e:	7afb      	ldrb	r3, [r7, #11]
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3710      	adds	r7, #16
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}
 8013b58:	0801c84c 	.word	0x0801c84c
 8013b5c:	0801c854 	.word	0x0801c854

08013b60 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b084      	sub	sp, #16
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8013b68:	2301      	movs	r3, #1
 8013b6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013b76:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013b7a:	69db      	ldr	r3, [r3, #28]
 8013b7c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8013b84:	2b04      	cmp	r3, #4
 8013b86:	d877      	bhi.n	8013c78 <USBH_CDC_Process+0x118>
 8013b88:	a201      	add	r2, pc, #4	@ (adr r2, 8013b90 <USBH_CDC_Process+0x30>)
 8013b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b8e:	bf00      	nop
 8013b90:	08013ba5 	.word	0x08013ba5
 8013b94:	08013bab 	.word	0x08013bab
 8013b98:	08013bdb 	.word	0x08013bdb
 8013b9c:	08013c4f 	.word	0x08013c4f
 8013ba0:	08013c5d 	.word	0x08013c5d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8013ba8:	e06d      	b.n	8013c86 <USBH_CDC_Process+0x126>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013bae:	4619      	mov	r1, r3
 8013bb0:	6878      	ldr	r0, [r7, #4]
 8013bb2:	f000 f897 	bl	8013ce4 <SetLineCoding>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8013bba:	7bbb      	ldrb	r3, [r7, #14]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d104      	bne.n	8013bca <USBH_CDC_Process+0x6a>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	2202      	movs	r2, #2
 8013bc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8013bc8:	e058      	b.n	8013c7c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8013bca:	7bbb      	ldrb	r3, [r7, #14]
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d055      	beq.n	8013c7c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	2204      	movs	r2, #4
 8013bd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8013bd8:	e050      	b.n	8013c7c <USBH_CDC_Process+0x11c>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	3340      	adds	r3, #64	@ 0x40
 8013bde:	4619      	mov	r1, r3
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f000 f860 	bl	8013ca6 <GetLineCoding>
 8013be6:	4603      	mov	r3, r0
 8013be8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8013bea:	7bbb      	ldrb	r3, [r7, #14]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d126      	bne.n	8013c3e <USBH_CDC_Process+0xde>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8013bfe:	68bb      	ldr	r3, [r7, #8]
 8013c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013c02:	791b      	ldrb	r3, [r3, #4]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d13b      	bne.n	8013c80 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013c12:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d133      	bne.n	8013c80 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013c22:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8013c24:	429a      	cmp	r2, r3
 8013c26:	d12b      	bne.n	8013c80 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8013c28:	68bb      	ldr	r3, [r7, #8]
 8013c2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013c30:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d124      	bne.n	8013c80 <USBH_CDC_Process+0x120>
        {
          USBH_CDC_LineCodingChanged(phost);
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f000 f95c 	bl	8013ef4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8013c3c:	e020      	b.n	8013c80 <USBH_CDC_Process+0x120>
        if (req_status != USBH_BUSY)
 8013c3e:	7bbb      	ldrb	r3, [r7, #14]
 8013c40:	2b01      	cmp	r3, #1
 8013c42:	d01d      	beq.n	8013c80 <USBH_CDC_Process+0x120>
          CDC_Handle->state = CDC_ERROR_STATE;
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	2204      	movs	r2, #4
 8013c48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8013c4c:	e018      	b.n	8013c80 <USBH_CDC_Process+0x120>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8013c4e:	6878      	ldr	r0, [r7, #4]
 8013c50:	f000 f867 	bl	8013d22 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f000 f8dc 	bl	8013e12 <CDC_ProcessReception>
      break;
 8013c5a:	e014      	b.n	8013c86 <USBH_CDC_Process+0x126>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8013c5c:	2100      	movs	r1, #0
 8013c5e:	6878      	ldr	r0, [r7, #4]
 8013c60:	f005 fd93 	bl	801978a <USBH_ClrFeature>
 8013c64:	4603      	mov	r3, r0
 8013c66:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8013c68:	7bbb      	ldrb	r3, [r7, #14]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d10a      	bne.n	8013c84 <USBH_CDC_Process+0x124>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8013c6e:	68bb      	ldr	r3, [r7, #8]
 8013c70:	2200      	movs	r2, #0
 8013c72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8013c76:	e005      	b.n	8013c84 <USBH_CDC_Process+0x124>

    default:
      break;
 8013c78:	bf00      	nop
 8013c7a:	e004      	b.n	8013c86 <USBH_CDC_Process+0x126>
      break;
 8013c7c:	bf00      	nop
 8013c7e:	e002      	b.n	8013c86 <USBH_CDC_Process+0x126>
      break;
 8013c80:	bf00      	nop
 8013c82:	e000      	b.n	8013c86 <USBH_CDC_Process+0x126>
      break;
 8013c84:	bf00      	nop

  }

  return status;
 8013c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3710      	adds	r7, #16
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}

08013c90 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8013c90:	b480      	push	{r7}
 8013c92:	b083      	sub	sp, #12
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8013c98:	2300      	movs	r3, #0
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	370c      	adds	r7, #12
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca4:	4770      	bx	lr

08013ca6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8013ca6:	b580      	push	{r7, lr}
 8013ca8:	b082      	sub	sp, #8
 8013caa:	af00      	add	r7, sp, #0
 8013cac:	6078      	str	r0, [r7, #4]
 8013cae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	22a1      	movs	r2, #161	@ 0xa1
 8013cb4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	2221      	movs	r2, #33	@ 0x21
 8013cba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2207      	movs	r2, #7
 8013ccc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	2207      	movs	r2, #7
 8013cd2:	4619      	mov	r1, r3
 8013cd4:	6878      	ldr	r0, [r7, #4]
 8013cd6:	f006 f89a 	bl	8019e0e <USBH_CtlReq>
 8013cda:	4603      	mov	r3, r0
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3708      	adds	r7, #8
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}

08013ce4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b082      	sub	sp, #8
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2221      	movs	r2, #33	@ 0x21
 8013cf2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2220      	movs	r2, #32
 8013cf8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2200      	movs	r2, #0
 8013d04:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2207      	movs	r2, #7
 8013d0a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	2207      	movs	r2, #7
 8013d10:	4619      	mov	r1, r3
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f006 f87b 	bl	8019e0e <USBH_CtlReq>
 8013d18:	4603      	mov	r3, r0
}
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	3708      	adds	r7, #8
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}

08013d22 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8013d22:	b580      	push	{r7, lr}
 8013d24:	b086      	sub	sp, #24
 8013d26:	af02      	add	r7, sp, #8
 8013d28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013d30:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013d34:	69db      	ldr	r3, [r3, #28]
 8013d36:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8013d42:	2b01      	cmp	r3, #1
 8013d44:	d002      	beq.n	8013d4c <CDC_ProcessTransmission+0x2a>
 8013d46:	2b02      	cmp	r3, #2
 8013d48:	d023      	beq.n	8013d92 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8013d4a:	e05e      	b.n	8013e0a <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d50:	68fa      	ldr	r2, [r7, #12]
 8013d52:	8b12      	ldrh	r2, [r2, #24]
 8013d54:	4293      	cmp	r3, r2
 8013d56:	d90b      	bls.n	8013d70 <CDC_ProcessTransmission+0x4e>
        (void)USBH_BulkSendData(phost,
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	69d9      	ldr	r1, [r3, #28]
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	8b1a      	ldrh	r2, [r3, #24]
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	7b5b      	ldrb	r3, [r3, #13]
 8013d64:	2001      	movs	r0, #1
 8013d66:	9000      	str	r0, [sp, #0]
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f006 fa78 	bl	801a25e <USBH_BulkSendData>
 8013d6e:	e00b      	b.n	8013d88 <CDC_ProcessTransmission+0x66>
        (void)USBH_BulkSendData(phost,
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8013d78:	b29a      	uxth	r2, r3
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	7b5b      	ldrb	r3, [r3, #13]
 8013d7e:	2001      	movs	r0, #1
 8013d80:	9000      	str	r0, [sp, #0]
 8013d82:	6878      	ldr	r0, [r7, #4]
 8013d84:	f006 fa6b 	bl	801a25e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	2202      	movs	r2, #2
 8013d8c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8013d90:	e03b      	b.n	8013e0a <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	7b5b      	ldrb	r3, [r3, #13]
 8013d96:	4619      	mov	r1, r3
 8013d98:	6878      	ldr	r0, [r7, #4]
 8013d9a:	f007 fa87 	bl	801b2ac <USBH_LL_GetURBState>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8013da2:	7afb      	ldrb	r3, [r7, #11]
 8013da4:	2b01      	cmp	r3, #1
 8013da6:	d128      	bne.n	8013dfa <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dac:	68fa      	ldr	r2, [r7, #12]
 8013dae:	8b12      	ldrh	r2, [r2, #24]
 8013db0:	4293      	cmp	r3, r2
 8013db2:	d90e      	bls.n	8013dd2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013db8:	68fa      	ldr	r2, [r7, #12]
 8013dba:	8b12      	ldrh	r2, [r2, #24]
 8013dbc:	1a9a      	subs	r2, r3, r2
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	69db      	ldr	r3, [r3, #28]
 8013dc6:	68fa      	ldr	r2, [r7, #12]
 8013dc8:	8b12      	ldrh	r2, [r2, #24]
 8013dca:	441a      	add	r2, r3
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	61da      	str	r2, [r3, #28]
 8013dd0:	e002      	b.n	8013dd8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d004      	beq.n	8013dea <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	2201      	movs	r2, #1
 8013de4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8013de8:	e00e      	b.n	8013e08 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	2200      	movs	r2, #0
 8013dee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8013df2:	6878      	ldr	r0, [r7, #4]
 8013df4:	f000 f86a 	bl	8013ecc <USBH_CDC_TransmitCallback>
      break;
 8013df8:	e006      	b.n	8013e08 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8013dfa:	7afb      	ldrb	r3, [r7, #11]
 8013dfc:	2b02      	cmp	r3, #2
 8013dfe:	d103      	bne.n	8013e08 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	2201      	movs	r2, #1
 8013e04:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8013e08:	bf00      	nop
  }
}
 8013e0a:	bf00      	nop
 8013e0c:	3710      	adds	r7, #16
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}

08013e12 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8013e12:	b580      	push	{r7, lr}
 8013e14:	b086      	sub	sp, #24
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013e20:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013e24:	69db      	ldr	r3, [r3, #28]
 8013e26:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8013e2c:	697b      	ldr	r3, [r7, #20]
 8013e2e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8013e32:	2b03      	cmp	r3, #3
 8013e34:	d002      	beq.n	8013e3c <CDC_ProcessReception+0x2a>
 8013e36:	2b04      	cmp	r3, #4
 8013e38:	d00e      	beq.n	8013e58 <CDC_ProcessReception+0x46>
        /* .. */
      }
      break;

    default:
      break;
 8013e3a:	e043      	b.n	8013ec4 <CDC_ProcessReception+0xb2>
      (void)USBH_BulkReceiveData(phost,
 8013e3c:	697b      	ldr	r3, [r7, #20]
 8013e3e:	6a19      	ldr	r1, [r3, #32]
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	8b5a      	ldrh	r2, [r3, #26]
 8013e44:	697b      	ldr	r3, [r7, #20]
 8013e46:	7b1b      	ldrb	r3, [r3, #12]
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f006 fa2f 	bl	801a2ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8013e4e:	697b      	ldr	r3, [r7, #20]
 8013e50:	2204      	movs	r2, #4
 8013e52:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8013e56:	e035      	b.n	8013ec4 <CDC_ProcessReception+0xb2>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8013e58:	697b      	ldr	r3, [r7, #20]
 8013e5a:	7b1b      	ldrb	r3, [r3, #12]
 8013e5c:	4619      	mov	r1, r3
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f007 fa24 	bl	801b2ac <USBH_LL_GetURBState>
 8013e64:	4603      	mov	r3, r0
 8013e66:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8013e68:	7cfb      	ldrb	r3, [r7, #19]
 8013e6a:	2b01      	cmp	r3, #1
 8013e6c:	d129      	bne.n	8013ec2 <CDC_ProcessReception+0xb0>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8013e6e:	697b      	ldr	r3, [r7, #20]
 8013e70:	7b1b      	ldrb	r3, [r3, #12]
 8013e72:	4619      	mov	r1, r3
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f007 f97f 	bl	801b178 <USBH_LL_GetLastXferSize>
 8013e7a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e80:	68fa      	ldr	r2, [r7, #12]
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d016      	beq.n	8013eb4 <CDC_ProcessReception+0xa2>
 8013e86:	697b      	ldr	r3, [r7, #20]
 8013e88:	8b5b      	ldrh	r3, [r3, #26]
 8013e8a:	461a      	mov	r2, r3
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	4293      	cmp	r3, r2
 8013e90:	d110      	bne.n	8013eb4 <CDC_ProcessReception+0xa2>
          CDC_Handle->RxDataLength -= length;
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	1ad2      	subs	r2, r2, r3
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	6a1a      	ldr	r2, [r3, #32]
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	441a      	add	r2, r3
 8013ea6:	697b      	ldr	r3, [r7, #20]
 8013ea8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	2203      	movs	r2, #3
 8013eae:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8013eb2:	e006      	b.n	8013ec2 <CDC_ProcessReception+0xb0>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8013eb4:	697b      	ldr	r3, [r7, #20]
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f000 f80f 	bl	8013ee0 <USBH_CDC_ReceiveCallback>
      break;
 8013ec2:	bf00      	nop
  }
}
 8013ec4:	bf00      	nop
 8013ec6:	3718      	adds	r7, #24
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}

08013ecc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8013ecc:	b480      	push	{r7}
 8013ece:	b083      	sub	sp, #12
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013ed4:	bf00      	nop
 8013ed6:	370c      	adds	r7, #12
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ede:	4770      	bx	lr

08013ee0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8013ee0:	b480      	push	{r7}
 8013ee2:	b083      	sub	sp, #12
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013ee8:	bf00      	nop
 8013eea:	370c      	adds	r7, #12
 8013eec:	46bd      	mov	sp, r7
 8013eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef2:	4770      	bx	lr

08013ef4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8013ef4:	b480      	push	{r7}
 8013ef6:	b083      	sub	sp, #12
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013efc:	bf00      	nop
 8013efe:	370c      	adds	r7, #12
 8013f00:	46bd      	mov	sp, r7
 8013f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f06:	4770      	bx	lr

08013f08 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8013f08:	b590      	push	{r4, r7, lr}
 8013f0a:	b08b      	sub	sp, #44	@ 0x2c
 8013f0c:	af04      	add	r7, sp, #16
 8013f0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 8013f10:	2300      	movs	r3, #0
 8013f12:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013f1a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013f1e:	7919      	ldrb	r1, [r3, #4]
 8013f20:	23ff      	movs	r3, #255	@ 0xff
 8013f22:	2201      	movs	r2, #1
 8013f24:	6878      	ldr	r0, [r7, #4]
 8013f26:	f004 fbb3 	bl	8018690 <USBH_FindInterface>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8013f2e:	7dbb      	ldrb	r3, [r7, #22]
 8013f30:	2bff      	cmp	r3, #255	@ 0xff
 8013f32:	d002      	beq.n	8013f3a <USBH_HID_InterfaceInit+0x32>
 8013f34:	7dbb      	ldrb	r3, [r7, #22]
 8013f36:	2b09      	cmp	r3, #9
 8013f38:	d911      	bls.n	8013f5e <USBH_HID_InterfaceInit+0x56>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8013f3a:	48b5      	ldr	r0, [pc, #724]	@ (8014210 <USBH_HID_InterfaceInit+0x308>)
 8013f3c:	f007 fbfa 	bl	801b734 <iprintf>
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013f46:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	48b1      	ldr	r0, [pc, #708]	@ (8014214 <USBH_HID_InterfaceInit+0x30c>)
 8013f50:	f007 fbf0 	bl	801b734 <iprintf>
 8013f54:	200a      	movs	r0, #10
 8013f56:	f007 fbff 	bl	801b758 <putchar>
    return USBH_FAIL;
 8013f5a:	2302      	movs	r3, #2
 8013f5c:	e154      	b.n	8014208 <USBH_HID_InterfaceInit+0x300>
  }

  status = USBH_SelectInterface(phost, interface);
 8013f5e:	7dbb      	ldrb	r3, [r7, #22]
 8013f60:	4619      	mov	r1, r3
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f004 fb24 	bl	80185b0 <USBH_SelectInterface>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8013f6c:	7d7b      	ldrb	r3, [r7, #21]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d001      	beq.n	8013f76 <USBH_HID_InterfaceInit+0x6e>
  {
    return USBH_FAIL;
 8013f72:	2302      	movs	r3, #2
 8013f74:	e148      	b.n	8014208 <USBH_HID_InterfaceInit+0x300>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013f7c:	f8d3 434c 	ldr.w	r4, [r3, #844]	@ 0x34c
 8013f80:	2034      	movs	r0, #52	@ 0x34
 8013f82:	f007 fa57 	bl	801b434 <malloc>
 8013f86:	4603      	mov	r3, r0
 8013f88:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8013f90:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8013f94:	69db      	ldr	r3, [r3, #28]
 8013f96:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d10a      	bne.n	8013fb4 <USBH_HID_InterfaceInit+0xac>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 8013f9e:	489c      	ldr	r0, [pc, #624]	@ (8014210 <USBH_HID_InterfaceInit+0x308>)
 8013fa0:	f007 fbc8 	bl	801b734 <iprintf>
 8013fa4:	489c      	ldr	r0, [pc, #624]	@ (8014218 <USBH_HID_InterfaceInit+0x310>)
 8013fa6:	f007 fbc5 	bl	801b734 <iprintf>
 8013faa:	200a      	movs	r0, #10
 8013fac:	f007 fbd4 	bl	801b758 <putchar>
    return USBH_FAIL;
 8013fb0:	2302      	movs	r3, #2
 8013fb2:	e129      	b.n	8014208 <USBH_HID_InterfaceInit+0x300>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8013fb4:	2234      	movs	r2, #52	@ 0x34
 8013fb6:	2100      	movs	r1, #0
 8013fb8:	6938      	ldr	r0, [r7, #16]
 8013fba:	f007 fd0b 	bl	801b9d4 <memset>

  HID_Handle->state = USBH_HID_ERROR;
 8013fbe:	693b      	ldr	r3, [r7, #16]
 8013fc0:	2207      	movs	r2, #7
 8013fc2:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8013fc4:	7dbb      	ldrb	r3, [r7, #22]
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	2132      	movs	r1, #50	@ 0x32
 8013fca:	fb01 f303 	mul.w	r3, r1, r3
 8013fce:	441a      	add	r2, r3
 8013fd0:	f248 1349 	movw	r3, #33097	@ 0x8149
 8013fd4:	4413      	add	r3, r2
 8013fd6:	781b      	ldrb	r3, [r3, #0]
 8013fd8:	2b01      	cmp	r3, #1
 8013fda:	d109      	bne.n	8013ff0 <USBH_HID_InterfaceInit+0xe8>
  {
    USBH_UsrLog("KeyBoard device found!");
 8013fdc:	488f      	ldr	r0, [pc, #572]	@ (801421c <USBH_HID_InterfaceInit+0x314>)
 8013fde:	f007 fba9 	bl	801b734 <iprintf>
 8013fe2:	200a      	movs	r0, #10
 8013fe4:	f007 fbb8 	bl	801b758 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 8013fe8:	693b      	ldr	r3, [r7, #16]
 8013fea:	4a8d      	ldr	r2, [pc, #564]	@ (8014220 <USBH_HID_InterfaceInit+0x318>)
 8013fec:	631a      	str	r2, [r3, #48]	@ 0x30
 8013fee:	e01d      	b.n	801402c <USBH_HID_InterfaceInit+0x124>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8013ff0:	7dbb      	ldrb	r3, [r7, #22]
 8013ff2:	687a      	ldr	r2, [r7, #4]
 8013ff4:	2132      	movs	r1, #50	@ 0x32
 8013ff6:	fb01 f303 	mul.w	r3, r1, r3
 8013ffa:	441a      	add	r2, r3
 8013ffc:	f248 1349 	movw	r3, #33097	@ 0x8149
 8014000:	4413      	add	r3, r2
 8014002:	781b      	ldrb	r3, [r3, #0]
 8014004:	2b02      	cmp	r3, #2
 8014006:	d109      	bne.n	801401c <USBH_HID_InterfaceInit+0x114>
  {
    USBH_UsrLog("Mouse device found!");
 8014008:	4886      	ldr	r0, [pc, #536]	@ (8014224 <USBH_HID_InterfaceInit+0x31c>)
 801400a:	f007 fb93 	bl	801b734 <iprintf>
 801400e:	200a      	movs	r0, #10
 8014010:	f007 fba2 	bl	801b758 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 8014014:	693b      	ldr	r3, [r7, #16]
 8014016:	4a84      	ldr	r2, [pc, #528]	@ (8014228 <USBH_HID_InterfaceInit+0x320>)
 8014018:	631a      	str	r2, [r3, #48]	@ 0x30
 801401a:	e007      	b.n	801402c <USBH_HID_InterfaceInit+0x124>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 801401c:	4883      	ldr	r0, [pc, #524]	@ (801422c <USBH_HID_InterfaceInit+0x324>)
 801401e:	f007 fb89 	bl	801b734 <iprintf>
 8014022:	200a      	movs	r0, #10
 8014024:	f007 fb98 	bl	801b758 <putchar>
    return USBH_FAIL;
 8014028:	2302      	movs	r3, #2
 801402a:	e0ed      	b.n	8014208 <USBH_HID_InterfaceInit+0x300>
  }

  HID_Handle->state     = USBH_HID_INIT;
 801402c:	693b      	ldr	r3, [r7, #16]
 801402e:	2200      	movs	r2, #0
 8014030:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 8014032:	693b      	ldr	r3, [r7, #16]
 8014034:	2200      	movs	r2, #0
 8014036:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8014038:	7dbb      	ldrb	r3, [r7, #22]
 801403a:	687a      	ldr	r2, [r7, #4]
 801403c:	2132      	movs	r1, #50	@ 0x32
 801403e:	fb01 f303 	mul.w	r3, r1, r3
 8014042:	441a      	add	r2, r3
 8014044:	f248 134e 	movw	r3, #33102	@ 0x814e
 8014048:	4413      	add	r3, r2
 801404a:	781a      	ldrb	r2, [r3, #0]
 801404c:	693b      	ldr	r3, [r7, #16]
 801404e:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8014050:	7dbb      	ldrb	r3, [r7, #22]
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	2132      	movs	r1, #50	@ 0x32
 8014056:	fb01 f303 	mul.w	r3, r1, r3
 801405a:	441a      	add	r2, r3
 801405c:	f248 1350 	movw	r3, #33104	@ 0x8150
 8014060:	4413      	add	r3, r2
 8014062:	881a      	ldrh	r2, [r3, #0]
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8014068:	7dbb      	ldrb	r3, [r7, #22]
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	2132      	movs	r1, #50	@ 0x32
 801406e:	fb01 f303 	mul.w	r3, r1, r3
 8014072:	441a      	add	r2, r3
 8014074:	f248 1352 	movw	r3, #33106	@ 0x8152
 8014078:	4413      	add	r3, r2
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	461a      	mov	r2, r3
 801407e:	693b      	ldr	r3, [r7, #16]
 8014080:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	8b9b      	ldrh	r3, [r3, #28]
 8014086:	2b09      	cmp	r3, #9
 8014088:	d802      	bhi.n	8014090 <USBH_HID_InterfaceInit+0x188>
  {
    HID_Handle->poll = HID_MIN_POLL;
 801408a:	693b      	ldr	r3, [r7, #16]
 801408c:	220a      	movs	r2, #10
 801408e:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8014090:	7dbb      	ldrb	r3, [r7, #22]
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	2132      	movs	r1, #50	@ 0x32
 8014096:	fb01 f303 	mul.w	r3, r1, r3
 801409a:	441a      	add	r2, r3
 801409c:	f248 1346 	movw	r3, #33094	@ 0x8146
 80140a0:	4413      	add	r3, r2
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	2b05      	cmp	r3, #5
 80140a6:	bf28      	it	cs
 80140a8:	2305      	movcs	r3, #5
 80140aa:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 80140ac:	2300      	movs	r3, #0
 80140ae:	75fb      	strb	r3, [r7, #23]
 80140b0:	e0a4      	b.n	80141fc <USBH_HID_InterfaceInit+0x2f4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 80140b2:	7dbb      	ldrb	r3, [r7, #22]
 80140b4:	7df9      	ldrb	r1, [r7, #23]
 80140b6:	687a      	ldr	r2, [r7, #4]
 80140b8:	3101      	adds	r1, #1
 80140ba:	00c9      	lsls	r1, r1, #3
 80140bc:	2032      	movs	r0, #50	@ 0x32
 80140be:	fb00 f303 	mul.w	r3, r0, r3
 80140c2:	440b      	add	r3, r1
 80140c4:	441a      	add	r2, r3
 80140c6:	f248 1346 	movw	r3, #33094	@ 0x8146
 80140ca:	4413      	add	r3, r2
 80140cc:	781b      	ldrb	r3, [r3, #0]
 80140ce:	b25b      	sxtb	r3, r3
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	da48      	bge.n	8014166 <USBH_HID_InterfaceInit+0x25e>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 80140d4:	7dbb      	ldrb	r3, [r7, #22]
 80140d6:	7df9      	ldrb	r1, [r7, #23]
 80140d8:	687a      	ldr	r2, [r7, #4]
 80140da:	3101      	adds	r1, #1
 80140dc:	00c9      	lsls	r1, r1, #3
 80140de:	2032      	movs	r0, #50	@ 0x32
 80140e0:	fb00 f303 	mul.w	r3, r0, r3
 80140e4:	440b      	add	r3, r1
 80140e6:	441a      	add	r2, r3
 80140e8:	f248 1346 	movw	r3, #33094	@ 0x8146
 80140ec:	4413      	add	r3, r2
 80140ee:	781a      	ldrb	r2, [r3, #0]
 80140f0:	693b      	ldr	r3, [r7, #16]
 80140f2:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 80140f4:	693b      	ldr	r3, [r7, #16]
 80140f6:	791b      	ldrb	r3, [r3, #4]
 80140f8:	4619      	mov	r1, r3
 80140fa:	6878      	ldr	r0, [r7, #4]
 80140fc:	f006 f95d 	bl	801a3ba <USBH_AllocPipe>
 8014100:	4603      	mov	r3, r0
 8014102:	461a      	mov	r2, r3
 8014104:	693b      	ldr	r3, [r7, #16]
 8014106:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 8014108:	7dbb      	ldrb	r3, [r7, #22]
 801410a:	7df9      	ldrb	r1, [r7, #23]
 801410c:	687a      	ldr	r2, [r7, #4]
 801410e:	3101      	adds	r1, #1
 8014110:	00c9      	lsls	r1, r1, #3
 8014112:	2032      	movs	r0, #50	@ 0x32
 8014114:	fb00 f303 	mul.w	r3, r0, r3
 8014118:	440b      	add	r3, r1
 801411a:	441a      	add	r2, r3
 801411c:	f248 1348 	movw	r3, #33096	@ 0x8148
 8014120:	4413      	add	r3, r2
 8014122:	881b      	ldrh	r3, [r3, #0]
 8014124:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8014126:	693b      	ldr	r3, [r7, #16]
 8014128:	7859      	ldrb	r1, [r3, #1]
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	7918      	ldrb	r0, [r3, #4]
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014134:	f893 411c 	ldrb.w	r4, [r3, #284]	@ 0x11c
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801413e:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8014142:	89ba      	ldrh	r2, [r7, #12]
 8014144:	9202      	str	r2, [sp, #8]
 8014146:	2203      	movs	r2, #3
 8014148:	9201      	str	r2, [sp, #4]
 801414a:	9300      	str	r3, [sp, #0]
 801414c:	4623      	mov	r3, r4
 801414e:	4602      	mov	r2, r0
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f006 f903 	bl	801a35c <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	785b      	ldrb	r3, [r3, #1]
 801415a:	2200      	movs	r2, #0
 801415c:	4619      	mov	r1, r3
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	f007 f8c7 	bl	801b2f2 <USBH_LL_SetToggle>
 8014164:	e047      	b.n	80141f6 <USBH_HID_InterfaceInit+0x2ee>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8014166:	7dbb      	ldrb	r3, [r7, #22]
 8014168:	7df9      	ldrb	r1, [r7, #23]
 801416a:	687a      	ldr	r2, [r7, #4]
 801416c:	3101      	adds	r1, #1
 801416e:	00c9      	lsls	r1, r1, #3
 8014170:	2032      	movs	r0, #50	@ 0x32
 8014172:	fb00 f303 	mul.w	r3, r0, r3
 8014176:	440b      	add	r3, r1
 8014178:	441a      	add	r2, r3
 801417a:	f248 1346 	movw	r3, #33094	@ 0x8146
 801417e:	4413      	add	r3, r2
 8014180:	781a      	ldrb	r2, [r3, #0]
 8014182:	693b      	ldr	r3, [r7, #16]
 8014184:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8014186:	693b      	ldr	r3, [r7, #16]
 8014188:	78db      	ldrb	r3, [r3, #3]
 801418a:	4619      	mov	r1, r3
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f006 f914 	bl	801a3ba <USBH_AllocPipe>
 8014192:	4603      	mov	r3, r0
 8014194:	461a      	mov	r2, r3
 8014196:	693b      	ldr	r3, [r7, #16]
 8014198:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 801419a:	7dbb      	ldrb	r3, [r7, #22]
 801419c:	7df9      	ldrb	r1, [r7, #23]
 801419e:	687a      	ldr	r2, [r7, #4]
 80141a0:	3101      	adds	r1, #1
 80141a2:	00c9      	lsls	r1, r1, #3
 80141a4:	2032      	movs	r0, #50	@ 0x32
 80141a6:	fb00 f303 	mul.w	r3, r0, r3
 80141aa:	440b      	add	r3, r1
 80141ac:	441a      	add	r2, r3
 80141ae:	f248 1348 	movw	r3, #33096	@ 0x8148
 80141b2:	4413      	add	r3, r2
 80141b4:	881b      	ldrh	r3, [r3, #0]
 80141b6:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 80141b8:	693b      	ldr	r3, [r7, #16]
 80141ba:	7819      	ldrb	r1, [r3, #0]
 80141bc:	693b      	ldr	r3, [r7, #16]
 80141be:	78d8      	ldrb	r0, [r3, #3]
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80141c6:	f893 411c 	ldrb.w	r4, [r3, #284]	@ 0x11c
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80141d0:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 80141d4:	89ba      	ldrh	r2, [r7, #12]
 80141d6:	9202      	str	r2, [sp, #8]
 80141d8:	2203      	movs	r2, #3
 80141da:	9201      	str	r2, [sp, #4]
 80141dc:	9300      	str	r3, [sp, #0]
 80141de:	4623      	mov	r3, r4
 80141e0:	4602      	mov	r2, r0
 80141e2:	6878      	ldr	r0, [r7, #4]
 80141e4:	f006 f8ba 	bl	801a35c <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 80141e8:	693b      	ldr	r3, [r7, #16]
 80141ea:	781b      	ldrb	r3, [r3, #0]
 80141ec:	2200      	movs	r2, #0
 80141ee:	4619      	mov	r1, r3
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f007 f87e 	bl	801b2f2 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 80141f6:	7dfb      	ldrb	r3, [r7, #23]
 80141f8:	3301      	adds	r3, #1
 80141fa:	75fb      	strb	r3, [r7, #23]
 80141fc:	7dfa      	ldrb	r2, [r7, #23]
 80141fe:	7bfb      	ldrb	r3, [r7, #15]
 8014200:	429a      	cmp	r2, r3
 8014202:	f4ff af56 	bcc.w	80140b2 <USBH_HID_InterfaceInit+0x1aa>
    }
  }

  return USBH_OK;
 8014206:	2300      	movs	r3, #0
}
 8014208:	4618      	mov	r0, r3
 801420a:	371c      	adds	r7, #28
 801420c:	46bd      	mov	sp, r7
 801420e:	bd90      	pop	{r4, r7, pc}
 8014210:	0801c898 	.word	0x0801c898
 8014214:	0801c8a4 	.word	0x0801c8a4
 8014218:	0801c8cc 	.word	0x0801c8cc
 801421c:	0801c8f4 	.word	0x0801c8f4
 8014220:	0801498d 	.word	0x0801498d
 8014224:	0801c90c 	.word	0x0801c90c
 8014228:	08014a39 	.word	0x08014a39
 801422c:	0801c920 	.word	0x0801c920

08014230 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b084      	sub	sp, #16
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801423e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8014242:	69db      	ldr	r3, [r3, #28]
 8014244:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	785b      	ldrb	r3, [r3, #1]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d00e      	beq.n	801426c <USBH_HID_InterfaceDeInit+0x3c>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	785b      	ldrb	r3, [r3, #1]
 8014252:	4619      	mov	r1, r3
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f006 f8a0 	bl	801a39a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	785b      	ldrb	r3, [r3, #1]
 801425e:	4619      	mov	r1, r3
 8014260:	6878      	ldr	r0, [r7, #4]
 8014262:	f006 f8cd 	bl	801a400 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2200      	movs	r2, #0
 801426a:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d00e      	beq.n	8014292 <USBH_HID_InterfaceDeInit+0x62>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	781b      	ldrb	r3, [r3, #0]
 8014278:	4619      	mov	r1, r3
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f006 f88d 	bl	801a39a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	4619      	mov	r1, r3
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	f006 f8ba 	bl	801a400 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	2200      	movs	r2, #0
 8014290:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014298:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801429c:	69db      	ldr	r3, [r3, #28]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d00f      	beq.n	80142c2 <USBH_HID_InterfaceDeInit+0x92>
  {
    USBH_free(phost->pActiveClass->pData);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80142a8:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80142ac:	69db      	ldr	r3, [r3, #28]
 80142ae:	4618      	mov	r0, r3
 80142b0:	f007 f8c8 	bl	801b444 <free>
    phost->pActiveClass->pData = 0U;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80142ba:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80142be:	2200      	movs	r2, #0
 80142c0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80142c2:	2300      	movs	r3, #0
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3710      	adds	r7, #16
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}

080142cc <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b084      	sub	sp, #16
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 80142d4:	2301      	movs	r3, #1
 80142d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 80142d8:	2301      	movs	r3, #1
 80142da:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80142e2:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80142e6:	69db      	ldr	r3, [r3, #28]
 80142e8:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	795b      	ldrb	r3, [r3, #5]
 80142ee:	2b05      	cmp	r3, #5
 80142f0:	d874      	bhi.n	80143dc <USBH_HID_ClassRequest+0x110>
 80142f2:	a201      	add	r2, pc, #4	@ (adr r2, 80142f8 <USBH_HID_ClassRequest+0x2c>)
 80142f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142f8:	08014311 	.word	0x08014311
 80142fc:	080143dd 	.word	0x080143dd
 8014300:	0801432b 	.word	0x0801432b
 8014304:	08014311 	.word	0x08014311
 8014308:	08014367 	.word	0x08014367
 801430c:	08014391 	.word	0x08014391
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	331c      	adds	r3, #28
 801431a:	4619      	mov	r1, r3
 801431c:	4610      	mov	r0, r2
 801431e:	f000 fa21 	bl	8014764 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 8014322:	68bb      	ldr	r3, [r7, #8]
 8014324:	2202      	movs	r2, #2
 8014326:	715a      	strb	r2, [r3, #5]

      break;
 8014328:	e05f      	b.n	80143ea <USBH_HID_ClassRequest+0x11e>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801432e:	4619      	mov	r1, r3
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f000 f971 	bl	8014618 <USBH_HID_GetHIDReportDescriptor>
 8014336:	4603      	mov	r3, r0
 8014338:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 801433a:	7bbb      	ldrb	r3, [r7, #14]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d103      	bne.n	8014348 <USBH_HID_ClassRequest+0x7c>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	2204      	movs	r2, #4
 8014344:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8014346:	e04b      	b.n	80143e0 <USBH_HID_ClassRequest+0x114>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8014348:	7bbb      	ldrb	r3, [r7, #14]
 801434a:	2b03      	cmp	r3, #3
 801434c:	d148      	bne.n	80143e0 <USBH_HID_ClassRequest+0x114>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 801434e:	4829      	ldr	r0, [pc, #164]	@ (80143f4 <USBH_HID_ClassRequest+0x128>)
 8014350:	f007 f9f0 	bl	801b734 <iprintf>
 8014354:	4828      	ldr	r0, [pc, #160]	@ (80143f8 <USBH_HID_ClassRequest+0x12c>)
 8014356:	f007 f9ed 	bl	801b734 <iprintf>
 801435a:	200a      	movs	r0, #10
 801435c:	f007 f9fc 	bl	801b758 <putchar>
        status = USBH_FAIL;
 8014360:	2302      	movs	r3, #2
 8014362:	73fb      	strb	r3, [r7, #15]
      break;
 8014364:	e03c      	b.n	80143e0 <USBH_HID_ClassRequest+0x114>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8014366:	2200      	movs	r2, #0
 8014368:	2100      	movs	r1, #0
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f000 f980 	bl	8014670 <USBH_HID_SetIdle>
 8014370:	4603      	mov	r3, r0
 8014372:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8014374:	7bbb      	ldrb	r3, [r7, #14]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d103      	bne.n	8014382 <USBH_HID_ClassRequest+0xb6>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	2205      	movs	r2, #5
 801437e:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8014380:	e030      	b.n	80143e4 <USBH_HID_ClassRequest+0x118>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8014382:	7bbb      	ldrb	r3, [r7, #14]
 8014384:	2b03      	cmp	r3, #3
 8014386:	d12d      	bne.n	80143e4 <USBH_HID_ClassRequest+0x118>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	2205      	movs	r2, #5
 801438c:	715a      	strb	r2, [r3, #5]
      break;
 801438e:	e029      	b.n	80143e4 <USBH_HID_ClassRequest+0x118>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8014390:	2100      	movs	r1, #0
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f000 f9c0 	bl	8014718 <USBH_HID_SetProtocol>
 8014398:	4603      	mov	r3, r0
 801439a:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 801439c:	7bbb      	ldrb	r3, [r7, #14]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d10d      	bne.n	80143be <USBH_HID_ClassRequest+0xf2>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 80143a2:	68bb      	ldr	r3, [r7, #8]
 80143a4:	2201      	movs	r2, #1
 80143a6:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80143ae:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 80143b2:	2102      	movs	r1, #2
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	4798      	blx	r3
        status = USBH_OK;
 80143b8:	2300      	movs	r3, #0
 80143ba:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 80143bc:	e014      	b.n	80143e8 <USBH_HID_ClassRequest+0x11c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 80143be:	7bbb      	ldrb	r3, [r7, #14]
 80143c0:	2b03      	cmp	r3, #3
 80143c2:	d111      	bne.n	80143e8 <USBH_HID_ClassRequest+0x11c>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 80143c4:	480b      	ldr	r0, [pc, #44]	@ (80143f4 <USBH_HID_ClassRequest+0x128>)
 80143c6:	f007 f9b5 	bl	801b734 <iprintf>
 80143ca:	480c      	ldr	r0, [pc, #48]	@ (80143fc <USBH_HID_ClassRequest+0x130>)
 80143cc:	f007 f9b2 	bl	801b734 <iprintf>
 80143d0:	200a      	movs	r0, #10
 80143d2:	f007 f9c1 	bl	801b758 <putchar>
        status = USBH_FAIL;
 80143d6:	2302      	movs	r3, #2
 80143d8:	73fb      	strb	r3, [r7, #15]
      break;
 80143da:	e005      	b.n	80143e8 <USBH_HID_ClassRequest+0x11c>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 80143dc:	bf00      	nop
 80143de:	e004      	b.n	80143ea <USBH_HID_ClassRequest+0x11e>
      break;
 80143e0:	bf00      	nop
 80143e2:	e002      	b.n	80143ea <USBH_HID_ClassRequest+0x11e>
      break;
 80143e4:	bf00      	nop
 80143e6:	e000      	b.n	80143ea <USBH_HID_ClassRequest+0x11e>
      break;
 80143e8:	bf00      	nop
  }

  return status;
 80143ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80143ec:	4618      	mov	r0, r3
 80143ee:	3710      	adds	r7, #16
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}
 80143f4:	0801c938 	.word	0x0801c938
 80143f8:	0801c940 	.word	0x0801c940
 80143fc:	0801c980 	.word	0x0801c980

08014400 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b088      	sub	sp, #32
 8014404:	af02      	add	r7, sp, #8
 8014406:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8014408:	2300      	movs	r3, #0
 801440a:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014412:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8014416:	69db      	ldr	r3, [r3, #28]
 8014418:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 801441a:	693b      	ldr	r3, [r7, #16]
 801441c:	789b      	ldrb	r3, [r3, #2]
 801441e:	2b06      	cmp	r3, #6
 8014420:	f200 80c5 	bhi.w	80145ae <USBH_HID_Process+0x1ae>
 8014424:	a201      	add	r2, pc, #4	@ (adr r2, 801442c <USBH_HID_Process+0x2c>)
 8014426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801442a:	bf00      	nop
 801442c:	08014449 	.word	0x08014449
 8014430:	08014481 	.word	0x08014481
 8014434:	080145af 	.word	0x080145af
 8014438:	080145af 	.word	0x080145af
 801443c:	080144f5 	.word	0x080144f5
 8014440:	080144db 	.word	0x080144db
 8014444:	08014527 	.word	0x08014527
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	4798      	blx	r3
 8014450:	4603      	mov	r3, r0
 8014452:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 8014454:	7dfb      	ldrb	r3, [r7, #23]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d103      	bne.n	8014462 <USBH_HID_Process+0x62>
      {
        HID_Handle->state = USBH_HID_IDLE;
 801445a:	693b      	ldr	r3, [r7, #16]
 801445c:	2201      	movs	r2, #1
 801445e:	709a      	strb	r2, [r3, #2]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8014460:	e0aa      	b.n	80145b8 <USBH_HID_Process+0x1b8>
        USBH_ErrLog("HID Class Init failed");
 8014462:	4858      	ldr	r0, [pc, #352]	@ (80145c4 <USBH_HID_Process+0x1c4>)
 8014464:	f007 f966 	bl	801b734 <iprintf>
 8014468:	4857      	ldr	r0, [pc, #348]	@ (80145c8 <USBH_HID_Process+0x1c8>)
 801446a:	f007 f963 	bl	801b734 <iprintf>
 801446e:	200a      	movs	r0, #10
 8014470:	f007 f972 	bl	801b758 <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 8014474:	693b      	ldr	r3, [r7, #16]
 8014476:	2207      	movs	r2, #7
 8014478:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 801447a:	2302      	movs	r3, #2
 801447c:	75fb      	strb	r3, [r7, #23]
      break;
 801447e:	e09b      	b.n	80145b8 <USBH_HID_Process+0x1b8>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8014480:	693b      	ldr	r3, [r7, #16]
 8014482:	695a      	ldr	r2, [r3, #20]
 8014484:	693b      	ldr	r3, [r7, #16]
 8014486:	8b1b      	ldrh	r3, [r3, #24]
 8014488:	b2db      	uxtb	r3, r3
 801448a:	9300      	str	r3, [sp, #0]
 801448c:	4613      	mov	r3, r2
 801448e:	2200      	movs	r2, #0
 8014490:	2101      	movs	r1, #1
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f000 f914 	bl	80146c0 <USBH_HID_GetReport>
 8014498:	4603      	mov	r3, r0
 801449a:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 801449c:	7dfb      	ldrb	r3, [r7, #23]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d103      	bne.n	80144aa <USBH_HID_Process+0xaa>
      {
        HID_Handle->state = USBH_HID_SYNC;
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	2205      	movs	r2, #5
 80144a6:	709a      	strb	r2, [r3, #2]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80144a8:	e086      	b.n	80145b8 <USBH_HID_Process+0x1b8>
      else if (status == USBH_BUSY)
 80144aa:	7dfb      	ldrb	r3, [r7, #23]
 80144ac:	2b01      	cmp	r3, #1
 80144ae:	d105      	bne.n	80144bc <USBH_HID_Process+0xbc>
        HID_Handle->state = USBH_HID_IDLE;
 80144b0:	693b      	ldr	r3, [r7, #16]
 80144b2:	2201      	movs	r2, #1
 80144b4:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80144b6:	2300      	movs	r3, #0
 80144b8:	75fb      	strb	r3, [r7, #23]
      break;
 80144ba:	e07d      	b.n	80145b8 <USBH_HID_Process+0x1b8>
      else if (status == USBH_NOT_SUPPORTED)
 80144bc:	7dfb      	ldrb	r3, [r7, #23]
 80144be:	2b03      	cmp	r3, #3
 80144c0:	d105      	bne.n	80144ce <USBH_HID_Process+0xce>
        HID_Handle->state = USBH_HID_SYNC;
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	2205      	movs	r2, #5
 80144c6:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80144c8:	2300      	movs	r3, #0
 80144ca:	75fb      	strb	r3, [r7, #23]
      break;
 80144cc:	e074      	b.n	80145b8 <USBH_HID_Process+0x1b8>
        HID_Handle->state = USBH_HID_ERROR;
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	2207      	movs	r2, #7
 80144d2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80144d4:	2302      	movs	r3, #2
 80144d6:	75fb      	strb	r3, [r7, #23]
      break;
 80144d8:	e06e      	b.n	80145b8 <USBH_HID_Process+0x1b8>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80144e0:	f8d3 3394 	ldr.w	r3, [r3, #916]	@ 0x394
 80144e4:	f003 0301 	and.w	r3, r3, #1
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d062      	beq.n	80145b2 <USBH_HID_Process+0x1b2>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	2204      	movs	r2, #4
 80144f0:	709a      	strb	r2, [r3, #2]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80144f2:	e05e      	b.n	80145b2 <USBH_HID_Process+0x1b2>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 80144f8:	693b      	ldr	r3, [r7, #16]
 80144fa:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80144fc:	b2da      	uxtb	r2, r3
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	785b      	ldrb	r3, [r3, #1]
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f005 fef0 	bl	801a2e8 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 8014508:	693b      	ldr	r3, [r7, #16]
 801450a:	2206      	movs	r2, #6
 801450c:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014514:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 8014518:	693b      	ldr	r3, [r7, #16]
 801451a:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	2200      	movs	r2, #0
 8014520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 8014524:	e048      	b.n	80145b8 <USBH_HID_Process+0x1b8>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	785b      	ldrb	r3, [r3, #1]
 801452a:	4619      	mov	r1, r3
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f006 febd 	bl	801b2ac <USBH_LL_GetURBState>
 8014532:	4603      	mov	r3, r0
 8014534:	2b01      	cmp	r3, #1
 8014536:	d124      	bne.n	8014582 <USBH_HID_Process+0x182>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	785b      	ldrb	r3, [r3, #1]
 801453c:	4619      	mov	r1, r3
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f006 fe1a 	bl	801b178 <USBH_LL_GetLastXferSize>
 8014544:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 8014546:	693b      	ldr	r3, [r7, #16]
 8014548:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801454c:	2b00      	cmp	r3, #0
 801454e:	d132      	bne.n	80145b6 <USBH_HID_Process+0x1b6>
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d02f      	beq.n	80145b6 <USBH_HID_Process+0x1b6>
 8014556:	693b      	ldr	r3, [r7, #16]
 8014558:	689b      	ldr	r3, [r3, #8]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d02b      	beq.n	80145b6 <USBH_HID_Process+0x1b6>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	f103 0008 	add.w	r0, r3, #8
 8014564:	693b      	ldr	r3, [r7, #16]
 8014566:	6959      	ldr	r1, [r3, #20]
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	8b1b      	ldrh	r3, [r3, #24]
 801456c:	461a      	mov	r2, r3
 801456e:	f000 f9b9 	bl	80148e4 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	2201      	movs	r2, #1
 8014576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f7ec fc58 	bl	8000e30 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 8014580:	e019      	b.n	80145b6 <USBH_HID_Process+0x1b6>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8014582:	693b      	ldr	r3, [r7, #16]
 8014584:	785b      	ldrb	r3, [r3, #1]
 8014586:	4619      	mov	r1, r3
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f006 fe8f 	bl	801b2ac <USBH_LL_GetURBState>
 801458e:	4603      	mov	r3, r0
 8014590:	2b05      	cmp	r3, #5
 8014592:	d110      	bne.n	80145b6 <USBH_HID_Process+0x1b6>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8014594:	693b      	ldr	r3, [r7, #16]
 8014596:	7e9b      	ldrb	r3, [r3, #26]
 8014598:	4619      	mov	r1, r3
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f005 f8f5 	bl	801978a <USBH_ClrFeature>
 80145a0:	4603      	mov	r3, r0
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d107      	bne.n	80145b6 <USBH_HID_Process+0x1b6>
            HID_Handle->state = USBH_HID_GET_DATA;
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	2204      	movs	r2, #4
 80145aa:	709a      	strb	r2, [r3, #2]
      break;
 80145ac:	e003      	b.n	80145b6 <USBH_HID_Process+0x1b6>

    default:
      break;
 80145ae:	bf00      	nop
 80145b0:	e002      	b.n	80145b8 <USBH_HID_Process+0x1b8>
      break;
 80145b2:	bf00      	nop
 80145b4:	e000      	b.n	80145b8 <USBH_HID_Process+0x1b8>
      break;
 80145b6:	bf00      	nop
  }

  return status;
 80145b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	3718      	adds	r7, #24
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd80      	pop	{r7, pc}
 80145c2:	bf00      	nop
 80145c4:	0801c938 	.word	0x0801c938
 80145c8:	0801c9b8 	.word	0x0801c9b8

080145cc <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80145cc:	b480      	push	{r7}
 80145ce:	b085      	sub	sp, #20
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80145da:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80145de:	69db      	ldr	r3, [r3, #28]
 80145e0:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	789b      	ldrb	r3, [r3, #2]
 80145e6:	2b06      	cmp	r3, #6
 80145e8:	d10e      	bne.n	8014608 <USBH_HID_SOFProcess+0x3c>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80145f0:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	6a1b      	ldr	r3, [r3, #32]
 80145f8:	1ad3      	subs	r3, r2, r3
 80145fa:	68fa      	ldr	r2, [r7, #12]
 80145fc:	8b92      	ldrh	r2, [r2, #28]
 80145fe:	4293      	cmp	r3, r2
 8014600:	d302      	bcc.n	8014608 <USBH_HID_SOFProcess+0x3c>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	2204      	movs	r2, #4
 8014606:	709a      	strb	r2, [r3, #2]
#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
    }
  }
  return USBH_OK;
 8014608:	2300      	movs	r3, #0
}
 801460a:	4618      	mov	r0, r3
 801460c:	3714      	adds	r7, #20
 801460e:	46bd      	mov	sp, r7
 8014610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014614:	4770      	bx	lr
	...

08014618 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b086      	sub	sp, #24
 801461c:	af02      	add	r7, sp, #8
 801461e:	6078      	str	r0, [r7, #4]
 8014620:	460b      	mov	r3, r1
 8014622:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8014624:	887b      	ldrh	r3, [r7, #2]
 8014626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801462a:	d90a      	bls.n	8014642 <USBH_HID_GetHIDReportDescriptor+0x2a>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 801462c:	480e      	ldr	r0, [pc, #56]	@ (8014668 <USBH_HID_GetHIDReportDescriptor+0x50>)
 801462e:	f007 f881 	bl	801b734 <iprintf>
 8014632:	480e      	ldr	r0, [pc, #56]	@ (801466c <USBH_HID_GetHIDReportDescriptor+0x54>)
 8014634:	f007 f87e 	bl	801b734 <iprintf>
 8014638:	200a      	movs	r0, #10
 801463a:	f007 f88d 	bl	801b758 <putchar>
    return USBH_NOT_SUPPORTED;
 801463e:	2303      	movs	r3, #3
 8014640:	e00e      	b.n	8014660 <USBH_HID_GetHIDReportDescriptor+0x48>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8014648:	887b      	ldrh	r3, [r7, #2]
 801464a:	9300      	str	r3, [sp, #0]
 801464c:	4613      	mov	r3, r2
 801464e:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 8014652:	2101      	movs	r1, #1
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f004 ffd1 	bl	80195fc <USBH_GetDescriptor>
 801465a:	4603      	mov	r3, r0
 801465c:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 801465e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014660:	4618      	mov	r0, r3
 8014662:	3710      	adds	r7, #16
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}
 8014668:	0801c938 	.word	0x0801c938
 801466c:	0801c9d0 	.word	0x0801c9d0

08014670 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b082      	sub	sp, #8
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
 8014678:	460b      	mov	r3, r1
 801467a:	70fb      	strb	r3, [r7, #3]
 801467c:	4613      	mov	r3, r2
 801467e:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2221      	movs	r2, #33	@ 0x21
 8014684:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	220a      	movs	r2, #10
 801468a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 801468c:	78fb      	ldrb	r3, [r7, #3]
 801468e:	b29b      	uxth	r3, r3
 8014690:	021b      	lsls	r3, r3, #8
 8014692:	b29a      	uxth	r2, r3
 8014694:	78bb      	ldrb	r3, [r7, #2]
 8014696:	b29b      	uxth	r3, r3
 8014698:	4313      	orrs	r3, r2
 801469a:	b29a      	uxth	r2, r3
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2200      	movs	r2, #0
 80146a4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2200      	movs	r2, #0
 80146aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80146ac:	2200      	movs	r2, #0
 80146ae:	2100      	movs	r1, #0
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f005 fbac 	bl	8019e0e <USBH_CtlReq>
 80146b6:	4603      	mov	r3, r0
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3708      	adds	r7, #8
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}

080146c0 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b084      	sub	sp, #16
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	60f8      	str	r0, [r7, #12]
 80146c8:	607b      	str	r3, [r7, #4]
 80146ca:	460b      	mov	r3, r1
 80146cc:	72fb      	strb	r3, [r7, #11]
 80146ce:	4613      	mov	r3, r2
 80146d0:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	22a1      	movs	r2, #161	@ 0xa1
 80146d6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	2201      	movs	r2, #1
 80146dc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 80146de:	7afb      	ldrb	r3, [r7, #11]
 80146e0:	b29b      	uxth	r3, r3
 80146e2:	021b      	lsls	r3, r3, #8
 80146e4:	b29a      	uxth	r2, r3
 80146e6:	7abb      	ldrb	r3, [r7, #10]
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	4313      	orrs	r3, r2
 80146ec:	b29a      	uxth	r2, r3
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	2200      	movs	r2, #0
 80146f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80146f8:	7e3b      	ldrb	r3, [r7, #24]
 80146fa:	b29a      	uxth	r2, r3
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8014700:	7e3b      	ldrb	r3, [r7, #24]
 8014702:	b29b      	uxth	r3, r3
 8014704:	461a      	mov	r2, r3
 8014706:	6879      	ldr	r1, [r7, #4]
 8014708:	68f8      	ldr	r0, [r7, #12]
 801470a:	f005 fb80 	bl	8019e0e <USBH_CtlReq>
 801470e:	4603      	mov	r3, r0
}
 8014710:	4618      	mov	r0, r3
 8014712:	3710      	adds	r7, #16
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}

08014718 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b082      	sub	sp, #8
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	460b      	mov	r3, r1
 8014722:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2221      	movs	r2, #33	@ 0x21
 8014728:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	220b      	movs	r2, #11
 801472e:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8014730:	78fb      	ldrb	r3, [r7, #3]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d003      	beq.n	801473e <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2200      	movs	r2, #0
 801473a:	825a      	strh	r2, [r3, #18]
 801473c:	e002      	b.n	8014744 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2201      	movs	r2, #1
 8014742:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2200      	movs	r2, #0
 8014748:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2200      	movs	r2, #0
 801474e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8014750:	2200      	movs	r2, #0
 8014752:	2100      	movs	r1, #0
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f005 fb5a 	bl	8019e0e <USBH_CtlReq>
 801475a:	4603      	mov	r3, r0

}
 801475c:	4618      	mov	r0, r3
 801475e:	3708      	adds	r7, #8
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}

08014764 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b084      	sub	sp, #16
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
 801476c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 801476e:	683b      	ldr	r3, [r7, #0]
 8014770:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	3302      	adds	r3, #2
 8014776:	781b      	ldrb	r3, [r3, #0]
 8014778:	461a      	mov	r2, r3
 801477a:	683b      	ldr	r3, [r7, #0]
 801477c:	3303      	adds	r3, #3
 801477e:	781b      	ldrb	r3, [r3, #0]
 8014780:	021b      	lsls	r3, r3, #8
 8014782:	b29b      	uxth	r3, r3
 8014784:	4313      	orrs	r3, r2
 8014786:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8014788:	897b      	ldrh	r3, [r7, #10]
 801478a:	2b09      	cmp	r3, #9
 801478c:	d941      	bls.n	8014812 <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 801478e:	2309      	movs	r3, #9
 8014790:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8014792:	e03a      	b.n	801480a <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014794:	f107 0308 	add.w	r3, r7, #8
 8014798:	4619      	mov	r1, r3
 801479a:	68f8      	ldr	r0, [r7, #12]
 801479c:	f005 fb1d 	bl	8019dda <USBH_GetNextDesc>
 80147a0:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	785b      	ldrb	r3, [r3, #1]
 80147a6:	2b21      	cmp	r3, #33	@ 0x21
 80147a8:	d12f      	bne.n	801480a <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	781a      	ldrb	r2, [r3, #0]
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	785a      	ldrb	r2, [r3, #1]
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	3302      	adds	r3, #2
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	461a      	mov	r2, r3
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	3303      	adds	r3, #3
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	021b      	lsls	r3, r3, #8
 80147ca:	b29b      	uxth	r3, r3
 80147cc:	4313      	orrs	r3, r2
 80147ce:	b29a      	uxth	r2, r3
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	791a      	ldrb	r2, [r3, #4]
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	795a      	ldrb	r2, [r3, #5]
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	799a      	ldrb	r2, [r3, #6]
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	3307      	adds	r3, #7
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	461a      	mov	r2, r3
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	3308      	adds	r3, #8
 80147f8:	781b      	ldrb	r3, [r3, #0]
 80147fa:	021b      	lsls	r3, r3, #8
 80147fc:	b29b      	uxth	r3, r3
 80147fe:	4313      	orrs	r3, r2
 8014800:	b29a      	uxth	r2, r3
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	811a      	strh	r2, [r3, #8]
        break;
 8014806:	bf00      	nop
      }
    }
  }
}
 8014808:	e003      	b.n	8014812 <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 801480a:	893b      	ldrh	r3, [r7, #8]
 801480c:	897a      	ldrh	r2, [r7, #10]
 801480e:	429a      	cmp	r2, r3
 8014810:	d8c0      	bhi.n	8014794 <USBH_HID_ParseHIDDesc+0x30>
}
 8014812:	bf00      	nop
 8014814:	3710      	adds	r7, #16
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}

0801481a <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 801481a:	b480      	push	{r7}
 801481c:	b085      	sub	sp, #20
 801481e:	af00      	add	r7, sp, #0
 8014820:	60f8      	str	r0, [r7, #12]
 8014822:	60b9      	str	r1, [r7, #8]
 8014824:	4613      	mov	r3, r2
 8014826:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	2200      	movs	r2, #0
 801482c:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	2200      	movs	r2, #0
 8014832:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	2200      	movs	r2, #0
 8014838:	729a      	strb	r2, [r3, #10]
  f->size = size;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	88fa      	ldrh	r2, [r7, #6]
 801483e:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	68ba      	ldr	r2, [r7, #8]
 8014844:	601a      	str	r2, [r3, #0]
}
 8014846:	bf00      	nop
 8014848:	3714      	adds	r7, #20
 801484a:	46bd      	mov	sp, r7
 801484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014850:	4770      	bx	lr

08014852 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8014852:	b480      	push	{r7}
 8014854:	b087      	sub	sp, #28
 8014856:	af00      	add	r7, sp, #0
 8014858:	60f8      	str	r0, [r7, #12]
 801485a:	60b9      	str	r1, [r7, #8]
 801485c:	4613      	mov	r3, r2
 801485e:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	7a9b      	ldrb	r3, [r3, #10]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d131      	bne.n	80148d0 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	2201      	movs	r2, #1
 8014870:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8014872:	2300      	movs	r3, #0
 8014874:	82fb      	strh	r3, [r7, #22]
 8014876:	e027      	b.n	80148c8 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	88da      	ldrh	r2, [r3, #6]
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	889b      	ldrh	r3, [r3, #4]
 8014880:	429a      	cmp	r2, r3
 8014882:	d019      	beq.n	80148b8 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	68fa      	ldr	r2, [r7, #12]
 801488a:	88d2      	ldrh	r2, [r2, #6]
 801488c:	441a      	add	r2, r3
 801488e:	693b      	ldr	r3, [r7, #16]
 8014890:	1c59      	adds	r1, r3, #1
 8014892:	6139      	str	r1, [r7, #16]
 8014894:	7812      	ldrb	r2, [r2, #0]
 8014896:	701a      	strb	r2, [r3, #0]
        f->tail++;
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	88db      	ldrh	r3, [r3, #6]
 801489c:	3301      	adds	r3, #1
 801489e:	b29a      	uxth	r2, r3
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	88da      	ldrh	r2, [r3, #6]
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	891b      	ldrh	r3, [r3, #8]
 80148ac:	429a      	cmp	r2, r3
 80148ae:	d108      	bne.n	80148c2 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	2200      	movs	r2, #0
 80148b4:	80da      	strh	r2, [r3, #6]
 80148b6:	e004      	b.n	80148c2 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	2200      	movs	r2, #0
 80148bc:	729a      	strb	r2, [r3, #10]
        return i;
 80148be:	8afb      	ldrh	r3, [r7, #22]
 80148c0:	e00a      	b.n	80148d8 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 80148c2:	8afb      	ldrh	r3, [r7, #22]
 80148c4:	3301      	adds	r3, #1
 80148c6:	82fb      	strh	r3, [r7, #22]
 80148c8:	8afa      	ldrh	r2, [r7, #22]
 80148ca:	88fb      	ldrh	r3, [r7, #6]
 80148cc:	429a      	cmp	r2, r3
 80148ce:	d3d3      	bcc.n	8014878 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	2200      	movs	r2, #0
 80148d4:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80148d6:	88fb      	ldrh	r3, [r7, #6]
}
 80148d8:	4618      	mov	r0, r3
 80148da:	371c      	adds	r7, #28
 80148dc:	46bd      	mov	sp, r7
 80148de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e2:	4770      	bx	lr

080148e4 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 80148e4:	b480      	push	{r7}
 80148e6:	b087      	sub	sp, #28
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	60f8      	str	r0, [r7, #12]
 80148ec:	60b9      	str	r1, [r7, #8]
 80148ee:	4613      	mov	r3, r2
 80148f0:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	7a9b      	ldrb	r3, [r3, #10]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d13c      	bne.n	8014978 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	2201      	movs	r2, #1
 8014902:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8014904:	2300      	movs	r3, #0
 8014906:	82fb      	strh	r3, [r7, #22]
 8014908:	e032      	b.n	8014970 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	889b      	ldrh	r3, [r3, #4]
 801490e:	3301      	adds	r3, #1
 8014910:	68fa      	ldr	r2, [r7, #12]
 8014912:	88d2      	ldrh	r2, [r2, #6]
 8014914:	4293      	cmp	r3, r2
 8014916:	d00a      	beq.n	801492e <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	889b      	ldrh	r3, [r3, #4]
 801491c:	3301      	adds	r3, #1
 801491e:	68fa      	ldr	r2, [r7, #12]
 8014920:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 8014922:	4293      	cmp	r3, r2
 8014924:	d108      	bne.n	8014938 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	88db      	ldrh	r3, [r3, #6]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d104      	bne.n	8014938 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	2200      	movs	r2, #0
 8014932:	729a      	strb	r2, [r3, #10]
        return i;
 8014934:	8afb      	ldrh	r3, [r7, #22]
 8014936:	e023      	b.n	8014980 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	1c5a      	adds	r2, r3, #1
 801493c:	613a      	str	r2, [r7, #16]
 801493e:	68fa      	ldr	r2, [r7, #12]
 8014940:	6812      	ldr	r2, [r2, #0]
 8014942:	68f9      	ldr	r1, [r7, #12]
 8014944:	8889      	ldrh	r1, [r1, #4]
 8014946:	440a      	add	r2, r1
 8014948:	781b      	ldrb	r3, [r3, #0]
 801494a:	7013      	strb	r3, [r2, #0]
        f->head++;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	889b      	ldrh	r3, [r3, #4]
 8014950:	3301      	adds	r3, #1
 8014952:	b29a      	uxth	r2, r3
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	889a      	ldrh	r2, [r3, #4]
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	891b      	ldrh	r3, [r3, #8]
 8014960:	429a      	cmp	r2, r3
 8014962:	d102      	bne.n	801496a <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2200      	movs	r2, #0
 8014968:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 801496a:	8afb      	ldrh	r3, [r7, #22]
 801496c:	3301      	adds	r3, #1
 801496e:	82fb      	strh	r3, [r7, #22]
 8014970:	8afa      	ldrh	r2, [r7, #22]
 8014972:	88fb      	ldrh	r3, [r7, #6]
 8014974:	429a      	cmp	r2, r3
 8014976:	d3c8      	bcc.n	801490a <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	2200      	movs	r2, #0
 801497c:	729a      	strb	r2, [r3, #10]

  return nbytes;
 801497e:	88fb      	ldrh	r3, [r7, #6]
}
 8014980:	4618      	mov	r0, r3
 8014982:	371c      	adds	r7, #28
 8014984:	46bd      	mov	sp, r7
 8014986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498a:	4770      	bx	lr

0801498c <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801499a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801499e:	69db      	ldr	r3, [r3, #28]
 80149a0:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 80149a2:	4b22      	ldr	r3, [pc, #136]	@ (8014a2c <USBH_HID_KeybdInit+0xa0>)
 80149a4:	2200      	movs	r2, #0
 80149a6:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 80149a8:	4b20      	ldr	r3, [pc, #128]	@ (8014a2c <USBH_HID_KeybdInit+0xa0>)
 80149aa:	2200      	movs	r2, #0
 80149ac:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 80149ae:	4b1f      	ldr	r3, [pc, #124]	@ (8014a2c <USBH_HID_KeybdInit+0xa0>)
 80149b0:	2200      	movs	r2, #0
 80149b2:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 80149b4:	4b1d      	ldr	r3, [pc, #116]	@ (8014a2c <USBH_HID_KeybdInit+0xa0>)
 80149b6:	2200      	movs	r2, #0
 80149b8:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 80149ba:	4b1c      	ldr	r3, [pc, #112]	@ (8014a2c <USBH_HID_KeybdInit+0xa0>)
 80149bc:	2200      	movs	r2, #0
 80149be:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 80149c0:	4b1a      	ldr	r3, [pc, #104]	@ (8014a2c <USBH_HID_KeybdInit+0xa0>)
 80149c2:	2200      	movs	r2, #0
 80149c4:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 80149c6:	4b19      	ldr	r3, [pc, #100]	@ (8014a2c <USBH_HID_KeybdInit+0xa0>)
 80149c8:	2200      	movs	r2, #0
 80149ca:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 80149cc:	4b17      	ldr	r3, [pc, #92]	@ (8014a2c <USBH_HID_KeybdInit+0xa0>)
 80149ce:	2200      	movs	r2, #0
 80149d0:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 80149d2:	2300      	movs	r3, #0
 80149d4:	60fb      	str	r3, [r7, #12]
 80149d6:	e00c      	b.n	80149f2 <USBH_HID_KeybdInit+0x66>
  {
    keybd_report_data[x] = 0U;
 80149d8:	4a15      	ldr	r2, [pc, #84]	@ (8014a30 <USBH_HID_KeybdInit+0xa4>)
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	4413      	add	r3, r2
 80149de:	2200      	movs	r2, #0
 80149e0:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 80149e2:	4a14      	ldr	r2, [pc, #80]	@ (8014a34 <USBH_HID_KeybdInit+0xa8>)
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	4413      	add	r3, r2
 80149e8:	2200      	movs	r2, #0
 80149ea:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	3301      	adds	r3, #1
 80149f0:	60fb      	str	r3, [r7, #12]
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	2b07      	cmp	r3, #7
 80149f6:	d9ef      	bls.n	80149d8 <USBH_HID_KeybdInit+0x4c>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 80149f8:	68bb      	ldr	r3, [r7, #8]
 80149fa:	8b1b      	ldrh	r3, [r3, #24]
 80149fc:	2b08      	cmp	r3, #8
 80149fe:	d902      	bls.n	8014a06 <USBH_HID_KeybdInit+0x7a>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	2208      	movs	r2, #8
 8014a04:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	4a0a      	ldr	r2, [pc, #40]	@ (8014a34 <USBH_HID_KeybdInit+0xa8>)
 8014a0a:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 8014a0c:	68bb      	ldr	r3, [r7, #8]
 8014a0e:	f103 0008 	add.w	r0, r3, #8
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8014a18:	2250      	movs	r2, #80	@ 0x50
 8014a1a:	4619      	mov	r1, r3
 8014a1c:	f7ff fefd 	bl	801481a <USBH_HID_FifoInit>
  }

  return USBH_OK;
 8014a20:	2300      	movs	r3, #0
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3710      	adds	r7, #16
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}
 8014a2a:	bf00      	nop
 8014a2c:	240009fc 	.word	0x240009fc
 8014a30:	24000a14 	.word	0x24000a14
 8014a34:	24000a0c 	.word	0x24000a0c

08014a38 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b084      	sub	sp, #16
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014a46:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8014a4a:	69db      	ldr	r3, [r3, #28]
 8014a4c:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8014a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8014ac4 <USBH_HID_MouseInit+0x8c>)
 8014a50:	2200      	movs	r2, #0
 8014a52:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8014a54:	4b1b      	ldr	r3, [pc, #108]	@ (8014ac4 <USBH_HID_MouseInit+0x8c>)
 8014a56:	2200      	movs	r2, #0
 8014a58:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8014a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8014ac4 <USBH_HID_MouseInit+0x8c>)
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8014a60:	4b18      	ldr	r3, [pc, #96]	@ (8014ac4 <USBH_HID_MouseInit+0x8c>)
 8014a62:	2200      	movs	r2, #0
 8014a64:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8014a66:	4b17      	ldr	r3, [pc, #92]	@ (8014ac4 <USBH_HID_MouseInit+0x8c>)
 8014a68:	2200      	movs	r2, #0
 8014a6a:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	60fb      	str	r3, [r7, #12]
 8014a70:	e00c      	b.n	8014a8c <USBH_HID_MouseInit+0x54>
  {
    mouse_report_data[i] = 0U;
 8014a72:	4a15      	ldr	r2, [pc, #84]	@ (8014ac8 <USBH_HID_MouseInit+0x90>)
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	4413      	add	r3, r2
 8014a78:	2200      	movs	r2, #0
 8014a7a:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 8014a7c:	4a13      	ldr	r2, [pc, #76]	@ (8014acc <USBH_HID_MouseInit+0x94>)
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	4413      	add	r3, r2
 8014a82:	2200      	movs	r2, #0
 8014a84:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	3301      	adds	r3, #1
 8014a8a:	60fb      	str	r3, [r7, #12]
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	2b07      	cmp	r3, #7
 8014a90:	d9ef      	bls.n	8014a72 <USBH_HID_MouseInit+0x3a>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8014a92:	68bb      	ldr	r3, [r7, #8]
 8014a94:	8b1b      	ldrh	r3, [r3, #24]
 8014a96:	2b08      	cmp	r3, #8
 8014a98:	d902      	bls.n	8014aa0 <USBH_HID_MouseInit+0x68>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	2208      	movs	r2, #8
 8014a9e:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 8014aa0:	68bb      	ldr	r3, [r7, #8]
 8014aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8014acc <USBH_HID_MouseInit+0x94>)
 8014aa4:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 8014aa6:	68bb      	ldr	r3, [r7, #8]
 8014aa8:	f103 0008 	add.w	r0, r3, #8
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8014ab2:	2250      	movs	r2, #80	@ 0x50
 8014ab4:	4619      	mov	r1, r3
 8014ab6:	f7ff feb0 	bl	801481a <USBH_HID_FifoInit>
  }

  return USBH_OK;
 8014aba:	2300      	movs	r3, #0
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3710      	adds	r7, #16
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}
 8014ac4:	24000a1c 	.word	0x24000a1c
 8014ac8:	24000a24 	.word	0x24000a24
 8014acc:	24000a2c 	.word	0x24000a2c

08014ad0 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8014ad0:	b590      	push	{r4, r7, lr}
 8014ad2:	b089      	sub	sp, #36	@ 0x24
 8014ad4:	af04      	add	r7, sp, #16
 8014ad6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014ade:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8014ae2:	7919      	ldrb	r1, [r3, #4]
 8014ae4:	2350      	movs	r3, #80	@ 0x50
 8014ae6:	2206      	movs	r2, #6
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f003 fdd1 	bl	8018690 <USBH_FindInterface>
 8014aee:	4603      	mov	r3, r0
 8014af0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8014af2:	7bfb      	ldrb	r3, [r7, #15]
 8014af4:	2bff      	cmp	r3, #255	@ 0xff
 8014af6:	d002      	beq.n	8014afe <USBH_MSC_InterfaceInit+0x2e>
 8014af8:	7bfb      	ldrb	r3, [r7, #15]
 8014afa:	2b09      	cmp	r3, #9
 8014afc:	d911      	bls.n	8014b22 <USBH_MSC_InterfaceInit+0x52>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8014afe:	489e      	ldr	r0, [pc, #632]	@ (8014d78 <USBH_MSC_InterfaceInit+0x2a8>)
 8014b00:	f006 fe18 	bl	801b734 <iprintf>
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014b0a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	4619      	mov	r1, r3
 8014b12:	489a      	ldr	r0, [pc, #616]	@ (8014d7c <USBH_MSC_InterfaceInit+0x2ac>)
 8014b14:	f006 fe0e 	bl	801b734 <iprintf>
 8014b18:	200a      	movs	r0, #10
 8014b1a:	f006 fe1d 	bl	801b758 <putchar>
    return USBH_FAIL;
 8014b1e:	2302      	movs	r3, #2
 8014b20:	e125      	b.n	8014d6e <USBH_MSC_InterfaceInit+0x29e>
  }

  status = USBH_SelectInterface(phost, interface);
 8014b22:	7bfb      	ldrb	r3, [r7, #15]
 8014b24:	4619      	mov	r1, r3
 8014b26:	6878      	ldr	r0, [r7, #4]
 8014b28:	f003 fd42 	bl	80185b0 <USBH_SelectInterface>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8014b30:	7bbb      	ldrb	r3, [r7, #14]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d001      	beq.n	8014b3a <USBH_MSC_InterfaceInit+0x6a>
  {
    return USBH_FAIL;
 8014b36:	2302      	movs	r3, #2
 8014b38:	e119      	b.n	8014d6e <USBH_MSC_InterfaceInit+0x29e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014b40:	f8d3 434c 	ldr.w	r4, [r3, #844]	@ 0x34c
 8014b44:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8014b48:	f006 fc74 	bl	801b434 <malloc>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014b56:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8014b5a:	69db      	ldr	r3, [r3, #28]
 8014b5c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8014b5e:	68bb      	ldr	r3, [r7, #8]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d10a      	bne.n	8014b7a <USBH_MSC_InterfaceInit+0xaa>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 8014b64:	4884      	ldr	r0, [pc, #528]	@ (8014d78 <USBH_MSC_InterfaceInit+0x2a8>)
 8014b66:	f006 fde5 	bl	801b734 <iprintf>
 8014b6a:	4885      	ldr	r0, [pc, #532]	@ (8014d80 <USBH_MSC_InterfaceInit+0x2b0>)
 8014b6c:	f006 fde2 	bl	801b734 <iprintf>
 8014b70:	200a      	movs	r0, #10
 8014b72:	f006 fdf1 	bl	801b758 <putchar>
    return USBH_FAIL;
 8014b76:	2302      	movs	r3, #2
 8014b78:	e0f9      	b.n	8014d6e <USBH_MSC_InterfaceInit+0x29e>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8014b7a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8014b7e:	2100      	movs	r1, #0
 8014b80:	68b8      	ldr	r0, [r7, #8]
 8014b82:	f006 ff27 	bl	801b9d4 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8014b86:	7bfb      	ldrb	r3, [r7, #15]
 8014b88:	687a      	ldr	r2, [r7, #4]
 8014b8a:	2132      	movs	r1, #50	@ 0x32
 8014b8c:	fb01 f303 	mul.w	r3, r1, r3
 8014b90:	441a      	add	r2, r3
 8014b92:	f248 134e 	movw	r3, #33102	@ 0x814e
 8014b96:	4413      	add	r3, r2
 8014b98:	781b      	ldrb	r3, [r3, #0]
 8014b9a:	b25b      	sxtb	r3, r3
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	da18      	bge.n	8014bd2 <USBH_MSC_InterfaceInit+0x102>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8014ba0:	7bfb      	ldrb	r3, [r7, #15]
 8014ba2:	687a      	ldr	r2, [r7, #4]
 8014ba4:	2132      	movs	r1, #50	@ 0x32
 8014ba6:	fb01 f303 	mul.w	r3, r1, r3
 8014baa:	441a      	add	r2, r3
 8014bac:	f248 134e 	movw	r3, #33102	@ 0x814e
 8014bb0:	4413      	add	r3, r2
 8014bb2:	781a      	ldrb	r2, [r3, #0]
 8014bb4:	68bb      	ldr	r3, [r7, #8]
 8014bb6:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8014bb8:	7bfb      	ldrb	r3, [r7, #15]
 8014bba:	687a      	ldr	r2, [r7, #4]
 8014bbc:	2132      	movs	r1, #50	@ 0x32
 8014bbe:	fb01 f303 	mul.w	r3, r1, r3
 8014bc2:	441a      	add	r2, r3
 8014bc4:	f248 1350 	movw	r3, #33104	@ 0x8150
 8014bc8:	4413      	add	r3, r2
 8014bca:	881a      	ldrh	r2, [r3, #0]
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	815a      	strh	r2, [r3, #10]
 8014bd0:	e017      	b.n	8014c02 <USBH_MSC_InterfaceInit+0x132>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8014bd2:	7bfb      	ldrb	r3, [r7, #15]
 8014bd4:	687a      	ldr	r2, [r7, #4]
 8014bd6:	2132      	movs	r1, #50	@ 0x32
 8014bd8:	fb01 f303 	mul.w	r3, r1, r3
 8014bdc:	441a      	add	r2, r3
 8014bde:	f248 134e 	movw	r3, #33102	@ 0x814e
 8014be2:	4413      	add	r3, r2
 8014be4:	781a      	ldrb	r2, [r3, #0]
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8014bea:	7bfb      	ldrb	r3, [r7, #15]
 8014bec:	687a      	ldr	r2, [r7, #4]
 8014bee:	2132      	movs	r1, #50	@ 0x32
 8014bf0:	fb01 f303 	mul.w	r3, r1, r3
 8014bf4:	441a      	add	r2, r3
 8014bf6:	f248 1350 	movw	r3, #33104	@ 0x8150
 8014bfa:	4413      	add	r3, r2
 8014bfc:	881a      	ldrh	r2, [r3, #0]
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8014c02:	7bfb      	ldrb	r3, [r7, #15]
 8014c04:	687a      	ldr	r2, [r7, #4]
 8014c06:	2132      	movs	r1, #50	@ 0x32
 8014c08:	fb01 f303 	mul.w	r3, r1, r3
 8014c0c:	441a      	add	r2, r3
 8014c0e:	f248 1356 	movw	r3, #33110	@ 0x8156
 8014c12:	4413      	add	r3, r2
 8014c14:	781b      	ldrb	r3, [r3, #0]
 8014c16:	b25b      	sxtb	r3, r3
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	da18      	bge.n	8014c4e <USBH_MSC_InterfaceInit+0x17e>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8014c1c:	7bfb      	ldrb	r3, [r7, #15]
 8014c1e:	687a      	ldr	r2, [r7, #4]
 8014c20:	2132      	movs	r1, #50	@ 0x32
 8014c22:	fb01 f303 	mul.w	r3, r1, r3
 8014c26:	441a      	add	r2, r3
 8014c28:	f248 1356 	movw	r3, #33110	@ 0x8156
 8014c2c:	4413      	add	r3, r2
 8014c2e:	781a      	ldrb	r2, [r3, #0]
 8014c30:	68bb      	ldr	r3, [r7, #8]
 8014c32:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8014c34:	7bfb      	ldrb	r3, [r7, #15]
 8014c36:	687a      	ldr	r2, [r7, #4]
 8014c38:	2132      	movs	r1, #50	@ 0x32
 8014c3a:	fb01 f303 	mul.w	r3, r1, r3
 8014c3e:	441a      	add	r2, r3
 8014c40:	f248 1358 	movw	r3, #33112	@ 0x8158
 8014c44:	4413      	add	r3, r2
 8014c46:	881a      	ldrh	r2, [r3, #0]
 8014c48:	68bb      	ldr	r3, [r7, #8]
 8014c4a:	815a      	strh	r2, [r3, #10]
 8014c4c:	e017      	b.n	8014c7e <USBH_MSC_InterfaceInit+0x1ae>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8014c4e:	7bfb      	ldrb	r3, [r7, #15]
 8014c50:	687a      	ldr	r2, [r7, #4]
 8014c52:	2132      	movs	r1, #50	@ 0x32
 8014c54:	fb01 f303 	mul.w	r3, r1, r3
 8014c58:	441a      	add	r2, r3
 8014c5a:	f248 1356 	movw	r3, #33110	@ 0x8156
 8014c5e:	4413      	add	r3, r2
 8014c60:	781a      	ldrb	r2, [r3, #0]
 8014c62:	68bb      	ldr	r3, [r7, #8]
 8014c64:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8014c66:	7bfb      	ldrb	r3, [r7, #15]
 8014c68:	687a      	ldr	r2, [r7, #4]
 8014c6a:	2132      	movs	r1, #50	@ 0x32
 8014c6c:	fb01 f303 	mul.w	r3, r1, r3
 8014c70:	441a      	add	r2, r3
 8014c72:	f248 1358 	movw	r3, #33112	@ 0x8158
 8014c76:	4413      	add	r3, r2
 8014c78:	881a      	ldrh	r2, [r3, #0]
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8014c7e:	68bb      	ldr	r3, [r7, #8]
 8014c80:	2200      	movs	r2, #0
 8014c82:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	2200      	movs	r2, #0
 8014c88:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8014c8a:	68bb      	ldr	r3, [r7, #8]
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	799b      	ldrb	r3, [r3, #6]
 8014c94:	4619      	mov	r1, r3
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f005 fb8f 	bl	801a3ba <USBH_AllocPipe>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	461a      	mov	r2, r3
 8014ca0:	68bb      	ldr	r3, [r7, #8]
 8014ca2:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	79db      	ldrb	r3, [r3, #7]
 8014ca8:	4619      	mov	r1, r3
 8014caa:	6878      	ldr	r0, [r7, #4]
 8014cac:	f005 fb85 	bl	801a3ba <USBH_AllocPipe>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8014cb8:	6878      	ldr	r0, [r7, #4]
 8014cba:	f000 fd3d 	bl	8015738 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	799b      	ldrb	r3, [r3, #6]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d022      	beq.n	8014d0c <USBH_MSC_InterfaceInit+0x23c>
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	891b      	ldrh	r3, [r3, #8]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d01e      	beq.n	8014d0c <USBH_MSC_InterfaceInit+0x23c>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8014cce:	68bb      	ldr	r3, [r7, #8]
 8014cd0:	7959      	ldrb	r1, [r3, #5]
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	7998      	ldrb	r0, [r3, #6]
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014cdc:	f893 411c 	ldrb.w	r4, [r3, #284]	@ 0x11c
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014ce6:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8014cea:	68ba      	ldr	r2, [r7, #8]
 8014cec:	8912      	ldrh	r2, [r2, #8]
 8014cee:	9202      	str	r2, [sp, #8]
 8014cf0:	2202      	movs	r2, #2
 8014cf2:	9201      	str	r2, [sp, #4]
 8014cf4:	9300      	str	r3, [sp, #0]
 8014cf6:	4623      	mov	r3, r4
 8014cf8:	4602      	mov	r2, r0
 8014cfa:	6878      	ldr	r0, [r7, #4]
 8014cfc:	f005 fb2e 	bl	801a35c <USBH_OpenPipe>
 8014d00:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	79db      	ldrb	r3, [r3, #7]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d030      	beq.n	8014d6c <USBH_MSC_InterfaceInit+0x29c>
 8014d0a:	e001      	b.n	8014d10 <USBH_MSC_InterfaceInit+0x240>
    return USBH_NOT_SUPPORTED;
 8014d0c:	2303      	movs	r3, #3
 8014d0e:	e02e      	b.n	8014d6e <USBH_MSC_InterfaceInit+0x29e>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	895b      	ldrh	r3, [r3, #10]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d029      	beq.n	8014d6c <USBH_MSC_InterfaceInit+0x29c>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	7919      	ldrb	r1, [r3, #4]
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	79d8      	ldrb	r0, [r3, #7]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014d26:	f893 411c 	ldrb.w	r4, [r3, #284]	@ 0x11c
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014d30:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8014d34:	68ba      	ldr	r2, [r7, #8]
 8014d36:	8952      	ldrh	r2, [r2, #10]
 8014d38:	9202      	str	r2, [sp, #8]
 8014d3a:	2202      	movs	r2, #2
 8014d3c:	9201      	str	r2, [sp, #4]
 8014d3e:	9300      	str	r3, [sp, #0]
 8014d40:	4623      	mov	r3, r4
 8014d42:	4602      	mov	r2, r0
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f005 fb09 	bl	801a35c <USBH_OpenPipe>
 8014d4a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	791b      	ldrb	r3, [r3, #4]
 8014d50:	2200      	movs	r2, #0
 8014d52:	4619      	mov	r1, r3
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f006 facc 	bl	801b2f2 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	795b      	ldrb	r3, [r3, #5]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	4619      	mov	r1, r3
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	f006 fac5 	bl	801b2f2 <USBH_LL_SetToggle>

  return USBH_OK;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	e000      	b.n	8014d6e <USBH_MSC_InterfaceInit+0x29e>
    return USBH_NOT_SUPPORTED;
 8014d6c:	2303      	movs	r3, #3
}
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3714      	adds	r7, #20
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd90      	pop	{r4, r7, pc}
 8014d76:	bf00      	nop
 8014d78:	0801ca60 	.word	0x0801ca60
 8014d7c:	0801ca6c 	.word	0x0801ca6c
 8014d80:	0801ca94 	.word	0x0801ca94

08014d84 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b084      	sub	sp, #16
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014d92:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8014d96:	69db      	ldr	r3, [r3, #28]
 8014d98:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	795b      	ldrb	r3, [r3, #5]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d00e      	beq.n	8014dc0 <USBH_MSC_InterfaceDeInit+0x3c>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	795b      	ldrb	r3, [r3, #5]
 8014da6:	4619      	mov	r1, r3
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f005 faf6 	bl	801a39a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	795b      	ldrb	r3, [r3, #5]
 8014db2:	4619      	mov	r1, r3
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f005 fb23 	bl	801a400 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	791b      	ldrb	r3, [r3, #4]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d00e      	beq.n	8014de6 <USBH_MSC_InterfaceDeInit+0x62>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	791b      	ldrb	r3, [r3, #4]
 8014dcc:	4619      	mov	r1, r3
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f005 fae3 	bl	801a39a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	791b      	ldrb	r3, [r3, #4]
 8014dd8:	4619      	mov	r1, r3
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f005 fb10 	bl	801a400 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	2200      	movs	r2, #0
 8014de4:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014dec:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8014df0:	69db      	ldr	r3, [r3, #28]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d00f      	beq.n	8014e16 <USBH_MSC_InterfaceDeInit+0x92>
  {
    USBH_free(phost->pActiveClass->pData);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014dfc:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8014e00:	69db      	ldr	r3, [r3, #28]
 8014e02:	4618      	mov	r0, r3
 8014e04:	f006 fb1e 	bl	801b444 <free>
    phost->pActiveClass->pData = 0U;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014e0e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8014e12:	2200      	movs	r2, #0
 8014e14:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8014e16:	2300      	movs	r3, #0
}
 8014e18:	4618      	mov	r0, r3
 8014e1a:	3710      	adds	r7, #16
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bd80      	pop	{r7, pc}

08014e20 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b084      	sub	sp, #16
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014e2e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8014e32:	69db      	ldr	r3, [r3, #28]
 8014e34:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8014e36:	2301      	movs	r3, #1
 8014e38:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	7b9b      	ldrb	r3, [r3, #14]
 8014e3e:	2b03      	cmp	r3, #3
 8014e40:	d04a      	beq.n	8014ed8 <USBH_MSC_ClassRequest+0xb8>
 8014e42:	2b03      	cmp	r3, #3
 8014e44:	dc54      	bgt.n	8014ef0 <USBH_MSC_ClassRequest+0xd0>
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d001      	beq.n	8014e4e <USBH_MSC_ClassRequest+0x2e>
 8014e4a:	2b02      	cmp	r3, #2
 8014e4c:	d150      	bne.n	8014ef0 <USBH_MSC_ClassRequest+0xd0>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8014e4e:	68bb      	ldr	r3, [r7, #8]
 8014e50:	4619      	mov	r1, r3
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f000 fc52 	bl	80156fc <USBH_MSC_BOT_REQ_GetMaxLUN>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8014e5c:	7bfb      	ldrb	r3, [r7, #15]
 8014e5e:	2b03      	cmp	r3, #3
 8014e60:	d104      	bne.n	8014e6c <USBH_MSC_ClassRequest+0x4c>
      {
        MSC_Handle->max_lun = 0U;
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	2200      	movs	r2, #0
 8014e66:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8014e6c:	7bfb      	ldrb	r3, [r7, #15]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d140      	bne.n	8014ef4 <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	781b      	ldrb	r3, [r3, #0]
 8014e76:	2b02      	cmp	r3, #2
 8014e78:	d804      	bhi.n	8014e84 <USBH_MSC_ClassRequest+0x64>
 8014e7a:	68bb      	ldr	r3, [r7, #8]
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	3301      	adds	r3, #1
 8014e80:	b2da      	uxtb	r2, r3
 8014e82:	e000      	b.n	8014e86 <USBH_MSC_ClassRequest+0x66>
 8014e84:	2202      	movs	r2, #2
 8014e86:	68bb      	ldr	r3, [r7, #8]
 8014e88:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 8014e8a:	68bb      	ldr	r3, [r7, #8]
 8014e8c:	781b      	ldrb	r3, [r3, #0]
 8014e8e:	4619      	mov	r1, r3
 8014e90:	481c      	ldr	r0, [pc, #112]	@ (8014f04 <USBH_MSC_ClassRequest+0xe4>)
 8014e92:	f006 fc4f 	bl	801b734 <iprintf>
 8014e96:	200a      	movs	r0, #10
 8014e98:	f006 fc5e 	bl	801b758 <putchar>

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	73bb      	strb	r3, [r7, #14]
 8014ea0:	e014      	b.n	8014ecc <USBH_MSC_ClassRequest+0xac>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 8014ea2:	7bbb      	ldrb	r3, [r7, #14]
 8014ea4:	68ba      	ldr	r2, [r7, #8]
 8014ea6:	2134      	movs	r1, #52	@ 0x34
 8014ea8:	fb01 f303 	mul.w	r3, r1, r3
 8014eac:	4413      	add	r3, r2
 8014eae:	3392      	adds	r3, #146	@ 0x92
 8014eb0:	2202      	movs	r2, #2
 8014eb2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 8014eb4:	7bbb      	ldrb	r3, [r7, #14]
 8014eb6:	68ba      	ldr	r2, [r7, #8]
 8014eb8:	2134      	movs	r1, #52	@ 0x34
 8014eba:	fb01 f303 	mul.w	r3, r1, r3
 8014ebe:	4413      	add	r3, r2
 8014ec0:	33c1      	adds	r3, #193	@ 0xc1
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8014ec6:	7bbb      	ldrb	r3, [r7, #14]
 8014ec8:	3301      	adds	r3, #1
 8014eca:	73bb      	strb	r3, [r7, #14]
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	781b      	ldrb	r3, [r3, #0]
 8014ed0:	7bba      	ldrb	r2, [r7, #14]
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	d3e5      	bcc.n	8014ea2 <USBH_MSC_ClassRequest+0x82>
        }
      }
      break;
 8014ed6:	e00d      	b.n	8014ef4 <USBH_MSC_ClassRequest+0xd4>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8014ed8:	2100      	movs	r1, #0
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	f004 fc55 	bl	801978a <USBH_ClrFeature>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d108      	bne.n	8014ef8 <USBH_MSC_ClassRequest+0xd8>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	7bda      	ldrb	r2, [r3, #15]
 8014eea:	68bb      	ldr	r3, [r7, #8]
 8014eec:	739a      	strb	r2, [r3, #14]
      }
      break;
 8014eee:	e003      	b.n	8014ef8 <USBH_MSC_ClassRequest+0xd8>

    default:
      break;
 8014ef0:	bf00      	nop
 8014ef2:	e002      	b.n	8014efa <USBH_MSC_ClassRequest+0xda>
      break;
 8014ef4:	bf00      	nop
 8014ef6:	e000      	b.n	8014efa <USBH_MSC_ClassRequest+0xda>
      break;
 8014ef8:	bf00      	nop
  }

  return status;
 8014efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014efc:	4618      	mov	r0, r3
 8014efe:	3710      	adds	r7, #16
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}
 8014f04:	0801cabc 	.word	0x0801cabc

08014f08 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b086      	sub	sp, #24
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014f16:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8014f1a:	69db      	ldr	r3, [r3, #28]
 8014f1c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8014f1e:	2301      	movs	r3, #1
 8014f20:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8014f22:	2301      	movs	r3, #1
 8014f24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8014f26:	2301      	movs	r3, #1
 8014f28:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8014f2a:	693b      	ldr	r3, [r7, #16]
 8014f2c:	7b1b      	ldrb	r3, [r3, #12]
 8014f2e:	2b0a      	cmp	r3, #10
 8014f30:	f000 8376 	beq.w	8015620 <USBH_MSC_Process+0x718>
 8014f34:	2b0a      	cmp	r3, #10
 8014f36:	f300 83b2 	bgt.w	801569e <USBH_MSC_Process+0x796>
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d003      	beq.n	8014f46 <USBH_MSC_Process+0x3e>
 8014f3e:	2b01      	cmp	r3, #1
 8014f40:	f000 83aa 	beq.w	8015698 <USBH_MSC_Process+0x790>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8014f44:	e3ab      	b.n	801569e <USBH_MSC_Process+0x796>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8014f4c:	693a      	ldr	r2, [r7, #16]
 8014f4e:	7812      	ldrb	r2, [r2, #0]
 8014f50:	4293      	cmp	r3, r2
 8014f52:	f080 8345 	bcs.w	80155e0 <USBH_MSC_Process+0x6d8>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8014f5c:	4619      	mov	r1, r3
 8014f5e:	693a      	ldr	r2, [r7, #16]
 8014f60:	2334      	movs	r3, #52	@ 0x34
 8014f62:	fb01 f303 	mul.w	r3, r1, r3
 8014f66:	4413      	add	r3, r2
 8014f68:	3391      	adds	r3, #145	@ 0x91
 8014f6a:	2201      	movs	r2, #1
 8014f6c:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8014f6e:	693b      	ldr	r3, [r7, #16]
 8014f70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8014f74:	4619      	mov	r1, r3
 8014f76:	693a      	ldr	r2, [r7, #16]
 8014f78:	2334      	movs	r3, #52	@ 0x34
 8014f7a:	fb01 f303 	mul.w	r3, r1, r3
 8014f7e:	4413      	add	r3, r2
 8014f80:	3390      	adds	r3, #144	@ 0x90
 8014f82:	781b      	ldrb	r3, [r3, #0]
 8014f84:	2b08      	cmp	r3, #8
 8014f86:	f200 8333 	bhi.w	80155f0 <USBH_MSC_Process+0x6e8>
 8014f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8014f90 <USBH_MSC_Process+0x88>)
 8014f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f90:	08014fb5 	.word	0x08014fb5
 8014f94:	080155f1 	.word	0x080155f1
 8014f98:	08015103 	.word	0x08015103
 8014f9c:	080152b9 	.word	0x080152b9
 8014fa0:	08014ff3 	.word	0x08014ff3
 8014fa4:	08015425 	.word	0x08015425
 8014fa8:	080155f1 	.word	0x080155f1
 8014fac:	080155f1 	.word	0x080155f1
 8014fb0:	080155cf 	.word	0x080155cf
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8014fba:	4619      	mov	r1, r3
 8014fbc:	48b8      	ldr	r0, [pc, #736]	@ (80152a0 <USBH_MSC_Process+0x398>)
 8014fbe:	f006 fbb9 	bl	801b734 <iprintf>
 8014fc2:	200a      	movs	r0, #10
 8014fc4:	f006 fbc8 	bl	801b758 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8014fc8:	693b      	ldr	r3, [r7, #16]
 8014fca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8014fce:	4619      	mov	r1, r3
 8014fd0:	693a      	ldr	r2, [r7, #16]
 8014fd2:	2334      	movs	r3, #52	@ 0x34
 8014fd4:	fb01 f303 	mul.w	r3, r1, r3
 8014fd8:	4413      	add	r3, r2
 8014fda:	3390      	adds	r3, #144	@ 0x90
 8014fdc:	2204      	movs	r2, #4
 8014fde:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8014fe6:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 8014ff0:	e307      	b.n	8015602 <USBH_MSC_Process+0x6fa>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8014ff2:	693b      	ldr	r3, [r7, #16]
 8014ff4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8014ff8:	b2d9      	uxtb	r1, r3
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015000:	461a      	mov	r2, r3
 8015002:	2334      	movs	r3, #52	@ 0x34
 8015004:	fb02 f303 	mul.w	r3, r2, r3
 8015008:	3398      	adds	r3, #152	@ 0x98
 801500a:	693a      	ldr	r2, [r7, #16]
 801500c:	4413      	add	r3, r2
 801500e:	3307      	adds	r3, #7
 8015010:	461a      	mov	r2, r3
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f000 feb9 	bl	8015d8a <USBH_MSC_SCSI_Inquiry>
 8015018:	4603      	mov	r3, r0
 801501a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 801501c:	7bfb      	ldrb	r3, [r7, #15]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d142      	bne.n	80150a8 <USBH_MSC_Process+0x1a0>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 8015022:	693b      	ldr	r3, [r7, #16]
 8015024:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015028:	461a      	mov	r2, r3
 801502a:	2334      	movs	r3, #52	@ 0x34
 801502c:	fb02 f303 	mul.w	r3, r2, r3
 8015030:	3398      	adds	r3, #152	@ 0x98
 8015032:	693a      	ldr	r2, [r7, #16]
 8015034:	4413      	add	r3, r2
 8015036:	330a      	adds	r3, #10
 8015038:	4619      	mov	r1, r3
 801503a:	489a      	ldr	r0, [pc, #616]	@ (80152a4 <USBH_MSC_Process+0x39c>)
 801503c:	f006 fb7a 	bl	801b734 <iprintf>
 8015040:	200a      	movs	r0, #10
 8015042:	f006 fb89 	bl	801b758 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 8015046:	693b      	ldr	r3, [r7, #16]
 8015048:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801504c:	461a      	mov	r2, r3
 801504e:	2334      	movs	r3, #52	@ 0x34
 8015050:	fb02 f303 	mul.w	r3, r2, r3
 8015054:	33a0      	adds	r3, #160	@ 0xa0
 8015056:	693a      	ldr	r2, [r7, #16]
 8015058:	4413      	add	r3, r2
 801505a:	330b      	adds	r3, #11
 801505c:	4619      	mov	r1, r3
 801505e:	4892      	ldr	r0, [pc, #584]	@ (80152a8 <USBH_MSC_Process+0x3a0>)
 8015060:	f006 fb68 	bl	801b734 <iprintf>
 8015064:	200a      	movs	r0, #10
 8015066:	f006 fb77 	bl	801b758 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015070:	461a      	mov	r2, r3
 8015072:	2334      	movs	r3, #52	@ 0x34
 8015074:	fb02 f303 	mul.w	r3, r2, r3
 8015078:	33b0      	adds	r3, #176	@ 0xb0
 801507a:	693a      	ldr	r2, [r7, #16]
 801507c:	4413      	add	r3, r2
 801507e:	330c      	adds	r3, #12
 8015080:	4619      	mov	r1, r3
 8015082:	488a      	ldr	r0, [pc, #552]	@ (80152ac <USBH_MSC_Process+0x3a4>)
 8015084:	f006 fb56 	bl	801b734 <iprintf>
 8015088:	200a      	movs	r0, #10
 801508a:	f006 fb65 	bl	801b758 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 801508e:	693b      	ldr	r3, [r7, #16]
 8015090:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015094:	4619      	mov	r1, r3
 8015096:	693a      	ldr	r2, [r7, #16]
 8015098:	2334      	movs	r3, #52	@ 0x34
 801509a:	fb01 f303 	mul.w	r3, r1, r3
 801509e:	4413      	add	r3, r2
 80150a0:	3390      	adds	r3, #144	@ 0x90
 80150a2:	2202      	movs	r2, #2
 80150a4:	701a      	strb	r2, [r3, #0]
            break;
 80150a6:	e2a5      	b.n	80155f4 <USBH_MSC_Process+0x6ec>
            else if (scsi_status == USBH_FAIL)
 80150a8:	7bfb      	ldrb	r3, [r7, #15]
 80150aa:	2b02      	cmp	r3, #2
 80150ac:	d10c      	bne.n	80150c8 <USBH_MSC_Process+0x1c0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80150b4:	4619      	mov	r1, r3
 80150b6:	693a      	ldr	r2, [r7, #16]
 80150b8:	2334      	movs	r3, #52	@ 0x34
 80150ba:	fb01 f303 	mul.w	r3, r1, r3
 80150be:	4413      	add	r3, r2
 80150c0:	3390      	adds	r3, #144	@ 0x90
 80150c2:	2205      	movs	r2, #5
 80150c4:	701a      	strb	r2, [r3, #0]
            break;
 80150c6:	e295      	b.n	80155f4 <USBH_MSC_Process+0x6ec>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80150c8:	7bfb      	ldrb	r3, [r7, #15]
 80150ca:	2b04      	cmp	r3, #4
 80150cc:	f040 8292 	bne.w	80155f4 <USBH_MSC_Process+0x6ec>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80150d0:	693b      	ldr	r3, [r7, #16]
 80150d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80150d6:	4619      	mov	r1, r3
 80150d8:	693a      	ldr	r2, [r7, #16]
 80150da:	2334      	movs	r3, #52	@ 0x34
 80150dc:	fb01 f303 	mul.w	r3, r1, r3
 80150e0:	4413      	add	r3, r2
 80150e2:	3390      	adds	r3, #144	@ 0x90
 80150e4:	2208      	movs	r2, #8
 80150e6:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80150e8:	693b      	ldr	r3, [r7, #16]
 80150ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80150ee:	4619      	mov	r1, r3
 80150f0:	693a      	ldr	r2, [r7, #16]
 80150f2:	2334      	movs	r3, #52	@ 0x34
 80150f4:	fb01 f303 	mul.w	r3, r1, r3
 80150f8:	4413      	add	r3, r2
 80150fa:	3391      	adds	r3, #145	@ 0x91
 80150fc:	2202      	movs	r2, #2
 80150fe:	701a      	strb	r2, [r3, #0]
            break;
 8015100:	e278      	b.n	80155f4 <USBH_MSC_Process+0x6ec>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8015102:	693b      	ldr	r3, [r7, #16]
 8015104:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015108:	b2db      	uxtb	r3, r3
 801510a:	4619      	mov	r1, r3
 801510c:	6878      	ldr	r0, [r7, #4]
 801510e:	f000 fd7b 	bl	8015c08 <USBH_MSC_SCSI_TestUnitReady>
 8015112:	4603      	mov	r3, r0
 8015114:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8015116:	7bbb      	ldrb	r3, [r7, #14]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d150      	bne.n	80151be <USBH_MSC_Process+0x2b6>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015122:	4619      	mov	r1, r3
 8015124:	693a      	ldr	r2, [r7, #16]
 8015126:	2334      	movs	r3, #52	@ 0x34
 8015128:	fb01 f303 	mul.w	r3, r1, r3
 801512c:	4413      	add	r3, r2
 801512e:	3392      	adds	r3, #146	@ 0x92
 8015130:	781b      	ldrb	r3, [r3, #0]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d012      	beq.n	801515c <USBH_MSC_Process+0x254>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8015136:	693b      	ldr	r3, [r7, #16]
 8015138:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801513c:	4619      	mov	r1, r3
 801513e:	693a      	ldr	r2, [r7, #16]
 8015140:	2334      	movs	r3, #52	@ 0x34
 8015142:	fb01 f303 	mul.w	r3, r1, r3
 8015146:	4413      	add	r3, r2
 8015148:	33c1      	adds	r3, #193	@ 0xc1
 801514a:	2201      	movs	r2, #1
 801514c:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 801514e:	4858      	ldr	r0, [pc, #352]	@ (80152b0 <USBH_MSC_Process+0x3a8>)
 8015150:	f006 faf0 	bl	801b734 <iprintf>
 8015154:	200a      	movs	r0, #10
 8015156:	f006 faff 	bl	801b758 <putchar>
 801515a:	e00b      	b.n	8015174 <USBH_MSC_Process+0x26c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 801515c:	693b      	ldr	r3, [r7, #16]
 801515e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015162:	4619      	mov	r1, r3
 8015164:	693a      	ldr	r2, [r7, #16]
 8015166:	2334      	movs	r3, #52	@ 0x34
 8015168:	fb01 f303 	mul.w	r3, r1, r3
 801516c:	4413      	add	r3, r2
 801516e:	33c1      	adds	r3, #193	@ 0xc1
 8015170:	2200      	movs	r2, #0
 8015172:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801517a:	4619      	mov	r1, r3
 801517c:	693a      	ldr	r2, [r7, #16]
 801517e:	2334      	movs	r3, #52	@ 0x34
 8015180:	fb01 f303 	mul.w	r3, r1, r3
 8015184:	4413      	add	r3, r2
 8015186:	3390      	adds	r3, #144	@ 0x90
 8015188:	2203      	movs	r2, #3
 801518a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015192:	4619      	mov	r1, r3
 8015194:	693a      	ldr	r2, [r7, #16]
 8015196:	2334      	movs	r3, #52	@ 0x34
 8015198:	fb01 f303 	mul.w	r3, r1, r3
 801519c:	4413      	add	r3, r2
 801519e:	3391      	adds	r3, #145	@ 0x91
 80151a0:	2200      	movs	r2, #0
 80151a2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80151aa:	4619      	mov	r1, r3
 80151ac:	693a      	ldr	r2, [r7, #16]
 80151ae:	2334      	movs	r3, #52	@ 0x34
 80151b0:	fb01 f303 	mul.w	r3, r1, r3
 80151b4:	4413      	add	r3, r2
 80151b6:	3392      	adds	r3, #146	@ 0x92
 80151b8:	2200      	movs	r2, #0
 80151ba:	701a      	strb	r2, [r3, #0]
            break;
 80151bc:	e21c      	b.n	80155f8 <USBH_MSC_Process+0x6f0>
            else if (ready_status == USBH_FAIL)
 80151be:	7bbb      	ldrb	r3, [r7, #14]
 80151c0:	2b02      	cmp	r3, #2
 80151c2:	d150      	bne.n	8015266 <USBH_MSC_Process+0x35e>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80151ca:	4619      	mov	r1, r3
 80151cc:	693a      	ldr	r2, [r7, #16]
 80151ce:	2334      	movs	r3, #52	@ 0x34
 80151d0:	fb01 f303 	mul.w	r3, r1, r3
 80151d4:	4413      	add	r3, r2
 80151d6:	3392      	adds	r3, #146	@ 0x92
 80151d8:	781b      	ldrb	r3, [r3, #0]
 80151da:	2b02      	cmp	r3, #2
 80151dc:	d012      	beq.n	8015204 <USBH_MSC_Process+0x2fc>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80151e4:	4619      	mov	r1, r3
 80151e6:	693a      	ldr	r2, [r7, #16]
 80151e8:	2334      	movs	r3, #52	@ 0x34
 80151ea:	fb01 f303 	mul.w	r3, r1, r3
 80151ee:	4413      	add	r3, r2
 80151f0:	33c1      	adds	r3, #193	@ 0xc1
 80151f2:	2201      	movs	r2, #1
 80151f4:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 80151f6:	482f      	ldr	r0, [pc, #188]	@ (80152b4 <USBH_MSC_Process+0x3ac>)
 80151f8:	f006 fa9c 	bl	801b734 <iprintf>
 80151fc:	200a      	movs	r0, #10
 80151fe:	f006 faab 	bl	801b758 <putchar>
 8015202:	e00b      	b.n	801521c <USBH_MSC_Process+0x314>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8015204:	693b      	ldr	r3, [r7, #16]
 8015206:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801520a:	4619      	mov	r1, r3
 801520c:	693a      	ldr	r2, [r7, #16]
 801520e:	2334      	movs	r3, #52	@ 0x34
 8015210:	fb01 f303 	mul.w	r3, r1, r3
 8015214:	4413      	add	r3, r2
 8015216:	33c1      	adds	r3, #193	@ 0xc1
 8015218:	2200      	movs	r2, #0
 801521a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 801521c:	693b      	ldr	r3, [r7, #16]
 801521e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015222:	4619      	mov	r1, r3
 8015224:	693a      	ldr	r2, [r7, #16]
 8015226:	2334      	movs	r3, #52	@ 0x34
 8015228:	fb01 f303 	mul.w	r3, r1, r3
 801522c:	4413      	add	r3, r2
 801522e:	3390      	adds	r3, #144	@ 0x90
 8015230:	2205      	movs	r2, #5
 8015232:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8015234:	693b      	ldr	r3, [r7, #16]
 8015236:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801523a:	4619      	mov	r1, r3
 801523c:	693a      	ldr	r2, [r7, #16]
 801523e:	2334      	movs	r3, #52	@ 0x34
 8015240:	fb01 f303 	mul.w	r3, r1, r3
 8015244:	4413      	add	r3, r2
 8015246:	3391      	adds	r3, #145	@ 0x91
 8015248:	2201      	movs	r2, #1
 801524a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 801524c:	693b      	ldr	r3, [r7, #16]
 801524e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015252:	4619      	mov	r1, r3
 8015254:	693a      	ldr	r2, [r7, #16]
 8015256:	2334      	movs	r3, #52	@ 0x34
 8015258:	fb01 f303 	mul.w	r3, r1, r3
 801525c:	4413      	add	r3, r2
 801525e:	3392      	adds	r3, #146	@ 0x92
 8015260:	2202      	movs	r2, #2
 8015262:	701a      	strb	r2, [r3, #0]
            break;
 8015264:	e1c8      	b.n	80155f8 <USBH_MSC_Process+0x6f0>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8015266:	7bbb      	ldrb	r3, [r7, #14]
 8015268:	2b04      	cmp	r3, #4
 801526a:	f040 81c5 	bne.w	80155f8 <USBH_MSC_Process+0x6f0>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 801526e:	693b      	ldr	r3, [r7, #16]
 8015270:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015274:	4619      	mov	r1, r3
 8015276:	693a      	ldr	r2, [r7, #16]
 8015278:	2334      	movs	r3, #52	@ 0x34
 801527a:	fb01 f303 	mul.w	r3, r1, r3
 801527e:	4413      	add	r3, r2
 8015280:	3390      	adds	r3, #144	@ 0x90
 8015282:	2208      	movs	r2, #8
 8015284:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8015286:	693b      	ldr	r3, [r7, #16]
 8015288:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801528c:	4619      	mov	r1, r3
 801528e:	693a      	ldr	r2, [r7, #16]
 8015290:	2334      	movs	r3, #52	@ 0x34
 8015292:	fb01 f303 	mul.w	r3, r1, r3
 8015296:	4413      	add	r3, r2
 8015298:	3391      	adds	r3, #145	@ 0x91
 801529a:	2202      	movs	r2, #2
 801529c:	701a      	strb	r2, [r3, #0]
            break;
 801529e:	e1ab      	b.n	80155f8 <USBH_MSC_Process+0x6f0>
 80152a0:	0801cad8 	.word	0x0801cad8
 80152a4:	0801cae4 	.word	0x0801cae4
 80152a8:	0801cafc 	.word	0x0801cafc
 80152ac:	0801cb14 	.word	0x0801cb14
 80152b0:	0801cb2c 	.word	0x0801cb2c
 80152b4:	0801cb40 	.word	0x0801cb40
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 80152b8:	693b      	ldr	r3, [r7, #16]
 80152ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80152be:	b2d9      	uxtb	r1, r3
 80152c0:	693b      	ldr	r3, [r7, #16]
 80152c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80152c6:	461a      	mov	r2, r3
 80152c8:	2334      	movs	r3, #52	@ 0x34
 80152ca:	fb02 f303 	mul.w	r3, r2, r3
 80152ce:	3390      	adds	r3, #144	@ 0x90
 80152d0:	693a      	ldr	r2, [r7, #16]
 80152d2:	4413      	add	r3, r2
 80152d4:	3304      	adds	r3, #4
 80152d6:	461a      	mov	r2, r3
 80152d8:	6878      	ldr	r0, [r7, #4]
 80152da:	f000 fcda 	bl	8015c92 <USBH_MSC_SCSI_ReadCapacity>
 80152de:	4603      	mov	r3, r0
 80152e0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80152e2:	7bfb      	ldrb	r3, [r7, #15]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d170      	bne.n	80153ca <USBH_MSC_Process+0x4c2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 80152e8:	693b      	ldr	r3, [r7, #16]
 80152ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80152ee:	4619      	mov	r1, r3
 80152f0:	693a      	ldr	r2, [r7, #16]
 80152f2:	2334      	movs	r3, #52	@ 0x34
 80152f4:	fb01 f303 	mul.w	r3, r1, r3
 80152f8:	4413      	add	r3, r2
 80152fa:	33c1      	adds	r3, #193	@ 0xc1
 80152fc:	781b      	ldrb	r3, [r3, #0]
 80152fe:	2b01      	cmp	r3, #1
 8015300:	d142      	bne.n	8015388 <USBH_MSC_Process+0x480>
                USBH_UsrLog("MSC Device capacity : %u Bytes", \
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015308:	4619      	mov	r1, r3
 801530a:	693a      	ldr	r2, [r7, #16]
 801530c:	2334      	movs	r3, #52	@ 0x34
 801530e:	fb01 f303 	mul.w	r3, r1, r3
 8015312:	4413      	add	r3, r2
 8015314:	3394      	adds	r3, #148	@ 0x94
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	693a      	ldr	r2, [r7, #16]
 801531a:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	@ 0xf8
 801531e:	4610      	mov	r0, r2
 8015320:	6939      	ldr	r1, [r7, #16]
 8015322:	2234      	movs	r2, #52	@ 0x34
 8015324:	fb00 f202 	mul.w	r2, r0, r2
 8015328:	440a      	add	r2, r1
 801532a:	3298      	adds	r2, #152	@ 0x98
 801532c:	8812      	ldrh	r2, [r2, #0]
 801532e:	fb02 f303 	mul.w	r3, r2, r3
 8015332:	4619      	mov	r1, r3
 8015334:	48b3      	ldr	r0, [pc, #716]	@ (8015604 <USBH_MSC_Process+0x6fc>)
 8015336:	f006 f9fd 	bl	801b734 <iprintf>
 801533a:	200a      	movs	r0, #10
 801533c:	f006 fa0c 	bl	801b758 <putchar>
                USBH_UsrLog("Block number : %u", (unsigned int)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 8015340:	693b      	ldr	r3, [r7, #16]
 8015342:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015346:	4619      	mov	r1, r3
 8015348:	693a      	ldr	r2, [r7, #16]
 801534a:	2334      	movs	r3, #52	@ 0x34
 801534c:	fb01 f303 	mul.w	r3, r1, r3
 8015350:	4413      	add	r3, r2
 8015352:	3394      	adds	r3, #148	@ 0x94
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	4619      	mov	r1, r3
 8015358:	48ab      	ldr	r0, [pc, #684]	@ (8015608 <USBH_MSC_Process+0x700>)
 801535a:	f006 f9eb 	bl	801b734 <iprintf>
 801535e:	200a      	movs	r0, #10
 8015360:	f006 f9fa 	bl	801b758 <putchar>
                USBH_UsrLog("Block Size   : %u", (unsigned int)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801536a:	4619      	mov	r1, r3
 801536c:	693a      	ldr	r2, [r7, #16]
 801536e:	2334      	movs	r3, #52	@ 0x34
 8015370:	fb01 f303 	mul.w	r3, r1, r3
 8015374:	4413      	add	r3, r2
 8015376:	3398      	adds	r3, #152	@ 0x98
 8015378:	881b      	ldrh	r3, [r3, #0]
 801537a:	4619      	mov	r1, r3
 801537c:	48a3      	ldr	r0, [pc, #652]	@ (801560c <USBH_MSC_Process+0x704>)
 801537e:	f006 f9d9 	bl	801b734 <iprintf>
 8015382:	200a      	movs	r0, #10
 8015384:	f006 f9e8 	bl	801b758 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801538e:	4619      	mov	r1, r3
 8015390:	693a      	ldr	r2, [r7, #16]
 8015392:	2334      	movs	r3, #52	@ 0x34
 8015394:	fb01 f303 	mul.w	r3, r1, r3
 8015398:	4413      	add	r3, r2
 801539a:	3390      	adds	r3, #144	@ 0x90
 801539c:	2201      	movs	r2, #1
 801539e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80153a0:	693b      	ldr	r3, [r7, #16]
 80153a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80153a6:	4619      	mov	r1, r3
 80153a8:	693a      	ldr	r2, [r7, #16]
 80153aa:	2334      	movs	r3, #52	@ 0x34
 80153ac:	fb01 f303 	mul.w	r3, r1, r3
 80153b0:	4413      	add	r3, r2
 80153b2:	3391      	adds	r3, #145	@ 0x91
 80153b4:	2200      	movs	r2, #0
 80153b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80153b8:	693b      	ldr	r3, [r7, #16]
 80153ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80153be:	3301      	adds	r3, #1
 80153c0:	b29a      	uxth	r2, r3
 80153c2:	693b      	ldr	r3, [r7, #16]
 80153c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 80153c8:	e118      	b.n	80155fc <USBH_MSC_Process+0x6f4>
            else if (scsi_status == USBH_FAIL)
 80153ca:	7bfb      	ldrb	r3, [r7, #15]
 80153cc:	2b02      	cmp	r3, #2
 80153ce:	d10c      	bne.n	80153ea <USBH_MSC_Process+0x4e2>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80153d0:	693b      	ldr	r3, [r7, #16]
 80153d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80153d6:	4619      	mov	r1, r3
 80153d8:	693a      	ldr	r2, [r7, #16]
 80153da:	2334      	movs	r3, #52	@ 0x34
 80153dc:	fb01 f303 	mul.w	r3, r1, r3
 80153e0:	4413      	add	r3, r2
 80153e2:	3390      	adds	r3, #144	@ 0x90
 80153e4:	2205      	movs	r2, #5
 80153e6:	701a      	strb	r2, [r3, #0]
            break;
 80153e8:	e108      	b.n	80155fc <USBH_MSC_Process+0x6f4>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80153ea:	7bfb      	ldrb	r3, [r7, #15]
 80153ec:	2b04      	cmp	r3, #4
 80153ee:	f040 8105 	bne.w	80155fc <USBH_MSC_Process+0x6f4>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80153f8:	4619      	mov	r1, r3
 80153fa:	693a      	ldr	r2, [r7, #16]
 80153fc:	2334      	movs	r3, #52	@ 0x34
 80153fe:	fb01 f303 	mul.w	r3, r1, r3
 8015402:	4413      	add	r3, r2
 8015404:	3390      	adds	r3, #144	@ 0x90
 8015406:	2208      	movs	r2, #8
 8015408:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 801540a:	693b      	ldr	r3, [r7, #16]
 801540c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015410:	4619      	mov	r1, r3
 8015412:	693a      	ldr	r2, [r7, #16]
 8015414:	2334      	movs	r3, #52	@ 0x34
 8015416:	fb01 f303 	mul.w	r3, r1, r3
 801541a:	4413      	add	r3, r2
 801541c:	3391      	adds	r3, #145	@ 0x91
 801541e:	2202      	movs	r2, #2
 8015420:	701a      	strb	r2, [r3, #0]
            break;
 8015422:	e0eb      	b.n	80155fc <USBH_MSC_Process+0x6f4>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8015424:	693b      	ldr	r3, [r7, #16]
 8015426:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801542a:	b2d9      	uxtb	r1, r3
 801542c:	693b      	ldr	r3, [r7, #16]
 801542e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015432:	461a      	mov	r2, r3
 8015434:	2334      	movs	r3, #52	@ 0x34
 8015436:	fb02 f303 	mul.w	r3, r2, r3
 801543a:	3398      	adds	r3, #152	@ 0x98
 801543c:	693a      	ldr	r2, [r7, #16]
 801543e:	4413      	add	r3, r2
 8015440:	3304      	adds	r3, #4
 8015442:	461a      	mov	r2, r3
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f000 fd47 	bl	8015ed8 <USBH_MSC_SCSI_RequestSense>
 801544a:	4603      	mov	r3, r0
 801544c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 801544e:	7bfb      	ldrb	r3, [r7, #15]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d17e      	bne.n	8015552 <USBH_MSC_Process+0x64a>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8015454:	693b      	ldr	r3, [r7, #16]
 8015456:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801545a:	4619      	mov	r1, r3
 801545c:	693a      	ldr	r2, [r7, #16]
 801545e:	2334      	movs	r3, #52	@ 0x34
 8015460:	fb01 f303 	mul.w	r3, r1, r3
 8015464:	4413      	add	r3, r2
 8015466:	339c      	adds	r3, #156	@ 0x9c
 8015468:	781b      	ldrb	r3, [r3, #0]
 801546a:	2b06      	cmp	r3, #6
 801546c:	d00c      	beq.n	8015488 <USBH_MSC_Process+0x580>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 801546e:	693b      	ldr	r3, [r7, #16]
 8015470:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015474:	4619      	mov	r1, r3
 8015476:	693a      	ldr	r2, [r7, #16]
 8015478:	2334      	movs	r3, #52	@ 0x34
 801547a:	fb01 f303 	mul.w	r3, r1, r3
 801547e:	4413      	add	r3, r2
 8015480:	339c      	adds	r3, #156	@ 0x9c
 8015482:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8015484:	2b02      	cmp	r3, #2
 8015486:	d119      	bne.n	80154bc <USBH_MSC_Process+0x5b4>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801548e:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 8015492:	693b      	ldr	r3, [r7, #16]
 8015494:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8015498:	1ad3      	subs	r3, r2, r3
 801549a:	f242 720f 	movw	r2, #9999	@ 0x270f
 801549e:	4293      	cmp	r3, r2
 80154a0:	d80c      	bhi.n	80154bc <USBH_MSC_Process+0x5b4>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80154a2:	693b      	ldr	r3, [r7, #16]
 80154a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80154a8:	4619      	mov	r1, r3
 80154aa:	693a      	ldr	r2, [r7, #16]
 80154ac:	2334      	movs	r3, #52	@ 0x34
 80154ae:	fb01 f303 	mul.w	r3, r1, r3
 80154b2:	4413      	add	r3, r2
 80154b4:	3390      	adds	r3, #144	@ 0x90
 80154b6:	2202      	movs	r2, #2
 80154b8:	701a      	strb	r2, [r3, #0]
                  break;
 80154ba:	e0a2      	b.n	8015602 <USBH_MSC_Process+0x6fa>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80154c2:	4619      	mov	r1, r3
 80154c4:	693a      	ldr	r2, [r7, #16]
 80154c6:	2334      	movs	r3, #52	@ 0x34
 80154c8:	fb01 f303 	mul.w	r3, r1, r3
 80154cc:	4413      	add	r3, r2
 80154ce:	339c      	adds	r3, #156	@ 0x9c
 80154d0:	781b      	ldrb	r3, [r3, #0]
 80154d2:	4619      	mov	r1, r3
 80154d4:	484e      	ldr	r0, [pc, #312]	@ (8015610 <USBH_MSC_Process+0x708>)
 80154d6:	f006 f92d 	bl	801b734 <iprintf>
 80154da:	200a      	movs	r0, #10
 80154dc:	f006 f93c 	bl	801b758 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 80154e0:	693b      	ldr	r3, [r7, #16]
 80154e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80154e6:	4619      	mov	r1, r3
 80154e8:	693a      	ldr	r2, [r7, #16]
 80154ea:	2334      	movs	r3, #52	@ 0x34
 80154ec:	fb01 f303 	mul.w	r3, r1, r3
 80154f0:	4413      	add	r3, r2
 80154f2:	339d      	adds	r3, #157	@ 0x9d
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	4619      	mov	r1, r3
 80154f8:	4846      	ldr	r0, [pc, #280]	@ (8015614 <USBH_MSC_Process+0x70c>)
 80154fa:	f006 f91b 	bl	801b734 <iprintf>
 80154fe:	200a      	movs	r0, #10
 8015500:	f006 f92a 	bl	801b758 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801550a:	4619      	mov	r1, r3
 801550c:	693a      	ldr	r2, [r7, #16]
 801550e:	2334      	movs	r3, #52	@ 0x34
 8015510:	fb01 f303 	mul.w	r3, r1, r3
 8015514:	4413      	add	r3, r2
 8015516:	339e      	adds	r3, #158	@ 0x9e
 8015518:	781b      	ldrb	r3, [r3, #0]
 801551a:	4619      	mov	r1, r3
 801551c:	483e      	ldr	r0, [pc, #248]	@ (8015618 <USBH_MSC_Process+0x710>)
 801551e:	f006 f909 	bl	801b734 <iprintf>
 8015522:	200a      	movs	r0, #10
 8015524:	f006 f918 	bl	801b758 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8015528:	693b      	ldr	r3, [r7, #16]
 801552a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801552e:	4619      	mov	r1, r3
 8015530:	693a      	ldr	r2, [r7, #16]
 8015532:	2334      	movs	r3, #52	@ 0x34
 8015534:	fb01 f303 	mul.w	r3, r1, r3
 8015538:	4413      	add	r3, r2
 801553a:	3390      	adds	r3, #144	@ 0x90
 801553c:	2201      	movs	r2, #1
 801553e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8015540:	693b      	ldr	r3, [r7, #16]
 8015542:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015546:	3301      	adds	r3, #1
 8015548:	b29a      	uxth	r2, r3
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8015550:	e056      	b.n	8015600 <USBH_MSC_Process+0x6f8>
            else if (scsi_status == USBH_FAIL)
 8015552:	7bfb      	ldrb	r3, [r7, #15]
 8015554:	2b02      	cmp	r3, #2
 8015556:	d11e      	bne.n	8015596 <USBH_MSC_Process+0x68e>
              USBH_UsrLog("MSC Device NOT ready");
 8015558:	4830      	ldr	r0, [pc, #192]	@ (801561c <USBH_MSC_Process+0x714>)
 801555a:	f006 f8eb 	bl	801b734 <iprintf>
 801555e:	200a      	movs	r0, #10
 8015560:	f006 f8fa 	bl	801b758 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801556a:	4619      	mov	r1, r3
 801556c:	693a      	ldr	r2, [r7, #16]
 801556e:	2334      	movs	r3, #52	@ 0x34
 8015570:	fb01 f303 	mul.w	r3, r1, r3
 8015574:	4413      	add	r3, r2
 8015576:	3390      	adds	r3, #144	@ 0x90
 8015578:	2208      	movs	r2, #8
 801557a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 801557c:	693b      	ldr	r3, [r7, #16]
 801557e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015582:	4619      	mov	r1, r3
 8015584:	693a      	ldr	r2, [r7, #16]
 8015586:	2334      	movs	r3, #52	@ 0x34
 8015588:	fb01 f303 	mul.w	r3, r1, r3
 801558c:	4413      	add	r3, r2
 801558e:	3391      	adds	r3, #145	@ 0x91
 8015590:	2202      	movs	r2, #2
 8015592:	701a      	strb	r2, [r3, #0]
            break;
 8015594:	e034      	b.n	8015600 <USBH_MSC_Process+0x6f8>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8015596:	7bfb      	ldrb	r3, [r7, #15]
 8015598:	2b04      	cmp	r3, #4
 801559a:	d131      	bne.n	8015600 <USBH_MSC_Process+0x6f8>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80155a2:	4619      	mov	r1, r3
 80155a4:	693a      	ldr	r2, [r7, #16]
 80155a6:	2334      	movs	r3, #52	@ 0x34
 80155a8:	fb01 f303 	mul.w	r3, r1, r3
 80155ac:	4413      	add	r3, r2
 80155ae:	3390      	adds	r3, #144	@ 0x90
 80155b0:	2208      	movs	r2, #8
 80155b2:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80155b4:	693b      	ldr	r3, [r7, #16]
 80155b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80155ba:	4619      	mov	r1, r3
 80155bc:	693a      	ldr	r2, [r7, #16]
 80155be:	2334      	movs	r3, #52	@ 0x34
 80155c0:	fb01 f303 	mul.w	r3, r1, r3
 80155c4:	4413      	add	r3, r2
 80155c6:	3391      	adds	r3, #145	@ 0x91
 80155c8:	2202      	movs	r2, #2
 80155ca:	701a      	strb	r2, [r3, #0]
            break;
 80155cc:	e018      	b.n	8015600 <USBH_MSC_Process+0x6f8>
            MSC_Handle->current_lun++;
 80155ce:	693b      	ldr	r3, [r7, #16]
 80155d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80155d4:	3301      	adds	r3, #1
 80155d6:	b29a      	uxth	r2, r3
 80155d8:	693b      	ldr	r3, [r7, #16]
 80155da:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 80155de:	e010      	b.n	8015602 <USBH_MSC_Process+0x6fa>
        MSC_Handle->current_lun = 0U;
 80155e0:	693b      	ldr	r3, [r7, #16]
 80155e2:	2200      	movs	r2, #0
 80155e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	220a      	movs	r2, #10
 80155ec:	731a      	strb	r2, [r3, #12]
      break;
 80155ee:	e057      	b.n	80156a0 <USBH_MSC_Process+0x798>
            break;
 80155f0:	bf00      	nop
 80155f2:	e055      	b.n	80156a0 <USBH_MSC_Process+0x798>
            break;
 80155f4:	bf00      	nop
 80155f6:	e053      	b.n	80156a0 <USBH_MSC_Process+0x798>
            break;
 80155f8:	bf00      	nop
 80155fa:	e051      	b.n	80156a0 <USBH_MSC_Process+0x798>
            break;
 80155fc:	bf00      	nop
 80155fe:	e04f      	b.n	80156a0 <USBH_MSC_Process+0x798>
            break;
 8015600:	bf00      	nop
      break;
 8015602:	e04d      	b.n	80156a0 <USBH_MSC_Process+0x798>
 8015604:	0801cb58 	.word	0x0801cb58
 8015608:	0801cb78 	.word	0x0801cb78
 801560c:	0801cb8c 	.word	0x0801cb8c
 8015610:	0801cba0 	.word	0x0801cba0
 8015614:	0801cbb0 	.word	0x0801cbb0
 8015618:	0801cbcc 	.word	0x0801cbcc
 801561c:	0801cb40 	.word	0x0801cb40
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 8015620:	693b      	ldr	r3, [r7, #16]
 8015622:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8015626:	693a      	ldr	r2, [r7, #16]
 8015628:	7812      	ldrb	r2, [r2, #0]
 801562a:	4293      	cmp	r3, r2
 801562c:	d22c      	bcs.n	8015688 <USBH_MSC_Process+0x780>
        MSC_Handle->current_lun = MSC_Handle->lun;
 801562e:	693b      	ldr	r3, [r7, #16]
 8015630:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 8015634:	693b      	ldr	r3, [r7, #16]
 8015636:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 801563a:	693b      	ldr	r3, [r7, #16]
 801563c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015640:	4619      	mov	r1, r3
 8015642:	693a      	ldr	r2, [r7, #16]
 8015644:	2334      	movs	r3, #52	@ 0x34
 8015646:	fb01 f303 	mul.w	r3, r1, r3
 801564a:	4413      	add	r3, r2
 801564c:	3391      	adds	r3, #145	@ 0x91
 801564e:	781b      	ldrb	r3, [r3, #0]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d108      	bne.n	8015666 <USBH_MSC_Process+0x75e>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801565a:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 801565e:	2102      	movs	r1, #2
 8015660:	6878      	ldr	r0, [r7, #4]
 8015662:	4798      	blx	r3
 8015664:	e007      	b.n	8015676 <USBH_MSC_Process+0x76e>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801566c:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 8015670:	2106      	movs	r1, #6
 8015672:	6878      	ldr	r0, [r7, #4]
 8015674:	4798      	blx	r3
        MSC_Handle->lun++;
 8015676:	693b      	ldr	r3, [r7, #16]
 8015678:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 801567c:	3301      	adds	r3, #1
 801567e:	b29a      	uxth	r2, r3
 8015680:	693b      	ldr	r3, [r7, #16]
 8015682:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 8015686:	e00b      	b.n	80156a0 <USBH_MSC_Process+0x798>
        MSC_Handle->lun = 0U;
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	2200      	movs	r2, #0
 801568c:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 8015690:	693b      	ldr	r3, [r7, #16]
 8015692:	2201      	movs	r2, #1
 8015694:	731a      	strb	r2, [r3, #12]
      break;
 8015696:	e003      	b.n	80156a0 <USBH_MSC_Process+0x798>
      error = USBH_OK;
 8015698:	2300      	movs	r3, #0
 801569a:	75fb      	strb	r3, [r7, #23]
      break;
 801569c:	e000      	b.n	80156a0 <USBH_MSC_Process+0x798>
      break;
 801569e:	bf00      	nop
  }
  return error;
 80156a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	3718      	adds	r7, #24
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
 80156aa:	bf00      	nop

080156ac <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80156ac:	b480      	push	{r7}
 80156ae:	b083      	sub	sp, #12
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80156b4:	2300      	movs	r3, #0
}
 80156b6:	4618      	mov	r0, r3
 80156b8:	370c      	adds	r7, #12
 80156ba:	46bd      	mov	sp, r7
 80156bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c0:	4770      	bx	lr

080156c2 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80156c2:	b580      	push	{r7, lr}
 80156c4:	b082      	sub	sp, #8
 80156c6:	af00      	add	r7, sp, #0
 80156c8:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	2221      	movs	r2, #33	@ 0x21
 80156ce:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	22ff      	movs	r2, #255	@ 0xff
 80156d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	2200      	movs	r2, #0
 80156da:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2200      	movs	r2, #0
 80156e0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	2200      	movs	r2, #0
 80156e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80156e8:	2200      	movs	r2, #0
 80156ea:	2100      	movs	r1, #0
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f004 fb8e 	bl	8019e0e <USBH_CtlReq>
 80156f2:	4603      	mov	r3, r0
}
 80156f4:	4618      	mov	r0, r3
 80156f6:	3708      	adds	r7, #8
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd80      	pop	{r7, pc}

080156fc <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
 8015704:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	22a1      	movs	r2, #161	@ 0xa1
 801570a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	22fe      	movs	r2, #254	@ 0xfe
 8015710:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	2200      	movs	r2, #0
 8015716:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	2200      	movs	r2, #0
 801571c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2201      	movs	r2, #1
 8015722:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8015724:	2201      	movs	r2, #1
 8015726:	6839      	ldr	r1, [r7, #0]
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f004 fb70 	bl	8019e0e <USBH_CtlReq>
 801572e:	4603      	mov	r3, r0
}
 8015730:	4618      	mov	r0, r3
 8015732:	3708      	adds	r7, #8
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}

08015738 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8015738:	b480      	push	{r7}
 801573a:	b085      	sub	sp, #20
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8015746:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801574a:	69db      	ldr	r3, [r3, #28]
 801574c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	4a09      	ldr	r2, [pc, #36]	@ (8015778 <USBH_MSC_BOT_Init+0x40>)
 8015752:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	4a09      	ldr	r2, [pc, #36]	@ (801577c <USBH_MSC_BOT_Init+0x44>)
 8015758:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	2201      	movs	r2, #1
 801575e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	2201      	movs	r2, #1
 8015766:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 801576a:	2300      	movs	r3, #0
}
 801576c:	4618      	mov	r0, r3
 801576e:	3714      	adds	r7, #20
 8015770:	46bd      	mov	sp, r7
 8015772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015776:	4770      	bx	lr
 8015778:	43425355 	.word	0x43425355
 801577c:	20304050 	.word	0x20304050

08015780 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b088      	sub	sp, #32
 8015784:	af02      	add	r7, sp, #8
 8015786:	6078      	str	r0, [r7, #4]
 8015788:	460b      	mov	r3, r1
 801578a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 801578c:	2301      	movs	r3, #1
 801578e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8015790:	2301      	movs	r3, #1
 8015792:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8015794:	2301      	movs	r3, #1
 8015796:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8015798:	2300      	movs	r3, #0
 801579a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80157a2:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80157a6:	69db      	ldr	r3, [r3, #28]
 80157a8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80157aa:	2300      	movs	r3, #0
 80157ac:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80157ae:	693b      	ldr	r3, [r7, #16]
 80157b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80157b4:	3b01      	subs	r3, #1
 80157b6:	2b0a      	cmp	r3, #10
 80157b8:	f200 819e 	bhi.w	8015af8 <USBH_MSC_BOT_Process+0x378>
 80157bc:	a201      	add	r2, pc, #4	@ (adr r2, 80157c4 <USBH_MSC_BOT_Process+0x44>)
 80157be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157c2:	bf00      	nop
 80157c4:	080157f1 	.word	0x080157f1
 80157c8:	08015819 	.word	0x08015819
 80157cc:	08015883 	.word	0x08015883
 80157d0:	080158a1 	.word	0x080158a1
 80157d4:	08015925 	.word	0x08015925
 80157d8:	08015947 	.word	0x08015947
 80157dc:	080159df 	.word	0x080159df
 80157e0:	080159fb 	.word	0x080159fb
 80157e4:	08015a4d 	.word	0x08015a4d
 80157e8:	08015a7d 	.word	0x08015a7d
 80157ec:	08015adf 	.word	0x08015adf
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80157f0:	693b      	ldr	r3, [r7, #16]
 80157f2:	78fa      	ldrb	r2, [r7, #3]
 80157f4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80157f8:	693b      	ldr	r3, [r7, #16]
 80157fa:	2202      	movs	r2, #2
 80157fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8015800:	693b      	ldr	r3, [r7, #16]
 8015802:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8015806:	693b      	ldr	r3, [r7, #16]
 8015808:	795b      	ldrb	r3, [r3, #5]
 801580a:	2201      	movs	r2, #1
 801580c:	9200      	str	r2, [sp, #0]
 801580e:	221f      	movs	r2, #31
 8015810:	6878      	ldr	r0, [r7, #4]
 8015812:	f004 fd24 	bl	801a25e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8015816:	e17e      	b.n	8015b16 <USBH_MSC_BOT_Process+0x396>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	795b      	ldrb	r3, [r3, #5]
 801581c:	4619      	mov	r1, r3
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f005 fd44 	bl	801b2ac <USBH_LL_GetURBState>
 8015824:	4603      	mov	r3, r0
 8015826:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8015828:	7d3b      	ldrb	r3, [r7, #20]
 801582a:	2b01      	cmp	r3, #1
 801582c:	d118      	bne.n	8015860 <USBH_MSC_BOT_Process+0xe0>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 801582e:	693b      	ldr	r3, [r7, #16]
 8015830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015832:	2b00      	cmp	r3, #0
 8015834:	d00f      	beq.n	8015856 <USBH_MSC_BOT_Process+0xd6>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8015836:	693b      	ldr	r3, [r7, #16]
 8015838:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 801583c:	b25b      	sxtb	r3, r3
 801583e:	2b00      	cmp	r3, #0
 8015840:	da04      	bge.n	801584c <USBH_MSC_BOT_Process+0xcc>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8015842:	693b      	ldr	r3, [r7, #16]
 8015844:	2203      	movs	r2, #3
 8015846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_URB_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801584a:	e157      	b.n	8015afc <USBH_MSC_BOT_Process+0x37c>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 801584c:	693b      	ldr	r3, [r7, #16]
 801584e:	2205      	movs	r2, #5
 8015850:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8015854:	e152      	b.n	8015afc <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8015856:	693b      	ldr	r3, [r7, #16]
 8015858:	2207      	movs	r2, #7
 801585a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801585e:	e14d      	b.n	8015afc <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_NOTREADY)
 8015860:	7d3b      	ldrb	r3, [r7, #20]
 8015862:	2b02      	cmp	r3, #2
 8015864:	d104      	bne.n	8015870 <USBH_MSC_BOT_Process+0xf0>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8015866:	693b      	ldr	r3, [r7, #16]
 8015868:	2201      	movs	r2, #1
 801586a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801586e:	e145      	b.n	8015afc <USBH_MSC_BOT_Process+0x37c>
        if (URB_Status == USBH_URB_STALL)
 8015870:	7d3b      	ldrb	r3, [r7, #20]
 8015872:	2b05      	cmp	r3, #5
 8015874:	f040 8142 	bne.w	8015afc <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 8015878:	693b      	ldr	r3, [r7, #16]
 801587a:	220a      	movs	r2, #10
 801587c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8015880:	e13c      	b.n	8015afc <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_IN:

      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8015882:	693b      	ldr	r3, [r7, #16]
 8015884:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8015888:	693b      	ldr	r3, [r7, #16]
 801588a:	895a      	ldrh	r2, [r3, #10]
 801588c:	693b      	ldr	r3, [r7, #16]
 801588e:	791b      	ldrb	r3, [r3, #4]
 8015890:	6878      	ldr	r0, [r7, #4]
 8015892:	f004 fd0b 	bl	801a2ac <USBH_BulkReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8015896:	693b      	ldr	r3, [r7, #16]
 8015898:	2204      	movs	r2, #4
 801589a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 801589e:	e13a      	b.n	8015b16 <USBH_MSC_BOT_Process+0x396>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80158a0:	693b      	ldr	r3, [r7, #16]
 80158a2:	791b      	ldrb	r3, [r3, #4]
 80158a4:	4619      	mov	r1, r3
 80158a6:	6878      	ldr	r0, [r7, #4]
 80158a8:	f005 fd00 	bl	801b2ac <USBH_LL_GetURBState>
 80158ac:	4603      	mov	r3, r0
 80158ae:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80158b0:	7d3b      	ldrb	r3, [r7, #20]
 80158b2:	2b01      	cmp	r3, #1
 80158b4:	d12d      	bne.n	8015912 <USBH_MSC_BOT_Process+0x192>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80158ba:	693a      	ldr	r2, [r7, #16]
 80158bc:	8952      	ldrh	r2, [r2, #10]
 80158be:	4293      	cmp	r3, r2
 80158c0:	d910      	bls.n	80158e4 <USBH_MSC_BOT_Process+0x164>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80158c2:	693b      	ldr	r3, [r7, #16]
 80158c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80158c8:	693a      	ldr	r2, [r7, #16]
 80158ca:	8952      	ldrh	r2, [r2, #10]
 80158cc:	441a      	add	r2, r3
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80158d4:	693b      	ldr	r3, [r7, #16]
 80158d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80158d8:	693a      	ldr	r2, [r7, #16]
 80158da:	8952      	ldrh	r2, [r2, #10]
 80158dc:	1a9a      	subs	r2, r3, r2
 80158de:	693b      	ldr	r3, [r7, #16]
 80158e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80158e2:	e002      	b.n	80158ea <USBH_MSC_BOT_Process+0x16a>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80158e4:	693b      	ldr	r3, [r7, #16]
 80158e6:	2200      	movs	r2, #0
 80158e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d00a      	beq.n	8015908 <USBH_MSC_BOT_Process+0x188>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80158f2:	693b      	ldr	r3, [r7, #16]
 80158f4:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80158f8:	693b      	ldr	r3, [r7, #16]
 80158fa:	895a      	ldrh	r2, [r3, #10]
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	791b      	ldrb	r3, [r3, #4]
 8015900:	6878      	ldr	r0, [r7, #4]
 8015902:	f004 fcd3 	bl	801a2ac <USBH_BulkReceiveData>
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
 8015906:	e0fb      	b.n	8015b00 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8015908:	693b      	ldr	r3, [r7, #16]
 801590a:	2207      	movs	r2, #7
 801590c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8015910:	e0f6      	b.n	8015b00 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8015912:	7d3b      	ldrb	r3, [r7, #20]
 8015914:	2b05      	cmp	r3, #5
 8015916:	f040 80f3 	bne.w	8015b00 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 801591a:	693b      	ldr	r3, [r7, #16]
 801591c:	2209      	movs	r2, #9
 801591e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8015922:	e0ed      	b.n	8015b00 <USBH_MSC_BOT_Process+0x380>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8015924:	693b      	ldr	r3, [r7, #16]
 8015926:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 801592a:	693b      	ldr	r3, [r7, #16]
 801592c:	891a      	ldrh	r2, [r3, #8]
 801592e:	693b      	ldr	r3, [r7, #16]
 8015930:	795b      	ldrb	r3, [r3, #5]
 8015932:	2001      	movs	r0, #1
 8015934:	9000      	str	r0, [sp, #0]
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f004 fc91 	bl	801a25e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 801593c:	693b      	ldr	r3, [r7, #16]
 801593e:	2206      	movs	r2, #6
 8015940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8015944:	e0e7      	b.n	8015b16 <USBH_MSC_BOT_Process+0x396>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8015946:	693b      	ldr	r3, [r7, #16]
 8015948:	795b      	ldrb	r3, [r3, #5]
 801594a:	4619      	mov	r1, r3
 801594c:	6878      	ldr	r0, [r7, #4]
 801594e:	f005 fcad 	bl	801b2ac <USBH_LL_GetURBState>
 8015952:	4603      	mov	r3, r0
 8015954:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8015956:	7d3b      	ldrb	r3, [r7, #20]
 8015958:	2b01      	cmp	r3, #1
 801595a:	d12f      	bne.n	80159bc <USBH_MSC_BOT_Process+0x23c>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015960:	693a      	ldr	r2, [r7, #16]
 8015962:	8912      	ldrh	r2, [r2, #8]
 8015964:	4293      	cmp	r3, r2
 8015966:	d910      	bls.n	801598a <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801596e:	693a      	ldr	r2, [r7, #16]
 8015970:	8912      	ldrh	r2, [r2, #8]
 8015972:	441a      	add	r2, r3
 8015974:	693b      	ldr	r3, [r7, #16]
 8015976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 801597a:	693b      	ldr	r3, [r7, #16]
 801597c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801597e:	693a      	ldr	r2, [r7, #16]
 8015980:	8912      	ldrh	r2, [r2, #8]
 8015982:	1a9a      	subs	r2, r3, r2
 8015984:	693b      	ldr	r3, [r7, #16]
 8015986:	65da      	str	r2, [r3, #92]	@ 0x5c
 8015988:	e002      	b.n	8015990 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 801598a:	693b      	ldr	r3, [r7, #16]
 801598c:	2200      	movs	r2, #0
 801598e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8015990:	693b      	ldr	r3, [r7, #16]
 8015992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015994:	2b00      	cmp	r3, #0
 8015996:	d00c      	beq.n	80159b2 <USBH_MSC_BOT_Process+0x232>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8015998:	693b      	ldr	r3, [r7, #16]
 801599a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 801599e:	693b      	ldr	r3, [r7, #16]
 80159a0:	891a      	ldrh	r2, [r3, #8]
 80159a2:	693b      	ldr	r3, [r7, #16]
 80159a4:	795b      	ldrb	r3, [r3, #5]
 80159a6:	2001      	movs	r0, #1
 80159a8:	9000      	str	r0, [sp, #0]
 80159aa:	6878      	ldr	r0, [r7, #4]
 80159ac:	f004 fc57 	bl	801a25e <USBH_BulkSendData>
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
 80159b0:	e0a8      	b.n	8015b04 <USBH_MSC_BOT_Process+0x384>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80159b2:	693b      	ldr	r3, [r7, #16]
 80159b4:	2207      	movs	r2, #7
 80159b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80159ba:	e0a3      	b.n	8015b04 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_NOTREADY)
 80159bc:	7d3b      	ldrb	r3, [r7, #20]
 80159be:	2b02      	cmp	r3, #2
 80159c0:	d104      	bne.n	80159cc <USBH_MSC_BOT_Process+0x24c>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 80159c2:	693b      	ldr	r3, [r7, #16]
 80159c4:	2205      	movs	r2, #5
 80159c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80159ca:	e09b      	b.n	8015b04 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80159cc:	7d3b      	ldrb	r3, [r7, #20]
 80159ce:	2b05      	cmp	r3, #5
 80159d0:	f040 8098 	bne.w	8015b04 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 80159d4:	693b      	ldr	r3, [r7, #16]
 80159d6:	220a      	movs	r2, #10
 80159d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80159dc:	e092      	b.n	8015b04 <USBH_MSC_BOT_Process+0x384>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80159de:	693b      	ldr	r3, [r7, #16]
 80159e0:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80159e4:	693b      	ldr	r3, [r7, #16]
 80159e6:	791b      	ldrb	r3, [r3, #4]
 80159e8:	220d      	movs	r2, #13
 80159ea:	6878      	ldr	r0, [r7, #4]
 80159ec:	f004 fc5e 	bl	801a2ac <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 80159f0:	693b      	ldr	r3, [r7, #16]
 80159f2:	2208      	movs	r2, #8
 80159f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */
      break;
 80159f8:	e08d      	b.n	8015b16 <USBH_MSC_BOT_Process+0x396>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80159fa:	693b      	ldr	r3, [r7, #16]
 80159fc:	791b      	ldrb	r3, [r3, #4]
 80159fe:	4619      	mov	r1, r3
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f005 fc53 	bl	801b2ac <USBH_LL_GetURBState>
 8015a06:	4603      	mov	r3, r0
 8015a08:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8015a0a:	7d3b      	ldrb	r3, [r7, #20]
 8015a0c:	2b01      	cmp	r3, #1
 8015a0e:	d115      	bne.n	8015a3c <USBH_MSC_BOT_Process+0x2bc>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8015a10:	693b      	ldr	r3, [r7, #16]
 8015a12:	2201      	movs	r2, #1
 8015a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8015a18:	693b      	ldr	r3, [r7, #16]
 8015a1a:	2201      	movs	r2, #1
 8015a1c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f000 f8ab 	bl	8015b7c <USBH_MSC_DecodeCSW>
 8015a26:	4603      	mov	r3, r0
 8015a28:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8015a2a:	7d7b      	ldrb	r3, [r7, #21]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d102      	bne.n	8015a36 <USBH_MSC_BOT_Process+0x2b6>
        {
          status = USBH_OK;
 8015a30:	2300      	movs	r3, #0
 8015a32:	75fb      	strb	r3, [r7, #23]
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
 8015a34:	e068      	b.n	8015b08 <USBH_MSC_BOT_Process+0x388>
          status = USBH_FAIL;
 8015a36:	2302      	movs	r3, #2
 8015a38:	75fb      	strb	r3, [r7, #23]
      break;
 8015a3a:	e065      	b.n	8015b08 <USBH_MSC_BOT_Process+0x388>
      else if (URB_Status == USBH_URB_STALL)
 8015a3c:	7d3b      	ldrb	r3, [r7, #20]
 8015a3e:	2b05      	cmp	r3, #5
 8015a40:	d162      	bne.n	8015b08 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8015a42:	693b      	ldr	r3, [r7, #16]
 8015a44:	2209      	movs	r2, #9
 8015a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8015a4a:	e05d      	b.n	8015b08 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8015a4c:	78fb      	ldrb	r3, [r7, #3]
 8015a4e:	2200      	movs	r2, #0
 8015a50:	4619      	mov	r1, r3
 8015a52:	6878      	ldr	r0, [r7, #4]
 8015a54:	f000 f864 	bl	8015b20 <USBH_MSC_BOT_Abort>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8015a5c:	7dbb      	ldrb	r3, [r7, #22]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d104      	bne.n	8015a6c <USBH_MSC_BOT_Process+0x2ec>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8015a62:	693b      	ldr	r3, [r7, #16]
 8015a64:	2207      	movs	r2, #7
 8015a66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8015a6a:	e04f      	b.n	8015b0c <USBH_MSC_BOT_Process+0x38c>
      else if (error == USBH_UNRECOVERED_ERROR)
 8015a6c:	7dbb      	ldrb	r3, [r7, #22]
 8015a6e:	2b04      	cmp	r3, #4
 8015a70:	d14c      	bne.n	8015b0c <USBH_MSC_BOT_Process+0x38c>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8015a72:	693b      	ldr	r3, [r7, #16]
 8015a74:	220b      	movs	r2, #11
 8015a76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8015a7a:	e047      	b.n	8015b0c <USBH_MSC_BOT_Process+0x38c>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8015a7c:	78fb      	ldrb	r3, [r7, #3]
 8015a7e:	2201      	movs	r2, #1
 8015a80:	4619      	mov	r1, r3
 8015a82:	6878      	ldr	r0, [r7, #4]
 8015a84:	f000 f84c 	bl	8015b20 <USBH_MSC_BOT_Abort>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8015a8c:	7dbb      	ldrb	r3, [r7, #22]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d11d      	bne.n	8015ace <USBH_MSC_BOT_Process+0x34e>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8015a92:	693b      	ldr	r3, [r7, #16]
 8015a94:	795b      	ldrb	r3, [r3, #5]
 8015a96:	4619      	mov	r1, r3
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f005 fc5f 	bl	801b35c <USBH_LL_GetToggle>
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8015aa2:	693b      	ldr	r3, [r7, #16]
 8015aa4:	7959      	ldrb	r1, [r3, #5]
 8015aa6:	7bfb      	ldrb	r3, [r7, #15]
 8015aa8:	f1c3 0301 	rsb	r3, r3, #1
 8015aac:	b2db      	uxtb	r3, r3
 8015aae:	461a      	mov	r2, r3
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f005 fc1e 	bl	801b2f2 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8015ab6:	693b      	ldr	r3, [r7, #16]
 8015ab8:	791b      	ldrb	r3, [r3, #4]
 8015aba:	2200      	movs	r2, #0
 8015abc:	4619      	mov	r1, r3
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f005 fc17 	bl	801b2f2 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	2209      	movs	r2, #9
 8015ac8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8015acc:	e020      	b.n	8015b10 <USBH_MSC_BOT_Process+0x390>
        if (error == USBH_UNRECOVERED_ERROR)
 8015ace:	7dbb      	ldrb	r3, [r7, #22]
 8015ad0:	2b04      	cmp	r3, #4
 8015ad2:	d11d      	bne.n	8015b10 <USBH_MSC_BOT_Process+0x390>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8015ad4:	693b      	ldr	r3, [r7, #16]
 8015ad6:	220b      	movs	r2, #11
 8015ad8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8015adc:	e018      	b.n	8015b10 <USBH_MSC_BOT_Process+0x390>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f7ff fdef 	bl	80156c2 <USBH_MSC_BOT_REQ_Reset>
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8015ae8:	7dfb      	ldrb	r3, [r7, #23]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d112      	bne.n	8015b14 <USBH_MSC_BOT_Process+0x394>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8015aee:	693b      	ldr	r3, [r7, #16]
 8015af0:	2201      	movs	r2, #1
 8015af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 8015af6:	e00d      	b.n	8015b14 <USBH_MSC_BOT_Process+0x394>

    default:
      break;
 8015af8:	bf00      	nop
 8015afa:	e00c      	b.n	8015b16 <USBH_MSC_BOT_Process+0x396>
      break;
 8015afc:	bf00      	nop
 8015afe:	e00a      	b.n	8015b16 <USBH_MSC_BOT_Process+0x396>
      break;
 8015b00:	bf00      	nop
 8015b02:	e008      	b.n	8015b16 <USBH_MSC_BOT_Process+0x396>
      break;
 8015b04:	bf00      	nop
 8015b06:	e006      	b.n	8015b16 <USBH_MSC_BOT_Process+0x396>
      break;
 8015b08:	bf00      	nop
 8015b0a:	e004      	b.n	8015b16 <USBH_MSC_BOT_Process+0x396>
      break;
 8015b0c:	bf00      	nop
 8015b0e:	e002      	b.n	8015b16 <USBH_MSC_BOT_Process+0x396>
      break;
 8015b10:	bf00      	nop
 8015b12:	e000      	b.n	8015b16 <USBH_MSC_BOT_Process+0x396>
      break;
 8015b14:	bf00      	nop
  }
  return status;
 8015b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	3718      	adds	r7, #24
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}

08015b20 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b084      	sub	sp, #16
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
 8015b28:	460b      	mov	r3, r1
 8015b2a:	70fb      	strb	r3, [r7, #3]
 8015b2c:	4613      	mov	r3, r2
 8015b2e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8015b30:	2302      	movs	r3, #2
 8015b32:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8015b3a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8015b3e:	69db      	ldr	r3, [r3, #28]
 8015b40:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8015b42:	78bb      	ldrb	r3, [r7, #2]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d002      	beq.n	8015b4e <USBH_MSC_BOT_Abort+0x2e>
 8015b48:	2b01      	cmp	r3, #1
 8015b4a:	d009      	beq.n	8015b60 <USBH_MSC_BOT_Abort+0x40>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8015b4c:	e011      	b.n	8015b72 <USBH_MSC_BOT_Abort+0x52>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8015b4e:	68bb      	ldr	r3, [r7, #8]
 8015b50:	79db      	ldrb	r3, [r3, #7]
 8015b52:	4619      	mov	r1, r3
 8015b54:	6878      	ldr	r0, [r7, #4]
 8015b56:	f003 fe18 	bl	801978a <USBH_ClrFeature>
 8015b5a:	4603      	mov	r3, r0
 8015b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8015b5e:	e008      	b.n	8015b72 <USBH_MSC_BOT_Abort+0x52>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8015b60:	68bb      	ldr	r3, [r7, #8]
 8015b62:	799b      	ldrb	r3, [r3, #6]
 8015b64:	4619      	mov	r1, r3
 8015b66:	6878      	ldr	r0, [r7, #4]
 8015b68:	f003 fe0f 	bl	801978a <USBH_ClrFeature>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8015b70:	bf00      	nop
  }
  return status;
 8015b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b74:	4618      	mov	r0, r3
 8015b76:	3710      	adds	r7, #16
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	bd80      	pop	{r7, pc}

08015b7c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b084      	sub	sp, #16
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8015b8a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8015b8e:	69db      	ldr	r3, [r3, #28]
 8015b90:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8015b92:	2301      	movs	r3, #1
 8015b94:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8015b96:	68bb      	ldr	r3, [r7, #8]
 8015b98:	791b      	ldrb	r3, [r3, #4]
 8015b9a:	4619      	mov	r1, r3
 8015b9c:	6878      	ldr	r0, [r7, #4]
 8015b9e:	f005 faeb 	bl	801b178 <USBH_LL_GetLastXferSize>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	2b0d      	cmp	r3, #13
 8015ba6:	d002      	beq.n	8015bae <USBH_MSC_DecodeCSW+0x32>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 8015ba8:	2302      	movs	r3, #2
 8015baa:	73fb      	strb	r3, [r7, #15]
 8015bac:	e024      	b.n	8015bf8 <USBH_MSC_DecodeCSW+0x7c>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8015bae:	68bb      	ldr	r3, [r7, #8]
 8015bb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015bb2:	4a14      	ldr	r2, [pc, #80]	@ (8015c04 <USBH_MSC_DecodeCSW+0x88>)
 8015bb4:	4293      	cmp	r3, r2
 8015bb6:	d11d      	bne.n	8015bf4 <USBH_MSC_DecodeCSW+0x78>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8015bb8:	68bb      	ldr	r3, [r7, #8]
 8015bba:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8015bbc:	68bb      	ldr	r3, [r7, #8]
 8015bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d119      	bne.n	8015bf8 <USBH_MSC_DecodeCSW+0x7c>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8015bc4:	68bb      	ldr	r3, [r7, #8]
 8015bc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d102      	bne.n	8015bd4 <USBH_MSC_DecodeCSW+0x58>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	73fb      	strb	r3, [r7, #15]
 8015bd2:	e011      	b.n	8015bf8 <USBH_MSC_DecodeCSW+0x7c>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015bda:	2b01      	cmp	r3, #1
 8015bdc:	d102      	bne.n	8015be4 <USBH_MSC_DecodeCSW+0x68>
        {
          status = BOT_CSW_CMD_FAILED;
 8015bde:	2301      	movs	r3, #1
 8015be0:	73fb      	strb	r3, [r7, #15]
 8015be2:	e009      	b.n	8015bf8 <USBH_MSC_DecodeCSW+0x7c>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8015be4:	68bb      	ldr	r3, [r7, #8]
 8015be6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015bea:	2b02      	cmp	r3, #2
 8015bec:	d104      	bne.n	8015bf8 <USBH_MSC_DecodeCSW+0x7c>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8015bee:	2302      	movs	r3, #2
 8015bf0:	73fb      	strb	r3, [r7, #15]
 8015bf2:	e001      	b.n	8015bf8 <USBH_MSC_DecodeCSW+0x7c>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8015bf4:	2302      	movs	r3, #2
 8015bf6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8015bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3710      	adds	r7, #16
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}
 8015c02:	bf00      	nop
 8015c04:	53425355 	.word	0x53425355

08015c08 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b084      	sub	sp, #16
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
 8015c10:	460b      	mov	r3, r1
 8015c12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 8015c14:	2302      	movs	r3, #2
 8015c16:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8015c1e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8015c22:	69db      	ldr	r3, [r3, #28]
 8015c24:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8015c26:	68bb      	ldr	r3, [r7, #8]
 8015c28:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8015c2c:	2b01      	cmp	r3, #1
 8015c2e:	d002      	beq.n	8015c36 <USBH_MSC_SCSI_TestUnitReady+0x2e>
 8015c30:	2b02      	cmp	r3, #2
 8015c32:	d021      	beq.n	8015c78 <USBH_MSC_SCSI_TestUnitReady+0x70>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8015c34:	e028      	b.n	8015c88 <USBH_MSC_SCSI_TestUnitReady+0x80>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8015c36:	68bb      	ldr	r3, [r7, #8]
 8015c38:	2200      	movs	r2, #0
 8015c3a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8015c3c:	68bb      	ldr	r3, [r7, #8]
 8015c3e:	2200      	movs	r2, #0
 8015c40:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8015c44:	68bb      	ldr	r3, [r7, #8]
 8015c46:	220a      	movs	r2, #10
 8015c48:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8015c4c:	68bb      	ldr	r3, [r7, #8]
 8015c4e:	3363      	adds	r3, #99	@ 0x63
 8015c50:	2210      	movs	r2, #16
 8015c52:	2100      	movs	r1, #0
 8015c54:	4618      	mov	r0, r3
 8015c56:	f005 febd 	bl	801b9d4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 8015c5a:	68bb      	ldr	r3, [r7, #8]
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	2201      	movs	r2, #1
 8015c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8015c6a:	68bb      	ldr	r3, [r7, #8]
 8015c6c:	2202      	movs	r2, #2
 8015c6e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 8015c72:	2301      	movs	r3, #1
 8015c74:	73fb      	strb	r3, [r7, #15]
      break;
 8015c76:	e007      	b.n	8015c88 <USBH_MSC_SCSI_TestUnitReady+0x80>
      error = USBH_MSC_BOT_Process(phost, lun);
 8015c78:	78fb      	ldrb	r3, [r7, #3]
 8015c7a:	4619      	mov	r1, r3
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	f7ff fd7f 	bl	8015780 <USBH_MSC_BOT_Process>
 8015c82:	4603      	mov	r3, r0
 8015c84:	73fb      	strb	r3, [r7, #15]
      break;
 8015c86:	bf00      	nop
  }

  return error;
 8015c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	3710      	adds	r7, #16
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}

08015c92 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8015c92:	b580      	push	{r7, lr}
 8015c94:	b086      	sub	sp, #24
 8015c96:	af00      	add	r7, sp, #0
 8015c98:	60f8      	str	r0, [r7, #12]
 8015c9a:	460b      	mov	r3, r1
 8015c9c:	607a      	str	r2, [r7, #4]
 8015c9e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8015caa:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8015cae:	69db      	ldr	r3, [r3, #28]
 8015cb0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8015cb2:	693b      	ldr	r3, [r7, #16]
 8015cb4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8015cb8:	2b01      	cmp	r3, #1
 8015cba:	d002      	beq.n	8015cc2 <USBH_MSC_SCSI_ReadCapacity+0x30>
 8015cbc:	2b02      	cmp	r3, #2
 8015cbe:	d027      	beq.n	8015d10 <USBH_MSC_SCSI_ReadCapacity+0x7e>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8015cc0:	e05e      	b.n	8015d80 <USBH_MSC_SCSI_ReadCapacity+0xee>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8015cc2:	693b      	ldr	r3, [r7, #16]
 8015cc4:	2208      	movs	r2, #8
 8015cc6:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8015cc8:	693b      	ldr	r3, [r7, #16]
 8015cca:	2280      	movs	r2, #128	@ 0x80
 8015ccc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8015cd0:	693b      	ldr	r3, [r7, #16]
 8015cd2:	220a      	movs	r2, #10
 8015cd4:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8015cd8:	693b      	ldr	r3, [r7, #16]
 8015cda:	3363      	adds	r3, #99	@ 0x63
 8015cdc:	2210      	movs	r2, #16
 8015cde:	2100      	movs	r1, #0
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f005 fe77 	bl	801b9d4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8015ce6:	693b      	ldr	r3, [r7, #16]
 8015ce8:	2225      	movs	r2, #37	@ 0x25
 8015cea:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8015cee:	693b      	ldr	r3, [r7, #16]
 8015cf0:	2201      	movs	r2, #1
 8015cf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	2202      	movs	r2, #2
 8015cfa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8015cfe:	693b      	ldr	r3, [r7, #16]
 8015d00:	f103 0210 	add.w	r2, r3, #16
 8015d04:	693b      	ldr	r3, [r7, #16]
 8015d06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8015d0a:	2301      	movs	r3, #1
 8015d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8015d0e:	e037      	b.n	8015d80 <USBH_MSC_SCSI_ReadCapacity+0xee>
      error = USBH_MSC_BOT_Process(phost, lun);
 8015d10:	7afb      	ldrb	r3, [r7, #11]
 8015d12:	4619      	mov	r1, r3
 8015d14:	68f8      	ldr	r0, [r7, #12]
 8015d16:	f7ff fd33 	bl	8015780 <USBH_MSC_BOT_Process>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8015d1e:	7dfb      	ldrb	r3, [r7, #23]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d12c      	bne.n	8015d7e <USBH_MSC_SCSI_ReadCapacity+0xec>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8015d24:	693b      	ldr	r3, [r7, #16]
 8015d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015d2a:	3303      	adds	r3, #3
 8015d2c:	781b      	ldrb	r3, [r3, #0]
 8015d2e:	461a      	mov	r2, r3
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015d36:	3302      	adds	r3, #2
 8015d38:	781b      	ldrb	r3, [r3, #0]
 8015d3a:	021b      	lsls	r3, r3, #8
 8015d3c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015d44:	3301      	adds	r3, #1
 8015d46:	781b      	ldrb	r3, [r3, #0]
 8015d48:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8015d4a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015d52:	781b      	ldrb	r3, [r3, #0]
 8015d54:	061b      	lsls	r3, r3, #24
 8015d56:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015d62:	3307      	adds	r3, #7
 8015d64:	781b      	ldrb	r3, [r3, #0]
 8015d66:	461a      	mov	r2, r3
 8015d68:	693b      	ldr	r3, [r7, #16]
 8015d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015d6e:	3306      	adds	r3, #6
 8015d70:	781b      	ldrb	r3, [r3, #0]
 8015d72:	021b      	lsls	r3, r3, #8
 8015d74:	b29b      	uxth	r3, r3
 8015d76:	4313      	orrs	r3, r2
 8015d78:	b29a      	uxth	r2, r3
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	809a      	strh	r2, [r3, #4]
      break;
 8015d7e:	bf00      	nop
  }

  return error;
 8015d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d82:	4618      	mov	r0, r3
 8015d84:	3718      	adds	r7, #24
 8015d86:	46bd      	mov	sp, r7
 8015d88:	bd80      	pop	{r7, pc}

08015d8a <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8015d8a:	b580      	push	{r7, lr}
 8015d8c:	b086      	sub	sp, #24
 8015d8e:	af00      	add	r7, sp, #0
 8015d90:	60f8      	str	r0, [r7, #12]
 8015d92:	460b      	mov	r3, r1
 8015d94:	607a      	str	r2, [r7, #4]
 8015d96:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8015d98:	2302      	movs	r3, #2
 8015d9a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8015da2:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8015da6:	69db      	ldr	r3, [r3, #28]
 8015da8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8015daa:	693b      	ldr	r3, [r7, #16]
 8015dac:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8015db0:	2b01      	cmp	r3, #1
 8015db2:	d002      	beq.n	8015dba <USBH_MSC_SCSI_Inquiry+0x30>
 8015db4:	2b02      	cmp	r3, #2
 8015db6:	d03d      	beq.n	8015e34 <USBH_MSC_SCSI_Inquiry+0xaa>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8015db8:	e089      	b.n	8015ece <USBH_MSC_SCSI_Inquiry+0x144>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8015dba:	693b      	ldr	r3, [r7, #16]
 8015dbc:	2224      	movs	r2, #36	@ 0x24
 8015dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8015dc0:	693b      	ldr	r3, [r7, #16]
 8015dc2:	2280      	movs	r2, #128	@ 0x80
 8015dc4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8015dc8:	693b      	ldr	r3, [r7, #16]
 8015dca:	220a      	movs	r2, #10
 8015dcc:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8015dd0:	693b      	ldr	r3, [r7, #16]
 8015dd2:	3363      	adds	r3, #99	@ 0x63
 8015dd4:	220a      	movs	r2, #10
 8015dd6:	2100      	movs	r1, #0
 8015dd8:	4618      	mov	r0, r3
 8015dda:	f005 fdfb 	bl	801b9d4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 8015dde:	693b      	ldr	r3, [r7, #16]
 8015de0:	2212      	movs	r2, #18
 8015de2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8015de6:	7afb      	ldrb	r3, [r7, #11]
 8015de8:	015b      	lsls	r3, r3, #5
 8015dea:	b2da      	uxtb	r2, r3
 8015dec:	693b      	ldr	r3, [r7, #16]
 8015dee:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	2200      	movs	r2, #0
 8015df6:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 8015e02:	693b      	ldr	r3, [r7, #16]
 8015e04:	2224      	movs	r2, #36	@ 0x24
 8015e06:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8015e0a:	693b      	ldr	r3, [r7, #16]
 8015e0c:	2200      	movs	r2, #0
 8015e0e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8015e12:	693b      	ldr	r3, [r7, #16]
 8015e14:	2201      	movs	r2, #1
 8015e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	2202      	movs	r2, #2
 8015e1e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8015e22:	693b      	ldr	r3, [r7, #16]
 8015e24:	f103 0210 	add.w	r2, r3, #16
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8015e2e:	2301      	movs	r3, #1
 8015e30:	75fb      	strb	r3, [r7, #23]
      break;
 8015e32:	e04c      	b.n	8015ece <USBH_MSC_SCSI_Inquiry+0x144>
      error = USBH_MSC_BOT_Process(phost, lun);
 8015e34:	7afb      	ldrb	r3, [r7, #11]
 8015e36:	4619      	mov	r1, r3
 8015e38:	68f8      	ldr	r0, [r7, #12]
 8015e3a:	f7ff fca1 	bl	8015780 <USBH_MSC_BOT_Process>
 8015e3e:	4603      	mov	r3, r0
 8015e40:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8015e42:	7dfb      	ldrb	r3, [r7, #23]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d141      	bne.n	8015ecc <USBH_MSC_SCSI_Inquiry+0x142>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8015e48:	2222      	movs	r2, #34	@ 0x22
 8015e4a:	2100      	movs	r1, #0
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	f005 fdc1 	bl	801b9d4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8015e52:	693b      	ldr	r3, [r7, #16]
 8015e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	f003 031f 	and.w	r3, r3, #31
 8015e5e:	b2da      	uxtb	r2, r3
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8015e64:	693b      	ldr	r3, [r7, #16]
 8015e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015e6a:	781b      	ldrb	r3, [r3, #0]
 8015e6c:	095b      	lsrs	r3, r3, #5
 8015e6e:	b2da      	uxtb	r2, r3
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8015e74:	693b      	ldr	r3, [r7, #16]
 8015e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015e7a:	3301      	adds	r3, #1
 8015e7c:	781b      	ldrb	r3, [r3, #0]
 8015e7e:	b25b      	sxtb	r3, r3
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	da03      	bge.n	8015e8c <USBH_MSC_SCSI_Inquiry+0x102>
          inquiry->RemovableMedia = 1U;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	2201      	movs	r2, #1
 8015e88:	709a      	strb	r2, [r3, #2]
 8015e8a:	e002      	b.n	8015e92 <USBH_MSC_SCSI_Inquiry+0x108>
          inquiry->RemovableMedia = 0U;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	1cd8      	adds	r0, r3, #3
 8015e96:	693b      	ldr	r3, [r7, #16]
 8015e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015e9c:	3308      	adds	r3, #8
 8015e9e:	2208      	movs	r2, #8
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	f005 fe22 	bl	801baea <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	f103 000c 	add.w	r0, r3, #12
 8015eac:	693b      	ldr	r3, [r7, #16]
 8015eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015eb2:	3310      	adds	r3, #16
 8015eb4:	2210      	movs	r2, #16
 8015eb6:	4619      	mov	r1, r3
 8015eb8:	f005 fe17 	bl	801baea <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	331d      	adds	r3, #29
 8015ec0:	693a      	ldr	r2, [r7, #16]
 8015ec2:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8015ec6:	3220      	adds	r2, #32
 8015ec8:	6812      	ldr	r2, [r2, #0]
 8015eca:	601a      	str	r2, [r3, #0]
      break;
 8015ecc:	bf00      	nop
  }

  return error;
 8015ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	3718      	adds	r7, #24
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	bd80      	pop	{r7, pc}

08015ed8 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b086      	sub	sp, #24
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	60f8      	str	r0, [r7, #12]
 8015ee0:	460b      	mov	r3, r1
 8015ee2:	607a      	str	r2, [r7, #4]
 8015ee4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8015ee6:	2302      	movs	r3, #2
 8015ee8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8015ef0:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8015ef4:	69db      	ldr	r3, [r3, #28]
 8015ef6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8015ef8:	693b      	ldr	r3, [r7, #16]
 8015efa:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8015efe:	2b01      	cmp	r3, #1
 8015f00:	d002      	beq.n	8015f08 <USBH_MSC_SCSI_RequestSense+0x30>
 8015f02:	2b02      	cmp	r3, #2
 8015f04:	d03d      	beq.n	8015f82 <USBH_MSC_SCSI_RequestSense+0xaa>
        }
      }
      break;

    default:
      break;
 8015f06:	e069      	b.n	8015fdc <USBH_MSC_SCSI_RequestSense+0x104>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8015f08:	693b      	ldr	r3, [r7, #16]
 8015f0a:	220e      	movs	r2, #14
 8015f0c:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8015f0e:	693b      	ldr	r3, [r7, #16]
 8015f10:	2280      	movs	r2, #128	@ 0x80
 8015f12:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8015f16:	693b      	ldr	r3, [r7, #16]
 8015f18:	220a      	movs	r2, #10
 8015f1a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8015f1e:	693b      	ldr	r3, [r7, #16]
 8015f20:	3363      	adds	r3, #99	@ 0x63
 8015f22:	2210      	movs	r2, #16
 8015f24:	2100      	movs	r1, #0
 8015f26:	4618      	mov	r0, r3
 8015f28:	f005 fd54 	bl	801b9d4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 8015f2c:	693b      	ldr	r3, [r7, #16]
 8015f2e:	2203      	movs	r2, #3
 8015f30:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8015f34:	7afb      	ldrb	r3, [r7, #11]
 8015f36:	015b      	lsls	r3, r3, #5
 8015f38:	b2da      	uxtb	r2, r3
 8015f3a:	693b      	ldr	r3, [r7, #16]
 8015f3c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 8015f40:	693b      	ldr	r3, [r7, #16]
 8015f42:	2200      	movs	r2, #0
 8015f44:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8015f48:	693b      	ldr	r3, [r7, #16]
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 8015f50:	693b      	ldr	r3, [r7, #16]
 8015f52:	220e      	movs	r2, #14
 8015f54:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8015f58:	693b      	ldr	r3, [r7, #16]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8015f60:	693b      	ldr	r3, [r7, #16]
 8015f62:	2201      	movs	r2, #1
 8015f64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8015f68:	693b      	ldr	r3, [r7, #16]
 8015f6a:	2202      	movs	r2, #2
 8015f6c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8015f70:	693b      	ldr	r3, [r7, #16]
 8015f72:	f103 0210 	add.w	r2, r3, #16
 8015f76:	693b      	ldr	r3, [r7, #16]
 8015f78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8015f7c:	2301      	movs	r3, #1
 8015f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8015f80:	e02c      	b.n	8015fdc <USBH_MSC_SCSI_RequestSense+0x104>
      error = USBH_MSC_BOT_Process(phost, lun);
 8015f82:	7afb      	ldrb	r3, [r7, #11]
 8015f84:	4619      	mov	r1, r3
 8015f86:	68f8      	ldr	r0, [r7, #12]
 8015f88:	f7ff fbfa 	bl	8015780 <USBH_MSC_BOT_Process>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8015f90:	7dfb      	ldrb	r3, [r7, #23]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d121      	bne.n	8015fda <USBH_MSC_SCSI_RequestSense+0x102>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8015f96:	693b      	ldr	r3, [r7, #16]
 8015f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015f9c:	3302      	adds	r3, #2
 8015f9e:	781b      	ldrb	r3, [r3, #0]
 8015fa0:	f003 030f 	and.w	r3, r3, #15
 8015fa4:	b2da      	uxtb	r2, r3
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8015faa:	693b      	ldr	r3, [r7, #16]
 8015fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015fb0:	7b1a      	ldrb	r2, [r3, #12]
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8015fb6:	693b      	ldr	r3, [r7, #16]
 8015fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015fbc:	7b5a      	ldrb	r2, [r3, #13]
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	785b      	ldrb	r3, [r3, #1]
 8015fc6:	2b3a      	cmp	r3, #58	@ 0x3a
 8015fc8:	d107      	bne.n	8015fda <USBH_MSC_SCSI_RequestSense+0x102>
          USBH_UsrLog("MSC Device MEDIUM not present");
 8015fca:	4807      	ldr	r0, [pc, #28]	@ (8015fe8 <USBH_MSC_SCSI_RequestSense+0x110>)
 8015fcc:	f005 fbb2 	bl	801b734 <iprintf>
 8015fd0:	200a      	movs	r0, #10
 8015fd2:	f005 fbc1 	bl	801b758 <putchar>
          error = USBH_UNRECOVERED_ERROR;
 8015fd6:	2304      	movs	r3, #4
 8015fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8015fda:	bf00      	nop
  }

  return error;
 8015fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8015fde:	4618      	mov	r0, r3
 8015fe0:	3718      	adds	r7, #24
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}
 8015fe6:	bf00      	nop
 8015fe8:	0801cbf0 	.word	0x0801cbf0

08015fec <USBH_MTP_InterfaceInit>:
  *         The function init the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8015fec:	b590      	push	{r4, r7, lr}
 8015fee:	b089      	sub	sp, #36	@ 0x24
 8015ff0:	af04      	add	r7, sp, #16
 8015ff2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface, endpoint;
  MTP_HandleTypeDef *MTP_Handle;

  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 8015ff4:	2301      	movs	r3, #1
 8015ff6:	2201      	movs	r2, #1
 8015ff8:	2106      	movs	r1, #6
 8015ffa:	6878      	ldr	r0, [r7, #4]
 8015ffc:	f002 fb48 	bl	8018690 <USBH_FindInterface>
 8016000:	4603      	mov	r3, r0
 8016002:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8016004:	7bfb      	ldrb	r3, [r7, #15]
 8016006:	2bff      	cmp	r3, #255	@ 0xff
 8016008:	d002      	beq.n	8016010 <USBH_MTP_InterfaceInit+0x24>
 801600a:	7bfb      	ldrb	r3, [r7, #15]
 801600c:	2b09      	cmp	r3, #9
 801600e:	d90a      	bls.n	8016026 <USBH_MTP_InterfaceInit+0x3a>
  {
    USBH_DbgLog("Cannot Find the interface for Still Image Class.");
 8016010:	48ad      	ldr	r0, [pc, #692]	@ (80162c8 <USBH_MTP_InterfaceInit+0x2dc>)
 8016012:	f005 fb8f 	bl	801b734 <iprintf>
 8016016:	48ad      	ldr	r0, [pc, #692]	@ (80162cc <USBH_MTP_InterfaceInit+0x2e0>)
 8016018:	f005 fb8c 	bl	801b734 <iprintf>
 801601c:	200a      	movs	r0, #10
 801601e:	f005 fb9b 	bl	801b758 <putchar>
    return USBH_FAIL;
 8016022:	2302      	movs	r3, #2
 8016024:	e1d5      	b.n	80163d2 <USBH_MTP_InterfaceInit+0x3e6>
  }

  (void)USBH_SelectInterface(phost, interface);
 8016026:	7bfb      	ldrb	r3, [r7, #15]
 8016028:	4619      	mov	r1, r3
 801602a:	6878      	ldr	r0, [r7, #4]
 801602c:	f002 fac0 	bl	80185b0 <USBH_SelectInterface>

  status = USBH_SelectInterface(phost, interface);
 8016030:	7bfb      	ldrb	r3, [r7, #15]
 8016032:	4619      	mov	r1, r3
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f002 fabb 	bl	80185b0 <USBH_SelectInterface>
 801603a:	4603      	mov	r3, r0
 801603c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 801603e:	7bbb      	ldrb	r3, [r7, #14]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d001      	beq.n	8016048 <USBH_MTP_InterfaceInit+0x5c>
  {
    return USBH_FAIL;
 8016044:	2302      	movs	r3, #2
 8016046:	e1c4      	b.n	80163d2 <USBH_MTP_InterfaceInit+0x3e6>
  }

  endpoint = MTP_FindCtlEndpoint(phost);
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f000 f9c7 	bl	80163dc <MTP_FindCtlEndpoint>
 801604e:	4603      	mov	r3, r0
 8016050:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8016052:	7b7b      	ldrb	r3, [r7, #13]
 8016054:	2bff      	cmp	r3, #255	@ 0xff
 8016056:	d002      	beq.n	801605e <USBH_MTP_InterfaceInit+0x72>
 8016058:	7b7b      	ldrb	r3, [r7, #13]
 801605a:	2b04      	cmp	r3, #4
 801605c:	d90a      	bls.n	8016074 <USBH_MTP_InterfaceInit+0x88>
  {
    USBH_DbgLog("Invalid Control endpoint number");
 801605e:	489a      	ldr	r0, [pc, #616]	@ (80162c8 <USBH_MTP_InterfaceInit+0x2dc>)
 8016060:	f005 fb68 	bl	801b734 <iprintf>
 8016064:	489a      	ldr	r0, [pc, #616]	@ (80162d0 <USBH_MTP_InterfaceInit+0x2e4>)
 8016066:	f005 fb65 	bl	801b734 <iprintf>
 801606a:	200a      	movs	r0, #10
 801606c:	f005 fb74 	bl	801b758 <putchar>
    return USBH_FAIL;
 8016070:	2302      	movs	r3, #2
 8016072:	e1ae      	b.n	80163d2 <USBH_MTP_InterfaceInit+0x3e6>
  }

  phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc(sizeof(MTP_HandleTypeDef));
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801607a:	f8d3 434c 	ldr.w	r4, [r3, #844]	@ 0x34c
 801607e:	f242 10d0 	movw	r0, #8656	@ 0x21d0
 8016082:	f005 f9d7 	bl	801b434 <malloc>
 8016086:	4603      	mov	r3, r0
 8016088:	61e3      	str	r3, [r4, #28]
  MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016090:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8016094:	69db      	ldr	r3, [r3, #28]
 8016096:	60bb      	str	r3, [r7, #8]

  if (MTP_Handle == NULL)
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d10a      	bne.n	80160b4 <USBH_MTP_InterfaceInit+0xc8>
  {
    USBH_DbgLog("Cannot allocate memory for MTP Handle");
 801609e:	488a      	ldr	r0, [pc, #552]	@ (80162c8 <USBH_MTP_InterfaceInit+0x2dc>)
 80160a0:	f005 fb48 	bl	801b734 <iprintf>
 80160a4:	488b      	ldr	r0, [pc, #556]	@ (80162d4 <USBH_MTP_InterfaceInit+0x2e8>)
 80160a6:	f005 fb45 	bl	801b734 <iprintf>
 80160aa:	200a      	movs	r0, #10
 80160ac:	f005 fb54 	bl	801b758 <putchar>
    return USBH_FAIL;
 80160b0:	2302      	movs	r3, #2
 80160b2:	e18e      	b.n	80163d2 <USBH_MTP_InterfaceInit+0x3e6>
  }

  /* Initialize mtp handler */
  (void)USBH_memset(MTP_Handle, 0, sizeof(MTP_HandleTypeDef));
 80160b4:	f242 12d0 	movw	r2, #8656	@ 0x21d0
 80160b8:	2100      	movs	r1, #0
 80160ba:	68b8      	ldr	r0, [r7, #8]
 80160bc:	f005 fc8a 	bl	801b9d4 <memset>

  /*Collect the control endpoint address and length*/
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 80160c0:	7bfb      	ldrb	r3, [r7, #15]
 80160c2:	7b79      	ldrb	r1, [r7, #13]
 80160c4:	687a      	ldr	r2, [r7, #4]
 80160c6:	3101      	adds	r1, #1
 80160c8:	00c9      	lsls	r1, r1, #3
 80160ca:	2032      	movs	r0, #50	@ 0x32
 80160cc:	fb00 f303 	mul.w	r3, r0, r3
 80160d0:	440b      	add	r3, r1
 80160d2:	441a      	add	r2, r3
 80160d4:	f248 1346 	movw	r3, #33094	@ 0x8146
 80160d8:	4413      	add	r3, r2
 80160da:	781a      	ldrb	r2, [r3, #0]
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80160e2:	f883 2d31 	strb.w	r2, [r3, #3377]	@ 0xd31
  MTP_Handle->NotificationEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 80160e6:	7bfb      	ldrb	r3, [r7, #15]
 80160e8:	7b79      	ldrb	r1, [r7, #13]
 80160ea:	687a      	ldr	r2, [r7, #4]
 80160ec:	3101      	adds	r1, #1
 80160ee:	00c9      	lsls	r1, r1, #3
 80160f0:	2032      	movs	r0, #50	@ 0x32
 80160f2:	fb00 f303 	mul.w	r3, r0, r3
 80160f6:	440b      	add	r3, r1
 80160f8:	441a      	add	r2, r3
 80160fa:	f248 1348 	movw	r3, #33096	@ 0x8148
 80160fe:	4413      	add	r3, r2
 8016100:	881a      	ldrh	r2, [r3, #0]
 8016102:	68bb      	ldr	r3, [r7, #8]
 8016104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016108:	f8a3 2d36 	strh.w	r2, [r3, #3382]	@ 0xd36
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 801610c:	68bb      	ldr	r3, [r7, #8]
 801610e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016112:	f893 3d31 	ldrb.w	r3, [r3, #3377]	@ 0xd31
 8016116:	4619      	mov	r1, r3
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	f004 f94e 	bl	801a3ba <USBH_AllocPipe>
 801611e:	4603      	mov	r3, r0
 8016120:	461a      	mov	r2, r3
 8016122:	68bb      	ldr	r3, [r7, #8]
 8016124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016128:	f883 2d2e 	strb.w	r2, [r3, #3374]	@ 0xd2e
  MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 801612c:	7bfb      	ldrb	r3, [r7, #15]
 801612e:	7b79      	ldrb	r1, [r7, #13]
 8016130:	687a      	ldr	r2, [r7, #4]
 8016132:	3101      	adds	r1, #1
 8016134:	00c9      	lsls	r1, r1, #3
 8016136:	2032      	movs	r0, #50	@ 0x32
 8016138:	fb00 f303 	mul.w	r3, r0, r3
 801613c:	440b      	add	r3, r1
 801613e:	441a      	add	r2, r3
 8016140:	f248 134a 	movw	r3, #33098	@ 0x814a
 8016144:	4413      	add	r3, r2
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	461a      	mov	r2, r3
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016150:	f8a3 2d44 	strh.w	r2, [r3, #3396]	@ 0xd44

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, MTP_Handle->NotificationPipe, MTP_Handle->NotificationEp,
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801615a:	f893 1d2e 	ldrb.w	r1, [r3, #3374]	@ 0xd2e
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016164:	f893 0d31 	ldrb.w	r0, [r3, #3377]	@ 0xd31
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801616e:	f893 411c 	ldrb.w	r4, [r3, #284]	@ 0x11c
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016178:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 801617c:	68ba      	ldr	r2, [r7, #8]
 801617e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016182:	f8b2 2d36 	ldrh.w	r2, [r2, #3382]	@ 0xd36
 8016186:	9202      	str	r2, [sp, #8]
 8016188:	2203      	movs	r2, #3
 801618a:	9201      	str	r2, [sp, #4]
 801618c:	9300      	str	r3, [sp, #0]
 801618e:	4623      	mov	r3, r4
 8016190:	4602      	mov	r2, r0
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f004 f8e2 	bl	801a35c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      MTP_Handle->NotificationEpSize);

  (void)USBH_LL_SetToggle(phost, MTP_Handle->NotificationPipe, 0U);
 8016198:	68bb      	ldr	r3, [r7, #8]
 801619a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801619e:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 80161a2:	2200      	movs	r2, #0
 80161a4:	4619      	mov	r1, r3
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f005 f8a3 	bl	801b2f2 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataInEndpoint(phost);
 80161ac:	6878      	ldr	r0, [r7, #4]
 80161ae:	f000 f9d1 	bl	8016554 <MTP_FindDataInEndpoint>
 80161b2:	4603      	mov	r3, r0
 80161b4:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 80161b6:	7b7b      	ldrb	r3, [r7, #13]
 80161b8:	2bff      	cmp	r3, #255	@ 0xff
 80161ba:	d002      	beq.n	80161c2 <USBH_MTP_InterfaceInit+0x1d6>
 80161bc:	7b7b      	ldrb	r3, [r7, #13]
 80161be:	2b04      	cmp	r3, #4
 80161c0:	d90a      	bls.n	80161d8 <USBH_MTP_InterfaceInit+0x1ec>
  {
    USBH_DbgLog("Invalid Data IN endpoint number");
 80161c2:	4841      	ldr	r0, [pc, #260]	@ (80162c8 <USBH_MTP_InterfaceInit+0x2dc>)
 80161c4:	f005 fab6 	bl	801b734 <iprintf>
 80161c8:	4843      	ldr	r0, [pc, #268]	@ (80162d8 <USBH_MTP_InterfaceInit+0x2ec>)
 80161ca:	f005 fab3 	bl	801b734 <iprintf>
 80161ce:	200a      	movs	r0, #10
 80161d0:	f005 fac2 	bl	801b758 <putchar>
    return USBH_FAIL;
 80161d4:	2302      	movs	r3, #2
 80161d6:	e0fc      	b.n	80163d2 <USBH_MTP_InterfaceInit+0x3e6>
  }

  /*Collect the control endpoint address and length*/
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 80161d8:	7bfb      	ldrb	r3, [r7, #15]
 80161da:	7b79      	ldrb	r1, [r7, #13]
 80161dc:	687a      	ldr	r2, [r7, #4]
 80161de:	3101      	adds	r1, #1
 80161e0:	00c9      	lsls	r1, r1, #3
 80161e2:	2032      	movs	r0, #50	@ 0x32
 80161e4:	fb00 f303 	mul.w	r3, r0, r3
 80161e8:	440b      	add	r3, r1
 80161ea:	441a      	add	r2, r3
 80161ec:	f248 1346 	movw	r3, #33094	@ 0x8146
 80161f0:	4413      	add	r3, r2
 80161f2:	781a      	ldrb	r2, [r3, #0]
 80161f4:	68bb      	ldr	r3, [r7, #8]
 80161f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80161fa:	f883 2d30 	strb.w	r2, [r3, #3376]	@ 0xd30
  MTP_Handle->DataInEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 80161fe:	7bfb      	ldrb	r3, [r7, #15]
 8016200:	7b79      	ldrb	r1, [r7, #13]
 8016202:	687a      	ldr	r2, [r7, #4]
 8016204:	3101      	adds	r1, #1
 8016206:	00c9      	lsls	r1, r1, #3
 8016208:	2032      	movs	r0, #50	@ 0x32
 801620a:	fb00 f303 	mul.w	r3, r0, r3
 801620e:	440b      	add	r3, r1
 8016210:	441a      	add	r2, r3
 8016212:	f248 1348 	movw	r3, #33096	@ 0x8148
 8016216:	4413      	add	r3, r2
 8016218:	881a      	ldrh	r2, [r3, #0]
 801621a:	68bb      	ldr	r3, [r7, #8]
 801621c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016220:	f8a3 2d34 	strh.w	r2, [r3, #3380]	@ 0xd34
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 8016224:	68bb      	ldr	r3, [r7, #8]
 8016226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801622a:	f893 3d30 	ldrb.w	r3, [r3, #3376]	@ 0xd30
 801622e:	4619      	mov	r1, r3
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f004 f8c2 	bl	801a3ba <USBH_AllocPipe>
 8016236:	4603      	mov	r3, r0
 8016238:	461a      	mov	r2, r3
 801623a:	68bb      	ldr	r3, [r7, #8]
 801623c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016240:	f883 2d2c 	strb.w	r2, [r3, #3372]	@ 0xd2c

  /* Open pipe for DATA IN endpoint */
  (void)USBH_OpenPipe(phost, MTP_Handle->DataInPipe, MTP_Handle->DataInEp,
 8016244:	68bb      	ldr	r3, [r7, #8]
 8016246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801624a:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	@ 0xd2c
 801624e:	68bb      	ldr	r3, [r7, #8]
 8016250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016254:	f893 0d30 	ldrb.w	r0, [r3, #3376]	@ 0xd30
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801625e:	f893 411c 	ldrb.w	r4, [r3, #284]	@ 0x11c
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016268:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 801626c:	68ba      	ldr	r2, [r7, #8]
 801626e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016272:	f8b2 2d34 	ldrh.w	r2, [r2, #3380]	@ 0xd34
 8016276:	9202      	str	r2, [sp, #8]
 8016278:	2202      	movs	r2, #2
 801627a:	9201      	str	r2, [sp, #4]
 801627c:	9300      	str	r3, [sp, #0]
 801627e:	4623      	mov	r3, r4
 8016280:	4602      	mov	r2, r0
 8016282:	6878      	ldr	r0, [r7, #4]
 8016284:	f004 f86a 	bl	801a35c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      MTP_Handle->DataInEpSize);

  (void)USBH_LL_SetToggle(phost, MTP_Handle->DataInPipe, 0U);
 8016288:	68bb      	ldr	r3, [r7, #8]
 801628a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801628e:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 8016292:	2200      	movs	r2, #0
 8016294:	4619      	mov	r1, r3
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f005 f82b 	bl	801b2f2 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataOutEndpoint(phost);
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f000 f8fb 	bl	8016498 <MTP_FindDataOutEndpoint>
 80162a2:	4603      	mov	r3, r0
 80162a4:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 80162a6:	7b7b      	ldrb	r3, [r7, #13]
 80162a8:	2bff      	cmp	r3, #255	@ 0xff
 80162aa:	d002      	beq.n	80162b2 <USBH_MTP_InterfaceInit+0x2c6>
 80162ac:	7b7b      	ldrb	r3, [r7, #13]
 80162ae:	2b04      	cmp	r3, #4
 80162b0:	d916      	bls.n	80162e0 <USBH_MTP_InterfaceInit+0x2f4>
  {
    USBH_DbgLog("Invalid Data OUT endpoint number");
 80162b2:	4805      	ldr	r0, [pc, #20]	@ (80162c8 <USBH_MTP_InterfaceInit+0x2dc>)
 80162b4:	f005 fa3e 	bl	801b734 <iprintf>
 80162b8:	4808      	ldr	r0, [pc, #32]	@ (80162dc <USBH_MTP_InterfaceInit+0x2f0>)
 80162ba:	f005 fa3b 	bl	801b734 <iprintf>
 80162be:	200a      	movs	r0, #10
 80162c0:	f005 fa4a 	bl	801b758 <putchar>
    return USBH_FAIL;
 80162c4:	2302      	movs	r3, #2
 80162c6:	e084      	b.n	80163d2 <USBH_MTP_InterfaceInit+0x3e6>
 80162c8:	0801cc14 	.word	0x0801cc14
 80162cc:	0801cc20 	.word	0x0801cc20
 80162d0:	0801cc54 	.word	0x0801cc54
 80162d4:	0801cc74 	.word	0x0801cc74
 80162d8:	0801cc9c 	.word	0x0801cc9c
 80162dc:	0801ccbc 	.word	0x0801ccbc
  }

  /*Collect the DATA OUT endpoint address and length*/
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 80162e0:	7bfb      	ldrb	r3, [r7, #15]
 80162e2:	7b79      	ldrb	r1, [r7, #13]
 80162e4:	687a      	ldr	r2, [r7, #4]
 80162e6:	3101      	adds	r1, #1
 80162e8:	00c9      	lsls	r1, r1, #3
 80162ea:	2032      	movs	r0, #50	@ 0x32
 80162ec:	fb00 f303 	mul.w	r3, r0, r3
 80162f0:	440b      	add	r3, r1
 80162f2:	441a      	add	r2, r3
 80162f4:	f248 1346 	movw	r3, #33094	@ 0x8146
 80162f8:	4413      	add	r3, r2
 80162fa:	781a      	ldrb	r2, [r3, #0]
 80162fc:	68bb      	ldr	r3, [r7, #8]
 80162fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016302:	f883 2d2f 	strb.w	r2, [r3, #3375]	@ 0xd2f
  MTP_Handle->DataOutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8016306:	7bfb      	ldrb	r3, [r7, #15]
 8016308:	7b79      	ldrb	r1, [r7, #13]
 801630a:	687a      	ldr	r2, [r7, #4]
 801630c:	3101      	adds	r1, #1
 801630e:	00c9      	lsls	r1, r1, #3
 8016310:	2032      	movs	r0, #50	@ 0x32
 8016312:	fb00 f303 	mul.w	r3, r0, r3
 8016316:	440b      	add	r3, r1
 8016318:	441a      	add	r2, r3
 801631a:	f248 1348 	movw	r3, #33096	@ 0x8148
 801631e:	4413      	add	r3, r2
 8016320:	881a      	ldrh	r2, [r3, #0]
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016328:	f8a3 2d32 	strh.w	r2, [r3, #3378]	@ 0xd32
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 801632c:	68bb      	ldr	r3, [r7, #8]
 801632e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016332:	f893 3d2f 	ldrb.w	r3, [r3, #3375]	@ 0xd2f
 8016336:	4619      	mov	r1, r3
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f004 f83e 	bl	801a3ba <USBH_AllocPipe>
 801633e:	4603      	mov	r3, r0
 8016340:	461a      	mov	r2, r3
 8016342:	68bb      	ldr	r3, [r7, #8]
 8016344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016348:	f883 2d2d 	strb.w	r2, [r3, #3373]	@ 0xd2d

  /* Open pipe for DATA OUT endpoint */
  (void)USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 801634c:	68bb      	ldr	r3, [r7, #8]
 801634e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016352:	f893 1d2d 	ldrb.w	r1, [r3, #3373]	@ 0xd2d
 8016356:	68bb      	ldr	r3, [r7, #8]
 8016358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801635c:	f893 0d2f 	ldrb.w	r0, [r3, #3375]	@ 0xd2f
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016366:	f893 411c 	ldrb.w	r4, [r3, #284]	@ 0x11c
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016370:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8016374:	68ba      	ldr	r2, [r7, #8]
 8016376:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801637a:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 801637e:	9202      	str	r2, [sp, #8]
 8016380:	2202      	movs	r2, #2
 8016382:	9201      	str	r2, [sp, #4]
 8016384:	9300      	str	r3, [sp, #0]
 8016386:	4623      	mov	r3, r4
 8016388:	4602      	mov	r2, r0
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f003 ffe6 	bl	801a35c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      MTP_Handle->DataOutEpSize);

  (void)USBH_LL_SetToggle(phost, MTP_Handle->DataOutPipe, 0U);
 8016390:	68bb      	ldr	r3, [r7, #8]
 8016392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016396:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 801639a:	2200      	movs	r2, #0
 801639c:	4619      	mov	r1, r3
 801639e:	6878      	ldr	r0, [r7, #4]
 80163a0:	f004 ffa7 	bl	801b2f2 <USBH_LL_SetToggle>

  MTP_Handle->state = MTP_OPENSESSION;
 80163a4:	68bb      	ldr	r3, [r7, #8]
 80163a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80163aa:	2202      	movs	r2, #2
 80163ac:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38
  MTP_Handle->is_ready = 0U;
 80163b0:	68bb      	ldr	r3, [r7, #8]
 80163b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80163b6:	461a      	mov	r2, r3
 80163b8:	2300      	movs	r3, #0
 80163ba:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80163c4:	2200      	movs	r2, #0
 80163c6:	f883 2d3c 	strb.w	r2, [r3, #3388]	@ 0xd3c

  return USBH_PTP_Init(phost);
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	f000 fdb6 	bl	8016f3c <USBH_PTP_Init>
 80163d0:	4603      	mov	r3, r0
}
 80163d2:	4618      	mov	r0, r3
 80163d4:	3714      	adds	r7, #20
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd90      	pop	{r4, r7, pc}
 80163da:	bf00      	nop

080163dc <MTP_FindCtlEndpoint>:
  * @brief  Find MTP Ctl interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindCtlEndpoint(USBH_HandleTypeDef *phost)
{
 80163dc:	b480      	push	{r7}
 80163de:	b085      	sub	sp, #20
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 80163e4:	2300      	movs	r3, #0
 80163e6:	73fb      	strb	r3, [r7, #15]
 80163e8:	e04c      	b.n	8016484 <MTP_FindCtlEndpoint+0xa8>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 80163ea:	7bfb      	ldrb	r3, [r7, #15]
 80163ec:	687a      	ldr	r2, [r7, #4]
 80163ee:	2132      	movs	r1, #50	@ 0x32
 80163f0:	fb01 f303 	mul.w	r3, r1, r3
 80163f4:	441a      	add	r2, r3
 80163f6:	f248 1347 	movw	r3, #33095	@ 0x8147
 80163fa:	4413      	add	r3, r2
 80163fc:	781b      	ldrb	r3, [r3, #0]
 80163fe:	2b06      	cmp	r3, #6
 8016400:	d13d      	bne.n	801647e <MTP_FindCtlEndpoint+0xa2>
    {
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8016402:	2300      	movs	r3, #0
 8016404:	73bb      	strb	r3, [r7, #14]
 8016406:	e037      	b.n	8016478 <MTP_FindCtlEndpoint+0x9c>
      {
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 8016408:	7bfb      	ldrb	r3, [r7, #15]
 801640a:	7bb9      	ldrb	r1, [r7, #14]
 801640c:	687a      	ldr	r2, [r7, #4]
 801640e:	3101      	adds	r1, #1
 8016410:	00c9      	lsls	r1, r1, #3
 8016412:	2032      	movs	r0, #50	@ 0x32
 8016414:	fb00 f303 	mul.w	r3, r0, r3
 8016418:	440b      	add	r3, r1
 801641a:	441a      	add	r2, r3
 801641c:	f248 1346 	movw	r3, #33094	@ 0x8146
 8016420:	4413      	add	r3, r2
 8016422:	781b      	ldrb	r3, [r3, #0]
 8016424:	b25b      	sxtb	r3, r3
 8016426:	2b00      	cmp	r3, #0
 8016428:	da23      	bge.n	8016472 <MTP_FindCtlEndpoint+0x96>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 801642a:	7bfb      	ldrb	r3, [r7, #15]
 801642c:	7bb9      	ldrb	r1, [r7, #14]
 801642e:	687a      	ldr	r2, [r7, #4]
 8016430:	3101      	adds	r1, #1
 8016432:	00c9      	lsls	r1, r1, #3
 8016434:	2032      	movs	r0, #50	@ 0x32
 8016436:	fb00 f303 	mul.w	r3, r0, r3
 801643a:	440b      	add	r3, r1
 801643c:	441a      	add	r2, r3
 801643e:	f248 1348 	movw	r3, #33096	@ 0x8148
 8016442:	4413      	add	r3, r2
 8016444:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 8016446:	2b00      	cmp	r3, #0
 8016448:	d013      	beq.n	8016472 <MTP_FindCtlEndpoint+0x96>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_INTERRUPT) == USBH_EP_INTERRUPT))
 801644a:	7bfb      	ldrb	r3, [r7, #15]
 801644c:	7bb9      	ldrb	r1, [r7, #14]
 801644e:	687a      	ldr	r2, [r7, #4]
 8016450:	3101      	adds	r1, #1
 8016452:	00c9      	lsls	r1, r1, #3
 8016454:	2032      	movs	r0, #50	@ 0x32
 8016456:	fb00 f303 	mul.w	r3, r0, r3
 801645a:	440b      	add	r3, r1
 801645c:	441a      	add	r2, r3
 801645e:	f248 1347 	movw	r3, #33095	@ 0x8147
 8016462:	4413      	add	r3, r2
 8016464:	781b      	ldrb	r3, [r3, #0]
 8016466:	f003 0303 	and.w	r3, r3, #3
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 801646a:	2b03      	cmp	r3, #3
 801646c:	d101      	bne.n	8016472 <MTP_FindCtlEndpoint+0x96>
        {
          return endpoint;
 801646e:	7bbb      	ldrb	r3, [r7, #14]
 8016470:	e00c      	b.n	801648c <MTP_FindCtlEndpoint+0xb0>
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8016472:	7bbb      	ldrb	r3, [r7, #14]
 8016474:	3301      	adds	r3, #1
 8016476:	73bb      	strb	r3, [r7, #14]
 8016478:	7bbb      	ldrb	r3, [r7, #14]
 801647a:	2b04      	cmp	r3, #4
 801647c:	d9c4      	bls.n	8016408 <MTP_FindCtlEndpoint+0x2c>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 801647e:	7bfb      	ldrb	r3, [r7, #15]
 8016480:	3301      	adds	r3, #1
 8016482:	73fb      	strb	r3, [r7, #15]
 8016484:	7bfb      	ldrb	r3, [r7, #15]
 8016486:	2b09      	cmp	r3, #9
 8016488:	d9af      	bls.n	80163ea <MTP_FindCtlEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 801648a:	23ff      	movs	r3, #255	@ 0xff
}
 801648c:	4618      	mov	r0, r3
 801648e:	3714      	adds	r7, #20
 8016490:	46bd      	mov	sp, r7
 8016492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016496:	4770      	bx	lr

08016498 <MTP_FindDataOutEndpoint>:
  * @brief  Find MTP DATA OUT interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataOutEndpoint(USBH_HandleTypeDef *phost)
{
 8016498:	b480      	push	{r7}
 801649a:	b085      	sub	sp, #20
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 80164a0:	2300      	movs	r3, #0
 80164a2:	73fb      	strb	r3, [r7, #15]
 80164a4:	e04c      	b.n	8016540 <MTP_FindDataOutEndpoint+0xa8>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 80164a6:	7bfb      	ldrb	r3, [r7, #15]
 80164a8:	687a      	ldr	r2, [r7, #4]
 80164aa:	2132      	movs	r1, #50	@ 0x32
 80164ac:	fb01 f303 	mul.w	r3, r1, r3
 80164b0:	441a      	add	r2, r3
 80164b2:	f248 1347 	movw	r3, #33095	@ 0x8147
 80164b6:	4413      	add	r3, r2
 80164b8:	781b      	ldrb	r3, [r3, #0]
 80164ba:	2b06      	cmp	r3, #6
 80164bc:	d13d      	bne.n	801653a <MTP_FindDataOutEndpoint+0xa2>
    {
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 80164be:	2300      	movs	r3, #0
 80164c0:	73bb      	strb	r3, [r7, #14]
 80164c2:	e037      	b.n	8016534 <MTP_FindDataOutEndpoint+0x9c>
      {

        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 80164c4:	7bfb      	ldrb	r3, [r7, #15]
 80164c6:	7bb9      	ldrb	r1, [r7, #14]
 80164c8:	687a      	ldr	r2, [r7, #4]
 80164ca:	3101      	adds	r1, #1
 80164cc:	00c9      	lsls	r1, r1, #3
 80164ce:	2032      	movs	r0, #50	@ 0x32
 80164d0:	fb00 f303 	mul.w	r3, r0, r3
 80164d4:	440b      	add	r3, r1
 80164d6:	441a      	add	r2, r3
 80164d8:	f248 1346 	movw	r3, #33094	@ 0x8146
 80164dc:	4413      	add	r3, r2
 80164de:	781b      	ldrb	r3, [r3, #0]
 80164e0:	b25b      	sxtb	r3, r3
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	db23      	blt.n	801652e <MTP_FindDataOutEndpoint+0x96>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 80164e6:	7bfb      	ldrb	r3, [r7, #15]
 80164e8:	7bb9      	ldrb	r1, [r7, #14]
 80164ea:	687a      	ldr	r2, [r7, #4]
 80164ec:	3101      	adds	r1, #1
 80164ee:	00c9      	lsls	r1, r1, #3
 80164f0:	2032      	movs	r0, #50	@ 0x32
 80164f2:	fb00 f303 	mul.w	r3, r0, r3
 80164f6:	440b      	add	r3, r1
 80164f8:	441a      	add	r2, r3
 80164fa:	f248 1348 	movw	r3, #33096	@ 0x8148
 80164fe:	4413      	add	r3, r2
 8016500:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 8016502:	2b00      	cmp	r3, #0
 8016504:	d013      	beq.n	801652e <MTP_FindDataOutEndpoint+0x96>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 8016506:	7bfb      	ldrb	r3, [r7, #15]
 8016508:	7bb9      	ldrb	r1, [r7, #14]
 801650a:	687a      	ldr	r2, [r7, #4]
 801650c:	3101      	adds	r1, #1
 801650e:	00c9      	lsls	r1, r1, #3
 8016510:	2032      	movs	r0, #50	@ 0x32
 8016512:	fb00 f303 	mul.w	r3, r0, r3
 8016516:	440b      	add	r3, r1
 8016518:	441a      	add	r2, r3
 801651a:	f248 1347 	movw	r3, #33095	@ 0x8147
 801651e:	4413      	add	r3, r2
 8016520:	781b      	ldrb	r3, [r3, #0]
 8016522:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8016526:	2b00      	cmp	r3, #0
 8016528:	d001      	beq.n	801652e <MTP_FindDataOutEndpoint+0x96>
        {
          return endpoint;
 801652a:	7bbb      	ldrb	r3, [r7, #14]
 801652c:	e00c      	b.n	8016548 <MTP_FindDataOutEndpoint+0xb0>
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 801652e:	7bbb      	ldrb	r3, [r7, #14]
 8016530:	3301      	adds	r3, #1
 8016532:	73bb      	strb	r3, [r7, #14]
 8016534:	7bbb      	ldrb	r3, [r7, #14]
 8016536:	2b04      	cmp	r3, #4
 8016538:	d9c4      	bls.n	80164c4 <MTP_FindDataOutEndpoint+0x2c>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 801653a:	7bfb      	ldrb	r3, [r7, #15]
 801653c:	3301      	adds	r3, #1
 801653e:	73fb      	strb	r3, [r7, #15]
 8016540:	7bfb      	ldrb	r3, [r7, #15]
 8016542:	2b09      	cmp	r3, #9
 8016544:	d9af      	bls.n	80164a6 <MTP_FindDataOutEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8016546:	23ff      	movs	r3, #255	@ 0xff
}
 8016548:	4618      	mov	r0, r3
 801654a:	3714      	adds	r7, #20
 801654c:	46bd      	mov	sp, r7
 801654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016552:	4770      	bx	lr

08016554 <MTP_FindDataInEndpoint>:
  * @brief  Find MTP DATA IN interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataInEndpoint(USBH_HandleTypeDef *phost)
{
 8016554:	b480      	push	{r7}
 8016556:	b085      	sub	sp, #20
 8016558:	af00      	add	r7, sp, #0
 801655a:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 801655c:	2300      	movs	r3, #0
 801655e:	73fb      	strb	r3, [r7, #15]
 8016560:	e04c      	b.n	80165fc <MTP_FindDataInEndpoint+0xa8>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8016562:	7bfb      	ldrb	r3, [r7, #15]
 8016564:	687a      	ldr	r2, [r7, #4]
 8016566:	2132      	movs	r1, #50	@ 0x32
 8016568:	fb01 f303 	mul.w	r3, r1, r3
 801656c:	441a      	add	r2, r3
 801656e:	f248 1347 	movw	r3, #33095	@ 0x8147
 8016572:	4413      	add	r3, r2
 8016574:	781b      	ldrb	r3, [r3, #0]
 8016576:	2b06      	cmp	r3, #6
 8016578:	d13d      	bne.n	80165f6 <MTP_FindDataInEndpoint+0xa2>
    {
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 801657a:	2300      	movs	r3, #0
 801657c:	73bb      	strb	r3, [r7, #14]
 801657e:	e037      	b.n	80165f0 <MTP_FindDataInEndpoint+0x9c>
      {

        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 8016580:	7bfb      	ldrb	r3, [r7, #15]
 8016582:	7bb9      	ldrb	r1, [r7, #14]
 8016584:	687a      	ldr	r2, [r7, #4]
 8016586:	3101      	adds	r1, #1
 8016588:	00c9      	lsls	r1, r1, #3
 801658a:	2032      	movs	r0, #50	@ 0x32
 801658c:	fb00 f303 	mul.w	r3, r0, r3
 8016590:	440b      	add	r3, r1
 8016592:	441a      	add	r2, r3
 8016594:	f248 1346 	movw	r3, #33094	@ 0x8146
 8016598:	4413      	add	r3, r2
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	b25b      	sxtb	r3, r3
 801659e:	2b00      	cmp	r3, #0
 80165a0:	da23      	bge.n	80165ea <MTP_FindDataInEndpoint+0x96>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 80165a2:	7bfb      	ldrb	r3, [r7, #15]
 80165a4:	7bb9      	ldrb	r1, [r7, #14]
 80165a6:	687a      	ldr	r2, [r7, #4]
 80165a8:	3101      	adds	r1, #1
 80165aa:	00c9      	lsls	r1, r1, #3
 80165ac:	2032      	movs	r0, #50	@ 0x32
 80165ae:	fb00 f303 	mul.w	r3, r0, r3
 80165b2:	440b      	add	r3, r1
 80165b4:	441a      	add	r2, r3
 80165b6:	f248 1348 	movw	r3, #33096	@ 0x8148
 80165ba:	4413      	add	r3, r2
 80165bc:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d013      	beq.n	80165ea <MTP_FindDataInEndpoint+0x96>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 80165c2:	7bfb      	ldrb	r3, [r7, #15]
 80165c4:	7bb9      	ldrb	r1, [r7, #14]
 80165c6:	687a      	ldr	r2, [r7, #4]
 80165c8:	3101      	adds	r1, #1
 80165ca:	00c9      	lsls	r1, r1, #3
 80165cc:	2032      	movs	r0, #50	@ 0x32
 80165ce:	fb00 f303 	mul.w	r3, r0, r3
 80165d2:	440b      	add	r3, r1
 80165d4:	441a      	add	r2, r3
 80165d6:	f248 1347 	movw	r3, #33095	@ 0x8147
 80165da:	4413      	add	r3, r2
 80165dc:	781b      	ldrb	r3, [r3, #0]
 80165de:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d001      	beq.n	80165ea <MTP_FindDataInEndpoint+0x96>
        {
          return endpoint;
 80165e6:	7bbb      	ldrb	r3, [r7, #14]
 80165e8:	e00c      	b.n	8016604 <MTP_FindDataInEndpoint+0xb0>
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 80165ea:	7bbb      	ldrb	r3, [r7, #14]
 80165ec:	3301      	adds	r3, #1
 80165ee:	73bb      	strb	r3, [r7, #14]
 80165f0:	7bbb      	ldrb	r3, [r7, #14]
 80165f2:	2b04      	cmp	r3, #4
 80165f4:	d9c4      	bls.n	8016580 <MTP_FindDataInEndpoint+0x2c>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 80165f6:	7bfb      	ldrb	r3, [r7, #15]
 80165f8:	3301      	adds	r3, #1
 80165fa:	73fb      	strb	r3, [r7, #15]
 80165fc:	7bfb      	ldrb	r3, [r7, #15]
 80165fe:	2b09      	cmp	r3, #9
 8016600:	d9af      	bls.n	8016562 <MTP_FindDataInEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8016602:	23ff      	movs	r3, #255	@ 0xff
}
 8016604:	4618      	mov	r0, r3
 8016606:	3714      	adds	r7, #20
 8016608:	46bd      	mov	sp, r7
 801660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660e:	4770      	bx	lr

08016610 <USBH_MTP_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b084      	sub	sp, #16
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801661e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8016622:	69db      	ldr	r3, [r3, #28]
 8016624:	60fb      	str	r3, [r7, #12]

  if (MTP_Handle->DataOutPipe != 0U)
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801662c:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 8016630:	2b00      	cmp	r3, #0
 8016632:	d017      	beq.n	8016664 <USBH_MTP_InterfaceDeInit+0x54>
  {
    (void)USBH_ClosePipe(phost, MTP_Handle->DataOutPipe);
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801663a:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 801663e:	4619      	mov	r1, r3
 8016640:	6878      	ldr	r0, [r7, #4]
 8016642:	f003 feaa 	bl	801a39a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->DataOutPipe);
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801664c:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 8016650:	4619      	mov	r1, r3
 8016652:	6878      	ldr	r0, [r7, #4]
 8016654:	f003 fed4 	bl	801a400 <USBH_FreePipe>
    MTP_Handle->DataOutPipe = 0U;     /* Reset the Channel as Free */
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801665e:	2200      	movs	r2, #0
 8016660:	f883 2d2d 	strb.w	r2, [r3, #3373]	@ 0xd2d
  }

  if (MTP_Handle->DataInPipe != 0U)
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801666a:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 801666e:	2b00      	cmp	r3, #0
 8016670:	d017      	beq.n	80166a2 <USBH_MTP_InterfaceDeInit+0x92>
  {
    (void)USBH_ClosePipe(phost, MTP_Handle->DataInPipe);
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016678:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 801667c:	4619      	mov	r1, r3
 801667e:	6878      	ldr	r0, [r7, #4]
 8016680:	f003 fe8b 	bl	801a39a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->DataInPipe);
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801668a:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 801668e:	4619      	mov	r1, r3
 8016690:	6878      	ldr	r0, [r7, #4]
 8016692:	f003 feb5 	bl	801a400 <USBH_FreePipe>
    MTP_Handle->DataInPipe = 0U;     /* Reset the Channel as Free */
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801669c:	2200      	movs	r2, #0
 801669e:	f883 2d2c 	strb.w	r2, [r3, #3372]	@ 0xd2c
  }

  if (MTP_Handle->NotificationPipe != 0U)
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80166a8:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d017      	beq.n	80166e0 <USBH_MTP_InterfaceDeInit+0xd0>
  {
    (void)USBH_ClosePipe(phost, MTP_Handle->NotificationPipe);
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80166b6:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 80166ba:	4619      	mov	r1, r3
 80166bc:	6878      	ldr	r0, [r7, #4]
 80166be:	f003 fe6c 	bl	801a39a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->NotificationPipe);
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80166c8:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 80166cc:	4619      	mov	r1, r3
 80166ce:	6878      	ldr	r0, [r7, #4]
 80166d0:	f003 fe96 	bl	801a400 <USBH_FreePipe>
    MTP_Handle->NotificationPipe = 0U;     /* Reset the Channel as Free */
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80166da:	2200      	movs	r2, #0
 80166dc:	f883 2d2e 	strb.w	r2, [r3, #3374]	@ 0xd2e
  }

  if (phost->pActiveClass->pData != NULL)
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80166e6:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80166ea:	69db      	ldr	r3, [r3, #28]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d00f      	beq.n	8016710 <USBH_MTP_InterfaceDeInit+0x100>
  {
    USBH_free(phost->pActiveClass->pData);
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80166f6:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80166fa:	69db      	ldr	r3, [r3, #28]
 80166fc:	4618      	mov	r0, r3
 80166fe:	f004 fea1 	bl	801b444 <free>
    phost->pActiveClass->pData = 0U;
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016708:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801670c:	2200      	movs	r2, #0
 801670e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8016710:	2300      	movs	r3, #0
}
 8016712:	4618      	mov	r0, r3
 8016714:	3710      	adds	r7, #16
 8016716:	46bd      	mov	sp, r7
 8016718:	bd80      	pop	{r7, pc}

0801671a <USBH_MTP_ClassRequest>:
  *         for MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_ClassRequest(USBH_HandleTypeDef *phost)
{
 801671a:	b480      	push	{r7}
 801671c:	b083      	sub	sp, #12
 801671e:	af00      	add	r7, sp, #0
 8016720:	6078      	str	r0, [r7, #4]
  USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#else
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
#endif /* (USBH_USE_OS == 1U) */
  return USBH_OK;
 8016722:	2300      	movs	r3, #0
}
 8016724:	4618      	mov	r0, r3
 8016726:	370c      	adds	r7, #12
 8016728:	46bd      	mov	sp, r7
 801672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672e:	4770      	bx	lr

08016730 <USBH_MTP_Process>:
  *         The function is for managing state machine for MTP data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_Process(USBH_HandleTypeDef *phost)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b086      	sub	sp, #24
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8016738:	2301      	movs	r3, #1
 801673a:	75fb      	strb	r3, [r7, #23]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016742:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8016746:	69db      	ldr	r3, [r3, #28]
 8016748:	60fb      	str	r3, [r7, #12]
  uint32_t idx = 0U;
 801674a:	2300      	movs	r3, #0
 801674c:	613b      	str	r3, [r7, #16]

  switch (MTP_Handle->state)
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016754:	f893 3d38 	ldrb.w	r3, [r3, #3384]	@ 0xd38
 8016758:	2b05      	cmp	r3, #5
 801675a:	f200 81d7 	bhi.w	8016b0c <USBH_MTP_Process+0x3dc>
 801675e:	a201      	add	r2, pc, #4	@ (adr r2, 8016764 <USBH_MTP_Process+0x34>)
 8016760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016764:	08016b01 	.word	0x08016b01
 8016768:	080167ab 	.word	0x080167ab
 801676c:	0801677d 	.word	0x0801677d
 8016770:	08016b0d 	.word	0x08016b0d
 8016774:	080168f5 	.word	0x080168f5
 8016778:	08016981 	.word	0x08016981
  {
    case  MTP_OPENSESSION:
      status = USBH_PTP_OpenSession(phost, 1U);  /* Session '0' is not valid */
 801677c:	2101      	movs	r1, #1
 801677e:	6878      	ldr	r0, [r7, #4]
 8016780:	f001 fc02 	bl	8017f88 <USBH_PTP_OpenSession>
 8016784:	4603      	mov	r3, r0
 8016786:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 8016788:	7dfb      	ldrb	r3, [r7, #23]
 801678a:	2b00      	cmp	r3, #0
 801678c:	f040 81c0 	bne.w	8016b10 <USBH_MTP_Process+0x3e0>
      {
        USBH_UsrLog("MTP Session #0 Opened");
 8016790:	48c5      	ldr	r0, [pc, #788]	@ (8016aa8 <USBH_MTP_Process+0x378>)
 8016792:	f004 ffcf 	bl	801b734 <iprintf>
 8016796:	200a      	movs	r0, #10
 8016798:	f004 ffde 	bl	801b758 <putchar>
        MTP_Handle->state = MTP_GETDEVICEINFO;
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80167a2:	2201      	movs	r2, #1
 80167a4:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80167a8:	e1b2      	b.n	8016b10 <USBH_MTP_Process+0x3e0>

    case MTP_GETDEVICEINFO:
      status = USBH_PTP_GetDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	4619      	mov	r1, r3
 80167ae:	6878      	ldr	r0, [r7, #4]
 80167b0:	f001 fc51 	bl	8018056 <USBH_PTP_GetDeviceInfo>
 80167b4:	4603      	mov	r3, r0
 80167b6:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 80167b8:	7dfb      	ldrb	r3, [r7, #23]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	f040 81aa 	bne.w	8016b14 <USBH_MTP_Process+0x3e4>
      {
        USBH_DbgLog(">>>>> MTP Device Information");
 80167c0:	48ba      	ldr	r0, [pc, #744]	@ (8016aac <USBH_MTP_Process+0x37c>)
 80167c2:	f004 ffb7 	bl	801b734 <iprintf>
 80167c6:	48ba      	ldr	r0, [pc, #744]	@ (8016ab0 <USBH_MTP_Process+0x380>)
 80167c8:	f004 ffb4 	bl	801b734 <iprintf>
 80167cc:	200a      	movs	r0, #10
 80167ce:	f004 ffc3 	bl	801b758 <putchar>
        USBH_DbgLog("Standard version : %x", MTP_Handle->info.devinfo.StandardVersion);
 80167d2:	48b6      	ldr	r0, [pc, #728]	@ (8016aac <USBH_MTP_Process+0x37c>)
 80167d4:	f004 ffae 	bl	801b734 <iprintf>
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	881b      	ldrh	r3, [r3, #0]
 80167dc:	4619      	mov	r1, r3
 80167de:	48b5      	ldr	r0, [pc, #724]	@ (8016ab4 <USBH_MTP_Process+0x384>)
 80167e0:	f004 ffa8 	bl	801b734 <iprintf>
 80167e4:	200a      	movs	r0, #10
 80167e6:	f004 ffb7 	bl	801b758 <putchar>
        USBH_DbgLog("Vendor ExtID : %s", (MTP_Handle->info.devinfo.VendorExtensionID == 6) ? "MTP" : "NOT SUPPORTED");
 80167ea:	48b0      	ldr	r0, [pc, #704]	@ (8016aac <USBH_MTP_Process+0x37c>)
 80167ec:	f004 ffa2 	bl	801b734 <iprintf>
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	685b      	ldr	r3, [r3, #4]
 80167f4:	2b06      	cmp	r3, #6
 80167f6:	d101      	bne.n	80167fc <USBH_MTP_Process+0xcc>
 80167f8:	4baf      	ldr	r3, [pc, #700]	@ (8016ab8 <USBH_MTP_Process+0x388>)
 80167fa:	e000      	b.n	80167fe <USBH_MTP_Process+0xce>
 80167fc:	4baf      	ldr	r3, [pc, #700]	@ (8016abc <USBH_MTP_Process+0x38c>)
 80167fe:	4619      	mov	r1, r3
 8016800:	48af      	ldr	r0, [pc, #700]	@ (8016ac0 <USBH_MTP_Process+0x390>)
 8016802:	f004 ff97 	bl	801b734 <iprintf>
 8016806:	200a      	movs	r0, #10
 8016808:	f004 ffa6 	bl	801b758 <putchar>
        USBH_DbgLog("Functional mode : %s", (MTP_Handle->info.devinfo.FunctionalMode == 0U) ? "Standard" : "Vendor");
 801680c:	48a7      	ldr	r0, [pc, #668]	@ (8016aac <USBH_MTP_Process+0x37c>)
 801680e:	f004 ff91 	bl	801b734 <iprintf>
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8016818:	2b00      	cmp	r3, #0
 801681a:	d101      	bne.n	8016820 <USBH_MTP_Process+0xf0>
 801681c:	4ba9      	ldr	r3, [pc, #676]	@ (8016ac4 <USBH_MTP_Process+0x394>)
 801681e:	e000      	b.n	8016822 <USBH_MTP_Process+0xf2>
 8016820:	4ba9      	ldr	r3, [pc, #676]	@ (8016ac8 <USBH_MTP_Process+0x398>)
 8016822:	4619      	mov	r1, r3
 8016824:	48a9      	ldr	r0, [pc, #676]	@ (8016acc <USBH_MTP_Process+0x39c>)
 8016826:	f004 ff85 	bl	801b734 <iprintf>
 801682a:	200a      	movs	r0, #10
 801682c:	f004 ff94 	bl	801b758 <putchar>
        USBH_DbgLog("Number of Supported Operation(s) : %d", MTP_Handle->info.devinfo.OperationsSupported_len);
 8016830:	489e      	ldr	r0, [pc, #632]	@ (8016aac <USBH_MTP_Process+0x37c>)
 8016832:	f004 ff7f 	bl	801b734 <iprintf>
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801683c:	4619      	mov	r1, r3
 801683e:	48a4      	ldr	r0, [pc, #656]	@ (8016ad0 <USBH_MTP_Process+0x3a0>)
 8016840:	f004 ff78 	bl	801b734 <iprintf>
 8016844:	200a      	movs	r0, #10
 8016846:	f004 ff87 	bl	801b758 <putchar>
        USBH_DbgLog("Number of Supported Events(s) : %d", MTP_Handle->info.devinfo.EventsSupported_len);
 801684a:	4898      	ldr	r0, [pc, #608]	@ (8016aac <USBH_MTP_Process+0x37c>)
 801684c:	f004 ff72 	bl	801b734 <iprintf>
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 8016856:	4619      	mov	r1, r3
 8016858:	489e      	ldr	r0, [pc, #632]	@ (8016ad4 <USBH_MTP_Process+0x3a4>)
 801685a:	f004 ff6b 	bl	801b734 <iprintf>
 801685e:	200a      	movs	r0, #10
 8016860:	f004 ff7a 	bl	801b758 <putchar>
        USBH_DbgLog("Number of Supported Proprieties : %d", MTP_Handle->info.devinfo.DevicePropertiesSupported_len);
 8016864:	4891      	ldr	r0, [pc, #580]	@ (8016aac <USBH_MTP_Process+0x37c>)
 8016866:	f004 ff65 	bl	801b734 <iprintf>
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8016870:	4619      	mov	r1, r3
 8016872:	4899      	ldr	r0, [pc, #612]	@ (8016ad8 <USBH_MTP_Process+0x3a8>)
 8016874:	f004 ff5e 	bl	801b734 <iprintf>
 8016878:	200a      	movs	r0, #10
 801687a:	f004 ff6d 	bl	801b758 <putchar>
        USBH_DbgLog("Manufacturer : %s", MTP_Handle->info.devinfo.Manufacturer);
 801687e:	488b      	ldr	r0, [pc, #556]	@ (8016aac <USBH_MTP_Process+0x37c>)
 8016880:	f004 ff58 	bl	801b734 <iprintf>
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 801688a:	4619      	mov	r1, r3
 801688c:	4893      	ldr	r0, [pc, #588]	@ (8016adc <USBH_MTP_Process+0x3ac>)
 801688e:	f004 ff51 	bl	801b734 <iprintf>
 8016892:	200a      	movs	r0, #10
 8016894:	f004 ff60 	bl	801b758 <putchar>
        USBH_DbgLog("Model : %s", MTP_Handle->info.devinfo.Model);
 8016898:	4884      	ldr	r0, [pc, #528]	@ (8016aac <USBH_MTP_Process+0x37c>)
 801689a:	f004 ff4b 	bl	801b734 <iprintf>
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	f203 6307 	addw	r3, r3, #1543	@ 0x607
 80168a4:	4619      	mov	r1, r3
 80168a6:	488e      	ldr	r0, [pc, #568]	@ (8016ae0 <USBH_MTP_Process+0x3b0>)
 80168a8:	f004 ff44 	bl	801b734 <iprintf>
 80168ac:	200a      	movs	r0, #10
 80168ae:	f004 ff53 	bl	801b758 <putchar>
        USBH_DbgLog("Device version : %s", MTP_Handle->info.devinfo.DeviceVersion);
 80168b2:	487e      	ldr	r0, [pc, #504]	@ (8016aac <USBH_MTP_Process+0x37c>)
 80168b4:	f004 ff3e 	bl	801b734 <iprintf>
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	f203 7306 	addw	r3, r3, #1798	@ 0x706
 80168be:	4619      	mov	r1, r3
 80168c0:	4888      	ldr	r0, [pc, #544]	@ (8016ae4 <USBH_MTP_Process+0x3b4>)
 80168c2:	f004 ff37 	bl	801b734 <iprintf>
 80168c6:	200a      	movs	r0, #10
 80168c8:	f004 ff46 	bl	801b758 <putchar>
        USBH_DbgLog("Serial number : %s", MTP_Handle->info.devinfo.SerialNumber);
 80168cc:	4877      	ldr	r0, [pc, #476]	@ (8016aac <USBH_MTP_Process+0x37c>)
 80168ce:	f004 ff31 	bl	801b734 <iprintf>
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	f603 0305 	addw	r3, r3, #2053	@ 0x805
 80168d8:	4619      	mov	r1, r3
 80168da:	4883      	ldr	r0, [pc, #524]	@ (8016ae8 <USBH_MTP_Process+0x3b8>)
 80168dc:	f004 ff2a 	bl	801b734 <iprintf>
 80168e0:	200a      	movs	r0, #10
 80168e2:	f004 ff39 	bl	801b758 <putchar>

        MTP_Handle->state = MTP_GETSTORAGEIDS;
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80168ec:	2204      	movs	r2, #4
 80168ee:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80168f2:	e10f      	b.n	8016b14 <USBH_MTP_Process+0x3e4>

    case MTP_GETSTORAGEIDS:
      status = USBH_PTP_GetStorageIds(phost, &(MTP_Handle->info.storids));
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	f603 1304 	addw	r3, r3, #2308	@ 0x904
 80168fa:	4619      	mov	r1, r3
 80168fc:	6878      	ldr	r0, [r7, #4]
 80168fe:	f001 fc2b 	bl	8018158 <USBH_PTP_GetStorageIds>
 8016902:	4603      	mov	r3, r0
 8016904:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 8016906:	7dfb      	ldrb	r3, [r7, #23]
 8016908:	2b00      	cmp	r3, #0
 801690a:	f040 8105 	bne.w	8016b18 <USBH_MTP_Process+0x3e8>
      {
        USBH_DbgLog("Number of storage ID items : %d", MTP_Handle->info.storids.n);
 801690e:	4867      	ldr	r0, [pc, #412]	@ (8016aac <USBH_MTP_Process+0x37c>)
 8016910:	f004 ff10 	bl	801b734 <iprintf>
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 801691a:	4619      	mov	r1, r3
 801691c:	4873      	ldr	r0, [pc, #460]	@ (8016aec <USBH_MTP_Process+0x3bc>)
 801691e:	f004 ff09 	bl	801b734 <iprintf>
 8016922:	200a      	movs	r0, #10
 8016924:	f004 ff18 	bl	801b758 <putchar>
        for (idx = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 8016928:	2300      	movs	r3, #0
 801692a:	613b      	str	r3, [r7, #16]
 801692c:	e014      	b.n	8016958 <USBH_MTP_Process+0x228>
        {
          USBH_DbgLog("storage#%d ID : %x", idx, MTP_Handle->info.storids.Storage[idx]);
 801692e:	485f      	ldr	r0, [pc, #380]	@ (8016aac <USBH_MTP_Process+0x37c>)
 8016930:	f004 ff00 	bl	801b734 <iprintf>
 8016934:	68fa      	ldr	r2, [r7, #12]
 8016936:	693b      	ldr	r3, [r7, #16]
 8016938:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 801693c:	009b      	lsls	r3, r3, #2
 801693e:	4413      	add	r3, r2
 8016940:	689b      	ldr	r3, [r3, #8]
 8016942:	461a      	mov	r2, r3
 8016944:	6939      	ldr	r1, [r7, #16]
 8016946:	486a      	ldr	r0, [pc, #424]	@ (8016af0 <USBH_MTP_Process+0x3c0>)
 8016948:	f004 fef4 	bl	801b734 <iprintf>
 801694c:	200a      	movs	r0, #10
 801694e:	f004 ff03 	bl	801b758 <putchar>
        for (idx = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 8016952:	693b      	ldr	r3, [r7, #16]
 8016954:	3301      	adds	r3, #1
 8016956:	613b      	str	r3, [r7, #16]
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 801695e:	693a      	ldr	r2, [r7, #16]
 8016960:	429a      	cmp	r2, r3
 8016962:	d3e4      	bcc.n	801692e <USBH_MTP_Process+0x1fe>
        }

        MTP_Handle->current_storage_unit = 0U;
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801696a:	461a      	mov	r2, r3
 801696c:	2300      	movs	r3, #0
 801696e:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
        MTP_Handle->state = MTP_GETSTORAGEINFO;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016978:	2205      	movs	r2, #5
 801697a:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 801697e:	e0cb      	b.n	8016b18 <USBH_MTP_Process+0x3e8>

    case MTP_GETSTORAGEINFO:
      status = USBH_PTP_GetStorageInfo(phost,
                                       MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit],
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016986:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 801698a:	68fa      	ldr	r2, [r7, #12]
 801698c:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8016990:	009b      	lsls	r3, r3, #2
 8016992:	4413      	add	r3, r2
 8016994:	6899      	ldr	r1, [r3, #8]
                                       &((MTP_Handle->info.storinfo)[MTP_Handle->current_storage_unit]));
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801699c:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 80169a0:	4613      	mov	r3, r2
 80169a2:	011b      	lsls	r3, r3, #4
 80169a4:	4413      	add	r3, r2
 80169a6:	015b      	lsls	r3, r3, #5
 80169a8:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80169ac:	68fa      	ldr	r2, [r7, #12]
 80169ae:	4413      	add	r3, r2
 80169b0:	461a      	mov	r2, r3
 80169b2:	6878      	ldr	r0, [r7, #4]
 80169b4:	f001 fc51 	bl	801825a <USBH_PTP_GetStorageInfo>
 80169b8:	4603      	mov	r3, r0
 80169ba:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 80169bc:	7dfb      	ldrb	r3, [r7, #23]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	f040 80ac 	bne.w	8016b1c <USBH_MTP_Process+0x3ec>
      {
        USBH_UsrLog("Volume#%lu: %s   [%s]", MTP_Handle->current_storage_unit,
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80169ca:	f8d3 11c8 	ldr.w	r1, [r3, #456]	@ 0x1c8
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80169d4:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 80169d8:	4613      	mov	r3, r2
 80169da:	011b      	lsls	r3, r3, #4
 80169dc:	4413      	add	r3, r2
 80169de:	015b      	lsls	r3, r3, #5
 80169e0:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 80169e4:	68fa      	ldr	r2, [r7, #12]
 80169e6:	4413      	add	r3, r2
 80169e8:	1d18      	adds	r0, r3, #4
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80169f0:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 80169f4:	4613      	mov	r3, r2
 80169f6:	011b      	lsls	r3, r3, #4
 80169f8:	4413      	add	r3, r2
 80169fa:	015b      	lsls	r3, r3, #5
 80169fc:	f603 2338 	addw	r3, r3, #2616	@ 0xa38
 8016a00:	68fa      	ldr	r2, [r7, #12]
 8016a02:	4413      	add	r3, r2
 8016a04:	3303      	adds	r3, #3
 8016a06:	4602      	mov	r2, r0
 8016a08:	483a      	ldr	r0, [pc, #232]	@ (8016af4 <USBH_MTP_Process+0x3c4>)
 8016a0a:	f004 fe93 	bl	801b734 <iprintf>
 8016a0e:	200a      	movs	r0, #10
 8016a10:	f004 fea2 	bl	801b758 <putchar>
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].StorageDescription,
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].VolumeLabel);
        if (++MTP_Handle->current_storage_unit >= MTP_Handle->info.storids.n)
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016a1a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8016a1e:	3301      	adds	r3, #1
 8016a20:	68fa      	ldr	r2, [r7, #12]
 8016a22:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8016a26:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016a30:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8016a3a:	429a      	cmp	r2, r3
 8016a3c:	d36e      	bcc.n	8016b1c <USBH_MTP_Process+0x3ec>
        {
          MTP_Handle->state = MTP_IDLE;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016a44:	2200      	movs	r2, #0
 8016a46:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38
          MTP_Handle->is_ready = 1U;
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016a50:	461a      	mov	r2, r3
 8016a52:	2301      	movs	r3, #1
 8016a54:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
          MTP_Handle->current_storage_unit = 0U;
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016a5e:	461a      	mov	r2, r3
 8016a60:	2300      	movs	r3, #0
 8016a62:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
          MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8016a6c:	68fa      	ldr	r2, [r7, #12]
 8016a6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016a72:	f8c2 3d18 	str.w	r3, [r2, #3352]	@ 0xd18

          USBH_UsrLog("MTP Class initialized.");
 8016a76:	4820      	ldr	r0, [pc, #128]	@ (8016af8 <USBH_MTP_Process+0x3c8>)
 8016a78:	f004 fe5c 	bl	801b734 <iprintf>
 8016a7c:	200a      	movs	r0, #10
 8016a7e:	f004 fe6b 	bl	801b758 <putchar>
          USBH_UsrLog("%s is default storage unit", MTP_Handle->info.storinfo[0].StorageDescription);
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	f603 133c 	addw	r3, r3, #2364	@ 0x93c
 8016a88:	4619      	mov	r1, r3
 8016a8a:	481c      	ldr	r0, [pc, #112]	@ (8016afc <USBH_MTP_Process+0x3cc>)
 8016a8c:	f004 fe52 	bl	801b734 <iprintf>
 8016a90:	200a      	movs	r0, #10
 8016a92:	f004 fe61 	bl	801b758 <putchar>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016a9c:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 8016aa0:	2102      	movs	r1, #2
 8016aa2:	6878      	ldr	r0, [r7, #4]
 8016aa4:	4798      	blx	r3

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8016aa6:	e039      	b.n	8016b1c <USBH_MTP_Process+0x3ec>
 8016aa8:	0801cce0 	.word	0x0801cce0
 8016aac:	0801cc14 	.word	0x0801cc14
 8016ab0:	0801ccf8 	.word	0x0801ccf8
 8016ab4:	0801cd18 	.word	0x0801cd18
 8016ab8:	0801cc10 	.word	0x0801cc10
 8016abc:	0801cd30 	.word	0x0801cd30
 8016ac0:	0801cd40 	.word	0x0801cd40
 8016ac4:	0801cd54 	.word	0x0801cd54
 8016ac8:	0801cd60 	.word	0x0801cd60
 8016acc:	0801cd68 	.word	0x0801cd68
 8016ad0:	0801cd80 	.word	0x0801cd80
 8016ad4:	0801cda8 	.word	0x0801cda8
 8016ad8:	0801cdcc 	.word	0x0801cdcc
 8016adc:	0801cdf4 	.word	0x0801cdf4
 8016ae0:	0801ce08 	.word	0x0801ce08
 8016ae4:	0801ce14 	.word	0x0801ce14
 8016ae8:	0801ce28 	.word	0x0801ce28
 8016aec:	0801ce3c 	.word	0x0801ce3c
 8016af0:	0801ce5c 	.word	0x0801ce5c
 8016af4:	0801ce70 	.word	0x0801ce70
 8016af8:	0801ce88 	.word	0x0801ce88
 8016afc:	0801cea0 	.word	0x0801cea0

    case  MTP_IDLE:
      (void)USBH_MTP_Events(phost);
 8016b00:	6878      	ldr	r0, [r7, #4]
 8016b02:	f000 f81c 	bl	8016b3e <USBH_MTP_Events>
#if (USBH_USE_OS == 1U)
      osDelay(10U);
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

      status = USBH_OK;
 8016b06:	2300      	movs	r3, #0
 8016b08:	75fb      	strb	r3, [r7, #23]
      break;
 8016b0a:	e008      	b.n	8016b1e <USBH_MTP_Process+0x3ee>

    default:
      break;
 8016b0c:	bf00      	nop
 8016b0e:	e006      	b.n	8016b1e <USBH_MTP_Process+0x3ee>
      break;
 8016b10:	bf00      	nop
 8016b12:	e004      	b.n	8016b1e <USBH_MTP_Process+0x3ee>
      break;
 8016b14:	bf00      	nop
 8016b16:	e002      	b.n	8016b1e <USBH_MTP_Process+0x3ee>
      break;
 8016b18:	bf00      	nop
 8016b1a:	e000      	b.n	8016b1e <USBH_MTP_Process+0x3ee>
      break;
 8016b1c:	bf00      	nop
  }

  return status;
 8016b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b20:	4618      	mov	r0, r3
 8016b22:	3718      	adds	r7, #24
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}

08016b28 <USBH_MTP_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_SOFProcess(USBH_HandleTypeDef *phost)
{
 8016b28:	b480      	push	{r7}
 8016b2a:	b083      	sub	sp, #12
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8016b30:	2300      	movs	r3, #0
}
 8016b32:	4618      	mov	r0, r3
 8016b34:	370c      	adds	r7, #12
 8016b36:	46bd      	mov	sp, r7
 8016b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b3c:	4770      	bx	lr

08016b3e <USBH_MTP_Events>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_Events(USBH_HandleTypeDef *phost)
{
 8016b3e:	b580      	push	{r7, lr}
 8016b40:	b084      	sub	sp, #16
 8016b42:	af00      	add	r7, sp, #0
 8016b44:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8016b46:	2301      	movs	r3, #1
 8016b48:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016b50:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8016b54:	69db      	ldr	r3, [r3, #28]
 8016b56:	60bb      	str	r3, [r7, #8]

  switch (MTP_Handle->events.state)
 8016b58:	68bb      	ldr	r3, [r7, #8]
 8016b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016b5e:	f893 3d3c 	ldrb.w	r3, [r3, #3388]	@ 0xd3c
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d002      	beq.n	8016b6c <USBH_MTP_Events+0x2e>
 8016b66:	2b01      	cmp	r3, #1
 8016b68:	d02c      	beq.n	8016bc4 <USBH_MTP_Events+0x86>
                                        MTP_Handle->NotificationPipe);
      }
      break;

    default:
      break;
 8016b6a:	e06c      	b.n	8016c46 <USBH_MTP_Events+0x108>
      if ((phost->Timer & 1U) == 0U)
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016b72:	f8d3 3394 	ldr.w	r3, [r3, #916]	@ 0x394
 8016b76:	f003 0301 	and.w	r3, r3, #1
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d160      	bne.n	8016c40 <USBH_MTP_Events+0x102>
        MTP_Handle->events.timer = phost->Timer;
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016b84:	f8d3 3394 	ldr.w	r3, [r3, #916]	@ 0x394
 8016b88:	68ba      	ldr	r2, [r7, #8]
 8016b8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016b8e:	f8c2 3d40 	str.w	r3, [r2, #3392]	@ 0xd40
                                        (uint8_t *)(void *) & (MTP_Handle->events.container),
 8016b92:	68bb      	ldr	r3, [r7, #8]
 8016b94:	f641 5148 	movw	r1, #7496	@ 0x1d48
 8016b98:	4419      	add	r1, r3
                                        (uint8_t)MTP_Handle->NotificationEpSize,
 8016b9a:	68bb      	ldr	r3, [r7, #8]
 8016b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016ba0:	f8b3 3d36 	ldrh.w	r3, [r3, #3382]	@ 0xd36
        (void)USBH_InterruptReceiveData(phost,
 8016ba4:	b2da      	uxtb	r2, r3
 8016ba6:	68bb      	ldr	r3, [r7, #8]
 8016ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016bac:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 8016bb0:	6878      	ldr	r0, [r7, #4]
 8016bb2:	f003 fb99 	bl	801a2e8 <USBH_InterruptReceiveData>
        MTP_Handle->events.state = MTP_EVENTS_GETDATA;
 8016bb6:	68bb      	ldr	r3, [r7, #8]
 8016bb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016bbc:	2201      	movs	r2, #1
 8016bbe:	f883 2d3c 	strb.w	r2, [r3, #3388]	@ 0xd3c
      break;
 8016bc2:	e03d      	b.n	8016c40 <USBH_MTP_Events+0x102>
      if (USBH_LL_GetURBState(phost, MTP_Handle->NotificationPipe) == USBH_URB_DONE)
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016bca:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 8016bce:	4619      	mov	r1, r3
 8016bd0:	6878      	ldr	r0, [r7, #4]
 8016bd2:	f004 fb6b 	bl	801b2ac <USBH_LL_GetURBState>
 8016bd6:	4603      	mov	r3, r0
 8016bd8:	2b01      	cmp	r3, #1
 8016bda:	d102      	bne.n	8016be2 <USBH_MTP_Events+0xa4>
        MTP_DecodeEvent(phost);
 8016bdc:	6878      	ldr	r0, [r7, #4]
 8016bde:	f000 f837 	bl	8016c50 <MTP_DecodeEvent>
      if ((phost->Timer - MTP_Handle->events.timer) >= MTP_Handle->events.poll)
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016be8:	f8d3 2394 	ldr.w	r2, [r3, #916]	@ 0x394
 8016bec:	68bb      	ldr	r3, [r7, #8]
 8016bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016bf2:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	@ 0xd40
 8016bf6:	1ad3      	subs	r3, r2, r3
 8016bf8:	68ba      	ldr	r2, [r7, #8]
 8016bfa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016bfe:	f8b2 2d44 	ldrh.w	r2, [r2, #3396]	@ 0xd44
 8016c02:	4293      	cmp	r3, r2
 8016c04:	d31e      	bcc.n	8016c44 <USBH_MTP_Events+0x106>
        MTP_Handle->events.timer = phost->Timer;
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016c0c:	f8d3 3394 	ldr.w	r3, [r3, #916]	@ 0x394
 8016c10:	68ba      	ldr	r2, [r7, #8]
 8016c12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016c16:	f8c2 3d40 	str.w	r3, [r2, #3392]	@ 0xd40
                                        (uint8_t *)(void *) & (MTP_Handle->events.container),
 8016c1a:	68bb      	ldr	r3, [r7, #8]
 8016c1c:	f641 5148 	movw	r1, #7496	@ 0x1d48
 8016c20:	4419      	add	r1, r3
                                        (uint8_t)MTP_Handle->NotificationEpSize,
 8016c22:	68bb      	ldr	r3, [r7, #8]
 8016c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016c28:	f8b3 3d36 	ldrh.w	r3, [r3, #3382]	@ 0xd36
        (void)USBH_InterruptReceiveData(phost,
 8016c2c:	b2da      	uxtb	r2, r3
 8016c2e:	68bb      	ldr	r3, [r7, #8]
 8016c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016c34:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f003 fb55 	bl	801a2e8 <USBH_InterruptReceiveData>
      break;
 8016c3e:	e001      	b.n	8016c44 <USBH_MTP_Events+0x106>
      break;
 8016c40:	bf00      	nop
 8016c42:	e000      	b.n	8016c46 <USBH_MTP_Events+0x108>
      break;
 8016c44:	bf00      	nop
  }

  return status;
 8016c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c48:	4618      	mov	r0, r3
 8016c4a:	3710      	adds	r7, #16
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}

08016c50 <MTP_DecodeEvent>:
  *         Decode device event sent by responder
  * @param  phost: Host handle
  * @retval None
  */
static void MTP_DecodeEvent(USBH_HandleTypeDef *phost)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b086      	sub	sp, #24
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016c5e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8016c62:	69db      	ldr	r3, [r3, #28]
 8016c64:	617b      	str	r3, [r7, #20]

  uint16_t code;
  uint32_t param1;

  /* Process the event */
  code = MTP_Handle->events.container.code;
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016c6c:	f8b3 3d4e 	ldrh.w	r3, [r3, #3406]	@ 0xd4e
 8016c70:	827b      	strh	r3, [r7, #18]
  param1 = MTP_Handle->events.container.param1;
 8016c72:	697b      	ldr	r3, [r7, #20]
 8016c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016c78:	f8d3 3d54 	ldr.w	r3, [r3, #3412]	@ 0xd54
 8016c7c:	60fb      	str	r3, [r7, #12]

  switch (code)
 8016c7e:	8a7b      	ldrh	r3, [r7, #18]
 8016c80:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8016c84:	2b0e      	cmp	r3, #14
 8016c86:	f200 8111 	bhi.w	8016eac <MTP_DecodeEvent+0x25c>
 8016c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8016c90 <MTP_DecodeEvent+0x40>)
 8016c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c90:	08016ccd 	.word	0x08016ccd
 8016c94:	08016ced 	.word	0x08016ced
 8016c98:	08016d0d 	.word	0x08016d0d
 8016c9c:	08016d2d 	.word	0x08016d2d
 8016ca0:	08016d4d 	.word	0x08016d4d
 8016ca4:	08016d6d 	.word	0x08016d6d
 8016ca8:	08016d8d 	.word	0x08016d8d
 8016cac:	08016dad 	.word	0x08016dad
 8016cb0:	08016dcd 	.word	0x08016dcd
 8016cb4:	08016ded 	.word	0x08016ded
 8016cb8:	08016e0d 	.word	0x08016e0d
 8016cbc:	08016e2d 	.word	0x08016e2d
 8016cc0:	08016e4d 	.word	0x08016e4d
 8016cc4:	08016e6d 	.word	0x08016e6d
 8016cc8:	08016e8d 	.word	0x08016e8d
  {
    case PTP_EC_Undefined:
      USBH_DbgLog("EVT: PTP_EC_Undefined in session %u", MTP_Handle->ptp.session_id);
 8016ccc:	4884      	ldr	r0, [pc, #528]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016cce:	f004 fd31 	bl	801b734 <iprintf>
 8016cd2:	697b      	ldr	r3, [r7, #20]
 8016cd4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016cd8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016cdc:	4619      	mov	r1, r3
 8016cde:	4881      	ldr	r0, [pc, #516]	@ (8016ee4 <MTP_DecodeEvent+0x294>)
 8016ce0:	f004 fd28 	bl	801b734 <iprintf>
 8016ce4:	200a      	movs	r0, #10
 8016ce6:	f004 fd37 	bl	801b758 <putchar>
      break;
 8016cea:	e0ef      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_CancelTransaction:
      USBH_DbgLog("EVT: PTP_EC_CancelTransaction in session %u", MTP_Handle->ptp.session_id);
 8016cec:	487c      	ldr	r0, [pc, #496]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016cee:	f004 fd21 	bl	801b734 <iprintf>
 8016cf2:	697b      	ldr	r3, [r7, #20]
 8016cf4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016cf8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016cfc:	4619      	mov	r1, r3
 8016cfe:	487a      	ldr	r0, [pc, #488]	@ (8016ee8 <MTP_DecodeEvent+0x298>)
 8016d00:	f004 fd18 	bl	801b734 <iprintf>
 8016d04:	200a      	movs	r0, #10
 8016d06:	f004 fd27 	bl	801b758 <putchar>
      break;
 8016d0a:	e0df      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_ObjectAdded:
      USBH_DbgLog("EVT: PTP_EC_ObjectAdded in session %u", MTP_Handle->ptp.session_id);
 8016d0c:	4874      	ldr	r0, [pc, #464]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016d0e:	f004 fd11 	bl	801b734 <iprintf>
 8016d12:	697b      	ldr	r3, [r7, #20]
 8016d14:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016d18:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016d1c:	4619      	mov	r1, r3
 8016d1e:	4873      	ldr	r0, [pc, #460]	@ (8016eec <MTP_DecodeEvent+0x29c>)
 8016d20:	f004 fd08 	bl	801b734 <iprintf>
 8016d24:	200a      	movs	r0, #10
 8016d26:	f004 fd17 	bl	801b758 <putchar>
      break;
 8016d2a:	e0cf      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_ObjectRemoved:
      USBH_DbgLog("EVT: PTP_EC_ObjectRemoved in session %u", MTP_Handle->ptp.session_id);
 8016d2c:	486c      	ldr	r0, [pc, #432]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016d2e:	f004 fd01 	bl	801b734 <iprintf>
 8016d32:	697b      	ldr	r3, [r7, #20]
 8016d34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016d38:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016d3c:	4619      	mov	r1, r3
 8016d3e:	486c      	ldr	r0, [pc, #432]	@ (8016ef0 <MTP_DecodeEvent+0x2a0>)
 8016d40:	f004 fcf8 	bl	801b734 <iprintf>
 8016d44:	200a      	movs	r0, #10
 8016d46:	f004 fd07 	bl	801b758 <putchar>
      break;
 8016d4a:	e0bf      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_StoreAdded:
      USBH_DbgLog("EVT: PTP_EC_StoreAdded in session %u", MTP_Handle->ptp.session_id);
 8016d4c:	4864      	ldr	r0, [pc, #400]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016d4e:	f004 fcf1 	bl	801b734 <iprintf>
 8016d52:	697b      	ldr	r3, [r7, #20]
 8016d54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016d58:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016d5c:	4619      	mov	r1, r3
 8016d5e:	4865      	ldr	r0, [pc, #404]	@ (8016ef4 <MTP_DecodeEvent+0x2a4>)
 8016d60:	f004 fce8 	bl	801b734 <iprintf>
 8016d64:	200a      	movs	r0, #10
 8016d66:	f004 fcf7 	bl	801b758 <putchar>
      break;
 8016d6a:	e0af      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_StoreRemoved:
      USBH_DbgLog("EVT: PTP_EC_StoreRemoved in session %u", MTP_Handle->ptp.session_id);
 8016d6c:	485c      	ldr	r0, [pc, #368]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016d6e:	f004 fce1 	bl	801b734 <iprintf>
 8016d72:	697b      	ldr	r3, [r7, #20]
 8016d74:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016d78:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016d7c:	4619      	mov	r1, r3
 8016d7e:	485e      	ldr	r0, [pc, #376]	@ (8016ef8 <MTP_DecodeEvent+0x2a8>)
 8016d80:	f004 fcd8 	bl	801b734 <iprintf>
 8016d84:	200a      	movs	r0, #10
 8016d86:	f004 fce7 	bl	801b758 <putchar>
      break;
 8016d8a:	e09f      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_DevicePropChanged:
      USBH_DbgLog("EVT: PTP_EC_DevicePropChanged in session %u", MTP_Handle->ptp.session_id);
 8016d8c:	4854      	ldr	r0, [pc, #336]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016d8e:	f004 fcd1 	bl	801b734 <iprintf>
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016d98:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016d9c:	4619      	mov	r1, r3
 8016d9e:	4857      	ldr	r0, [pc, #348]	@ (8016efc <MTP_DecodeEvent+0x2ac>)
 8016da0:	f004 fcc8 	bl	801b734 <iprintf>
 8016da4:	200a      	movs	r0, #10
 8016da6:	f004 fcd7 	bl	801b758 <putchar>
      break;
 8016daa:	e08f      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_ObjectInfoChanged:
      USBH_DbgLog("EVT: PTP_EC_ObjectInfoChanged in session %u", MTP_Handle->ptp.session_id);
 8016dac:	484c      	ldr	r0, [pc, #304]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016dae:	f004 fcc1 	bl	801b734 <iprintf>
 8016db2:	697b      	ldr	r3, [r7, #20]
 8016db4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016db8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016dbc:	4619      	mov	r1, r3
 8016dbe:	4850      	ldr	r0, [pc, #320]	@ (8016f00 <MTP_DecodeEvent+0x2b0>)
 8016dc0:	f004 fcb8 	bl	801b734 <iprintf>
 8016dc4:	200a      	movs	r0, #10
 8016dc6:	f004 fcc7 	bl	801b758 <putchar>
      break;
 8016dca:	e07f      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_DeviceInfoChanged:
      USBH_DbgLog("EVT: PTP_EC_DeviceInfoChanged in session %u", MTP_Handle->ptp.session_id);
 8016dcc:	4844      	ldr	r0, [pc, #272]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016dce:	f004 fcb1 	bl	801b734 <iprintf>
 8016dd2:	697b      	ldr	r3, [r7, #20]
 8016dd4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016dd8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016ddc:	4619      	mov	r1, r3
 8016dde:	4849      	ldr	r0, [pc, #292]	@ (8016f04 <MTP_DecodeEvent+0x2b4>)
 8016de0:	f004 fca8 	bl	801b734 <iprintf>
 8016de4:	200a      	movs	r0, #10
 8016de6:	f004 fcb7 	bl	801b758 <putchar>
      break;
 8016dea:	e06f      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_RequestObjectTransfer:
      USBH_DbgLog("EVT: PTP_EC_RequestObjectTransfer in session %u", MTP_Handle->ptp.session_id);
 8016dec:	483c      	ldr	r0, [pc, #240]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016dee:	f004 fca1 	bl	801b734 <iprintf>
 8016df2:	697b      	ldr	r3, [r7, #20]
 8016df4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016df8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016dfc:	4619      	mov	r1, r3
 8016dfe:	4842      	ldr	r0, [pc, #264]	@ (8016f08 <MTP_DecodeEvent+0x2b8>)
 8016e00:	f004 fc98 	bl	801b734 <iprintf>
 8016e04:	200a      	movs	r0, #10
 8016e06:	f004 fca7 	bl	801b758 <putchar>
      break;
 8016e0a:	e05f      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_StoreFull:
      USBH_DbgLog("EVT: PTP_EC_StoreFull in session %u", MTP_Handle->ptp.session_id);
 8016e0c:	4834      	ldr	r0, [pc, #208]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016e0e:	f004 fc91 	bl	801b734 <iprintf>
 8016e12:	697b      	ldr	r3, [r7, #20]
 8016e14:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016e18:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016e1c:	4619      	mov	r1, r3
 8016e1e:	483b      	ldr	r0, [pc, #236]	@ (8016f0c <MTP_DecodeEvent+0x2bc>)
 8016e20:	f004 fc88 	bl	801b734 <iprintf>
 8016e24:	200a      	movs	r0, #10
 8016e26:	f004 fc97 	bl	801b758 <putchar>
      break;
 8016e2a:	e04f      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_DeviceReset:
      USBH_DbgLog("EVT: PTP_EC_DeviceReset in session %u", MTP_Handle->ptp.session_id);
 8016e2c:	482c      	ldr	r0, [pc, #176]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016e2e:	f004 fc81 	bl	801b734 <iprintf>
 8016e32:	697b      	ldr	r3, [r7, #20]
 8016e34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016e38:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016e3c:	4619      	mov	r1, r3
 8016e3e:	4834      	ldr	r0, [pc, #208]	@ (8016f10 <MTP_DecodeEvent+0x2c0>)
 8016e40:	f004 fc78 	bl	801b734 <iprintf>
 8016e44:	200a      	movs	r0, #10
 8016e46:	f004 fc87 	bl	801b758 <putchar>
      break;
 8016e4a:	e03f      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_StorageInfoChanged :
      USBH_DbgLog("EVT: PTP_EC_StorageInfoChanged in session %u", MTP_Handle->ptp.session_id);
 8016e4c:	4824      	ldr	r0, [pc, #144]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016e4e:	f004 fc71 	bl	801b734 <iprintf>
 8016e52:	697b      	ldr	r3, [r7, #20]
 8016e54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016e58:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016e5c:	4619      	mov	r1, r3
 8016e5e:	482d      	ldr	r0, [pc, #180]	@ (8016f14 <MTP_DecodeEvent+0x2c4>)
 8016e60:	f004 fc68 	bl	801b734 <iprintf>
 8016e64:	200a      	movs	r0, #10
 8016e66:	f004 fc77 	bl	801b758 <putchar>
      break;
 8016e6a:	e02f      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_CaptureComplete :
      USBH_DbgLog("EVT: PTP_EC_CaptureComplete in session %u", MTP_Handle->ptp.session_id);
 8016e6c:	481c      	ldr	r0, [pc, #112]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016e6e:	f004 fc61 	bl	801b734 <iprintf>
 8016e72:	697b      	ldr	r3, [r7, #20]
 8016e74:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016e78:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016e7c:	4619      	mov	r1, r3
 8016e7e:	4826      	ldr	r0, [pc, #152]	@ (8016f18 <MTP_DecodeEvent+0x2c8>)
 8016e80:	f004 fc58 	bl	801b734 <iprintf>
 8016e84:	200a      	movs	r0, #10
 8016e86:	f004 fc67 	bl	801b758 <putchar>
      break;
 8016e8a:	e01f      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    case PTP_EC_UnreportedStatus :
      USBH_DbgLog("EVT: PTP_EC_UnreportedStatus in session %u", MTP_Handle->ptp.session_id);
 8016e8c:	4814      	ldr	r0, [pc, #80]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016e8e:	f004 fc51 	bl	801b734 <iprintf>
 8016e92:	697b      	ldr	r3, [r7, #20]
 8016e94:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016e98:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016e9c:	4619      	mov	r1, r3
 8016e9e:	481f      	ldr	r0, [pc, #124]	@ (8016f1c <MTP_DecodeEvent+0x2cc>)
 8016ea0:	f004 fc48 	bl	801b734 <iprintf>
 8016ea4:	200a      	movs	r0, #10
 8016ea6:	f004 fc57 	bl	801b758 <putchar>
      break;
 8016eaa:	e00f      	b.n	8016ecc <MTP_DecodeEvent+0x27c>

    default :
      USBH_DbgLog("Received unknown event in session %u", MTP_Handle->ptp.session_id);
 8016eac:	480c      	ldr	r0, [pc, #48]	@ (8016ee0 <MTP_DecodeEvent+0x290>)
 8016eae:	f004 fc41 	bl	801b734 <iprintf>
 8016eb2:	697b      	ldr	r3, [r7, #20]
 8016eb4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8016eb8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8016ebc:	4619      	mov	r1, r3
 8016ebe:	4818      	ldr	r0, [pc, #96]	@ (8016f20 <MTP_DecodeEvent+0x2d0>)
 8016ec0:	f004 fc38 	bl	801b734 <iprintf>
 8016ec4:	200a      	movs	r0, #10
 8016ec6:	f004 fc47 	bl	801b758 <putchar>
      break;
 8016eca:	bf00      	nop
  }

  USBH_MTP_EventsCallback(phost, (uint32_t)code, param1);
 8016ecc:	8a7b      	ldrh	r3, [r7, #18]
 8016ece:	68fa      	ldr	r2, [r7, #12]
 8016ed0:	4619      	mov	r1, r3
 8016ed2:	6878      	ldr	r0, [r7, #4]
 8016ed4:	f000 f826 	bl	8016f24 <USBH_MTP_EventsCallback>
}
 8016ed8:	bf00      	nop
 8016eda:	3718      	adds	r7, #24
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd80      	pop	{r7, pc}
 8016ee0:	0801cc14 	.word	0x0801cc14
 8016ee4:	0801cebc 	.word	0x0801cebc
 8016ee8:	0801cee0 	.word	0x0801cee0
 8016eec:	0801cf0c 	.word	0x0801cf0c
 8016ef0:	0801cf34 	.word	0x0801cf34
 8016ef4:	0801cf5c 	.word	0x0801cf5c
 8016ef8:	0801cf84 	.word	0x0801cf84
 8016efc:	0801cfac 	.word	0x0801cfac
 8016f00:	0801cfd8 	.word	0x0801cfd8
 8016f04:	0801d004 	.word	0x0801d004
 8016f08:	0801d030 	.word	0x0801d030
 8016f0c:	0801d060 	.word	0x0801d060
 8016f10:	0801d084 	.word	0x0801d084
 8016f14:	0801d0ac 	.word	0x0801d0ac
 8016f18:	0801d0dc 	.word	0x0801d0dc
 8016f1c:	0801d108 	.word	0x0801d108
 8016f20:	0801d134 	.word	0x0801d134

08016f24 <USBH_MTP_EventsCallback>:
  * @brief  The function informs that host has received an event
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_MTP_EventsCallback(USBH_HandleTypeDef *phost, uint32_t event, uint32_t param)
{
 8016f24:	b480      	push	{r7}
 8016f26:	b085      	sub	sp, #20
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	60f8      	str	r0, [r7, #12]
 8016f2c:	60b9      	str	r1, [r7, #8]
 8016f2e:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(event);
  UNUSED(param);
}
 8016f30:	bf00      	nop
 8016f32:	3714      	adds	r7, #20
 8016f34:	46bd      	mov	sp, r7
 8016f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3a:	4770      	bx	lr

08016f3c <USBH_PTP_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Init(USBH_HandleTypeDef *phost)
{
 8016f3c:	b480      	push	{r7}
 8016f3e:	b085      	sub	sp, #20
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016f4a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8016f4e:	69db      	ldr	r3, [r3, #28]
 8016f50:	60fb      	str	r3, [r7, #12]

  /* Set state to idle to be ready for operations */
  MTP_Handle->ptp.state = PTP_IDLE;
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016f58:	2200      	movs	r2, #0
 8016f5a:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
  MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016f64:	2201      	movs	r2, #1
 8016f66:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61

  return USBH_OK;
 8016f6a:	2300      	movs	r3, #0
}
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	3714      	adds	r7, #20
 8016f70:	46bd      	mov	sp, r7
 8016f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f76:	4770      	bx	lr

08016f78 <USBH_PTP_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Process(USBH_HandleTypeDef *phost)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b090      	sub	sp, #64	@ 0x40
 8016f7c:	af02      	add	r7, sp, #8
 8016f7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8016f80:	2301      	movs	r3, #1
 8016f82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8016f86:	2300      	movs	r3, #0
 8016f88:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8016f92:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8016f96:	69db      	ldr	r3, [r3, #28]
 8016f98:	633b      	str	r3, [r7, #48]	@ 0x30
  PTP_ContainerTypedef  ptp_container;
  uint32_t  len;

  switch (MTP_Handle->ptp.state)
 8016f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016fa0:	f893 3d60 	ldrb.w	r3, [r3, #3424]	@ 0xd60
 8016fa4:	2b09      	cmp	r3, #9
 8016fa6:	f200 8270 	bhi.w	801748a <USBH_PTP_Process+0x512>
 8016faa:	a201      	add	r2, pc, #4	@ (adr r2, 8016fb0 <USBH_PTP_Process+0x38>)
 8016fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fb0:	0801748b 	.word	0x0801748b
 8016fb4:	08016fd9 	.word	0x08016fd9
 8016fb8:	0801700f 	.word	0x0801700f
 8016fbc:	080170b3 	.word	0x080170b3
 8016fc0:	080170e9 	.word	0x080170e9
 8016fc4:	08017241 	.word	0x08017241
 8016fc8:	08017273 	.word	0x08017273
 8016fcc:	080173ed 	.word	0x080173ed
 8016fd0:	08017415 	.word	0x08017415
 8016fd4:	0801747d 	.word	0x0801747d
      /*Do Nothing */
      break;

    case PTP_OP_REQUEST_STATE:
      (void)USBH_BulkSendData(phost,
                              (uint8_t *)(void *) & (MTP_Handle->ptp.op_container),
 8016fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fda:	f641 5164 	movw	r1, #7524	@ 0x1d64
 8016fde:	4419      	add	r1, r3
                              (uint16_t)MTP_Handle->ptp.op_container.length,
 8016fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016fe6:	f8d3 3d64 	ldr.w	r3, [r3, #3428]	@ 0xd64
      (void)USBH_BulkSendData(phost,
 8016fea:	b29a      	uxth	r2, r3
 8016fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016ff2:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 8016ff6:	2001      	movs	r0, #1
 8016ff8:	9000      	str	r0, [sp, #0]
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f003 f92f 	bl	801a25e <USBH_BulkSendData>
                              MTP_Handle->DataOutPipe,
                              1U);
      MTP_Handle->ptp.state = PTP_OP_REQUEST_WAIT_STATE;
 8017000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017006:	2202      	movs	r2, #2
 8017008:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 801700c:	e246      	b.n	801749c <USBH_PTP_Process+0x524>

    case PTP_OP_REQUEST_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 801700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017010:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017014:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 8017018:	4619      	mov	r1, r3
 801701a:	6878      	ldr	r0, [r7, #4]
 801701c:	f004 f946 	bl	801b2ac <USBH_LL_GetURBState>
 8017020:	4603      	mov	r3, r0
 8017022:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

      if (URB_Status == USBH_URB_DONE)
 8017026:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801702a:	2b01      	cmp	r3, #1
 801702c:	d12a      	bne.n	8017084 <USBH_PTP_Process+0x10c>
      {
        if (MTP_Handle->ptp.flags == PTP_DP_NODATA)
 801702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017030:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017034:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 8017038:	2b00      	cmp	r3, #0
 801703a:	d106      	bne.n	801704a <USBH_PTP_Process+0xd2>
        {
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 801703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801703e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017042:	2207      	movs	r2, #7
 8017044:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
#endif /* (USBH_USE_OS == 1U) */
      }
      else
      {
      }
      break;
 8017048:	e221      	b.n	801748e <USBH_PTP_Process+0x516>
        else  if (MTP_Handle->ptp.flags == PTP_DP_SENDDATA)
 801704a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801704c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017050:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 8017054:	2b01      	cmp	r3, #1
 8017056:	d106      	bne.n	8017066 <USBH_PTP_Process+0xee>
          MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 8017058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801705a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801705e:	2203      	movs	r2, #3
 8017060:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 8017064:	e213      	b.n	801748e <USBH_PTP_Process+0x516>
        else  if (MTP_Handle->ptp.flags == PTP_DP_GETDATA)
 8017066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017068:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801706c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 8017070:	2b02      	cmp	r3, #2
 8017072:	f040 820c 	bne.w	801748e <USBH_PTP_Process+0x516>
          MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 8017076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801707c:	2205      	movs	r2, #5
 801707e:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 8017082:	e204      	b.n	801748e <USBH_PTP_Process+0x516>
      else if (URB_Status == USBH_URB_NOTREADY)
 8017084:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8017088:	2b02      	cmp	r3, #2
 801708a:	d106      	bne.n	801709a <USBH_PTP_Process+0x122>
        MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 801708c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801708e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017092:	2201      	movs	r2, #1
 8017094:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 8017098:	e1f9      	b.n	801748e <USBH_PTP_Process+0x516>
      else if (URB_Status == USBH_URB_STALL)
 801709a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801709e:	2b05      	cmp	r3, #5
 80170a0:	f040 81f5 	bne.w	801748e <USBH_PTP_Process+0x516>
        MTP_Handle->ptp.state  = PTP_ERROR;
 80170a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80170aa:	2209      	movs	r2, #9
 80170ac:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 80170b0:	e1ed      	b.n	801748e <USBH_PTP_Process+0x516>

    case PTP_DATA_OUT_PHASE_STATE:

      (void)USBH_BulkSendData(phost,
 80170b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170b4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80170b8:	f8d3 11b0 	ldr.w	r1, [r3, #432]	@ 0x1b0
 80170bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80170c2:	f8b3 2d32 	ldrh.w	r2, [r3, #3378]	@ 0xd32
 80170c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80170cc:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 80170d0:	2001      	movs	r0, #1
 80170d2:	9000      	str	r0, [sp, #0]
 80170d4:	6878      	ldr	r0, [r7, #4]
 80170d6:	f003 f8c2 	bl	801a25e <USBH_BulkSendData>
                              MTP_Handle->ptp.data_ptr,
                              MTP_Handle->DataOutEpSize,
                              MTP_Handle->DataOutPipe,
                              1U);

      MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_WAIT_STATE;
 80170da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80170e0:	2204      	movs	r2, #4
 80170e2:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 80170e6:	e1d9      	b.n	801749c <USBH_PTP_Process+0x524>

    case PTP_DATA_OUT_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 80170e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80170ee:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 80170f2:	4619      	mov	r1, r3
 80170f4:	6878      	ldr	r0, [r7, #4]
 80170f6:	f004 f8d9 	bl	801b2ac <USBH_LL_GetURBState>
 80170fa:	4603      	mov	r3, r0
 80170fc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

      if (URB_Status == USBH_URB_DONE)
 8017100:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8017104:	2b01      	cmp	r3, #1
 8017106:	f040 8084 	bne.w	8017212 <USBH_PTP_Process+0x29a>
      {
        /* Adjust Data pointer and data length */
        if (MTP_Handle->ptp.data_length > MTP_Handle->DataOutEpSize)
 801710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801710c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017110:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8017114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017116:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801711a:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 801711e:	4293      	cmp	r3, r2
 8017120:	d94d      	bls.n	80171be <USBH_PTP_Process+0x246>
        {
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 8017122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017124:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017128:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 801712c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801712e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017132:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 8017136:	4413      	add	r3, r2
 8017138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801713a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801713e:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
          MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize;
 8017142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017144:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017148:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 801714c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801714e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017152:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 8017156:	1a9b      	subs	r3, r3, r2
 8017158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801715a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801715e:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 8017162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017164:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017168:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 801716c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801716e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017172:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 8017176:	4413      	add	r3, r2
 8017178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801717a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801717e:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 8017182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017184:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017188:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 801718c:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8017190:	d31c      	bcc.n	80171cc <USBH_PTP_Process+0x254>
          {
            PTP_BufferFullCallback(phost);
 8017192:	6878      	ldr	r0, [r7, #4]
 8017194:	f000 fa32 	bl	80175fc <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 8017198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801719a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801719e:	461a      	mov	r2, r3
 80171a0:	2300      	movs	r3, #0
 80171a2:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
            MTP_Handle->ptp.iteration++;
 80171a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80171ac:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 80171b0:	3301      	adds	r3, #1
 80171b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80171b4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80171b8:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
 80171bc:	e006      	b.n	80171cc <USBH_PTP_Process+0x254>
          }
        }
        else
        {
          MTP_Handle->ptp.data_length = 0U;
 80171be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80171c4:	461a      	mov	r2, r3
 80171c6:	2300      	movs	r3, #0
 80171c8:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
        }

        /* More Data To be Sent */
        if (MTP_Handle->ptp.data_length > 0U)
 80171cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80171d2:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d014      	beq.n	8017204 <USBH_PTP_Process+0x28c>
        {
          (void)USBH_BulkSendData(phost,
 80171da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80171e0:	f8d3 11b0 	ldr.w	r1, [r3, #432]	@ 0x1b0
 80171e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80171ea:	f8b3 2d32 	ldrh.w	r2, [r3, #3378]	@ 0xd32
 80171ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80171f4:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 80171f8:	2001      	movs	r0, #1
 80171fa:	9000      	str	r0, [sp, #0]
 80171fc:	6878      	ldr	r0, [r7, #4]
 80171fe:	f003 f82e 	bl	801a25e <USBH_BulkSendData>
      }
      else
      {
        /* .. */
      }
      break;
 8017202:	e146      	b.n	8017492 <USBH_PTP_Process+0x51a>
          MTP_Handle->ptp.state  = PTP_RESPONSE_STATE;
 8017204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801720a:	2207      	movs	r2, #7
 801720c:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 8017210:	e13f      	b.n	8017492 <USBH_PTP_Process+0x51a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8017212:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8017216:	2b02      	cmp	r3, #2
 8017218:	d106      	bne.n	8017228 <USBH_PTP_Process+0x2b0>
        MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 801721a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801721c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017220:	2203      	movs	r2, #3
 8017222:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 8017226:	e134      	b.n	8017492 <USBH_PTP_Process+0x51a>
      else if (URB_Status == USBH_URB_STALL)
 8017228:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801722c:	2b05      	cmp	r3, #5
 801722e:	f040 8130 	bne.w	8017492 <USBH_PTP_Process+0x51a>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8017232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017238:	2209      	movs	r2, #9
 801723a:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 801723e:	e128      	b.n	8017492 <USBH_PTP_Process+0x51a>

    case PTP_DATA_IN_PHASE_STATE:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost,
 8017240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017242:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017246:	f8d3 11b0 	ldr.w	r1, [r3, #432]	@ 0x1b0
 801724a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801724c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017250:	f8b3 2d34 	ldrh.w	r2, [r3, #3380]	@ 0xd34
 8017254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801725a:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 801725e:	6878      	ldr	r0, [r7, #4]
 8017260:	f003 f824 	bl	801a2ac <USBH_BulkReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      MTP_Handle->ptp.state  = PTP_DATA_IN_PHASE_WAIT_STATE;
 8017264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801726a:	2206      	movs	r2, #6
 801726c:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 8017270:	e114      	b.n	801749c <USBH_PTP_Process+0x524>

    case PTP_DATA_IN_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 8017272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017278:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 801727c:	4619      	mov	r1, r3
 801727e:	6878      	ldr	r0, [r7, #4]
 8017280:	f004 f814 	bl	801b2ac <USBH_LL_GetURBState>
 8017284:	4603      	mov	r3, r0
 8017286:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

      if (URB_Status == USBH_URB_DONE)
 801728a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801728e:	2b01      	cmp	r3, #1
 8017290:	f040 80a1 	bne.w	80173d6 <USBH_PTP_Process+0x45e>
      {
        len = USBH_LL_GetLastXferSize(phost, MTP_Handle->DataInPipe);
 8017294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801729a:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 801729e:	4619      	mov	r1, r3
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	f003 ff69 	bl	801b178 <USBH_LL_GetLastXferSize>
 80172a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if (MTP_Handle->ptp.data_packet_counter++ == 0U)
 80172a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80172ae:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 80172b2:	1c5a      	adds	r2, r3, #1
 80172b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80172b6:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80172ba:	f8c1 21c0 	str.w	r2, [r1, #448]	@ 0x1c0
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d111      	bne.n	80172e6 <USBH_PTP_Process+0x36e>
        {
          /* This is the first packet; so retrieve exact data length from payload */
          MTP_Handle->ptp.data_length = *(uint32_t *)(void *)(MTP_Handle->ptp.data_ptr);
 80172c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80172c8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80172d0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80172d4:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.iteration = 0U;
 80172d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80172de:	461a      	mov	r2, r3
 80172e0:	2300      	movs	r3, #0
 80172e2:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
        }

        if ((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0U))
 80172e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80172ec:	f8b3 3d34 	ldrh.w	r3, [r3, #3380]	@ 0xd34
 80172f0:	461a      	mov	r2, r3
 80172f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172f4:	4293      	cmp	r3, r2
 80172f6:	d35b      	bcc.n	80173b0 <USBH_PTP_Process+0x438>
 80172f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80172fe:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8017302:	2b00      	cmp	r3, #0
 8017304:	d054      	beq.n	80173b0 <USBH_PTP_Process+0x438>
        {
          MTP_Handle->ptp.data_ptr += len;
 8017306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017308:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801730c:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 8017310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017312:	4413      	add	r3, r2
 8017314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017316:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801731a:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
          MTP_Handle->ptp.data_length -= len;
 801731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017320:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017324:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 8017328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801732a:	1ad3      	subs	r3, r2, r3
 801732c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801732e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8017332:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.data_packet += len;
 8017336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017338:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801733c:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 8017340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017342:	4413      	add	r3, r2
 8017344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017346:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801734a:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 801734e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017350:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017354:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8017358:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801735c:	d314      	bcc.n	8017388 <USBH_PTP_Process+0x410>
          {
            PTP_BufferFullCallback(phost);
 801735e:	6878      	ldr	r0, [r7, #4]
 8017360:	f000 f94c 	bl	80175fc <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 8017364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017366:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801736a:	461a      	mov	r2, r3
 801736c:	2300      	movs	r3, #0
 801736e:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
            MTP_Handle->ptp.iteration++;
 8017372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017374:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017378:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 801737c:	3301      	adds	r3, #1
 801737e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017380:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8017384:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
          }

          /* Continue receiving data */
          (void)USBH_BulkReceiveData(phost,
 8017388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801738a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801738e:	f8d3 11b0 	ldr.w	r1, [r3, #432]	@ 0x1b0
 8017392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017398:	f8b3 2d34 	ldrh.w	r2, [r3, #3380]	@ 0xd34
 801739c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801739e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80173a2:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 80173a6:	6878      	ldr	r0, [r7, #4]
 80173a8:	f002 ff80 	bl	801a2ac <USBH_BulkReceiveData>
 80173ac:	bf00      	nop
      }
      else
      {
        /* .. */
      }
      break;
 80173ae:	e072      	b.n	8017496 <USBH_PTP_Process+0x51e>
          MTP_Handle->ptp.data_length -= len;
 80173b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80173b6:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 80173ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173bc:	1ad3      	subs	r3, r2, r3
 80173be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80173c0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80173c4:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 80173c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80173ce:	2207      	movs	r2, #7
 80173d0:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 80173d4:	e05f      	b.n	8017496 <USBH_PTP_Process+0x51e>
      else if (URB_Status == USBH_URB_STALL)
 80173d6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80173da:	2b05      	cmp	r3, #5
 80173dc:	d15b      	bne.n	8017496 <USBH_PTP_Process+0x51e>
        MTP_Handle->ptp.state  = PTP_ERROR;
 80173de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80173e4:	2209      	movs	r2, #9
 80173e6:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 80173ea:	e054      	b.n	8017496 <USBH_PTP_Process+0x51e>

    case PTP_RESPONSE_STATE:
      (void)USBH_BulkReceiveData(phost,
                                 (uint8_t *)(void *) & (MTP_Handle->ptp.resp_container),
 80173ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173ee:	f242 1184 	movw	r1, #8580	@ 0x2184
 80173f2:	4419      	add	r1, r3
      (void)USBH_BulkReceiveData(phost,
 80173f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80173fa:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 80173fe:	223f      	movs	r2, #63	@ 0x3f
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f002 ff53 	bl	801a2ac <USBH_BulkReceiveData>
                                 PTP_USB_BULK_REQ_RESP_MAX_LEN,
                                 MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state = PTP_RESPONSE_WAIT_STATE;
 8017406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801740c:	2208      	movs	r2, #8
 801740e:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */
      break;
 8017412:	e043      	b.n	801749c <USBH_PTP_Process+0x524>

    case PTP_RESPONSE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 8017414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801741a:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 801741e:	4619      	mov	r1, r3
 8017420:	6878      	ldr	r0, [r7, #4]
 8017422:	f003 ff43 	bl	801b2ac <USBH_LL_GetURBState>
 8017426:	4603      	mov	r3, r0
 8017428:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

      if (URB_Status == USBH_URB_DONE)
 801742c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8017430:	2b01      	cmp	r3, #1
 8017432:	d118      	bne.n	8017466 <USBH_PTP_Process+0x4ee>
      {
        (void)USBH_PTP_GetResponse(phost, &ptp_container);
 8017434:	f107 0308 	add.w	r3, r7, #8
 8017438:	4619      	mov	r1, r3
 801743a:	6878      	ldr	r0, [r7, #4]
 801743c:	f000 f891 	bl	8017562 <USBH_PTP_GetResponse>

        if (ptp_container.Code == PTP_RC_OK)
 8017440:	893b      	ldrh	r3, [r7, #8]
 8017442:	f242 0201 	movw	r2, #8193	@ 0x2001
 8017446:	4293      	cmp	r3, r2
 8017448:	d103      	bne.n	8017452 <USBH_PTP_Process+0x4da>
        {
          status = USBH_OK;
 801744a:	2300      	movs	r3, #0
 801744c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8017450:	e002      	b.n	8017458 <USBH_PTP_Process+0x4e0>
        }
        else
        {
          status = USBH_FAIL;
 8017452:	2302      	movs	r3, #2
 8017454:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8017458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801745a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801745e:	2201      	movs	r2, #1
 8017460:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      }
      else
      {
        /* .. */
      }
      break;
 8017464:	e019      	b.n	801749a <USBH_PTP_Process+0x522>
      else if (URB_Status == USBH_URB_STALL)
 8017466:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801746a:	2b05      	cmp	r3, #5
 801746c:	d115      	bne.n	801749a <USBH_PTP_Process+0x522>
        MTP_Handle->ptp.state  = PTP_ERROR;
 801746e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017474:	2209      	movs	r2, #9
 8017476:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 801747a:	e00e      	b.n	801749a <USBH_PTP_Process+0x522>

    case PTP_ERROR:
      MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 801747c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801747e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017482:	2201      	movs	r2, #1
 8017484:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      break;
 8017488:	e008      	b.n	801749c <USBH_PTP_Process+0x524>

    default:
      break;
 801748a:	bf00      	nop
 801748c:	e006      	b.n	801749c <USBH_PTP_Process+0x524>
      break;
 801748e:	bf00      	nop
 8017490:	e004      	b.n	801749c <USBH_PTP_Process+0x524>
      break;
 8017492:	bf00      	nop
 8017494:	e002      	b.n	801749c <USBH_PTP_Process+0x524>
      break;
 8017496:	bf00      	nop
 8017498:	e000      	b.n	801749c <USBH_PTP_Process+0x524>
      break;
 801749a:	bf00      	nop
  }
  return status;
 801749c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80174a0:	4618      	mov	r0, r3
 80174a2:	3738      	adds	r7, #56	@ 0x38
 80174a4:	46bd      	mov	sp, r7
 80174a6:	bd80      	pop	{r7, pc}

080174a8 <USBH_PTP_SendRequest>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_SendRequest(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *req)
{
 80174a8:	b580      	push	{r7, lr}
 80174aa:	b084      	sub	sp, #16
 80174ac:	af00      	add	r7, sp, #0
 80174ae:	6078      	str	r0, [r7, #4]
 80174b0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80174b2:	2300      	movs	r3, #0
 80174b4:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80174bc:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80174c0:	69db      	ldr	r3, [r3, #28]
 80174c2:	60bb      	str	r3, [r7, #8]

  /* Clear PTP Data container*/
  (void)USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 80174c4:	68ba      	ldr	r2, [r7, #8]
 80174c6:	f641 5364 	movw	r3, #7524	@ 0x1d64
 80174ca:	4413      	add	r3, r2
 80174cc:	2220      	movs	r2, #32
 80174ce:	2100      	movs	r1, #0
 80174d0:	4618      	mov	r0, r3
 80174d2:	f004 fa7f 	bl	801b9d4 <memset>

  /* build appropriate USB container */
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN - ((sizeof(uint32_t) * (5U - (uint32_t)req->Nparam)));
 80174d6:	683b      	ldr	r3, [r7, #0]
 80174d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80174dc:	3303      	adds	r3, #3
 80174de:	009b      	lsls	r3, r3, #2
 80174e0:	68ba      	ldr	r2, [r7, #8]
 80174e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80174e6:	f8c2 3d64 	str.w	r3, [r2, #3428]	@ 0xd64
  MTP_Handle->ptp.op_container.type = PTP_USB_CONTAINER_COMMAND;
 80174ea:	68bb      	ldr	r3, [r7, #8]
 80174ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80174f0:	2201      	movs	r2, #1
 80174f2:	f8a3 2d68 	strh.w	r2, [r3, #3432]	@ 0xd68
  MTP_Handle->ptp.op_container.code = req->Code;
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	881a      	ldrh	r2, [r3, #0]
 80174fa:	68bb      	ldr	r3, [r7, #8]
 80174fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017500:	f8a3 2d6a 	strh.w	r2, [r3, #3434]	@ 0xd6a
  MTP_Handle->ptp.op_container.trans_id = req->Transaction_ID;
 8017504:	683b      	ldr	r3, [r7, #0]
 8017506:	689b      	ldr	r3, [r3, #8]
 8017508:	68ba      	ldr	r2, [r7, #8]
 801750a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801750e:	f8c2 3d6c 	str.w	r3, [r2, #3436]	@ 0xd6c
  MTP_Handle->ptp.op_container.param1 = req->Param1;
 8017512:	683b      	ldr	r3, [r7, #0]
 8017514:	68db      	ldr	r3, [r3, #12]
 8017516:	68ba      	ldr	r2, [r7, #8]
 8017518:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801751c:	f8c2 3d70 	str.w	r3, [r2, #3440]	@ 0xd70
  MTP_Handle->ptp.op_container.param2 = req->Param2;
 8017520:	683b      	ldr	r3, [r7, #0]
 8017522:	691b      	ldr	r3, [r3, #16]
 8017524:	68ba      	ldr	r2, [r7, #8]
 8017526:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801752a:	f8c2 3d74 	str.w	r3, [r2, #3444]	@ 0xd74
  MTP_Handle->ptp.op_container.param3 = req->Param3;
 801752e:	683b      	ldr	r3, [r7, #0]
 8017530:	695b      	ldr	r3, [r3, #20]
 8017532:	68ba      	ldr	r2, [r7, #8]
 8017534:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017538:	f8c2 3d78 	str.w	r3, [r2, #3448]	@ 0xd78
  MTP_Handle->ptp.op_container.param4 = req->Param4;
 801753c:	683b      	ldr	r3, [r7, #0]
 801753e:	699b      	ldr	r3, [r3, #24]
 8017540:	68ba      	ldr	r2, [r7, #8]
 8017542:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017546:	f8c2 3d7c 	str.w	r3, [r2, #3452]	@ 0xd7c
  MTP_Handle->ptp.op_container.param5 = req->Param5;
 801754a:	683b      	ldr	r3, [r7, #0]
 801754c:	69db      	ldr	r3, [r3, #28]
 801754e:	68ba      	ldr	r2, [r7, #8]
 8017550:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017554:	f8c2 3d80 	str.w	r3, [r2, #3456]	@ 0xd80

  return status;
 8017558:	7bfb      	ldrb	r3, [r7, #15]
}
 801755a:	4618      	mov	r0, r3
 801755c:	3710      	adds	r7, #16
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}

08017562 <USBH_PTP_GetResponse>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetResponse(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *resp)
{
 8017562:	b480      	push	{r7}
 8017564:	b085      	sub	sp, #20
 8017566:	af00      	add	r7, sp, #0
 8017568:	6078      	str	r0, [r7, #4]
 801756a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801756c:	2300      	movs	r3, #0
 801756e:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef  *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8017576:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801757a:	69db      	ldr	r3, [r3, #28]
 801757c:	60bb      	str	r3, [r7, #8]

  /* build an appropriate PTPContainer */
  resp->Code = MTP_Handle->ptp.resp_container.code;
 801757e:	68bb      	ldr	r3, [r7, #8]
 8017580:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017584:	f8b3 218a 	ldrh.w	r2, [r3, #394]	@ 0x18a
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	801a      	strh	r2, [r3, #0]
  resp->SessionID = MTP_Handle->ptp.session_id;
 801758c:	68bb      	ldr	r3, [r7, #8]
 801758e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017592:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	605a      	str	r2, [r3, #4]
  resp->Transaction_ID = MTP_Handle->ptp.resp_container.trans_id;
 801759a:	68bb      	ldr	r3, [r7, #8]
 801759c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80175a0:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 80175a4:	683b      	ldr	r3, [r7, #0]
 80175a6:	609a      	str	r2, [r3, #8]
  resp->Param1 = MTP_Handle->ptp.resp_container.param1;
 80175a8:	68bb      	ldr	r3, [r7, #8]
 80175aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80175ae:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 80175b2:	683b      	ldr	r3, [r7, #0]
 80175b4:	60da      	str	r2, [r3, #12]
  resp->Param2 = MTP_Handle->ptp.resp_container.param2;
 80175b6:	68bb      	ldr	r3, [r7, #8]
 80175b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80175bc:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 80175c0:	683b      	ldr	r3, [r7, #0]
 80175c2:	611a      	str	r2, [r3, #16]
  resp->Param3 = MTP_Handle->ptp.resp_container.param3;
 80175c4:	68bb      	ldr	r3, [r7, #8]
 80175c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80175ca:	f8d3 2198 	ldr.w	r2, [r3, #408]	@ 0x198
 80175ce:	683b      	ldr	r3, [r7, #0]
 80175d0:	615a      	str	r2, [r3, #20]
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 80175d2:	68bb      	ldr	r3, [r7, #8]
 80175d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80175d8:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 80175dc:	683b      	ldr	r3, [r7, #0]
 80175de:	619a      	str	r2, [r3, #24]
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 80175e0:	68bb      	ldr	r3, [r7, #8]
 80175e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80175e6:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
 80175ea:	683b      	ldr	r3, [r7, #0]
 80175ec:	61da      	str	r2, [r3, #28]

  return status;
 80175ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80175f0:	4618      	mov	r0, r3
 80175f2:	3714      	adds	r7, #20
 80175f4:	46bd      	mov	sp, r7
 80175f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fa:	4770      	bx	lr

080175fc <PTP_BufferFullCallback>:
  * @brief  The function informs user that data buffer is full
  *  @param  phost: host handle
  * @retval None
  */
static void PTP_BufferFullCallback(USBH_HandleTypeDef *phost)
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b084      	sub	sp, #16
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801760a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801760e:	69db      	ldr	r3, [r3, #28]
 8017610:	60fb      	str	r3, [r7, #12]

  switch (MTP_Handle->ptp.data_container.code)
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017618:	f8b3 3d8a 	ldrh.w	r3, [r3, #3466]	@ 0xd8a
 801761c:	461a      	mov	r2, r3
 801761e:	f46f 5380 	mvn.w	r3, #4096	@ 0x1000
 8017622:	4413      	add	r3, r2
 8017624:	2b1a      	cmp	r3, #26
 8017626:	d875      	bhi.n	8017714 <PTP_BufferFullCallback+0x118>
 8017628:	a201      	add	r2, pc, #4	@ (adr r2, 8017630 <PTP_BufferFullCallback+0x34>)
 801762a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801762e:	bf00      	nop
 8017630:	0801769d 	.word	0x0801769d
 8017634:	08017715 	.word	0x08017715
 8017638:	08017715 	.word	0x08017715
 801763c:	08017715 	.word	0x08017715
 8017640:	08017715 	.word	0x08017715
 8017644:	08017715 	.word	0x08017715
 8017648:	08017715 	.word	0x08017715
 801764c:	08017715 	.word	0x08017715
 8017650:	080176a9 	.word	0x080176a9
 8017654:	08017715 	.word	0x08017715
 8017658:	08017715 	.word	0x08017715
 801765c:	08017715 	.word	0x08017715
 8017660:	080176ed 	.word	0x080176ed
 8017664:	08017715 	.word	0x08017715
 8017668:	08017715 	.word	0x08017715
 801766c:	08017715 	.word	0x08017715
 8017670:	08017715 	.word	0x08017715
 8017674:	08017715 	.word	0x08017715
 8017678:	08017715 	.word	0x08017715
 801767c:	08017715 	.word	0x08017715
 8017680:	08017715 	.word	0x08017715
 8017684:	08017715 	.word	0x08017715
 8017688:	08017715 	.word	0x08017715
 801768c:	08017715 	.word	0x08017715
 8017690:	08017715 	.word	0x08017715
 8017694:	08017715 	.word	0x08017715
 8017698:	080176a9 	.word	0x080176a9
  {
    case PTP_OC_GetDeviceInfo:
      PTP_DecodeDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	4619      	mov	r1, r3
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f000 f841 	bl	8017728 <PTP_DecodeDeviceInfo>
      break;
 80176a6:	e03a      	b.n	801771e <PTP_BufferFullCallback+0x122>

    case PTP_OC_GetPartialObject:
    case PTP_OC_GetObject:

      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80176ae:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d130      	bne.n	8017718 <PTP_BufferFullCallback+0x11c>
      {
        /* copy it to object */
        (void)USBH_memcpy(MTP_Handle->ptp.object_ptr, MTP_Handle->ptp.data_container.payload.data,
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80176bc:	f8d3 01c4 	ldr.w	r0, [r3, #452]	@ 0x1c4
 80176c0:	68fa      	ldr	r2, [r7, #12]
 80176c2:	f641 5390 	movw	r3, #7568	@ 0x1d90
 80176c6:	4413      	add	r3, r2
 80176c8:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 80176cc:	4619      	mov	r1, r3
 80176ce:	f004 fa0c 	bl	801baea <memcpy>
                          PTP_USB_BULK_PAYLOAD_LEN_READ);

        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80176d8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80176dc:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 80176e0:	68fa      	ldr	r2, [r7, #12]
 80176e2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80176e6:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      }
      break;
 80176ea:	e015      	b.n	8017718 <PTP_BufferFullCallback+0x11c>

    case PTP_OC_SendObject:
      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80176f2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d110      	bne.n	801771c <PTP_BufferFullCallback+0x120>
      {
        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017700:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8017704:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 8017708:	68fa      	ldr	r2, [r7, #12]
 801770a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801770e:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      }
      break;
 8017712:	e003      	b.n	801771c <PTP_BufferFullCallback+0x120>

    default:
      break;
 8017714:	bf00      	nop
 8017716:	e002      	b.n	801771e <PTP_BufferFullCallback+0x122>
      break;
 8017718:	bf00      	nop
 801771a:	e000      	b.n	801771e <PTP_BufferFullCallback+0x122>
      break;
 801771c:	bf00      	nop


  }
}
 801771e:	bf00      	nop
 8017720:	3710      	adds	r7, #16
 8017722:	46bd      	mov	sp, r7
 8017724:	bd80      	pop	{r7, pc}
 8017726:	bf00      	nop

08017728 <PTP_DecodeDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval None
  */
static void PTP_DecodeDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b086      	sub	sp, #24
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
 8017730:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8017738:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801773c:	69db      	ldr	r3, [r3, #28]
 801773e:	617b      	str	r3, [r7, #20]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 8017740:	697a      	ldr	r2, [r7, #20]
 8017742:	f641 5390 	movw	r3, #7568	@ 0x1d90
 8017746:	4413      	add	r3, r2
 8017748:	613b      	str	r3, [r7, #16]
  uint32_t totallen;
  uint16_t len;

  /* Max device info is PTP_USB_BULK_HS_MAX_PACKET_LEN_READ */
  USBH_DbgLog(" MTP device info size exceeds internal buffer size.\
 801774a:	4887      	ldr	r0, [pc, #540]	@ (8017968 <PTP_DecodeDeviceInfo+0x240>)
 801774c:	f003 fff2 	bl	801b734 <iprintf>
 8017750:	4886      	ldr	r0, [pc, #536]	@ (801796c <PTP_DecodeDeviceInfo+0x244>)
 8017752:	f003 ffef 	bl	801b734 <iprintf>
 8017756:	200a      	movs	r0, #10
 8017758:	f003 fffe 	bl	801b758 <putchar>
               only available data are decoded.");

  if (MTP_Handle->ptp.iteration == 0U)
 801775c:	697b      	ldr	r3, [r7, #20]
 801775e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017762:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8017766:	2b00      	cmp	r3, #0
 8017768:	f040 80f9 	bne.w	801795e <PTP_DecodeDeviceInfo+0x236>
  {
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 801776c:	693b      	ldr	r3, [r7, #16]
 801776e:	781b      	ldrb	r3, [r3, #0]
 8017770:	461a      	mov	r2, r3
 8017772:	693b      	ldr	r3, [r7, #16]
 8017774:	3301      	adds	r3, #1
 8017776:	781b      	ldrb	r3, [r3, #0]
 8017778:	021b      	lsls	r3, r3, #8
 801777a:	b29b      	uxth	r3, r3
 801777c:	4313      	orrs	r3, r2
 801777e:	b29a      	uxth	r2, r3
 8017780:	683b      	ldr	r3, [r7, #0]
 8017782:	801a      	strh	r2, [r3, #0]
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 8017784:	693b      	ldr	r3, [r7, #16]
 8017786:	3302      	adds	r3, #2
 8017788:	781b      	ldrb	r3, [r3, #0]
 801778a:	461a      	mov	r2, r3
 801778c:	693b      	ldr	r3, [r7, #16]
 801778e:	3303      	adds	r3, #3
 8017790:	781b      	ldrb	r3, [r3, #0]
 8017792:	021b      	lsls	r3, r3, #8
 8017794:	431a      	orrs	r2, r3
 8017796:	693b      	ldr	r3, [r7, #16]
 8017798:	3304      	adds	r3, #4
 801779a:	781b      	ldrb	r3, [r3, #0]
 801779c:	041b      	lsls	r3, r3, #16
 801779e:	431a      	orrs	r2, r3
 80177a0:	693b      	ldr	r3, [r7, #16]
 80177a2:	3305      	adds	r3, #5
 80177a4:	781b      	ldrb	r3, [r3, #0]
 80177a6:	061b      	lsls	r3, r3, #24
 80177a8:	431a      	orrs	r2, r3
 80177aa:	683b      	ldr	r3, [r7, #0]
 80177ac:	605a      	str	r2, [r3, #4]
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 80177ae:	693b      	ldr	r3, [r7, #16]
 80177b0:	3306      	adds	r3, #6
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	461a      	mov	r2, r3
 80177b6:	693b      	ldr	r3, [r7, #16]
 80177b8:	3307      	adds	r3, #7
 80177ba:	781b      	ldrb	r3, [r3, #0]
 80177bc:	021b      	lsls	r3, r3, #8
 80177be:	b29b      	uxth	r3, r3
 80177c0:	4313      	orrs	r3, r2
 80177c2:	b29a      	uxth	r2, r3
 80177c4:	683b      	ldr	r3, [r7, #0]
 80177c6:	811a      	strh	r2, [r3, #8]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 80177c8:	683b      	ldr	r3, [r7, #0]
 80177ca:	f103 000a 	add.w	r0, r3, #10
 80177ce:	693b      	ldr	r3, [r7, #16]
 80177d0:	3308      	adds	r3, #8
 80177d2:	f107 020a 	add.w	r2, r7, #10
 80177d6:	4619      	mov	r1, r3
 80177d8:	f000 fb03 	bl	8017de2 <PTP_GetString>

    totallen = (uint32_t)(len * 2U) + 1U;
 80177dc:	897b      	ldrh	r3, [r7, #10]
 80177de:	005b      	lsls	r3, r3, #1
 80177e0:	3301      	adds	r3, #1
 80177e2:	60fb      	str	r3, [r7, #12]
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode + totallen]);
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	3308      	adds	r3, #8
 80177e8:	693a      	ldr	r2, [r7, #16]
 80177ea:	4413      	add	r3, r2
 80177ec:	781b      	ldrb	r3, [r3, #0]
 80177ee:	4619      	mov	r1, r3
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	3309      	adds	r3, #9
 80177f4:	693a      	ldr	r2, [r7, #16]
 80177f6:	4413      	add	r3, r2
 80177f8:	781b      	ldrb	r3, [r3, #0]
 80177fa:	021b      	lsls	r3, r3, #8
 80177fc:	b29b      	uxth	r3, r3
 80177fe:	430b      	orrs	r3, r1
 8017800:	b29a      	uxth	r2, r3
 8017802:	683b      	ldr	r3, [r7, #0]
 8017804:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	330a      	adds	r3, #10
 8017812:	461a      	mov	r2, r3
 8017814:	6939      	ldr	r1, [r7, #16]
 8017816:	f000 fb12 	bl	8017e3e <PTP_GetArray16>
 801781a:	4602      	mov	r2, r0
 801781c:	683b      	ldr	r3, [r7, #0]
 801781e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                                                       data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->OperationsSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 8017822:	683b      	ldr	r3, [r7, #0]
 8017824:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8017828:	005a      	lsls	r2, r3, #1
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	4413      	add	r3, r2
 801782e:	3304      	adds	r3, #4
 8017830:	60fb      	str	r3, [r7, #12]
    dev_info->EventsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->EventsSupported,
 8017832:	683b      	ldr	r3, [r7, #0]
 8017834:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	330a      	adds	r3, #10
 801783c:	461a      	mov	r2, r3
 801783e:	6939      	ldr	r1, [r7, #16]
 8017840:	f000 fafd 	bl	8017e3e <PTP_GetArray16>
 8017844:	4602      	mov	r2, r0
 8017846:	683b      	ldr	r3, [r7, #0]
 8017848:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
                                                   data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->EventsSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 801784c:	683b      	ldr	r3, [r7, #0]
 801784e:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 8017852:	005a      	lsls	r2, r3, #1
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	4413      	add	r3, r2
 8017858:	3304      	adds	r3, #4
 801785a:	60fb      	str	r3, [r7, #12]
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->DevicePropertiesSupported,
 801785c:	683b      	ldr	r3, [r7, #0]
 801785e:	f503 702a 	add.w	r0, r3, #680	@ 0x2a8
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	330a      	adds	r3, #10
 8017866:	461a      	mov	r2, r3
 8017868:	6939      	ldr	r1, [r7, #16]
 801786a:	f000 fae8 	bl	8017e3e <PTP_GetArray16>
 801786e:	4602      	mov	r2, r0
 8017870:	683b      	ldr	r3, [r7, #0]
 8017872:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
                                                             data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->DevicePropertiesSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 8017876:	683b      	ldr	r3, [r7, #0]
 8017878:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801787c:	005a      	lsls	r2, r3, #1
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	4413      	add	r3, r2
 8017882:	3304      	adds	r3, #4
 8017884:	60fb      	str	r3, [r7, #12]

    dev_info->CaptureFormats_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->CaptureFormats,
 8017886:	683b      	ldr	r3, [r7, #0]
 8017888:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	330a      	adds	r3, #10
 8017890:	461a      	mov	r2, r3
 8017892:	6939      	ldr	r1, [r7, #16]
 8017894:	f000 fad3 	bl	8017e3e <PTP_GetArray16>
 8017898:	4602      	mov	r2, r0
 801789a:	683b      	ldr	r3, [r7, #0]
 801789c:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370
                                                  data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->CaptureFormats_len * sizeof(uint16_t)) + sizeof(uint32_t);
 80178a0:	683b      	ldr	r3, [r7, #0]
 80178a2:	f8d3 3370 	ldr.w	r3, [r3, #880]	@ 0x370
 80178a6:	005a      	lsls	r2, r3, #1
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	4413      	add	r3, r2
 80178ac:	3304      	adds	r3, #4
 80178ae:	60fb      	str	r3, [r7, #12]
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 80178b0:	683b      	ldr	r3, [r7, #0]
 80178b2:	f503 6088 	add.w	r0, r3, #1088	@ 0x440
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	330a      	adds	r3, #10
 80178ba:	461a      	mov	r2, r3
 80178bc:	6939      	ldr	r1, [r7, #16]
 80178be:	f000 fabe 	bl	8017e3e <PTP_GetArray16>
 80178c2:	4602      	mov	r2, r0
 80178c4:	683b      	ldr	r3, [r7, #0]
 80178c6:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
                                                 data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->ImageFormats_len * sizeof(uint16_t)) + sizeof(uint32_t);
 80178ca:	683b      	ldr	r3, [r7, #0]
 80178cc:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
 80178d0:	005a      	lsls	r2, r3, #1
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	4413      	add	r3, r2
 80178d6:	3304      	adds	r3, #4
 80178d8:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 80178da:	683b      	ldr	r3, [r7, #0]
 80178dc:	f503 60a1 	add.w	r0, r3, #1288	@ 0x508
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	330a      	adds	r3, #10
 80178e4:	693a      	ldr	r2, [r7, #16]
 80178e6:	4413      	add	r3, r2
 80178e8:	f107 020a 	add.w	r2, r7, #10
 80178ec:	4619      	mov	r1, r3
 80178ee:	f000 fa78 	bl	8017de2 <PTP_GetString>

    totallen += (uint32_t)(len * 2U) + 1U;
 80178f2:	897b      	ldrh	r3, [r7, #10]
 80178f4:	005a      	lsls	r2, r3, #1
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	4413      	add	r3, r2
 80178fa:	3301      	adds	r3, #1
 80178fc:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported + totallen], &len);
 80178fe:	683b      	ldr	r3, [r7, #0]
 8017900:	f203 6007 	addw	r0, r3, #1543	@ 0x607
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	330a      	adds	r3, #10
 8017908:	693a      	ldr	r2, [r7, #16]
 801790a:	4413      	add	r3, r2
 801790c:	f107 020a 	add.w	r2, r7, #10
 8017910:	4619      	mov	r1, r3
 8017912:	f000 fa66 	bl	8017de2 <PTP_GetString>

    totallen += (uint32_t)(len * 2U) + 1U;
 8017916:	897b      	ldrh	r3, [r7, #10]
 8017918:	005a      	lsls	r2, r3, #1
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	4413      	add	r3, r2
 801791e:	3301      	adds	r3, #1
 8017920:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported + totallen], &len);
 8017922:	683b      	ldr	r3, [r7, #0]
 8017924:	f203 7006 	addw	r0, r3, #1798	@ 0x706
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	330a      	adds	r3, #10
 801792c:	693a      	ldr	r2, [r7, #16]
 801792e:	4413      	add	r3, r2
 8017930:	f107 020a 	add.w	r2, r7, #10
 8017934:	4619      	mov	r1, r3
 8017936:	f000 fa54 	bl	8017de2 <PTP_GetString>

    totallen += (uint32_t)(len * 2U) + 1U;
 801793a:	897b      	ldrh	r3, [r7, #10]
 801793c:	005a      	lsls	r2, r3, #1
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	4413      	add	r3, r2
 8017942:	3301      	adds	r3, #1
 8017944:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->SerialNumber, &data[PTP_di_OperationsSupported + totallen], &len);
 8017946:	683b      	ldr	r3, [r7, #0]
 8017948:	f603 0005 	addw	r0, r3, #2053	@ 0x805
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	330a      	adds	r3, #10
 8017950:	693a      	ldr	r2, [r7, #16]
 8017952:	4413      	add	r3, r2
 8017954:	f107 020a 	add.w	r2, r7, #10
 8017958:	4619      	mov	r1, r3
 801795a:	f000 fa42 	bl	8017de2 <PTP_GetString>
  }
}
 801795e:	bf00      	nop
 8017960:	3718      	adds	r7, #24
 8017962:	46bd      	mov	sp, r7
 8017964:	bd80      	pop	{r7, pc}
 8017966:	bf00      	nop
 8017968:	0801d15c 	.word	0x0801d15c
 801796c:	0801d168 	.word	0x0801d168

08017970 <PTP_GetStorageIDs>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageIDs(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *stor_ids)
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b084      	sub	sp, #16
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
 8017978:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8017980:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8017984:	69db      	ldr	r3, [r3, #28]
 8017986:	60fb      	str	r3, [r7, #12]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 8017988:	68fa      	ldr	r2, [r7, #12]
 801798a:	f641 5390 	movw	r3, #7568	@ 0x1d90
 801798e:	4413      	add	r3, r2
 8017990:	60bb      	str	r3, [r7, #8]

  stor_ids->n = PTP_GetArray32(stor_ids->Storage, data, 0U);
 8017992:	683b      	ldr	r3, [r7, #0]
 8017994:	3304      	adds	r3, #4
 8017996:	2200      	movs	r2, #0
 8017998:	68b9      	ldr	r1, [r7, #8]
 801799a:	4618      	mov	r0, r3
 801799c:	f000 fa90 	bl	8017ec0 <PTP_GetArray32>
 80179a0:	4602      	mov	r2, r0
 80179a2:	683b      	ldr	r3, [r7, #0]
 80179a4:	601a      	str	r2, [r3, #0]
}
 80179a6:	bf00      	nop
 80179a8:	3710      	adds	r7, #16
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bd80      	pop	{r7, pc}

080179ae <PTP_GetStorageInfo>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageInfo(USBH_HandleTypeDef *phost, uint32_t storage_id, PTP_StorageInfoTypedef *stor_info)
{
 80179ae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80179b2:	b0c2      	sub	sp, #264	@ 0x108
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 80179ba:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 80179be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
  /* Prevent unused argument(s) compilation warning */
  UNUSED(storage_id);

  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80179c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80179c6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80179ca:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80179ce:	69db      	ldr	r3, [r3, #28]
 80179d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 80179d4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80179d8:	f641 5390 	movw	r3, #7568	@ 0x1d90
 80179dc:	4413      	add	r3, r2
 80179de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  uint16_t len;

  stor_info->StorageType = LE16(&data[PTP_si_StorageType]);
 80179e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80179e6:	781b      	ldrb	r3, [r3, #0]
 80179e8:	461a      	mov	r2, r3
 80179ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80179ee:	3301      	adds	r3, #1
 80179f0:	781b      	ldrb	r3, [r3, #0]
 80179f2:	021b      	lsls	r3, r3, #8
 80179f4:	b29b      	uxth	r3, r3
 80179f6:	4313      	orrs	r3, r2
 80179f8:	b29b      	uxth	r3, r3
 80179fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80179fe:	8013      	strh	r3, [r2, #0]
  stor_info->FilesystemType = LE16(&data[PTP_si_FilesystemType]);
 8017a00:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017a04:	3302      	adds	r3, #2
 8017a06:	781b      	ldrb	r3, [r3, #0]
 8017a08:	461a      	mov	r2, r3
 8017a0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017a0e:	3303      	adds	r3, #3
 8017a10:	781b      	ldrb	r3, [r3, #0]
 8017a12:	021b      	lsls	r3, r3, #8
 8017a14:	b29b      	uxth	r3, r3
 8017a16:	4313      	orrs	r3, r2
 8017a18:	b29b      	uxth	r3, r3
 8017a1a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8017a1e:	8053      	strh	r3, [r2, #2]
  stor_info->AccessCapability = LE16(&data[PTP_si_AccessCapability]);
 8017a20:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017a24:	3304      	adds	r3, #4
 8017a26:	781b      	ldrb	r3, [r3, #0]
 8017a28:	461a      	mov	r2, r3
 8017a2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017a2e:	3305      	adds	r3, #5
 8017a30:	781b      	ldrb	r3, [r3, #0]
 8017a32:	021b      	lsls	r3, r3, #8
 8017a34:	b29b      	uxth	r3, r3
 8017a36:	4313      	orrs	r3, r2
 8017a38:	b29b      	uxth	r3, r3
 8017a3a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8017a3e:	8093      	strh	r3, [r2, #4]
  stor_info->MaxCapability = LE64(&data[PTP_si_MaxCapability]);
 8017a40:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017a44:	3306      	adds	r3, #6
 8017a46:	781b      	ldrb	r3, [r3, #0]
 8017a48:	b2db      	uxtb	r3, r3
 8017a4a:	2200      	movs	r2, #0
 8017a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8017a50:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8017a54:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017a58:	3307      	adds	r3, #7
 8017a5a:	781b      	ldrb	r3, [r3, #0]
 8017a5c:	b2db      	uxtb	r3, r3
 8017a5e:	2200      	movs	r2, #0
 8017a60:	461c      	mov	r4, r3
 8017a62:	4615      	mov	r5, r2
 8017a64:	f04f 0200 	mov.w	r2, #0
 8017a68:	f04f 0300 	mov.w	r3, #0
 8017a6c:	022b      	lsls	r3, r5, #8
 8017a6e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8017a72:	0222      	lsls	r2, r4, #8
 8017a74:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8017a78:	4621      	mov	r1, r4
 8017a7a:	ea41 0a02 	orr.w	sl, r1, r2
 8017a7e:	4629      	mov	r1, r5
 8017a80:	ea41 0b03 	orr.w	fp, r1, r3
 8017a84:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017a88:	3308      	adds	r3, #8
 8017a8a:	781b      	ldrb	r3, [r3, #0]
 8017a8c:	b2db      	uxtb	r3, r3
 8017a8e:	2200      	movs	r2, #0
 8017a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8017a94:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8017a98:	f04f 0200 	mov.w	r2, #0
 8017a9c:	f04f 0300 	mov.w	r3, #0
 8017aa0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8017aa4:	4629      	mov	r1, r5
 8017aa6:	040b      	lsls	r3, r1, #16
 8017aa8:	4621      	mov	r1, r4
 8017aaa:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8017aae:	4621      	mov	r1, r4
 8017ab0:	040a      	lsls	r2, r1, #16
 8017ab2:	ea4a 0102 	orr.w	r1, sl, r2
 8017ab6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8017aba:	ea4b 0303 	orr.w	r3, fp, r3
 8017abe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8017ac2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017ac6:	3309      	adds	r3, #9
 8017ac8:	781b      	ldrb	r3, [r3, #0]
 8017aca:	b2db      	uxtb	r3, r3
 8017acc:	2200      	movs	r2, #0
 8017ace:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8017ad2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8017ad6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8017ada:	460b      	mov	r3, r1
 8017adc:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8017ae0:	460b      	mov	r3, r1
 8017ae2:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8017ae6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8017aea:	460b      	mov	r3, r1
 8017aec:	ea43 0308 	orr.w	r3, r3, r8
 8017af0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8017af4:	4613      	mov	r3, r2
 8017af6:	ea43 0309 	orr.w	r3, r3, r9
 8017afa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8017afe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017b02:	330a      	adds	r3, #10
 8017b04:	781b      	ldrb	r3, [r3, #0]
 8017b06:	b2db      	uxtb	r3, r3
 8017b08:	2200      	movs	r2, #0
 8017b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8017b0e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8017b12:	f04f 0200 	mov.w	r2, #0
 8017b16:	f04f 0300 	mov.w	r3, #0
 8017b1a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8017b1e:	000b      	movs	r3, r1
 8017b20:	2200      	movs	r2, #0
 8017b22:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8017b26:	4621      	mov	r1, r4
 8017b28:	4311      	orrs	r1, r2
 8017b2a:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8017b2e:	4629      	mov	r1, r5
 8017b30:	4319      	orrs	r1, r3
 8017b32:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
 8017b36:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017b3a:	330b      	adds	r3, #11
 8017b3c:	781b      	ldrb	r3, [r3, #0]
 8017b3e:	b2db      	uxtb	r3, r3
 8017b40:	2200      	movs	r2, #0
 8017b42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8017b46:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8017b4a:	f04f 0200 	mov.w	r2, #0
 8017b4e:	f04f 0300 	mov.w	r3, #0
 8017b52:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8017b56:	020b      	lsls	r3, r1, #8
 8017b58:	2200      	movs	r2, #0
 8017b5a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8017b5e:	4621      	mov	r1, r4
 8017b60:	4311      	orrs	r1, r2
 8017b62:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8017b66:	4629      	mov	r1, r5
 8017b68:	4319      	orrs	r1, r3
 8017b6a:	f8c7 10a4 	str.w	r1, [r7, #164]	@ 0xa4
 8017b6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017b72:	330c      	adds	r3, #12
 8017b74:	781b      	ldrb	r3, [r3, #0]
 8017b76:	b2db      	uxtb	r3, r3
 8017b78:	2200      	movs	r2, #0
 8017b7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8017b7e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8017b82:	f04f 0200 	mov.w	r2, #0
 8017b86:	f04f 0300 	mov.w	r3, #0
 8017b8a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8017b8e:	040b      	lsls	r3, r1, #16
 8017b90:	2200      	movs	r2, #0
 8017b92:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8017b96:	4621      	mov	r1, r4
 8017b98:	4311      	orrs	r1, r2
 8017b9a:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8017b9e:	4629      	mov	r1, r5
 8017ba0:	4319      	orrs	r1, r3
 8017ba2:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8017ba6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017baa:	330d      	adds	r3, #13
 8017bac:	781b      	ldrb	r3, [r3, #0]
 8017bae:	b2db      	uxtb	r3, r3
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8017bb6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8017bba:	f04f 0200 	mov.w	r2, #0
 8017bbe:	f04f 0300 	mov.w	r3, #0
 8017bc2:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8017bc6:	060b      	lsls	r3, r1, #24
 8017bc8:	2200      	movs	r2, #0
 8017bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8017bce:	4621      	mov	r1, r4
 8017bd0:	4311      	orrs	r1, r2
 8017bd2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8017bd6:	4629      	mov	r1, r5
 8017bd8:	4319      	orrs	r1, r3
 8017bda:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 8017bde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8017be2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8017be6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  stor_info->FreeSpaceInBytes = LE64(&data[PTP_si_FreeSpaceInBytes]);
 8017bea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017bee:	330e      	adds	r3, #14
 8017bf0:	781b      	ldrb	r3, [r3, #0]
 8017bf2:	b2db      	uxtb	r3, r3
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017bf8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8017bfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017bfe:	330f      	adds	r3, #15
 8017c00:	781b      	ldrb	r3, [r3, #0]
 8017c02:	b2db      	uxtb	r3, r3
 8017c04:	2200      	movs	r2, #0
 8017c06:	673b      	str	r3, [r7, #112]	@ 0x70
 8017c08:	677a      	str	r2, [r7, #116]	@ 0x74
 8017c0a:	f04f 0200 	mov.w	r2, #0
 8017c0e:	f04f 0300 	mov.w	r3, #0
 8017c12:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8017c16:	4629      	mov	r1, r5
 8017c18:	020b      	lsls	r3, r1, #8
 8017c1a:	4621      	mov	r1, r4
 8017c1c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8017c20:	4621      	mov	r1, r4
 8017c22:	020a      	lsls	r2, r1, #8
 8017c24:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8017c28:	4621      	mov	r1, r4
 8017c2a:	4311      	orrs	r1, r2
 8017c2c:	66b9      	str	r1, [r7, #104]	@ 0x68
 8017c2e:	4629      	mov	r1, r5
 8017c30:	4319      	orrs	r1, r3
 8017c32:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8017c34:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017c38:	3310      	adds	r3, #16
 8017c3a:	781b      	ldrb	r3, [r3, #0]
 8017c3c:	b2db      	uxtb	r3, r3
 8017c3e:	2200      	movs	r2, #0
 8017c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8017c42:	667a      	str	r2, [r7, #100]	@ 0x64
 8017c44:	f04f 0200 	mov.w	r2, #0
 8017c48:	f04f 0300 	mov.w	r3, #0
 8017c4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8017c50:	4629      	mov	r1, r5
 8017c52:	040b      	lsls	r3, r1, #16
 8017c54:	4621      	mov	r1, r4
 8017c56:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8017c5a:	4621      	mov	r1, r4
 8017c5c:	040a      	lsls	r2, r1, #16
 8017c5e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8017c62:	4621      	mov	r1, r4
 8017c64:	4311      	orrs	r1, r2
 8017c66:	65b9      	str	r1, [r7, #88]	@ 0x58
 8017c68:	4629      	mov	r1, r5
 8017c6a:	4319      	orrs	r1, r3
 8017c6c:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8017c6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017c72:	3311      	adds	r3, #17
 8017c74:	781b      	ldrb	r3, [r3, #0]
 8017c76:	b2db      	uxtb	r3, r3
 8017c78:	2200      	movs	r2, #0
 8017c7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8017c7c:	657a      	str	r2, [r7, #84]	@ 0x54
 8017c7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8017c82:	460b      	mov	r3, r1
 8017c84:	0a1b      	lsrs	r3, r3, #8
 8017c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017c88:	460b      	mov	r3, r1
 8017c8a:	061b      	lsls	r3, r3, #24
 8017c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017c8e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8017c92:	4623      	mov	r3, r4
 8017c94:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8017c98:	4602      	mov	r2, r0
 8017c9a:	4313      	orrs	r3, r2
 8017c9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8017c9e:	462b      	mov	r3, r5
 8017ca0:	460a      	mov	r2, r1
 8017ca2:	4313      	orrs	r3, r2
 8017ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8017ca6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017caa:	3312      	adds	r3, #18
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	b2db      	uxtb	r3, r3
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017cb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8017cb6:	f04f 0200 	mov.w	r2, #0
 8017cba:	f04f 0300 	mov.w	r3, #0
 8017cbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017cc0:	000b      	movs	r3, r1
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8017cc8:	4621      	mov	r1, r4
 8017cca:	4311      	orrs	r1, r2
 8017ccc:	6339      	str	r1, [r7, #48]	@ 0x30
 8017cce:	4629      	mov	r1, r5
 8017cd0:	4319      	orrs	r1, r3
 8017cd2:	6379      	str	r1, [r7, #52]	@ 0x34
 8017cd4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017cd8:	3313      	adds	r3, #19
 8017cda:	781b      	ldrb	r3, [r3, #0]
 8017cdc:	b2db      	uxtb	r3, r3
 8017cde:	2200      	movs	r2, #0
 8017ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017ce2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8017ce4:	f04f 0200 	mov.w	r2, #0
 8017ce8:	f04f 0300 	mov.w	r3, #0
 8017cec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017cee:	020b      	lsls	r3, r1, #8
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8017cf6:	4621      	mov	r1, r4
 8017cf8:	4311      	orrs	r1, r2
 8017cfa:	6239      	str	r1, [r7, #32]
 8017cfc:	4629      	mov	r1, r5
 8017cfe:	4319      	orrs	r1, r3
 8017d00:	6279      	str	r1, [r7, #36]	@ 0x24
 8017d02:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017d06:	3314      	adds	r3, #20
 8017d08:	781b      	ldrb	r3, [r3, #0]
 8017d0a:	b2db      	uxtb	r3, r3
 8017d0c:	2200      	movs	r2, #0
 8017d0e:	61bb      	str	r3, [r7, #24]
 8017d10:	61fa      	str	r2, [r7, #28]
 8017d12:	f04f 0200 	mov.w	r2, #0
 8017d16:	f04f 0300 	mov.w	r3, #0
 8017d1a:	69b9      	ldr	r1, [r7, #24]
 8017d1c:	040b      	lsls	r3, r1, #16
 8017d1e:	2200      	movs	r2, #0
 8017d20:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8017d24:	4621      	mov	r1, r4
 8017d26:	4311      	orrs	r1, r2
 8017d28:	6139      	str	r1, [r7, #16]
 8017d2a:	4629      	mov	r1, r5
 8017d2c:	4319      	orrs	r1, r3
 8017d2e:	6179      	str	r1, [r7, #20]
 8017d30:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017d34:	3315      	adds	r3, #21
 8017d36:	781b      	ldrb	r3, [r3, #0]
 8017d38:	b2db      	uxtb	r3, r3
 8017d3a:	2200      	movs	r2, #0
 8017d3c:	60bb      	str	r3, [r7, #8]
 8017d3e:	60fa      	str	r2, [r7, #12]
 8017d40:	f04f 0200 	mov.w	r2, #0
 8017d44:	f04f 0300 	mov.w	r3, #0
 8017d48:	68b9      	ldr	r1, [r7, #8]
 8017d4a:	060b      	lsls	r3, r1, #24
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8017d52:	4621      	mov	r1, r4
 8017d54:	4311      	orrs	r1, r2
 8017d56:	6039      	str	r1, [r7, #0]
 8017d58:	4629      	mov	r1, r5
 8017d5a:	4319      	orrs	r1, r3
 8017d5c:	6079      	str	r1, [r7, #4]
 8017d5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8017d62:	e9d7 1200 	ldrd	r1, r2, [r7]
 8017d66:	e9c3 1204 	strd	r1, r2, [r3, #16]
  stor_info->FreeSpaceInImages = LE32(&data[PTP_si_FreeSpaceInImages]);
 8017d6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017d6e:	3316      	adds	r3, #22
 8017d70:	781b      	ldrb	r3, [r3, #0]
 8017d72:	461a      	mov	r2, r3
 8017d74:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017d78:	3317      	adds	r3, #23
 8017d7a:	781b      	ldrb	r3, [r3, #0]
 8017d7c:	021b      	lsls	r3, r3, #8
 8017d7e:	431a      	orrs	r2, r3
 8017d80:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017d84:	3318      	adds	r3, #24
 8017d86:	781b      	ldrb	r3, [r3, #0]
 8017d88:	041b      	lsls	r3, r3, #16
 8017d8a:	431a      	orrs	r2, r3
 8017d8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017d90:	3319      	adds	r3, #25
 8017d92:	781b      	ldrb	r3, [r3, #0]
 8017d94:	061b      	lsls	r3, r3, #24
 8017d96:	431a      	orrs	r2, r3
 8017d98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8017d9c:	619a      	str	r2, [r3, #24]

  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 8017d9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8017da2:	f103 001c 	add.w	r0, r3, #28
 8017da6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017daa:	331a      	adds	r3, #26
 8017dac:	f107 02fe 	add.w	r2, r7, #254	@ 0xfe
 8017db0:	4619      	mov	r1, r3
 8017db2:	f000 f816 	bl	8017de2 <PTP_GetString>
  PTP_GetString(stor_info->VolumeLabel, &data[PTP_si_StorageDescription + (len * 2U) + 1U], &len);
 8017db6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8017dba:	f203 101b 	addw	r0, r3, #283	@ 0x11b
 8017dbe:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8017dc2:	005b      	lsls	r3, r3, #1
 8017dc4:	331b      	adds	r3, #27
 8017dc6:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8017dca:	4413      	add	r3, r2
 8017dcc:	f107 02fe 	add.w	r2, r7, #254	@ 0xfe
 8017dd0:	4619      	mov	r1, r3
 8017dd2:	f000 f806 	bl	8017de2 <PTP_GetString>
}
 8017dd6:	bf00      	nop
 8017dd8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08017de2 <PTP_GetString>:
  * @param  str: ascii string
  * @param  data: Device info structure
  * @retval None
  */
static void PTP_GetString(uint8_t *str, uint8_t *data, uint16_t *len)
{
 8017de2:	b480      	push	{r7}
 8017de4:	b087      	sub	sp, #28
 8017de6:	af00      	add	r7, sp, #0
 8017de8:	60f8      	str	r0, [r7, #12]
 8017dea:	60b9      	str	r1, [r7, #8]
 8017dec:	607a      	str	r2, [r7, #4]
  uint16_t strlength;
  uint16_t idx;

  *len = data[0];
 8017dee:	68bb      	ldr	r3, [r7, #8]
 8017df0:	781b      	ldrb	r3, [r3, #0]
 8017df2:	461a      	mov	r2, r3
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	801a      	strh	r2, [r3, #0]
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	781b      	ldrb	r3, [r3, #0]
 8017dfc:	005b      	lsls	r3, r3, #1
 8017dfe:	82bb      	strh	r3, [r7, #20]
  data ++; /* Adjust the offset ignoring the String Len */
 8017e00:	68bb      	ldr	r3, [r7, #8]
 8017e02:	3301      	adds	r3, #1
 8017e04:	60bb      	str	r3, [r7, #8]

  for (idx = 0U; idx < strlength; idx += 2U)
 8017e06:	2300      	movs	r3, #0
 8017e08:	82fb      	strh	r3, [r7, #22]
 8017e0a:	e00b      	b.n	8017e24 <PTP_GetString+0x42>
  {
    /* Copy Only the string and ignore the UNICODE ID, hence add the src */
    *str = data[idx];
 8017e0c:	8afb      	ldrh	r3, [r7, #22]
 8017e0e:	68ba      	ldr	r2, [r7, #8]
 8017e10:	4413      	add	r3, r2
 8017e12:	781a      	ldrb	r2, [r3, #0]
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	701a      	strb	r2, [r3, #0]
    str++;
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	3301      	adds	r3, #1
 8017e1c:	60fb      	str	r3, [r7, #12]
  for (idx = 0U; idx < strlength; idx += 2U)
 8017e1e:	8afb      	ldrh	r3, [r7, #22]
 8017e20:	3302      	adds	r3, #2
 8017e22:	82fb      	strh	r3, [r7, #22]
 8017e24:	8afa      	ldrh	r2, [r7, #22]
 8017e26:	8abb      	ldrh	r3, [r7, #20]
 8017e28:	429a      	cmp	r2, r3
 8017e2a:	d3ef      	bcc.n	8017e0c <PTP_GetString+0x2a>
  }
  *str = 0U; /* mark end of string */
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	701a      	strb	r2, [r3, #0]
}
 8017e32:	bf00      	nop
 8017e34:	371c      	adds	r7, #28
 8017e36:	46bd      	mov	sp, r7
 8017e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3c:	4770      	bx	lr

08017e3e <PTP_GetArray16>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray16(uint16_t *array, uint8_t *data, uint32_t offset)
{
 8017e3e:	b480      	push	{r7}
 8017e40:	b087      	sub	sp, #28
 8017e42:	af00      	add	r7, sp, #0
 8017e44:	60f8      	str	r0, [r7, #12]
 8017e46:	60b9      	str	r1, [r7, #8]
 8017e48:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 8017e4e:	68ba      	ldr	r2, [r7, #8]
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	4413      	add	r3, r2
 8017e54:	781b      	ldrb	r3, [r3, #0]
 8017e56:	4619      	mov	r1, r3
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	3301      	adds	r3, #1
 8017e5c:	68ba      	ldr	r2, [r7, #8]
 8017e5e:	4413      	add	r3, r2
 8017e60:	781b      	ldrb	r3, [r3, #0]
 8017e62:	021b      	lsls	r3, r3, #8
 8017e64:	ea41 0203 	orr.w	r2, r1, r3
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	3302      	adds	r3, #2
 8017e6c:	68b9      	ldr	r1, [r7, #8]
 8017e6e:	440b      	add	r3, r1
 8017e70:	781b      	ldrb	r3, [r3, #0]
 8017e72:	041b      	lsls	r3, r3, #16
 8017e74:	431a      	orrs	r2, r3
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	3303      	adds	r3, #3
 8017e7a:	68b9      	ldr	r1, [r7, #8]
 8017e7c:	440b      	add	r3, r1
 8017e7e:	781b      	ldrb	r3, [r3, #0]
 8017e80:	061b      	lsls	r3, r3, #24
 8017e82:	4313      	orrs	r3, r2
 8017e84:	613b      	str	r3, [r7, #16]
  while (size > idx)
 8017e86:	e010      	b.n	8017eaa <PTP_GetArray16+0x6c>
  {
    array[idx] = (uint16_t)data[offset + (sizeof(uint16_t) * (idx + 2U))];
 8017e88:	697b      	ldr	r3, [r7, #20]
 8017e8a:	3302      	adds	r3, #2
 8017e8c:	005a      	lsls	r2, r3, #1
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	4413      	add	r3, r2
 8017e92:	68ba      	ldr	r2, [r7, #8]
 8017e94:	4413      	add	r3, r2
 8017e96:	7819      	ldrb	r1, [r3, #0]
 8017e98:	697b      	ldr	r3, [r7, #20]
 8017e9a:	005b      	lsls	r3, r3, #1
 8017e9c:	68fa      	ldr	r2, [r7, #12]
 8017e9e:	4413      	add	r3, r2
 8017ea0:	460a      	mov	r2, r1
 8017ea2:	801a      	strh	r2, [r3, #0]
    idx++;
 8017ea4:	697b      	ldr	r3, [r7, #20]
 8017ea6:	3301      	adds	r3, #1
 8017ea8:	617b      	str	r3, [r7, #20]
  while (size > idx)
 8017eaa:	693a      	ldr	r2, [r7, #16]
 8017eac:	697b      	ldr	r3, [r7, #20]
 8017eae:	429a      	cmp	r2, r3
 8017eb0:	d8ea      	bhi.n	8017e88 <PTP_GetArray16+0x4a>
  }
  return size;
 8017eb2:	693b      	ldr	r3, [r7, #16]
}
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	371c      	adds	r7, #28
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ebe:	4770      	bx	lr

08017ec0 <PTP_GetArray32>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray32(uint32_t *array, uint8_t *data, uint32_t offset)
{
 8017ec0:	b480      	push	{r7}
 8017ec2:	b087      	sub	sp, #28
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	60f8      	str	r0, [r7, #12]
 8017ec8:	60b9      	str	r1, [r7, #8]
 8017eca:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 8017ecc:	2300      	movs	r3, #0
 8017ece:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 8017ed0:	68ba      	ldr	r2, [r7, #8]
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	4413      	add	r3, r2
 8017ed6:	781b      	ldrb	r3, [r3, #0]
 8017ed8:	4619      	mov	r1, r3
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	3301      	adds	r3, #1
 8017ede:	68ba      	ldr	r2, [r7, #8]
 8017ee0:	4413      	add	r3, r2
 8017ee2:	781b      	ldrb	r3, [r3, #0]
 8017ee4:	021b      	lsls	r3, r3, #8
 8017ee6:	ea41 0203 	orr.w	r2, r1, r3
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	3302      	adds	r3, #2
 8017eee:	68b9      	ldr	r1, [r7, #8]
 8017ef0:	440b      	add	r3, r1
 8017ef2:	781b      	ldrb	r3, [r3, #0]
 8017ef4:	041b      	lsls	r3, r3, #16
 8017ef6:	431a      	orrs	r2, r3
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	3303      	adds	r3, #3
 8017efc:	68b9      	ldr	r1, [r7, #8]
 8017efe:	440b      	add	r3, r1
 8017f00:	781b      	ldrb	r3, [r3, #0]
 8017f02:	061b      	lsls	r3, r3, #24
 8017f04:	4313      	orrs	r3, r2
 8017f06:	613b      	str	r3, [r7, #16]
  while (size > idx)
 8017f08:	e033      	b.n	8017f72 <PTP_GetArray32+0xb2>
  {
    array[idx] = LE32(&data[offset + (sizeof(uint32_t) * (idx + 1U))]);
 8017f0a:	697b      	ldr	r3, [r7, #20]
 8017f0c:	3301      	adds	r3, #1
 8017f0e:	009a      	lsls	r2, r3, #2
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	4413      	add	r3, r2
 8017f14:	68ba      	ldr	r2, [r7, #8]
 8017f16:	4413      	add	r3, r2
 8017f18:	781b      	ldrb	r3, [r3, #0]
 8017f1a:	4619      	mov	r1, r3
 8017f1c:	697b      	ldr	r3, [r7, #20]
 8017f1e:	3301      	adds	r3, #1
 8017f20:	009a      	lsls	r2, r3, #2
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	4413      	add	r3, r2
 8017f26:	3301      	adds	r3, #1
 8017f28:	68ba      	ldr	r2, [r7, #8]
 8017f2a:	4413      	add	r3, r2
 8017f2c:	781b      	ldrb	r3, [r3, #0]
 8017f2e:	021b      	lsls	r3, r3, #8
 8017f30:	ea41 0203 	orr.w	r2, r1, r3
 8017f34:	697b      	ldr	r3, [r7, #20]
 8017f36:	3301      	adds	r3, #1
 8017f38:	0099      	lsls	r1, r3, #2
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	440b      	add	r3, r1
 8017f3e:	3302      	adds	r3, #2
 8017f40:	68b9      	ldr	r1, [r7, #8]
 8017f42:	440b      	add	r3, r1
 8017f44:	781b      	ldrb	r3, [r3, #0]
 8017f46:	041b      	lsls	r3, r3, #16
 8017f48:	ea42 0103 	orr.w	r1, r2, r3
 8017f4c:	697b      	ldr	r3, [r7, #20]
 8017f4e:	3301      	adds	r3, #1
 8017f50:	009a      	lsls	r2, r3, #2
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	4413      	add	r3, r2
 8017f56:	3303      	adds	r3, #3
 8017f58:	68ba      	ldr	r2, [r7, #8]
 8017f5a:	4413      	add	r3, r2
 8017f5c:	781b      	ldrb	r3, [r3, #0]
 8017f5e:	061a      	lsls	r2, r3, #24
 8017f60:	697b      	ldr	r3, [r7, #20]
 8017f62:	009b      	lsls	r3, r3, #2
 8017f64:	68f8      	ldr	r0, [r7, #12]
 8017f66:	4403      	add	r3, r0
 8017f68:	430a      	orrs	r2, r1
 8017f6a:	601a      	str	r2, [r3, #0]
    idx++;
 8017f6c:	697b      	ldr	r3, [r7, #20]
 8017f6e:	3301      	adds	r3, #1
 8017f70:	617b      	str	r3, [r7, #20]
  while (size > idx)
 8017f72:	693a      	ldr	r2, [r7, #16]
 8017f74:	697b      	ldr	r3, [r7, #20]
 8017f76:	429a      	cmp	r2, r3
 8017f78:	d8c7      	bhi.n	8017f0a <PTP_GetArray32+0x4a>
  }
  return size;
 8017f7a:	693b      	ldr	r3, [r7, #16]
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	371c      	adds	r7, #28
 8017f80:	46bd      	mov	sp, r7
 8017f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f86:	4770      	bx	lr

08017f88 <USBH_PTP_OpenSession>:
  * @param  phost: Host handle
  * @param  session: Session ID (MUST BE > 0U)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_OpenSession(USBH_HandleTypeDef *phost, uint32_t session)
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b08e      	sub	sp, #56	@ 0x38
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]
 8017f90:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8017f92:	2301      	movs	r3, #1
 8017f94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8017f9e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8017fa2:	69db      	ldr	r3, [r3, #28]
 8017fa4:	633b      	str	r3, [r7, #48]	@ 0x30
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8017fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017fac:	f893 3d61 	ldrb.w	r3, [r3, #3425]	@ 0xd61
 8017fb0:	2b01      	cmp	r3, #1
 8017fb2:	d002      	beq.n	8017fba <USBH_PTP_OpenSession+0x32>
 8017fb4:	2b02      	cmp	r3, #2
 8017fb6:	d041      	beq.n	801803c <USBH_PTP_OpenSession+0xb4>
    case PTP_REQ_WAIT:
      status = USBH_PTP_Process(phost);
      break;

    default:
      break;
 8017fb8:	e047      	b.n	801804a <USBH_PTP_OpenSession+0xc2>
      MTP_Handle->ptp.transaction_id = 0x00000000U;
 8017fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fbc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017fc0:	461a      	mov	r2, r3
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
      MTP_Handle->ptp.session_id = session;
 8017fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017fce:	461a      	mov	r2, r3
 8017fd0:	683b      	ldr	r3, [r7, #0]
 8017fd2:	f8c2 31a8 	str.w	r3, [r2, #424]	@ 0x1a8
      MTP_Handle->ptp.flags = PTP_DP_NODATA;
 8017fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fd8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017fdc:	461a      	mov	r2, r3
 8017fde:	2300      	movs	r3, #0
 8017fe0:	f8c2 31ac 	str.w	r3, [r2, #428]	@ 0x1ac
      ptp_container.Code = PTP_OC_OpenSession;
 8017fe4:	f241 0302 	movw	r3, #4098	@ 0x1002
 8017fe8:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = session;
 8017fea:	683b      	ldr	r3, [r7, #0]
 8017fec:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 8017fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ff0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8017ff4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8017ff8:	1c5a      	adds	r2, r3, #1
 8017ffa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017ffc:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 8018000:	f8c1 21a4 	str.w	r2, [r1, #420]	@ 0x1a4
 8018004:	617b      	str	r3, [r7, #20]
      ptp_container.Param1 = session;
 8018006:	683b      	ldr	r3, [r7, #0]
 8018008:	61bb      	str	r3, [r7, #24]
      ptp_container.Nparam = 1U;
 801800a:	2301      	movs	r3, #1
 801800c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 8018010:	f107 030c 	add.w	r3, r7, #12
 8018014:	4619      	mov	r1, r3
 8018016:	6878      	ldr	r0, [r7, #4]
 8018018:	f7ff fa46 	bl	80174a8 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 801801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801801e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018022:	2201      	movs	r2, #1
 8018024:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8018028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801802a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801802e:	2202      	movs	r2, #2
 8018030:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      status = USBH_BUSY;
 8018034:	2301      	movs	r3, #1
 8018036:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      break;
 801803a:	e006      	b.n	801804a <USBH_PTP_OpenSession+0xc2>
      status = USBH_PTP_Process(phost);
 801803c:	6878      	ldr	r0, [r7, #4]
 801803e:	f7fe ff9b 	bl	8016f78 <USBH_PTP_Process>
 8018042:	4603      	mov	r3, r0
 8018044:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      break;
 8018048:	bf00      	nop
  }
  return status;
 801804a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 801804e:	4618      	mov	r0, r3
 8018050:	3738      	adds	r7, #56	@ 0x38
 8018052:	46bd      	mov	sp, r7
 8018054:	bd80      	pop	{r7, pc}

08018056 <USBH_PTP_GetDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 8018056:	b580      	push	{r7, lr}
 8018058:	b08e      	sub	sp, #56	@ 0x38
 801805a:	af00      	add	r7, sp, #0
 801805c:	6078      	str	r0, [r7, #4]
 801805e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 8018060:	2301      	movs	r3, #1
 8018062:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801806c:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8018070:	69db      	ldr	r3, [r3, #28]
 8018072:	633b      	str	r3, [r7, #48]	@ 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8018074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801807a:	f893 3d61 	ldrb.w	r3, [r3, #3425]	@ 0xd61
 801807e:	2b01      	cmp	r3, #1
 8018080:	d002      	beq.n	8018088 <USBH_PTP_GetDeviceInfo+0x32>
 8018082:	2b02      	cmp	r3, #2
 8018084:	d053      	beq.n	801812e <USBH_PTP_GetDeviceInfo+0xd8>
        PTP_DecodeDeviceInfo(phost, dev_info);
      }
      break;

    default:
      break;
 8018086:	e061      	b.n	801814c <USBH_PTP_GetDeviceInfo+0xf6>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8018088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801808a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801808e:	461a      	mov	r2, r3
 8018090:	2302      	movs	r3, #2
 8018092:	f8c2 31ac 	str.w	r3, [r2, #428]	@ 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 8018096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018098:	f641 5384 	movw	r3, #7556	@ 0x1d84
 801809c:	4413      	add	r3, r2
 801809e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80180a0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80180a4:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 80180a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80180ae:	461a      	mov	r2, r3
 80180b0:	2300      	movs	r3, #0
 80180b2:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 80180b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80180bc:	461a      	mov	r2, r3
 80180be:	2300      	movs	r3, #0
 80180c0:	f8c2 31c0 	str.w	r3, [r2, #448]	@ 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 80180c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80180ca:	461a      	mov	r2, r3
 80180cc:	2300      	movs	r3, #0
 80180ce:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
      ptp_container.Code = PTP_OC_GetDeviceInfo;
 80180d2:	f241 0301 	movw	r3, #4097	@ 0x1001
 80180d6:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 80180d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80180de:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 80180e2:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 80180e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80180ea:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80180ee:	1c5a      	adds	r2, r3, #1
 80180f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80180f2:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80180f6:	f8c1 21a4 	str.w	r2, [r1, #420]	@ 0x1a4
 80180fa:	617b      	str	r3, [r7, #20]
      ptp_container.Nparam = 0U;
 80180fc:	2300      	movs	r3, #0
 80180fe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 8018102:	f107 030c 	add.w	r3, r7, #12
 8018106:	4619      	mov	r1, r3
 8018108:	6878      	ldr	r0, [r7, #4]
 801810a:	f7ff f9cd 	bl	80174a8 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 801810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018114:	2201      	movs	r2, #1
 8018116:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 801811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801811c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018120:	2202      	movs	r2, #2
 8018122:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      status = USBH_BUSY;
 8018126:	2301      	movs	r3, #1
 8018128:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      break;
 801812c:	e00e      	b.n	801814c <USBH_PTP_GetDeviceInfo+0xf6>
      status = USBH_PTP_Process(phost);
 801812e:	6878      	ldr	r0, [r7, #4]
 8018130:	f7fe ff22 	bl	8016f78 <USBH_PTP_Process>
 8018134:	4603      	mov	r3, r0
 8018136:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      if (status == USBH_OK)
 801813a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801813e:	2b00      	cmp	r3, #0
 8018140:	d103      	bne.n	801814a <USBH_PTP_GetDeviceInfo+0xf4>
        PTP_DecodeDeviceInfo(phost, dev_info);
 8018142:	6839      	ldr	r1, [r7, #0]
 8018144:	6878      	ldr	r0, [r7, #4]
 8018146:	f7ff faef 	bl	8017728 <PTP_DecodeDeviceInfo>
      break;
 801814a:	bf00      	nop
  }
  return status;
 801814c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8018150:	4618      	mov	r0, r3
 8018152:	3738      	adds	r7, #56	@ 0x38
 8018154:	46bd      	mov	sp, r7
 8018156:	bd80      	pop	{r7, pc}

08018158 <USBH_PTP_GetStorageIds>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageIds(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *storage_ids)
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b08e      	sub	sp, #56	@ 0x38
 801815c:	af00      	add	r7, sp, #0
 801815e:	6078      	str	r0, [r7, #4]
 8018160:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 8018162:	2301      	movs	r3, #1
 8018164:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801816e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8018172:	69db      	ldr	r3, [r3, #28]
 8018174:	633b      	str	r3, [r7, #48]	@ 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8018176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801817c:	f893 3d61 	ldrb.w	r3, [r3, #3425]	@ 0xd61
 8018180:	2b01      	cmp	r3, #1
 8018182:	d002      	beq.n	801818a <USBH_PTP_GetStorageIds+0x32>
 8018184:	2b02      	cmp	r3, #2
 8018186:	d053      	beq.n	8018230 <USBH_PTP_GetStorageIds+0xd8>
        PTP_GetStorageIDs(phost, storage_ids);
      }
      break;

    default:
      break;
 8018188:	e061      	b.n	801824e <USBH_PTP_GetStorageIds+0xf6>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 801818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801818c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8018190:	461a      	mov	r2, r3
 8018192:	2302      	movs	r3, #2
 8018194:	f8c2 31ac 	str.w	r3, [r2, #428]	@ 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 8018198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801819a:	f641 5384 	movw	r3, #7556	@ 0x1d84
 801819e:	4413      	add	r3, r2
 80181a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80181a2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80181a6:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 80181aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80181b0:	461a      	mov	r2, r3
 80181b2:	2300      	movs	r3, #0
 80181b4:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 80181b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80181be:	461a      	mov	r2, r3
 80181c0:	2300      	movs	r3, #0
 80181c2:	f8c2 31c0 	str.w	r3, [r2, #448]	@ 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 80181c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80181cc:	461a      	mov	r2, r3
 80181ce:	2300      	movs	r3, #0
 80181d0:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
      ptp_container.Code = PTP_OC_GetStorageIDs;
 80181d4:	f241 0304 	movw	r3, #4100	@ 0x1004
 80181d8:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 80181da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80181e0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 80181e4:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 80181e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80181ec:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80181f0:	1c5a      	adds	r2, r3, #1
 80181f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80181f4:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80181f8:	f8c1 21a4 	str.w	r2, [r1, #420]	@ 0x1a4
 80181fc:	617b      	str	r3, [r7, #20]
      ptp_container.Nparam = 0U;
 80181fe:	2300      	movs	r3, #0
 8018200:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 8018204:	f107 030c 	add.w	r3, r7, #12
 8018208:	4619      	mov	r1, r3
 801820a:	6878      	ldr	r0, [r7, #4]
 801820c:	f7ff f94c 	bl	80174a8 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8018210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018216:	2201      	movs	r2, #1
 8018218:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 801821c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801821e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018222:	2202      	movs	r2, #2
 8018224:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      status = USBH_BUSY;
 8018228:	2301      	movs	r3, #1
 801822a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      break;
 801822e:	e00e      	b.n	801824e <USBH_PTP_GetStorageIds+0xf6>
      status = USBH_PTP_Process(phost);
 8018230:	6878      	ldr	r0, [r7, #4]
 8018232:	f7fe fea1 	bl	8016f78 <USBH_PTP_Process>
 8018236:	4603      	mov	r3, r0
 8018238:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      if (status == USBH_OK)
 801823c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8018240:	2b00      	cmp	r3, #0
 8018242:	d103      	bne.n	801824c <USBH_PTP_GetStorageIds+0xf4>
        PTP_GetStorageIDs(phost, storage_ids);
 8018244:	6839      	ldr	r1, [r7, #0]
 8018246:	6878      	ldr	r0, [r7, #4]
 8018248:	f7ff fb92 	bl	8017970 <PTP_GetStorageIDs>
      break;
 801824c:	bf00      	nop
  }
  return status;
 801824e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8018252:	4618      	mov	r0, r3
 8018254:	3738      	adds	r7, #56	@ 0x38
 8018256:	46bd      	mov	sp, r7
 8018258:	bd80      	pop	{r7, pc}

0801825a <USBH_PTP_GetStorageInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageInfo(USBH_HandleTypeDef *phost,
                                           uint32_t storage_id,
                                           PTP_StorageInfoTypedef *storage_info)
{
 801825a:	b580      	push	{r7, lr}
 801825c:	b090      	sub	sp, #64	@ 0x40
 801825e:	af00      	add	r7, sp, #0
 8018260:	60f8      	str	r0, [r7, #12]
 8018262:	60b9      	str	r1, [r7, #8]
 8018264:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8018266:	2301      	movs	r3, #1
 8018268:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018272:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8018276:	69db      	ldr	r3, [r3, #28]
 8018278:	63bb      	str	r3, [r7, #56]	@ 0x38
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 801827a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801827c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018280:	f893 3d61 	ldrb.w	r3, [r3, #3425]	@ 0xd61
 8018284:	2b01      	cmp	r3, #1
 8018286:	d002      	beq.n	801828e <USBH_PTP_GetStorageInfo+0x34>
 8018288:	2b02      	cmp	r3, #2
 801828a:	d055      	beq.n	8018338 <USBH_PTP_GetStorageInfo+0xde>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
      }
      break;

    default:
      break;
 801828c:	e064      	b.n	8018358 <USBH_PTP_GetStorageInfo+0xfe>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 801828e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018290:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8018294:	461a      	mov	r2, r3
 8018296:	2302      	movs	r3, #2
 8018298:	f8c2 31ac 	str.w	r3, [r2, #428]	@ 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 801829c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801829e:	f641 5384 	movw	r3, #7556	@ 0x1d84
 80182a2:	4413      	add	r3, r2
 80182a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80182a6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80182aa:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 80182ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182b0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80182b4:	461a      	mov	r2, r3
 80182b6:	2300      	movs	r3, #0
 80182b8:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 80182bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80182c2:	461a      	mov	r2, r3
 80182c4:	2300      	movs	r3, #0
 80182c6:	f8c2 31c0 	str.w	r3, [r2, #448]	@ 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 80182ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80182d0:	461a      	mov	r2, r3
 80182d2:	2300      	movs	r3, #0
 80182d4:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
      ptp_container.Code = PTP_OC_GetStorageInfo;
 80182d8:	f241 0305 	movw	r3, #4101	@ 0x1005
 80182dc:	82bb      	strh	r3, [r7, #20]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 80182de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80182e4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 80182e8:	61bb      	str	r3, [r7, #24]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 80182ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182ec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80182f0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80182f4:	1c5a      	adds	r2, r3, #1
 80182f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80182f8:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80182fc:	f8c1 21a4 	str.w	r2, [r1, #420]	@ 0x1a4
 8018300:	61fb      	str	r3, [r7, #28]
      ptp_container.Param1 = storage_id;
 8018302:	68bb      	ldr	r3, [r7, #8]
 8018304:	623b      	str	r3, [r7, #32]
      ptp_container.Nparam = 1U;
 8018306:	2301      	movs	r3, #1
 8018308:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 801830c:	f107 0314 	add.w	r3, r7, #20
 8018310:	4619      	mov	r1, r3
 8018312:	68f8      	ldr	r0, [r7, #12]
 8018314:	f7ff f8c8 	bl	80174a8 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8018318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801831a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801831e:	2201      	movs	r2, #1
 8018320:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8018324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801832a:	2202      	movs	r2, #2
 801832c:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      status = USBH_BUSY;
 8018330:	2301      	movs	r3, #1
 8018332:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8018336:	e00f      	b.n	8018358 <USBH_PTP_GetStorageInfo+0xfe>
      status = USBH_PTP_Process(phost);
 8018338:	68f8      	ldr	r0, [r7, #12]
 801833a:	f7fe fe1d 	bl	8016f78 <USBH_PTP_Process>
 801833e:	4603      	mov	r3, r0
 8018340:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      if (status == USBH_OK)
 8018344:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018348:	2b00      	cmp	r3, #0
 801834a:	d104      	bne.n	8018356 <USBH_PTP_GetStorageInfo+0xfc>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
 801834c:	687a      	ldr	r2, [r7, #4]
 801834e:	68b9      	ldr	r1, [r7, #8]
 8018350:	68f8      	ldr	r0, [r7, #12]
 8018352:	f7ff fb2c 	bl	80179ae <PTP_GetStorageInfo>
      break;
 8018356:	bf00      	nop
  }
  return status;
 8018358:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801835c:	4618      	mov	r0, r3
 801835e:	3740      	adds	r7, #64	@ 0x40
 8018360:	46bd      	mov	sp, r7
 8018362:	bd80      	pop	{r7, pc}

08018364 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b084      	sub	sp, #16
 8018368:	af00      	add	r7, sp, #0
 801836a:	60f8      	str	r0, [r7, #12]
 801836c:	60b9      	str	r1, [r7, #8]
 801836e:	4613      	mov	r3, r2
 8018370:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d10a      	bne.n	801838e <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8018378:	4826      	ldr	r0, [pc, #152]	@ (8018414 <USBH_Init+0xb0>)
 801837a:	f003 f9db 	bl	801b734 <iprintf>
 801837e:	4826      	ldr	r0, [pc, #152]	@ (8018418 <USBH_Init+0xb4>)
 8018380:	f003 f9d8 	bl	801b734 <iprintf>
 8018384:	200a      	movs	r0, #10
 8018386:	f003 f9e7 	bl	801b758 <putchar>
    return USBH_FAIL;
 801838a:	2302      	movs	r3, #2
 801838c:	e03d      	b.n	801840a <USBH_Init+0xa6>
  }

  /* Set DRiver ID */
  phost->id = id;
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018394:	461a      	mov	r2, r3
 8018396:	79fb      	ldrb	r3, [r7, #7]
 8018398:	f882 339c 	strb.w	r3, [r2, #924]	@ 0x39c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80183a2:	461a      	mov	r2, r3
 80183a4:	2300      	movs	r3, #0
 80183a6:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
  phost->ClassNumber = 0U;
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80183b0:	461a      	mov	r2, r3
 80183b2:	2300      	movs	r3, #0
 80183b4:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80183b8:	68f8      	ldr	r0, [r7, #12]
 80183ba:	f000 f82f 	bl	801841c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80183c4:	2200      	movs	r2, #0
 80183c6:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
  phost->device.is_connected = 0U;
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80183d0:	2200      	movs	r2, #0
 80183d2:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
  phost->device.is_disconnected = 0U;
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80183dc:	2200      	movs	r2, #0
 80183de:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
  phost->device.is_ReEnumerated = 0U;
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80183e8:	2200      	movs	r2, #0
 80183ea:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122

  /* Assign User process */
  if (pUsrFunc != NULL)
 80183ee:	68bb      	ldr	r3, [r7, #8]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d006      	beq.n	8018402 <USBH_Init+0x9e>
  {
    phost->pUser = pUsrFunc;
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80183fa:	461a      	mov	r2, r3
 80183fc:	68bb      	ldr	r3, [r7, #8]
 80183fe:	f8c2 33a4 	str.w	r3, [r2, #932]	@ 0x3a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8018402:	68f8      	ldr	r0, [r7, #12]
 8018404:	f002 fdf0 	bl	801afe8 <USBH_LL_Init>

  return USBH_OK;
 8018408:	2300      	movs	r3, #0
}
 801840a:	4618      	mov	r0, r3
 801840c:	3710      	adds	r7, #16
 801840e:	46bd      	mov	sp, r7
 8018410:	bd80      	pop	{r7, pc}
 8018412:	bf00      	nop
 8018414:	0801d1cc 	.word	0x0801d1cc
 8018418:	0801d1d4 	.word	0x0801d1d4

0801841c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b084      	sub	sp, #16
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8018424:	2300      	movs	r3, #0
 8018426:	60fb      	str	r3, [r7, #12]
 8018428:	e00b      	b.n	8018442 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 801842a:	687a      	ldr	r2, [r7, #4]
 801842c:	68f9      	ldr	r1, [r7, #12]
 801842e:	f242 03d4 	movw	r3, #8404	@ 0x20d4
 8018432:	440b      	add	r3, r1
 8018434:	009b      	lsls	r3, r3, #2
 8018436:	4413      	add	r3, r2
 8018438:	2200      	movs	r2, #0
 801843a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	3301      	adds	r3, #1
 8018440:	60fb      	str	r3, [r7, #12]
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	2b0f      	cmp	r3, #15
 8018446:	d9f0      	bls.n	801842a <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8018448:	2300      	movs	r3, #0
 801844a:	60fb      	str	r3, [r7, #12]
 801844c:	e009      	b.n	8018462 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 801844e:	687a      	ldr	r2, [r7, #4]
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	4413      	add	r3, r2
 8018454:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8018458:	2200      	movs	r2, #0
 801845a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	3301      	adds	r3, #1
 8018460:	60fb      	str	r3, [r7, #12]
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018468:	d3f1      	bcc.n	801844e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	2200      	movs	r2, #0
 801846e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	2200      	movs	r2, #0
 8018474:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	2201      	movs	r2, #1
 801847a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018482:	461a      	mov	r2, r3
 8018484:	2300      	movs	r3, #0
 8018486:	f8c2 3394 	str.w	r3, [r2, #916]	@ 0x394

  phost->Control.state = CTRL_SETUP;
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	2201      	movs	r2, #1
 801848e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	2240      	movs	r2, #64	@ 0x40
 8018494:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	2200      	movs	r2, #0
 801849a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80184a2:	2200      	movs	r2, #0
 80184a4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80184ae:	2201      	movs	r2, #1
 80184b0:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
  phost->device.RstCnt = 0U;
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80184ba:	2200      	movs	r2, #0
 80184bc:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
  phost->device.EnumCnt = 0U;
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80184c6:	2200      	movs	r2, #0
 80184c8:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	331c      	adds	r3, #28
 80184d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80184d4:	2100      	movs	r1, #0
 80184d6:	4618      	mov	r0, r3
 80184d8:	f003 fa7c 	bl	801b9d4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80184e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80184e6:	2100      	movs	r1, #0
 80184e8:	4618      	mov	r0, r3
 80184ea:	f003 fa73 	bl	801b9d4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80184ee:	687a      	ldr	r2, [r7, #4]
 80184f0:	f248 1326 	movw	r3, #33062	@ 0x8126
 80184f4:	4413      	add	r3, r2
 80184f6:	2212      	movs	r2, #18
 80184f8:	2100      	movs	r1, #0
 80184fa:	4618      	mov	r0, r3
 80184fc:	f003 fa6a 	bl	801b9d4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8018500:	687a      	ldr	r2, [r7, #4]
 8018502:	f248 1338 	movw	r3, #33080	@ 0x8138
 8018506:	4413      	add	r3, r2
 8018508:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 801850c:	2100      	movs	r1, #0
 801850e:	4618      	mov	r0, r3
 8018510:	f003 fa60 	bl	801b9d4 <memset>

  return USBH_OK;
 8018514:	2300      	movs	r3, #0
}
 8018516:	4618      	mov	r0, r3
 8018518:	3710      	adds	r7, #16
 801851a:	46bd      	mov	sp, r7
 801851c:	bd80      	pop	{r7, pc}
	...

08018520 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8018520:	b580      	push	{r7, lr}
 8018522:	b084      	sub	sp, #16
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
 8018528:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801852a:	2300      	movs	r3, #0
 801852c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 801852e:	683b      	ldr	r3, [r7, #0]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d027      	beq.n	8018584 <USBH_RegisterClass+0x64>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801853a:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 801853e:	2b04      	cmp	r3, #4
 8018540:	d814      	bhi.n	801856c <USBH_RegisterClass+0x4c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018548:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 801854c:	1c53      	adds	r3, r2, #1
 801854e:	6879      	ldr	r1, [r7, #4]
 8018550:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8018554:	f8c1 3350 	str.w	r3, [r1, #848]	@ 0x350
 8018558:	6879      	ldr	r1, [r7, #4]
 801855a:	f242 03ce 	movw	r3, #8398	@ 0x20ce
 801855e:	4413      	add	r3, r2
 8018560:	683a      	ldr	r2, [r7, #0]
 8018562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      status = USBH_OK;
 8018566:	2300      	movs	r3, #0
 8018568:	73fb      	strb	r3, [r7, #15]
 801856a:	e016      	b.n	801859a <USBH_RegisterClass+0x7a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 801856c:	480d      	ldr	r0, [pc, #52]	@ (80185a4 <USBH_RegisterClass+0x84>)
 801856e:	f003 f8e1 	bl	801b734 <iprintf>
 8018572:	480d      	ldr	r0, [pc, #52]	@ (80185a8 <USBH_RegisterClass+0x88>)
 8018574:	f003 f8de 	bl	801b734 <iprintf>
 8018578:	200a      	movs	r0, #10
 801857a:	f003 f8ed 	bl	801b758 <putchar>
      status = USBH_FAIL;
 801857e:	2302      	movs	r3, #2
 8018580:	73fb      	strb	r3, [r7, #15]
 8018582:	e00a      	b.n	801859a <USBH_RegisterClass+0x7a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8018584:	4807      	ldr	r0, [pc, #28]	@ (80185a4 <USBH_RegisterClass+0x84>)
 8018586:	f003 f8d5 	bl	801b734 <iprintf>
 801858a:	4808      	ldr	r0, [pc, #32]	@ (80185ac <USBH_RegisterClass+0x8c>)
 801858c:	f003 f8d2 	bl	801b734 <iprintf>
 8018590:	200a      	movs	r0, #10
 8018592:	f003 f8e1 	bl	801b758 <putchar>
    status = USBH_FAIL;
 8018596:	2302      	movs	r3, #2
 8018598:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801859a:	7bfb      	ldrb	r3, [r7, #15]
}
 801859c:	4618      	mov	r0, r3
 801859e:	3710      	adds	r7, #16
 80185a0:	46bd      	mov	sp, r7
 80185a2:	bd80      	pop	{r7, pc}
 80185a4:	0801d1cc 	.word	0x0801d1cc
 80185a8:	0801d1e8 	.word	0x0801d1e8
 80185ac:	0801d204 	.word	0x0801d204

080185b0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b084      	sub	sp, #16
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
 80185b8:	460b      	mov	r3, r1
 80185ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80185bc:	2300      	movs	r3, #0
 80185be:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80185c6:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 80185ca:	78fa      	ldrb	r2, [r7, #3]
 80185cc:	429a      	cmp	r2, r3
 80185ce:	d242      	bcs.n	8018656 <USBH_SelectInterface+0xa6>
  {
    phost->device.current_interface = interface;
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80185d6:	461a      	mov	r2, r3
 80185d8:	78fb      	ldrb	r3, [r7, #3]
 80185da:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 80185de:	78fb      	ldrb	r3, [r7, #3]
 80185e0:	4619      	mov	r1, r3
 80185e2:	4825      	ldr	r0, [pc, #148]	@ (8018678 <USBH_SelectInterface+0xc8>)
 80185e4:	f003 f8a6 	bl	801b734 <iprintf>
 80185e8:	200a      	movs	r0, #10
 80185ea:	f003 f8b5 	bl	801b758 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 80185ee:	78fb      	ldrb	r3, [r7, #3]
 80185f0:	687a      	ldr	r2, [r7, #4]
 80185f2:	2132      	movs	r1, #50	@ 0x32
 80185f4:	fb01 f303 	mul.w	r3, r1, r3
 80185f8:	441a      	add	r2, r3
 80185fa:	f248 1347 	movw	r3, #33095	@ 0x8147
 80185fe:	4413      	add	r3, r2
 8018600:	781b      	ldrb	r3, [r3, #0]
 8018602:	4619      	mov	r1, r3
 8018604:	481d      	ldr	r0, [pc, #116]	@ (801867c <USBH_SelectInterface+0xcc>)
 8018606:	f003 f895 	bl	801b734 <iprintf>
 801860a:	200a      	movs	r0, #10
 801860c:	f003 f8a4 	bl	801b758 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 8018610:	78fb      	ldrb	r3, [r7, #3]
 8018612:	687a      	ldr	r2, [r7, #4]
 8018614:	2132      	movs	r1, #50	@ 0x32
 8018616:	fb01 f303 	mul.w	r3, r1, r3
 801861a:	441a      	add	r2, r3
 801861c:	f248 1348 	movw	r3, #33096	@ 0x8148
 8018620:	4413      	add	r3, r2
 8018622:	781b      	ldrb	r3, [r3, #0]
 8018624:	4619      	mov	r1, r3
 8018626:	4816      	ldr	r0, [pc, #88]	@ (8018680 <USBH_SelectInterface+0xd0>)
 8018628:	f003 f884 	bl	801b734 <iprintf>
 801862c:	200a      	movs	r0, #10
 801862e:	f003 f893 	bl	801b758 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 8018632:	78fb      	ldrb	r3, [r7, #3]
 8018634:	687a      	ldr	r2, [r7, #4]
 8018636:	2132      	movs	r1, #50	@ 0x32
 8018638:	fb01 f303 	mul.w	r3, r1, r3
 801863c:	441a      	add	r2, r3
 801863e:	f248 1349 	movw	r3, #33097	@ 0x8149
 8018642:	4413      	add	r3, r2
 8018644:	781b      	ldrb	r3, [r3, #0]
 8018646:	4619      	mov	r1, r3
 8018648:	480e      	ldr	r0, [pc, #56]	@ (8018684 <USBH_SelectInterface+0xd4>)
 801864a:	f003 f873 	bl	801b734 <iprintf>
 801864e:	200a      	movs	r0, #10
 8018650:	f003 f882 	bl	801b758 <putchar>
 8018654:	e00a      	b.n	801866c <USBH_SelectInterface+0xbc>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 8018656:	480c      	ldr	r0, [pc, #48]	@ (8018688 <USBH_SelectInterface+0xd8>)
 8018658:	f003 f86c 	bl	801b734 <iprintf>
 801865c:	480b      	ldr	r0, [pc, #44]	@ (801868c <USBH_SelectInterface+0xdc>)
 801865e:	f003 f869 	bl	801b734 <iprintf>
 8018662:	200a      	movs	r0, #10
 8018664:	f003 f878 	bl	801b758 <putchar>
    status = USBH_FAIL;
 8018668:	2302      	movs	r3, #2
 801866a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801866c:	7bfb      	ldrb	r3, [r7, #15]
}
 801866e:	4618      	mov	r0, r3
 8018670:	3710      	adds	r7, #16
 8018672:	46bd      	mov	sp, r7
 8018674:	bd80      	pop	{r7, pc}
 8018676:	bf00      	nop
 8018678:	0801d21c 	.word	0x0801d21c
 801867c:	0801d23c 	.word	0x0801d23c
 8018680:	0801d24c 	.word	0x0801d24c
 8018684:	0801d25c 	.word	0x0801d25c
 8018688:	0801d1cc 	.word	0x0801d1cc
 801868c:	0801d26c 	.word	0x0801d26c

08018690 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8018690:	b480      	push	{r7}
 8018692:	b087      	sub	sp, #28
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
 8018698:	4608      	mov	r0, r1
 801869a:	4611      	mov	r1, r2
 801869c:	461a      	mov	r2, r3
 801869e:	4603      	mov	r3, r0
 80186a0:	70fb      	strb	r3, [r7, #3]
 80186a2:	460b      	mov	r3, r1
 80186a4:	70bb      	strb	r3, [r7, #2]
 80186a6:	4613      	mov	r3, r2
 80186a8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80186aa:	2300      	movs	r3, #0
 80186ac:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80186ae:	2300      	movs	r3, #0
 80186b0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80186b2:	687a      	ldr	r2, [r7, #4]
 80186b4:	f248 1338 	movw	r3, #33080	@ 0x8138
 80186b8:	4413      	add	r3, r2
 80186ba:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80186bc:	e025      	b.n	801870a <USBH_FindInterface+0x7a>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80186be:	7dfb      	ldrb	r3, [r7, #23]
 80186c0:	2232      	movs	r2, #50	@ 0x32
 80186c2:	fb02 f303 	mul.w	r3, r2, r3
 80186c6:	3308      	adds	r3, #8
 80186c8:	68fa      	ldr	r2, [r7, #12]
 80186ca:	4413      	add	r3, r2
 80186cc:	3302      	adds	r3, #2
 80186ce:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80186d0:	693b      	ldr	r3, [r7, #16]
 80186d2:	795b      	ldrb	r3, [r3, #5]
 80186d4:	78fa      	ldrb	r2, [r7, #3]
 80186d6:	429a      	cmp	r2, r3
 80186d8:	d002      	beq.n	80186e0 <USBH_FindInterface+0x50>
 80186da:	78fb      	ldrb	r3, [r7, #3]
 80186dc:	2bff      	cmp	r3, #255	@ 0xff
 80186de:	d111      	bne.n	8018704 <USBH_FindInterface+0x74>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80186e0:	693b      	ldr	r3, [r7, #16]
 80186e2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80186e4:	78ba      	ldrb	r2, [r7, #2]
 80186e6:	429a      	cmp	r2, r3
 80186e8:	d002      	beq.n	80186f0 <USBH_FindInterface+0x60>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80186ea:	78bb      	ldrb	r3, [r7, #2]
 80186ec:	2bff      	cmp	r3, #255	@ 0xff
 80186ee:	d109      	bne.n	8018704 <USBH_FindInterface+0x74>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80186f0:	693b      	ldr	r3, [r7, #16]
 80186f2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80186f4:	787a      	ldrb	r2, [r7, #1]
 80186f6:	429a      	cmp	r2, r3
 80186f8:	d002      	beq.n	8018700 <USBH_FindInterface+0x70>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80186fa:	787b      	ldrb	r3, [r7, #1]
 80186fc:	2bff      	cmp	r3, #255	@ 0xff
 80186fe:	d101      	bne.n	8018704 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 8018700:	7dfb      	ldrb	r3, [r7, #23]
 8018702:	e006      	b.n	8018712 <USBH_FindInterface+0x82>
    }
    if_ix++;
 8018704:	7dfb      	ldrb	r3, [r7, #23]
 8018706:	3301      	adds	r3, #1
 8018708:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801870a:	7dfb      	ldrb	r3, [r7, #23]
 801870c:	2b09      	cmp	r3, #9
 801870e:	d9d6      	bls.n	80186be <USBH_FindInterface+0x2e>
  }
  return 0xFFU;
 8018710:	23ff      	movs	r3, #255	@ 0xff
}
 8018712:	4618      	mov	r0, r3
 8018714:	371c      	adds	r7, #28
 8018716:	46bd      	mov	sp, r7
 8018718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801871c:	4770      	bx	lr

0801871e <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 801871e:	b480      	push	{r7}
 8018720:	b087      	sub	sp, #28
 8018722:	af00      	add	r7, sp, #0
 8018724:	6078      	str	r0, [r7, #4]
 8018726:	460b      	mov	r3, r1
 8018728:	70fb      	strb	r3, [r7, #3]
 801872a:	4613      	mov	r3, r2
 801872c:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 801872e:	2300      	movs	r3, #0
 8018730:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8018732:	2300      	movs	r3, #0
 8018734:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8018736:	687a      	ldr	r2, [r7, #4]
 8018738:	f248 1338 	movw	r3, #33080	@ 0x8138
 801873c:	4413      	add	r3, r2
 801873e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8018740:	e017      	b.n	8018772 <USBH_FindInterfaceIndex+0x54>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8018742:	7dfb      	ldrb	r3, [r7, #23]
 8018744:	2232      	movs	r2, #50	@ 0x32
 8018746:	fb02 f303 	mul.w	r3, r2, r3
 801874a:	3308      	adds	r3, #8
 801874c:	68fa      	ldr	r2, [r7, #12]
 801874e:	4413      	add	r3, r2
 8018750:	3302      	adds	r3, #2
 8018752:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 8018754:	693b      	ldr	r3, [r7, #16]
 8018756:	789b      	ldrb	r3, [r3, #2]
 8018758:	78fa      	ldrb	r2, [r7, #3]
 801875a:	429a      	cmp	r2, r3
 801875c:	d106      	bne.n	801876c <USBH_FindInterfaceIndex+0x4e>
 801875e:	693b      	ldr	r3, [r7, #16]
 8018760:	78db      	ldrb	r3, [r3, #3]
 8018762:	78ba      	ldrb	r2, [r7, #2]
 8018764:	429a      	cmp	r2, r3
 8018766:	d101      	bne.n	801876c <USBH_FindInterfaceIndex+0x4e>
    {
      return  if_ix;
 8018768:	7dfb      	ldrb	r3, [r7, #23]
 801876a:	e006      	b.n	801877a <USBH_FindInterfaceIndex+0x5c>
    }
    if_ix++;
 801876c:	7dfb      	ldrb	r3, [r7, #23]
 801876e:	3301      	adds	r3, #1
 8018770:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8018772:	7dfb      	ldrb	r3, [r7, #23]
 8018774:	2b09      	cmp	r3, #9
 8018776:	d9e4      	bls.n	8018742 <USBH_FindInterfaceIndex+0x24>
  }
  return 0xFFU;
 8018778:	23ff      	movs	r3, #255	@ 0xff
}
 801877a:	4618      	mov	r0, r3
 801877c:	371c      	adds	r7, #28
 801877e:	46bd      	mov	sp, r7
 8018780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018784:	4770      	bx	lr

08018786 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8018786:	b580      	push	{r7, lr}
 8018788:	b082      	sub	sp, #8
 801878a:	af00      	add	r7, sp, #0
 801878c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 801878e:	6878      	ldr	r0, [r7, #4]
 8018790:	f002 fc72 	bl	801b078 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8018794:	2101      	movs	r1, #1
 8018796:	6878      	ldr	r0, [r7, #4]
 8018798:	f002 fd9d 	bl	801b2d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 801879c:	2300      	movs	r3, #0
}
 801879e:	4618      	mov	r0, r3
 80187a0:	3708      	adds	r7, #8
 80187a2:	46bd      	mov	sp, r7
 80187a4:	bd80      	pop	{r7, pc}
	...

080187a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b088      	sub	sp, #32
 80187ac:	af04      	add	r7, sp, #16
 80187ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80187b0:	2302      	movs	r3, #2
 80187b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80187b4:	2300      	movs	r3, #0
 80187b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80187be:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 80187c2:	b2db      	uxtb	r3, r3
 80187c4:	2b01      	cmp	r3, #1
 80187c6:	d102      	bne.n	80187ce <USBH_Process+0x26>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	2203      	movs	r2, #3
 80187cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	781b      	ldrb	r3, [r3, #0]
 80187d2:	b2db      	uxtb	r3, r3
 80187d4:	2b0b      	cmp	r3, #11
 80187d6:	f200 8298 	bhi.w	8018d0a <USBH_Process+0x562>
 80187da:	a201      	add	r2, pc, #4	@ (adr r2, 80187e0 <USBH_Process+0x38>)
 80187dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187e0:	08018811 	.word	0x08018811
 80187e4:	0801885d 	.word	0x0801885d
 80187e8:	080188fd 	.word	0x080188fd
 80187ec:	08018c77 	.word	0x08018c77
 80187f0:	08018d0b 	.word	0x08018d0b
 80187f4:	080189b9 	.word	0x080189b9
 80187f8:	08018be9 	.word	0x08018be9
 80187fc:	08018a0f 	.word	0x08018a0f
 8018800:	08018a37 	.word	0x08018a37
 8018804:	08018a65 	.word	0x08018a65
 8018808:	08018ac5 	.word	0x08018ac5
 801880c:	08018c57 	.word	0x08018c57
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018816:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 801881a:	b2db      	uxtb	r3, r3
 801881c:	2b00      	cmp	r3, #0
 801881e:	f000 8276 	beq.w	8018d0e <USBH_Process+0x566>
      {
        USBH_UsrLog("USB Device Connected");
 8018822:	48b4      	ldr	r0, [pc, #720]	@ (8018af4 <USBH_Process+0x34c>)
 8018824:	f002 ff86 	bl	801b734 <iprintf>
 8018828:	200a      	movs	r0, #10
 801882a:	f002 ff95 	bl	801b758 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	2201      	movs	r2, #1
 8018832:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8018834:	20c8      	movs	r0, #200	@ 0xc8
 8018836:	f002 fdc6 	bl	801b3c6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 801883a:	6878      	ldr	r0, [r7, #4]
 801883c:	f002 fc7f 	bl	801b13e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018846:	2200      	movs	r2, #0
 8018848:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
        phost->Timeout = 0U;
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018852:	461a      	mov	r2, r3
 8018854:	2300      	movs	r3, #0
 8018856:	f8c2 3398 	str.w	r3, [r2, #920]	@ 0x398

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 801885a:	e258      	b.n	8018d0e <USBH_Process+0x566>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018862:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8018866:	b2db      	uxtb	r3, r3
 8018868:	2b01      	cmp	r3, #1
 801886a:	d10f      	bne.n	801888c <USBH_Process+0xe4>
      {
        USBH_UsrLog("USB Device Reset Completed");
 801886c:	48a2      	ldr	r0, [pc, #648]	@ (8018af8 <USBH_Process+0x350>)
 801886e:	f002 ff61 	bl	801b734 <iprintf>
 8018872:	200a      	movs	r0, #10
 8018874:	f002 ff70 	bl	801b758 <putchar>
        phost->device.RstCnt = 0U;
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801887e:	2200      	movs	r2, #0
 8018880:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
        phost->gState = HOST_DEV_ATTACHED;
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	2202      	movs	r2, #2
 8018888:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 801888a:	e24d      	b.n	8018d28 <USBH_Process+0x580>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018892:	f8d3 3398 	ldr.w	r3, [r3, #920]	@ 0x398
 8018896:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801889a:	d920      	bls.n	80188de <USBH_Process+0x136>
          phost->device.RstCnt++;
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80188a2:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 80188a6:	3301      	adds	r3, #1
 80188a8:	b2da      	uxtb	r2, r3
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80188b0:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
          if (phost->device.RstCnt > 3U)
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80188ba:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 80188be:	2b03      	cmp	r3, #3
 80188c0:	d909      	bls.n	80188d6 <USBH_Process+0x12e>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 80188c2:	488e      	ldr	r0, [pc, #568]	@ (8018afc <USBH_Process+0x354>)
 80188c4:	f002 ff36 	bl	801b734 <iprintf>
 80188c8:	200a      	movs	r0, #10
 80188ca:	f002 ff45 	bl	801b758 <putchar>
            phost->gState = HOST_ABORT_STATE;
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	220d      	movs	r2, #13
 80188d2:	701a      	strb	r2, [r3, #0]
      break;
 80188d4:	e228      	b.n	8018d28 <USBH_Process+0x580>
            phost->gState = HOST_IDLE;
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	2200      	movs	r2, #0
 80188da:	701a      	strb	r2, [r3, #0]
      break;
 80188dc:	e224      	b.n	8018d28 <USBH_Process+0x580>
          phost->Timeout += 10U;
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80188e4:	f8d3 3398 	ldr.w	r3, [r3, #920]	@ 0x398
 80188e8:	330a      	adds	r3, #10
 80188ea:	687a      	ldr	r2, [r7, #4]
 80188ec:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80188f0:	f8c2 3398 	str.w	r3, [r2, #920]	@ 0x398
          USBH_Delay(10U);
 80188f4:	200a      	movs	r0, #10
 80188f6:	f002 fd66 	bl	801b3c6 <USBH_Delay>
      break;
 80188fa:	e215      	b.n	8018d28 <USBH_Process+0x580>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018902:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 8018906:	2b00      	cmp	r3, #0
 8018908:	d007      	beq.n	801891a <USBH_Process+0x172>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018910:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 8018914:	2104      	movs	r1, #4
 8018916:	6878      	ldr	r0, [r7, #4]
 8018918:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 801891a:	2064      	movs	r0, #100	@ 0x64
 801891c:	f002 fd53 	bl	801b3c6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8018920:	6878      	ldr	r0, [r7, #4]
 8018922:	f002 fbe3 	bl	801b0ec <USBH_LL_GetSpeed>
 8018926:	4603      	mov	r3, r0
 8018928:	461a      	mov	r2, r3
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018930:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	2205      	movs	r2, #5
 8018938:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 801893a:	2100      	movs	r1, #0
 801893c:	6878      	ldr	r0, [r7, #4]
 801893e:	f001 fd3c 	bl	801a3ba <USBH_AllocPipe>
 8018942:	4603      	mov	r3, r0
 8018944:	461a      	mov	r2, r3
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 801894a:	2180      	movs	r1, #128	@ 0x80
 801894c:	6878      	ldr	r0, [r7, #4]
 801894e:	f001 fd34 	bl	801a3ba <USBH_AllocPipe>
 8018952:	4603      	mov	r3, r0
 8018954:	461a      	mov	r2, r3
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	7919      	ldrb	r1, [r3, #4]
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018964:	f893 011c 	ldrb.w	r0, [r3, #284]	@ 0x11c
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801896e:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8018972:	687a      	ldr	r2, [r7, #4]
 8018974:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8018976:	9202      	str	r2, [sp, #8]
 8018978:	2200      	movs	r2, #0
 801897a:	9201      	str	r2, [sp, #4]
 801897c:	9300      	str	r3, [sp, #0]
 801897e:	4603      	mov	r3, r0
 8018980:	2280      	movs	r2, #128	@ 0x80
 8018982:	6878      	ldr	r0, [r7, #4]
 8018984:	f001 fcea 	bl	801a35c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	7959      	ldrb	r1, [r3, #5]
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018992:	f893 011c 	ldrb.w	r0, [r3, #284]	@ 0x11c
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801899c:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80189a0:	687a      	ldr	r2, [r7, #4]
 80189a2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80189a4:	9202      	str	r2, [sp, #8]
 80189a6:	2200      	movs	r2, #0
 80189a8:	9201      	str	r2, [sp, #4]
 80189aa:	9300      	str	r3, [sp, #0]
 80189ac:	4603      	mov	r3, r0
 80189ae:	2200      	movs	r2, #0
 80189b0:	6878      	ldr	r0, [r7, #4]
 80189b2:	f001 fcd3 	bl	801a35c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80189b6:	e1b7      	b.n	8018d28 <USBH_Process+0x580>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80189b8:	6878      	ldr	r0, [r7, #4]
 80189ba:	f000 f9c9 	bl	8018d50 <USBH_HandleEnum>
 80189be:	4603      	mov	r3, r0
 80189c0:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80189c2:	7bbb      	ldrb	r3, [r7, #14]
 80189c4:	b2db      	uxtb	r3, r3
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	f040 81a3 	bne.w	8018d12 <USBH_Process+0x56a>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 80189cc:	484c      	ldr	r0, [pc, #304]	@ (8018b00 <USBH_Process+0x358>)
 80189ce:	f002 feb1 	bl	801b734 <iprintf>
 80189d2:	200a      	movs	r0, #10
 80189d4:	f002 fec0 	bl	801b758 <putchar>

        phost->device.current_interface = 0U;
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80189de:	2200      	movs	r2, #0
 80189e0:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80189ea:	f893 3137 	ldrb.w	r3, [r3, #311]	@ 0x137
 80189ee:	2b01      	cmp	r3, #1
 80189f0:	d109      	bne.n	8018a06 <USBH_Process+0x25e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 80189f2:	4844      	ldr	r0, [pc, #272]	@ (8018b04 <USBH_Process+0x35c>)
 80189f4:	f002 fe9e 	bl	801b734 <iprintf>
 80189f8:	200a      	movs	r0, #10
 80189fa:	f002 fead 	bl	801b758 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	2208      	movs	r2, #8
 8018a02:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8018a04:	e185      	b.n	8018d12 <USBH_Process+0x56a>
          phost->gState = HOST_INPUT;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	2207      	movs	r2, #7
 8018a0a:	701a      	strb	r2, [r3, #0]
      break;
 8018a0c:	e181      	b.n	8018d12 <USBH_Process+0x56a>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018a14:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	f000 817c 	beq.w	8018d16 <USBH_Process+0x56e>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018a24:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 8018a28:	2101      	movs	r1, #1
 8018a2a:	6878      	ldr	r0, [r7, #4]
 8018a2c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	2208      	movs	r2, #8
 8018a32:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8018a34:	e16f      	b.n	8018d16 <USBH_Process+0x56e>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018a3c:	f893 313d 	ldrb.w	r3, [r3, #317]	@ 0x13d
 8018a40:	4619      	mov	r1, r3
 8018a42:	6878      	ldr	r0, [r7, #4]
 8018a44:	f000 fe33 	bl	80196ae <USBH_SetCfg>
 8018a48:	4603      	mov	r3, r0
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	f040 8165 	bne.w	8018d1a <USBH_Process+0x572>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	2209      	movs	r2, #9
 8018a54:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 8018a56:	482c      	ldr	r0, [pc, #176]	@ (8018b08 <USBH_Process+0x360>)
 8018a58:	f002 fe6c 	bl	801b734 <iprintf>
 8018a5c:	200a      	movs	r0, #10
 8018a5e:	f002 fe7b 	bl	801b758 <putchar>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8018a62:	e15a      	b.n	8018d1a <USBH_Process+0x572>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018a6a:	f893 313f 	ldrb.w	r3, [r3, #319]	@ 0x13f
 8018a6e:	f003 0320 	and.w	r3, r3, #32
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d022      	beq.n	8018abc <USBH_Process+0x314>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8018a76:	2101      	movs	r1, #1
 8018a78:	6878      	ldr	r0, [r7, #4]
 8018a7a:	f000 fe62 	bl	8019742 <USBH_SetFeature>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8018a82:	7bbb      	ldrb	r3, [r7, #14]
 8018a84:	b2db      	uxtb	r3, r3
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d109      	bne.n	8018a9e <USBH_Process+0x2f6>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 8018a8a:	4820      	ldr	r0, [pc, #128]	@ (8018b0c <USBH_Process+0x364>)
 8018a8c:	f002 fe52 	bl	801b734 <iprintf>
 8018a90:	200a      	movs	r0, #10
 8018a92:	f002 fe61 	bl	801b758 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	220a      	movs	r2, #10
 8018a9a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8018a9c:	e13f      	b.n	8018d1e <USBH_Process+0x576>
        else if (status == USBH_NOT_SUPPORTED)
 8018a9e:	7bbb      	ldrb	r3, [r7, #14]
 8018aa0:	b2db      	uxtb	r3, r3
 8018aa2:	2b03      	cmp	r3, #3
 8018aa4:	f040 813b 	bne.w	8018d1e <USBH_Process+0x576>
          USBH_UsrLog("Remote wakeup not supported by the device");
 8018aa8:	4819      	ldr	r0, [pc, #100]	@ (8018b10 <USBH_Process+0x368>)
 8018aaa:	f002 fe43 	bl	801b734 <iprintf>
 8018aae:	200a      	movs	r0, #10
 8018ab0:	f002 fe52 	bl	801b758 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	220a      	movs	r2, #10
 8018ab8:	701a      	strb	r2, [r3, #0]
      break;
 8018aba:	e130      	b.n	8018d1e <USBH_Process+0x576>
        phost->gState = HOST_CHECK_CLASS;
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	220a      	movs	r2, #10
 8018ac0:	701a      	strb	r2, [r3, #0]
      break;
 8018ac2:	e12c      	b.n	8018d1e <USBH_Process+0x576>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018aca:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d106      	bne.n	8018ae0 <USBH_Process+0x338>
      {
        USBH_UsrLog("No Class has been registered.");
 8018ad2:	4810      	ldr	r0, [pc, #64]	@ (8018b14 <USBH_Process+0x36c>)
 8018ad4:	f002 fe2e 	bl	801b734 <iprintf>
 8018ad8:	200a      	movs	r0, #10
 8018ada:	f002 fe3d 	bl	801b758 <putchar>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8018ade:	e123      	b.n	8018d28 <USBH_Process+0x580>
        phost->pActiveClass = NULL;
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018ae6:	461a      	mov	r2, r3
 8018ae8:	2300      	movs	r3, #0
 8018aea:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8018aee:	2300      	movs	r3, #0
 8018af0:	73fb      	strb	r3, [r7, #15]
 8018af2:	e030      	b.n	8018b56 <USBH_Process+0x3ae>
 8018af4:	0801d28c 	.word	0x0801d28c
 8018af8:	0801d2a4 	.word	0x0801d2a4
 8018afc:	0801d2c0 	.word	0x0801d2c0
 8018b00:	0801d2ec 	.word	0x0801d2ec
 8018b04:	0801d300 	.word	0x0801d300
 8018b08:	0801d328 	.word	0x0801d328
 8018b0c:	0801d344 	.word	0x0801d344
 8018b10:	0801d364 	.word	0x0801d364
 8018b14:	0801d390 	.word	0x0801d390
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8018b18:	7bf9      	ldrb	r1, [r7, #15]
 8018b1a:	687a      	ldr	r2, [r7, #4]
 8018b1c:	f242 03ce 	movw	r3, #8398	@ 0x20ce
 8018b20:	440b      	add	r3, r1
 8018b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018b26:	791a      	ldrb	r2, [r3, #4]
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018b2e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8018b32:	429a      	cmp	r2, r3
 8018b34:	d10c      	bne.n	8018b50 <USBH_Process+0x3a8>
            phost->pActiveClass = phost->pClass[idx];
 8018b36:	7bf9      	ldrb	r1, [r7, #15]
 8018b38:	687a      	ldr	r2, [r7, #4]
 8018b3a:	f242 03ce 	movw	r3, #8398	@ 0x20ce
 8018b3e:	440b      	add	r3, r1
 8018b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018b44:	687a      	ldr	r2, [r7, #4]
 8018b46:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018b4a:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
            break;
 8018b4e:	e005      	b.n	8018b5c <USBH_Process+0x3b4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8018b50:	7bfb      	ldrb	r3, [r7, #15]
 8018b52:	3301      	adds	r3, #1
 8018b54:	73fb      	strb	r3, [r7, #15]
 8018b56:	7bfb      	ldrb	r3, [r7, #15]
 8018b58:	2b04      	cmp	r3, #4
 8018b5a:	d9dd      	bls.n	8018b18 <USBH_Process+0x370>
        if (phost->pActiveClass != NULL)
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018b62:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d034      	beq.n	8018bd4 <USBH_Process+0x42c>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018b70:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8018b74:	689b      	ldr	r3, [r3, #8]
 8018b76:	6878      	ldr	r0, [r7, #4]
 8018b78:	4798      	blx	r3
 8018b7a:	4603      	mov	r3, r0
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d118      	bne.n	8018bb2 <USBH_Process+0x40a>
            phost->gState = HOST_CLASS_REQUEST;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	2206      	movs	r2, #6
 8018b84:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018b8c:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	4619      	mov	r1, r3
 8018b94:	4867      	ldr	r0, [pc, #412]	@ (8018d34 <USBH_Process+0x58c>)
 8018b96:	f002 fdcd 	bl	801b734 <iprintf>
 8018b9a:	200a      	movs	r0, #10
 8018b9c:	f002 fddc 	bl	801b758 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018ba6:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 8018baa:	2103      	movs	r1, #3
 8018bac:	6878      	ldr	r0, [r7, #4]
 8018bae:	4798      	blx	r3
      break;
 8018bb0:	e0ba      	b.n	8018d28 <USBH_Process+0x580>
            phost->gState = HOST_ABORT_STATE;
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	220d      	movs	r2, #13
 8018bb6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018bbe:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	4619      	mov	r1, r3
 8018bc6:	485c      	ldr	r0, [pc, #368]	@ (8018d38 <USBH_Process+0x590>)
 8018bc8:	f002 fdb4 	bl	801b734 <iprintf>
 8018bcc:	200a      	movs	r0, #10
 8018bce:	f002 fdc3 	bl	801b758 <putchar>
      break;
 8018bd2:	e0a9      	b.n	8018d28 <USBH_Process+0x580>
          phost->gState = HOST_ABORT_STATE;
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	220d      	movs	r2, #13
 8018bd8:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 8018bda:	4858      	ldr	r0, [pc, #352]	@ (8018d3c <USBH_Process+0x594>)
 8018bdc:	f002 fdaa 	bl	801b734 <iprintf>
 8018be0:	200a      	movs	r0, #10
 8018be2:	f002 fdb9 	bl	801b758 <putchar>
      break;
 8018be6:	e09f      	b.n	8018d28 <USBH_Process+0x580>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018bee:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d022      	beq.n	8018c3c <USBH_Process+0x494>
      {
        status = phost->pActiveClass->Requests(phost);
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018bfc:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8018c00:	691b      	ldr	r3, [r3, #16]
 8018c02:	6878      	ldr	r0, [r7, #4]
 8018c04:	4798      	blx	r3
 8018c06:	4603      	mov	r3, r0
 8018c08:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8018c0a:	7bbb      	ldrb	r3, [r7, #14]
 8018c0c:	b2db      	uxtb	r3, r3
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d103      	bne.n	8018c1a <USBH_Process+0x472>
        {
          phost->gState = HOST_CLASS;
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	220b      	movs	r2, #11
 8018c16:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8018c18:	e083      	b.n	8018d22 <USBH_Process+0x57a>
        else if (status == USBH_FAIL)
 8018c1a:	7bbb      	ldrb	r3, [r7, #14]
 8018c1c:	b2db      	uxtb	r3, r3
 8018c1e:	2b02      	cmp	r3, #2
 8018c20:	d17f      	bne.n	8018d22 <USBH_Process+0x57a>
          phost->gState = HOST_ABORT_STATE;
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	220d      	movs	r2, #13
 8018c26:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8018c28:	4845      	ldr	r0, [pc, #276]	@ (8018d40 <USBH_Process+0x598>)
 8018c2a:	f002 fd83 	bl	801b734 <iprintf>
 8018c2e:	4845      	ldr	r0, [pc, #276]	@ (8018d44 <USBH_Process+0x59c>)
 8018c30:	f002 fd80 	bl	801b734 <iprintf>
 8018c34:	200a      	movs	r0, #10
 8018c36:	f002 fd8f 	bl	801b758 <putchar>
      break;
 8018c3a:	e072      	b.n	8018d22 <USBH_Process+0x57a>
        phost->gState = HOST_ABORT_STATE;
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	220d      	movs	r2, #13
 8018c40:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 8018c42:	483f      	ldr	r0, [pc, #252]	@ (8018d40 <USBH_Process+0x598>)
 8018c44:	f002 fd76 	bl	801b734 <iprintf>
 8018c48:	483f      	ldr	r0, [pc, #252]	@ (8018d48 <USBH_Process+0x5a0>)
 8018c4a:	f002 fd73 	bl	801b734 <iprintf>
 8018c4e:	200a      	movs	r0, #10
 8018c50:	f002 fd82 	bl	801b758 <putchar>
      break;
 8018c54:	e065      	b.n	8018d22 <USBH_Process+0x57a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018c5c:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d060      	beq.n	8018d26 <USBH_Process+0x57e>
      {
        phost->pActiveClass->BgndProcess(phost);
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018c6a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8018c6e:	695b      	ldr	r3, [r3, #20]
 8018c70:	6878      	ldr	r0, [r7, #4]
 8018c72:	4798      	blx	r3
      }
      break;
 8018c74:	e057      	b.n	8018d26 <USBH_Process+0x57e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018c7c:	2200      	movs	r2, #0
 8018c7e:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

      (void)DeInitStateMachine(phost);
 8018c82:	6878      	ldr	r0, [r7, #4]
 8018c84:	f7ff fbca 	bl	801841c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018c8e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d00e      	beq.n	8018cb4 <USBH_Process+0x50c>
      {
        phost->pActiveClass->DeInit(phost);
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018c9c:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8018ca0:	68db      	ldr	r3, [r3, #12]
 8018ca2:	6878      	ldr	r0, [r7, #4]
 8018ca4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018cac:	461a      	mov	r2, r3
 8018cae:	2300      	movs	r3, #0
 8018cb0:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
      }

      if (phost->pUser != NULL)
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018cba:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d007      	beq.n	8018cd2 <USBH_Process+0x52a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018cc8:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 8018ccc:	2105      	movs	r1, #5
 8018cce:	6878      	ldr	r0, [r7, #4]
 8018cd0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8018cd2:	481e      	ldr	r0, [pc, #120]	@ (8018d4c <USBH_Process+0x5a4>)
 8018cd4:	f002 fd2e 	bl	801b734 <iprintf>
 8018cd8:	200a      	movs	r0, #10
 8018cda:	f002 fd3d 	bl	801b758 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018ce4:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8018ce8:	b2db      	uxtb	r3, r3
 8018cea:	2b01      	cmp	r3, #1
 8018cec:	d109      	bne.n	8018d02 <USBH_Process+0x55a>
      {
        phost->device.is_ReEnumerated = 0U;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018cf4:	2200      	movs	r2, #0
 8018cf6:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8018cfa:	6878      	ldr	r0, [r7, #4]
 8018cfc:	f7ff fd43 	bl	8018786 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8018d00:	e012      	b.n	8018d28 <USBH_Process+0x580>
        (void)USBH_LL_Start(phost);
 8018d02:	6878      	ldr	r0, [r7, #4]
 8018d04:	f002 f9b8 	bl	801b078 <USBH_LL_Start>
      break;
 8018d08:	e00e      	b.n	8018d28 <USBH_Process+0x580>

    case HOST_ABORT_STATE:
    default :
      break;
 8018d0a:	bf00      	nop
 8018d0c:	e00c      	b.n	8018d28 <USBH_Process+0x580>
      break;
 8018d0e:	bf00      	nop
 8018d10:	e00a      	b.n	8018d28 <USBH_Process+0x580>
      break;
 8018d12:	bf00      	nop
 8018d14:	e008      	b.n	8018d28 <USBH_Process+0x580>
    break;
 8018d16:	bf00      	nop
 8018d18:	e006      	b.n	8018d28 <USBH_Process+0x580>
      break;
 8018d1a:	bf00      	nop
 8018d1c:	e004      	b.n	8018d28 <USBH_Process+0x580>
      break;
 8018d1e:	bf00      	nop
 8018d20:	e002      	b.n	8018d28 <USBH_Process+0x580>
      break;
 8018d22:	bf00      	nop
 8018d24:	e000      	b.n	8018d28 <USBH_Process+0x580>
      break;
 8018d26:	bf00      	nop
  }
  return USBH_OK;
 8018d28:	2300      	movs	r3, #0
}
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	3710      	adds	r7, #16
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	bd80      	pop	{r7, pc}
 8018d32:	bf00      	nop
 8018d34:	0801d3b0 	.word	0x0801d3b0
 8018d38:	0801d3c4 	.word	0x0801d3c4
 8018d3c:	0801d3e4 	.word	0x0801d3e4
 8018d40:	0801d1cc 	.word	0x0801d1cc
 8018d44:	0801d40c 	.word	0x0801d40c
 8018d48:	0801d434 	.word	0x0801d434
 8018d4c:	0801d44c 	.word	0x0801d44c

08018d50 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b088      	sub	sp, #32
 8018d54:	af04      	add	r7, sp, #16
 8018d56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8018d58:	2301      	movs	r3, #1
 8018d5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8018d5c:	2301      	movs	r3, #1
 8018d5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	785b      	ldrb	r3, [r3, #1]
 8018d64:	2b07      	cmp	r3, #7
 8018d66:	f200 82bb 	bhi.w	80192e0 <USBH_HandleEnum+0x590>
 8018d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8018d70 <USBH_HandleEnum+0x20>)
 8018d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d70:	08018d91 	.word	0x08018d91
 8018d74:	08018e89 	.word	0x08018e89
 8018d78:	08018f4d 	.word	0x08018f4d
 8018d7c:	08019021 	.word	0x08019021
 8018d80:	080190b5 	.word	0x080190b5
 8018d84:	08019177 	.word	0x08019177
 8018d88:	080191f3 	.word	0x080191f3
 8018d8c:	0801926d 	.word	0x0801926d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8018d90:	2108      	movs	r1, #8
 8018d92:	6878      	ldr	r0, [r7, #4]
 8018d94:	f000 fb7e 	bl	8019494 <USBH_Get_DevDesc>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8018d9c:	7bbb      	ldrb	r3, [r7, #14]
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d138      	bne.n	8018e14 <USBH_HandleEnum+0xc4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018da8:	f893 212d 	ldrb.w	r2, [r3, #301]	@ 0x12d
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	2201      	movs	r2, #1
 8018db4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	7919      	ldrb	r1, [r3, #4]
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018dc0:	f893 011c 	ldrb.w	r0, [r3, #284]	@ 0x11c
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018dca:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8018dce:	687a      	ldr	r2, [r7, #4]
 8018dd0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8018dd2:	9202      	str	r2, [sp, #8]
 8018dd4:	2200      	movs	r2, #0
 8018dd6:	9201      	str	r2, [sp, #4]
 8018dd8:	9300      	str	r3, [sp, #0]
 8018dda:	4603      	mov	r3, r0
 8018ddc:	2280      	movs	r2, #128	@ 0x80
 8018dde:	6878      	ldr	r0, [r7, #4]
 8018de0:	f001 fabc 	bl	801a35c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	7959      	ldrb	r1, [r3, #5]
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018dee:	f893 011c 	ldrb.w	r0, [r3, #284]	@ 0x11c
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018df8:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8018dfc:	687a      	ldr	r2, [r7, #4]
 8018dfe:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8018e00:	9202      	str	r2, [sp, #8]
 8018e02:	2200      	movs	r2, #0
 8018e04:	9201      	str	r2, [sp, #4]
 8018e06:	9300      	str	r3, [sp, #0]
 8018e08:	4603      	mov	r3, r0
 8018e0a:	2200      	movs	r2, #0
 8018e0c:	6878      	ldr	r0, [r7, #4]
 8018e0e:	f001 faa5 	bl	801a35c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8018e12:	e267      	b.n	80192e4 <USBH_HandleEnum+0x594>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018e14:	7bbb      	ldrb	r3, [r7, #14]
 8018e16:	2b03      	cmp	r3, #3
 8018e18:	f040 8264 	bne.w	80192e4 <USBH_HandleEnum+0x594>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 8018e1c:	48ae      	ldr	r0, [pc, #696]	@ (80190d8 <USBH_HandleEnum+0x388>)
 8018e1e:	f002 fc89 	bl	801b734 <iprintf>
 8018e22:	48ae      	ldr	r0, [pc, #696]	@ (80190dc <USBH_HandleEnum+0x38c>)
 8018e24:	f002 fc86 	bl	801b734 <iprintf>
 8018e28:	200a      	movs	r0, #10
 8018e2a:	f002 fc95 	bl	801b758 <putchar>
        phost->device.EnumCnt++;
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018e34:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8018e38:	3301      	adds	r3, #1
 8018e3a:	b2da      	uxtb	r2, r3
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018e42:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
        if (phost->device.EnumCnt > 3U)
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018e4c:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8018e50:	2b03      	cmp	r3, #3
 8018e52:	d909      	bls.n	8018e68 <USBH_HandleEnum+0x118>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8018e54:	48a2      	ldr	r0, [pc, #648]	@ (80190e0 <USBH_HandleEnum+0x390>)
 8018e56:	f002 fc6d 	bl	801b734 <iprintf>
 8018e5a:	200a      	movs	r0, #10
 8018e5c:	f002 fc7c 	bl	801b758 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	220d      	movs	r2, #13
 8018e64:	701a      	strb	r2, [r3, #0]
      break;
 8018e66:	e23d      	b.n	80192e4 <USBH_HandleEnum+0x594>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	795b      	ldrb	r3, [r3, #5]
 8018e6c:	4619      	mov	r1, r3
 8018e6e:	6878      	ldr	r0, [r7, #4]
 8018e70:	f001 fac6 	bl	801a400 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	791b      	ldrb	r3, [r3, #4]
 8018e78:	4619      	mov	r1, r3
 8018e7a:	6878      	ldr	r0, [r7, #4]
 8018e7c:	f001 fac0 	bl	801a400 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	2200      	movs	r2, #0
 8018e84:	701a      	strb	r2, [r3, #0]
      break;
 8018e86:	e22d      	b.n	80192e4 <USBH_HandleEnum+0x594>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8018e88:	2112      	movs	r1, #18
 8018e8a:	6878      	ldr	r0, [r7, #4]
 8018e8c:	f000 fb02 	bl	8019494 <USBH_Get_DevDesc>
 8018e90:	4603      	mov	r3, r0
 8018e92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8018e94:	7bbb      	ldrb	r3, [r7, #14]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d11b      	bne.n	8018ed2 <USBH_HandleEnum+0x182>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018ea0:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 8018ea4:	4619      	mov	r1, r3
 8018ea6:	488f      	ldr	r0, [pc, #572]	@ (80190e4 <USBH_HandleEnum+0x394>)
 8018ea8:	f002 fc44 	bl	801b734 <iprintf>
 8018eac:	200a      	movs	r0, #10
 8018eae:	f002 fc53 	bl	801b758 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018eb8:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
 8018ebc:	4619      	mov	r1, r3
 8018ebe:	488a      	ldr	r0, [pc, #552]	@ (80190e8 <USBH_HandleEnum+0x398>)
 8018ec0:	f002 fc38 	bl	801b734 <iprintf>
 8018ec4:	200a      	movs	r0, #10
 8018ec6:	f002 fc47 	bl	801b758 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	2202      	movs	r2, #2
 8018ece:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8018ed0:	e20a      	b.n	80192e8 <USBH_HandleEnum+0x598>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018ed2:	7bbb      	ldrb	r3, [r7, #14]
 8018ed4:	2b03      	cmp	r3, #3
 8018ed6:	f040 8207 	bne.w	80192e8 <USBH_HandleEnum+0x598>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 8018eda:	487f      	ldr	r0, [pc, #508]	@ (80190d8 <USBH_HandleEnum+0x388>)
 8018edc:	f002 fc2a 	bl	801b734 <iprintf>
 8018ee0:	4882      	ldr	r0, [pc, #520]	@ (80190ec <USBH_HandleEnum+0x39c>)
 8018ee2:	f002 fc27 	bl	801b734 <iprintf>
 8018ee6:	200a      	movs	r0, #10
 8018ee8:	f002 fc36 	bl	801b758 <putchar>
        phost->device.EnumCnt++;
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018ef2:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8018ef6:	3301      	adds	r3, #1
 8018ef8:	b2da      	uxtb	r2, r3
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018f00:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
        if (phost->device.EnumCnt > 3U)
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018f0a:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8018f0e:	2b03      	cmp	r3, #3
 8018f10:	d909      	bls.n	8018f26 <USBH_HandleEnum+0x1d6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8018f12:	4873      	ldr	r0, [pc, #460]	@ (80190e0 <USBH_HandleEnum+0x390>)
 8018f14:	f002 fc0e 	bl	801b734 <iprintf>
 8018f18:	200a      	movs	r0, #10
 8018f1a:	f002 fc1d 	bl	801b758 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	220d      	movs	r2, #13
 8018f22:	701a      	strb	r2, [r3, #0]
      break;
 8018f24:	e1e0      	b.n	80192e8 <USBH_HandleEnum+0x598>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	795b      	ldrb	r3, [r3, #5]
 8018f2a:	4619      	mov	r1, r3
 8018f2c:	6878      	ldr	r0, [r7, #4]
 8018f2e:	f001 fa67 	bl	801a400 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	791b      	ldrb	r3, [r3, #4]
 8018f36:	4619      	mov	r1, r3
 8018f38:	6878      	ldr	r0, [r7, #4]
 8018f3a:	f001 fa61 	bl	801a400 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	2200      	movs	r2, #0
 8018f42:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	2200      	movs	r2, #0
 8018f48:	701a      	strb	r2, [r3, #0]
      break;
 8018f4a:	e1cd      	b.n	80192e8 <USBH_HandleEnum+0x598>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8018f4c:	2101      	movs	r1, #1
 8018f4e:	6878      	ldr	r0, [r7, #4]
 8018f50:	f000 fb89 	bl	8019666 <USBH_SetAddress>
 8018f54:	4603      	mov	r3, r0
 8018f56:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8018f58:	7bbb      	ldrb	r3, [r7, #14]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d146      	bne.n	8018fec <USBH_HandleEnum+0x29c>
      {
        USBH_Delay(2U);
 8018f5e:	2002      	movs	r0, #2
 8018f60:	f002 fa31 	bl	801b3c6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018f6a:	2201      	movs	r2, #1
 8018f6c:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018f76:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8018f7a:	4619      	mov	r1, r3
 8018f7c:	485c      	ldr	r0, [pc, #368]	@ (80190f0 <USBH_HandleEnum+0x3a0>)
 8018f7e:	f002 fbd9 	bl	801b734 <iprintf>
 8018f82:	200a      	movs	r0, #10
 8018f84:	f002 fbe8 	bl	801b758 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	2203      	movs	r2, #3
 8018f8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	7919      	ldrb	r1, [r3, #4]
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018f98:	f893 011c 	ldrb.w	r0, [r3, #284]	@ 0x11c
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018fa2:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8018fa6:	687a      	ldr	r2, [r7, #4]
 8018fa8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8018faa:	9202      	str	r2, [sp, #8]
 8018fac:	2200      	movs	r2, #0
 8018fae:	9201      	str	r2, [sp, #4]
 8018fb0:	9300      	str	r3, [sp, #0]
 8018fb2:	4603      	mov	r3, r0
 8018fb4:	2280      	movs	r2, #128	@ 0x80
 8018fb6:	6878      	ldr	r0, [r7, #4]
 8018fb8:	f001 f9d0 	bl	801a35c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	7959      	ldrb	r1, [r3, #5]
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018fc6:	f893 011c 	ldrb.w	r0, [r3, #284]	@ 0x11c
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8018fd0:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8018fd4:	687a      	ldr	r2, [r7, #4]
 8018fd6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8018fd8:	9202      	str	r2, [sp, #8]
 8018fda:	2200      	movs	r2, #0
 8018fdc:	9201      	str	r2, [sp, #4]
 8018fde:	9300      	str	r3, [sp, #0]
 8018fe0:	4603      	mov	r3, r0
 8018fe2:	2200      	movs	r2, #0
 8018fe4:	6878      	ldr	r0, [r7, #4]
 8018fe6:	f001 f9b9 	bl	801a35c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8018fea:	e17f      	b.n	80192ec <USBH_HandleEnum+0x59c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8018fec:	7bbb      	ldrb	r3, [r7, #14]
 8018fee:	2b03      	cmp	r3, #3
 8018ff0:	f040 817c 	bne.w	80192ec <USBH_HandleEnum+0x59c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 8018ff4:	4838      	ldr	r0, [pc, #224]	@ (80190d8 <USBH_HandleEnum+0x388>)
 8018ff6:	f002 fb9d 	bl	801b734 <iprintf>
 8018ffa:	483e      	ldr	r0, [pc, #248]	@ (80190f4 <USBH_HandleEnum+0x3a4>)
 8018ffc:	f002 fb9a 	bl	801b734 <iprintf>
 8019000:	200a      	movs	r0, #10
 8019002:	f002 fba9 	bl	801b758 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8019006:	4836      	ldr	r0, [pc, #216]	@ (80190e0 <USBH_HandleEnum+0x390>)
 8019008:	f002 fb94 	bl	801b734 <iprintf>
 801900c:	200a      	movs	r0, #10
 801900e:	f002 fba3 	bl	801b758 <putchar>
        phost->gState = HOST_ABORT_STATE;
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	220d      	movs	r2, #13
 8019016:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	2200      	movs	r2, #0
 801901c:	705a      	strb	r2, [r3, #1]
      break;
 801901e:	e165      	b.n	80192ec <USBH_HandleEnum+0x59c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8019020:	2109      	movs	r1, #9
 8019022:	6878      	ldr	r0, [r7, #4]
 8019024:	f000 fa70 	bl	8019508 <USBH_Get_CfgDesc>
 8019028:	4603      	mov	r3, r0
 801902a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801902c:	7bbb      	ldrb	r3, [r7, #14]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d103      	bne.n	801903a <USBH_HandleEnum+0x2ea>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	2204      	movs	r2, #4
 8019036:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8019038:	e15a      	b.n	80192f0 <USBH_HandleEnum+0x5a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801903a:	7bbb      	ldrb	r3, [r7, #14]
 801903c:	2b03      	cmp	r3, #3
 801903e:	f040 8157 	bne.w	80192f0 <USBH_HandleEnum+0x5a0>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8019042:	4825      	ldr	r0, [pc, #148]	@ (80190d8 <USBH_HandleEnum+0x388>)
 8019044:	f002 fb76 	bl	801b734 <iprintf>
 8019048:	482b      	ldr	r0, [pc, #172]	@ (80190f8 <USBH_HandleEnum+0x3a8>)
 801904a:	f002 fb73 	bl	801b734 <iprintf>
 801904e:	200a      	movs	r0, #10
 8019050:	f002 fb82 	bl	801b758 <putchar>
        phost->device.EnumCnt++;
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801905a:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 801905e:	3301      	adds	r3, #1
 8019060:	b2da      	uxtb	r2, r3
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019068:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
        if (phost->device.EnumCnt > 3U)
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019072:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8019076:	2b03      	cmp	r3, #3
 8019078:	d909      	bls.n	801908e <USBH_HandleEnum+0x33e>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 801907a:	4819      	ldr	r0, [pc, #100]	@ (80190e0 <USBH_HandleEnum+0x390>)
 801907c:	f002 fb5a 	bl	801b734 <iprintf>
 8019080:	200a      	movs	r0, #10
 8019082:	f002 fb69 	bl	801b758 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	220d      	movs	r2, #13
 801908a:	701a      	strb	r2, [r3, #0]
      break;
 801908c:	e130      	b.n	80192f0 <USBH_HandleEnum+0x5a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	795b      	ldrb	r3, [r3, #5]
 8019092:	4619      	mov	r1, r3
 8019094:	6878      	ldr	r0, [r7, #4]
 8019096:	f001 f9b3 	bl	801a400 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	791b      	ldrb	r3, [r3, #4]
 801909e:	4619      	mov	r1, r3
 80190a0:	6878      	ldr	r0, [r7, #4]
 80190a2:	f001 f9ad 	bl	801a400 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	2200      	movs	r2, #0
 80190aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	2200      	movs	r2, #0
 80190b0:	701a      	strb	r2, [r3, #0]
      break;
 80190b2:	e11d      	b.n	80192f0 <USBH_HandleEnum+0x5a0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80190ba:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 80190be:	4619      	mov	r1, r3
 80190c0:	6878      	ldr	r0, [r7, #4]
 80190c2:	f000 fa21 	bl	8019508 <USBH_Get_CfgDesc>
 80190c6:	4603      	mov	r3, r0
 80190c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80190ca:	7bbb      	ldrb	r3, [r7, #14]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d115      	bne.n	80190fc <USBH_HandleEnum+0x3ac>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	2205      	movs	r2, #5
 80190d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80190d6:	e10d      	b.n	80192f4 <USBH_HandleEnum+0x5a4>
 80190d8:	0801d1cc 	.word	0x0801d1cc
 80190dc:	0801d464 	.word	0x0801d464
 80190e0:	0801d498 	.word	0x0801d498
 80190e4:	0801d4d8 	.word	0x0801d4d8
 80190e8:	0801d4e4 	.word	0x0801d4e4
 80190ec:	0801d4f0 	.word	0x0801d4f0
 80190f0:	0801d52c 	.word	0x0801d52c
 80190f4:	0801d544 	.word	0x0801d544
 80190f8:	0801d578 	.word	0x0801d578
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80190fc:	7bbb      	ldrb	r3, [r7, #14]
 80190fe:	2b03      	cmp	r3, #3
 8019100:	f040 80f8 	bne.w	80192f4 <USBH_HandleEnum+0x5a4>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8019104:	4881      	ldr	r0, [pc, #516]	@ (801930c <USBH_HandleEnum+0x5bc>)
 8019106:	f002 fb15 	bl	801b734 <iprintf>
 801910a:	4881      	ldr	r0, [pc, #516]	@ (8019310 <USBH_HandleEnum+0x5c0>)
 801910c:	f002 fb12 	bl	801b734 <iprintf>
 8019110:	200a      	movs	r0, #10
 8019112:	f002 fb21 	bl	801b758 <putchar>
        phost->device.EnumCnt++;
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801911c:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8019120:	3301      	adds	r3, #1
 8019122:	b2da      	uxtb	r2, r3
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801912a:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
        if (phost->device.EnumCnt > 3U)
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019134:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8019138:	2b03      	cmp	r3, #3
 801913a:	d909      	bls.n	8019150 <USBH_HandleEnum+0x400>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 801913c:	4875      	ldr	r0, [pc, #468]	@ (8019314 <USBH_HandleEnum+0x5c4>)
 801913e:	f002 faf9 	bl	801b734 <iprintf>
 8019142:	200a      	movs	r0, #10
 8019144:	f002 fb08 	bl	801b758 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	220d      	movs	r2, #13
 801914c:	701a      	strb	r2, [r3, #0]
      break;
 801914e:	e0d1      	b.n	80192f4 <USBH_HandleEnum+0x5a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	795b      	ldrb	r3, [r3, #5]
 8019154:	4619      	mov	r1, r3
 8019156:	6878      	ldr	r0, [r7, #4]
 8019158:	f001 f952 	bl	801a400 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	791b      	ldrb	r3, [r3, #4]
 8019160:	4619      	mov	r1, r3
 8019162:	6878      	ldr	r0, [r7, #4]
 8019164:	f001 f94c 	bl	801a400 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	2200      	movs	r2, #0
 801916c:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	2200      	movs	r2, #0
 8019172:	701a      	strb	r2, [r3, #0]
      break;
 8019174:	e0be      	b.n	80192f4 <USBH_HandleEnum+0x5a4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801917c:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8019180:	2b00      	cmp	r3, #0
 8019182:	d02c      	beq.n	80191de <USBH_HandleEnum+0x48e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801918a:	f893 1134 	ldrb.w	r1, [r3, #308]	@ 0x134
                                        phost->device.Data, 0xFFU);
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8019194:	23ff      	movs	r3, #255	@ 0xff
 8019196:	6878      	ldr	r0, [r7, #4]
 8019198:	f000 f9ee 	bl	8019578 <USBH_Get_StringDesc>
 801919c:	4603      	mov	r3, r0
 801919e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80191a0:	7bbb      	ldrb	r3, [r7, #14]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d10d      	bne.n	80191c2 <USBH_HandleEnum+0x472>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80191ac:	4619      	mov	r1, r3
 80191ae:	485a      	ldr	r0, [pc, #360]	@ (8019318 <USBH_HandleEnum+0x5c8>)
 80191b0:	f002 fac0 	bl	801b734 <iprintf>
 80191b4:	200a      	movs	r0, #10
 80191b6:	f002 facf 	bl	801b758 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	2206      	movs	r2, #6
 80191be:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80191c0:	e09a      	b.n	80192f8 <USBH_HandleEnum+0x5a8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80191c2:	7bbb      	ldrb	r3, [r7, #14]
 80191c4:	2b03      	cmp	r3, #3
 80191c6:	f040 8097 	bne.w	80192f8 <USBH_HandleEnum+0x5a8>
          USBH_UsrLog("Manufacturer : N/A");
 80191ca:	4854      	ldr	r0, [pc, #336]	@ (801931c <USBH_HandleEnum+0x5cc>)
 80191cc:	f002 fab2 	bl	801b734 <iprintf>
 80191d0:	200a      	movs	r0, #10
 80191d2:	f002 fac1 	bl	801b758 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	2206      	movs	r2, #6
 80191da:	705a      	strb	r2, [r3, #1]
      break;
 80191dc:	e08c      	b.n	80192f8 <USBH_HandleEnum+0x5a8>
        USBH_UsrLog("Manufacturer : N/A");
 80191de:	484f      	ldr	r0, [pc, #316]	@ (801931c <USBH_HandleEnum+0x5cc>)
 80191e0:	f002 faa8 	bl	801b734 <iprintf>
 80191e4:	200a      	movs	r0, #10
 80191e6:	f002 fab7 	bl	801b758 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	2206      	movs	r2, #6
 80191ee:	705a      	strb	r2, [r3, #1]
      break;
 80191f0:	e082      	b.n	80192f8 <USBH_HandleEnum+0x5a8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80191f8:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d02b      	beq.n	8019258 <USBH_HandleEnum+0x508>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019206:	f893 1135 	ldrb.w	r1, [r3, #309]	@ 0x135
                                        phost->device.Data, 0xFFU);
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8019210:	23ff      	movs	r3, #255	@ 0xff
 8019212:	6878      	ldr	r0, [r7, #4]
 8019214:	f000 f9b0 	bl	8019578 <USBH_Get_StringDesc>
 8019218:	4603      	mov	r3, r0
 801921a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801921c:	7bbb      	ldrb	r3, [r7, #14]
 801921e:	2b00      	cmp	r3, #0
 8019220:	d10d      	bne.n	801923e <USBH_HandleEnum+0x4ee>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8019228:	4619      	mov	r1, r3
 801922a:	483d      	ldr	r0, [pc, #244]	@ (8019320 <USBH_HandleEnum+0x5d0>)
 801922c:	f002 fa82 	bl	801b734 <iprintf>
 8019230:	200a      	movs	r0, #10
 8019232:	f002 fa91 	bl	801b758 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	2207      	movs	r2, #7
 801923a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 801923c:	e05e      	b.n	80192fc <USBH_HandleEnum+0x5ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801923e:	7bbb      	ldrb	r3, [r7, #14]
 8019240:	2b03      	cmp	r3, #3
 8019242:	d15b      	bne.n	80192fc <USBH_HandleEnum+0x5ac>
          USBH_UsrLog("Product : N/A");
 8019244:	4837      	ldr	r0, [pc, #220]	@ (8019324 <USBH_HandleEnum+0x5d4>)
 8019246:	f002 fa75 	bl	801b734 <iprintf>
 801924a:	200a      	movs	r0, #10
 801924c:	f002 fa84 	bl	801b758 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	2207      	movs	r2, #7
 8019254:	705a      	strb	r2, [r3, #1]
      break;
 8019256:	e051      	b.n	80192fc <USBH_HandleEnum+0x5ac>
        USBH_UsrLog("Product : N/A");
 8019258:	4832      	ldr	r0, [pc, #200]	@ (8019324 <USBH_HandleEnum+0x5d4>)
 801925a:	f002 fa6b 	bl	801b734 <iprintf>
 801925e:	200a      	movs	r0, #10
 8019260:	f002 fa7a 	bl	801b758 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	2207      	movs	r2, #7
 8019268:	705a      	strb	r2, [r3, #1]
      break;
 801926a:	e047      	b.n	80192fc <USBH_HandleEnum+0x5ac>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019272:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8019276:	2b00      	cmp	r3, #0
 8019278:	d029      	beq.n	80192ce <USBH_HandleEnum+0x57e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019280:	f893 1136 	ldrb.w	r1, [r3, #310]	@ 0x136
                                        phost->device.Data, 0xFFU);
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801928a:	23ff      	movs	r3, #255	@ 0xff
 801928c:	6878      	ldr	r0, [r7, #4]
 801928e:	f000 f973 	bl	8019578 <USBH_Get_StringDesc>
 8019292:	4603      	mov	r3, r0
 8019294:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8019296:	7bbb      	ldrb	r3, [r7, #14]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d10c      	bne.n	80192b6 <USBH_HandleEnum+0x566>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80192a2:	4619      	mov	r1, r3
 80192a4:	4820      	ldr	r0, [pc, #128]	@ (8019328 <USBH_HandleEnum+0x5d8>)
 80192a6:	f002 fa45 	bl	801b734 <iprintf>
 80192aa:	200a      	movs	r0, #10
 80192ac:	f002 fa54 	bl	801b758 <putchar>
          Status = USBH_OK;
 80192b0:	2300      	movs	r3, #0
 80192b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80192b4:	e024      	b.n	8019300 <USBH_HandleEnum+0x5b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80192b6:	7bbb      	ldrb	r3, [r7, #14]
 80192b8:	2b03      	cmp	r3, #3
 80192ba:	d121      	bne.n	8019300 <USBH_HandleEnum+0x5b0>
          USBH_UsrLog("Serial Number : N/A");
 80192bc:	481b      	ldr	r0, [pc, #108]	@ (801932c <USBH_HandleEnum+0x5dc>)
 80192be:	f002 fa39 	bl	801b734 <iprintf>
 80192c2:	200a      	movs	r0, #10
 80192c4:	f002 fa48 	bl	801b758 <putchar>
          Status = USBH_OK;
 80192c8:	2300      	movs	r3, #0
 80192ca:	73fb      	strb	r3, [r7, #15]
      break;
 80192cc:	e018      	b.n	8019300 <USBH_HandleEnum+0x5b0>
        USBH_UsrLog("Serial Number : N/A");
 80192ce:	4817      	ldr	r0, [pc, #92]	@ (801932c <USBH_HandleEnum+0x5dc>)
 80192d0:	f002 fa30 	bl	801b734 <iprintf>
 80192d4:	200a      	movs	r0, #10
 80192d6:	f002 fa3f 	bl	801b758 <putchar>
        Status = USBH_OK;
 80192da:	2300      	movs	r3, #0
 80192dc:	73fb      	strb	r3, [r7, #15]
      break;
 80192de:	e00f      	b.n	8019300 <USBH_HandleEnum+0x5b0>

    default:
      break;
 80192e0:	bf00      	nop
 80192e2:	e00e      	b.n	8019302 <USBH_HandleEnum+0x5b2>
      break;
 80192e4:	bf00      	nop
 80192e6:	e00c      	b.n	8019302 <USBH_HandleEnum+0x5b2>
      break;
 80192e8:	bf00      	nop
 80192ea:	e00a      	b.n	8019302 <USBH_HandleEnum+0x5b2>
      break;
 80192ec:	bf00      	nop
 80192ee:	e008      	b.n	8019302 <USBH_HandleEnum+0x5b2>
      break;
 80192f0:	bf00      	nop
 80192f2:	e006      	b.n	8019302 <USBH_HandleEnum+0x5b2>
      break;
 80192f4:	bf00      	nop
 80192f6:	e004      	b.n	8019302 <USBH_HandleEnum+0x5b2>
      break;
 80192f8:	bf00      	nop
 80192fa:	e002      	b.n	8019302 <USBH_HandleEnum+0x5b2>
      break;
 80192fc:	bf00      	nop
 80192fe:	e000      	b.n	8019302 <USBH_HandleEnum+0x5b2>
      break;
 8019300:	bf00      	nop
  }
  return Status;
 8019302:	7bfb      	ldrb	r3, [r7, #15]
}
 8019304:	4618      	mov	r0, r3
 8019306:	3710      	adds	r7, #16
 8019308:	46bd      	mov	sp, r7
 801930a:	bd80      	pop	{r7, pc}
 801930c:	0801d1cc 	.word	0x0801d1cc
 8019310:	0801d578 	.word	0x0801d578
 8019314:	0801d498 	.word	0x0801d498
 8019318:	0801d5bc 	.word	0x0801d5bc
 801931c:	0801d5d0 	.word	0x0801d5d0
 8019320:	0801d5e4 	.word	0x0801d5e4
 8019324:	0801d5f4 	.word	0x0801d5f4
 8019328:	0801d604 	.word	0x0801d604
 801932c:	0801d618 	.word	0x0801d618

08019330 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8019330:	b480      	push	{r7}
 8019332:	b083      	sub	sp, #12
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
 8019338:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019340:	461a      	mov	r2, r3
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	f8c2 3394 	str.w	r3, [r2, #916]	@ 0x394
}
 8019348:	bf00      	nop
 801934a:	370c      	adds	r7, #12
 801934c:	46bd      	mov	sp, r7
 801934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019352:	4770      	bx	lr

08019354 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8019354:	b580      	push	{r7, lr}
 8019356:	b082      	sub	sp, #8
 8019358:	af00      	add	r7, sp, #0
 801935a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019362:	f8d3 3394 	ldr.w	r3, [r3, #916]	@ 0x394
 8019366:	3301      	adds	r3, #1
 8019368:	687a      	ldr	r2, [r7, #4]
 801936a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801936e:	f8c2 3394 	str.w	r3, [r2, #916]	@ 0x394
  USBH_HandleSof(phost);
 8019372:	6878      	ldr	r0, [r7, #4]
 8019374:	f000 f804 	bl	8019380 <USBH_HandleSof>
}
 8019378:	bf00      	nop
 801937a:	3708      	adds	r7, #8
 801937c:	46bd      	mov	sp, r7
 801937e:	bd80      	pop	{r7, pc}

08019380 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8019380:	b580      	push	{r7, lr}
 8019382:	b082      	sub	sp, #8
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	781b      	ldrb	r3, [r3, #0]
 801938c:	b2db      	uxtb	r3, r3
 801938e:	2b0b      	cmp	r3, #11
 8019390:	d10e      	bne.n	80193b0 <USBH_HandleSof+0x30>
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019398:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801939c:	2b00      	cmp	r3, #0
 801939e:	d007      	beq.n	80193b0 <USBH_HandleSof+0x30>
  {
    phost->pActiveClass->SOFProcess(phost);
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80193a6:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80193aa:	699b      	ldr	r3, [r3, #24]
 80193ac:	6878      	ldr	r0, [r7, #4]
 80193ae:	4798      	blx	r3
  }
}
 80193b0:	bf00      	nop
 80193b2:	3708      	adds	r7, #8
 80193b4:	46bd      	mov	sp, r7
 80193b6:	bd80      	pop	{r7, pc}

080193b8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80193b8:	b480      	push	{r7}
 80193ba:	b083      	sub	sp, #12
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80193c6:	2201      	movs	r2, #1
 80193c8:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 80193cc:	bf00      	nop
}
 80193ce:	370c      	adds	r7, #12
 80193d0:	46bd      	mov	sp, r7
 80193d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d6:	4770      	bx	lr

080193d8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80193d8:	b480      	push	{r7}
 80193da:	b083      	sub	sp, #12
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80193e6:	2200      	movs	r2, #0
 80193e8:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
  phost->device.is_disconnected = 1U;
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80193f2:	2201      	movs	r2, #1
 80193f4:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

  return;
 80193f8:	bf00      	nop
}
 80193fa:	370c      	adds	r7, #12
 80193fc:	46bd      	mov	sp, r7
 80193fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019402:	4770      	bx	lr

08019404 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8019404:	b480      	push	{r7}
 8019406:	b083      	sub	sp, #12
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019412:	2201      	movs	r2, #1
 8019414:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
  phost->device.is_disconnected = 0U;
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801941e:	2200      	movs	r2, #0
 8019420:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
  phost->device.is_ReEnumerated = 0U;
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801942a:	2200      	movs	r2, #0
 801942c:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8019430:	2300      	movs	r3, #0
}
 8019432:	4618      	mov	r0, r3
 8019434:	370c      	adds	r7, #12
 8019436:	46bd      	mov	sp, r7
 8019438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801943c:	4770      	bx	lr

0801943e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801943e:	b580      	push	{r7, lr}
 8019440:	b082      	sub	sp, #8
 8019442:	af00      	add	r7, sp, #0
 8019444:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801944c:	2201      	movs	r2, #1
 801944e:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
  phost->device.is_connected = 0U;
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019458:	2200      	movs	r2, #0
 801945a:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
  phost->device.PortEnabled = 0U;
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019464:	2200      	movs	r2, #0
 8019466:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 801946a:	6878      	ldr	r0, [r7, #4]
 801946c:	f001 fe21 	bl	801b0b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	791b      	ldrb	r3, [r3, #4]
 8019474:	4619      	mov	r1, r3
 8019476:	6878      	ldr	r0, [r7, #4]
 8019478:	f000 ffc2 	bl	801a400 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	795b      	ldrb	r3, [r3, #5]
 8019480:	4619      	mov	r1, r3
 8019482:	6878      	ldr	r0, [r7, #4]
 8019484:	f000 ffbc 	bl	801a400 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8019488:	2300      	movs	r3, #0
}
 801948a:	4618      	mov	r0, r3
 801948c:	3708      	adds	r7, #8
 801948e:	46bd      	mov	sp, r7
 8019490:	bd80      	pop	{r7, pc}
	...

08019494 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8019494:	b580      	push	{r7, lr}
 8019496:	b086      	sub	sp, #24
 8019498:	af02      	add	r7, sp, #8
 801949a:	6078      	str	r0, [r7, #4]
 801949c:	460b      	mov	r3, r1
 801949e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80194a0:	887b      	ldrh	r3, [r7, #2]
 80194a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80194a6:	d90a      	bls.n	80194be <USBH_Get_DevDesc+0x2a>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 80194a8:	4815      	ldr	r0, [pc, #84]	@ (8019500 <USBH_Get_DevDesc+0x6c>)
 80194aa:	f002 f943 	bl	801b734 <iprintf>
 80194ae:	4815      	ldr	r0, [pc, #84]	@ (8019504 <USBH_Get_DevDesc+0x70>)
 80194b0:	f002 f940 	bl	801b734 <iprintf>
 80194b4:	200a      	movs	r0, #10
 80194b6:	f002 f94f 	bl	801b758 <putchar>
    return USBH_NOT_SUPPORTED;
 80194ba:	2303      	movs	r3, #3
 80194bc:	e01b      	b.n	80194f6 <USBH_Get_DevDesc+0x62>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80194c4:	887b      	ldrh	r3, [r7, #2]
 80194c6:	9300      	str	r3, [sp, #0]
 80194c8:	4613      	mov	r3, r2
 80194ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80194ce:	2100      	movs	r1, #0
 80194d0:	6878      	ldr	r0, [r7, #4]
 80194d2:	f000 f893 	bl	80195fc <USBH_GetDescriptor>
 80194d6:	4603      	mov	r3, r0
 80194d8:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80194da:	7bfb      	ldrb	r3, [r7, #15]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d109      	bne.n	80194f4 <USBH_Get_DevDesc+0x60>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80194e6:	887a      	ldrh	r2, [r7, #2]
 80194e8:	4619      	mov	r1, r3
 80194ea:	6878      	ldr	r0, [r7, #4]
 80194ec:	f000 f972 	bl	80197d4 <USBH_ParseDevDesc>
 80194f0:	4603      	mov	r3, r0
 80194f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80194f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80194f6:	4618      	mov	r0, r3
 80194f8:	3710      	adds	r7, #16
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd80      	pop	{r7, pc}
 80194fe:	bf00      	nop
 8019500:	0801d62c 	.word	0x0801d62c
 8019504:	0801d634 	.word	0x0801d634

08019508 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8019508:	b580      	push	{r7, lr}
 801950a:	b086      	sub	sp, #24
 801950c:	af02      	add	r7, sp, #8
 801950e:	6078      	str	r0, [r7, #4]
 8019510:	460b      	mov	r3, r1
 8019512:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	331c      	adds	r3, #28
 8019518:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 801951a:	887b      	ldrh	r3, [r7, #2]
 801951c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019520:	d90a      	bls.n	8019538 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 8019522:	4813      	ldr	r0, [pc, #76]	@ (8019570 <USBH_Get_CfgDesc+0x68>)
 8019524:	f002 f906 	bl	801b734 <iprintf>
 8019528:	4812      	ldr	r0, [pc, #72]	@ (8019574 <USBH_Get_CfgDesc+0x6c>)
 801952a:	f002 f903 	bl	801b734 <iprintf>
 801952e:	200a      	movs	r0, #10
 8019530:	f002 f912 	bl	801b758 <putchar>
    return USBH_NOT_SUPPORTED;
 8019534:	2303      	movs	r3, #3
 8019536:	e016      	b.n	8019566 <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8019538:	887b      	ldrh	r3, [r7, #2]
 801953a:	9300      	str	r3, [sp, #0]
 801953c:	68bb      	ldr	r3, [r7, #8]
 801953e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019542:	2100      	movs	r1, #0
 8019544:	6878      	ldr	r0, [r7, #4]
 8019546:	f000 f859 	bl	80195fc <USBH_GetDescriptor>
 801954a:	4603      	mov	r3, r0
 801954c:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 801954e:	7bfb      	ldrb	r3, [r7, #15]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d107      	bne.n	8019564 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8019554:	887b      	ldrh	r3, [r7, #2]
 8019556:	461a      	mov	r2, r3
 8019558:	68b9      	ldr	r1, [r7, #8]
 801955a:	6878      	ldr	r0, [r7, #4]
 801955c:	f000 f9f0 	bl	8019940 <USBH_ParseCfgDesc>
 8019560:	4603      	mov	r3, r0
 8019562:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8019564:	7bfb      	ldrb	r3, [r7, #15]
}
 8019566:	4618      	mov	r0, r3
 8019568:	3710      	adds	r7, #16
 801956a:	46bd      	mov	sp, r7
 801956c:	bd80      	pop	{r7, pc}
 801956e:	bf00      	nop
 8019570:	0801d62c 	.word	0x0801d62c
 8019574:	0801d678 	.word	0x0801d678

08019578 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8019578:	b580      	push	{r7, lr}
 801957a:	b088      	sub	sp, #32
 801957c:	af02      	add	r7, sp, #8
 801957e:	60f8      	str	r0, [r7, #12]
 8019580:	607a      	str	r2, [r7, #4]
 8019582:	461a      	mov	r2, r3
 8019584:	460b      	mov	r3, r1
 8019586:	72fb      	strb	r3, [r7, #11]
 8019588:	4613      	mov	r3, r2
 801958a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 801958c:	893b      	ldrh	r3, [r7, #8]
 801958e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019592:	d802      	bhi.n	801959a <USBH_Get_StringDesc+0x22>
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d10a      	bne.n	80195b0 <USBH_Get_StringDesc+0x38>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 801959a:	4816      	ldr	r0, [pc, #88]	@ (80195f4 <USBH_Get_StringDesc+0x7c>)
 801959c:	f002 f8ca 	bl	801b734 <iprintf>
 80195a0:	4815      	ldr	r0, [pc, #84]	@ (80195f8 <USBH_Get_StringDesc+0x80>)
 80195a2:	f002 f8c7 	bl	801b734 <iprintf>
 80195a6:	200a      	movs	r0, #10
 80195a8:	f002 f8d6 	bl	801b758 <putchar>
    return USBH_NOT_SUPPORTED;
 80195ac:	2303      	movs	r3, #3
 80195ae:	e01c      	b.n	80195ea <USBH_Get_StringDesc+0x72>
  }

  status = USBH_GetDescriptor(phost,
 80195b0:	7afb      	ldrb	r3, [r7, #11]
 80195b2:	b29b      	uxth	r3, r3
 80195b4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80195b8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80195c0:	893b      	ldrh	r3, [r7, #8]
 80195c2:	9300      	str	r3, [sp, #0]
 80195c4:	460b      	mov	r3, r1
 80195c6:	2100      	movs	r1, #0
 80195c8:	68f8      	ldr	r0, [r7, #12]
 80195ca:	f000 f817 	bl	80195fc <USBH_GetDescriptor>
 80195ce:	4603      	mov	r3, r0
 80195d0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80195d2:	7dfb      	ldrb	r3, [r7, #23]
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d107      	bne.n	80195e8 <USBH_Get_StringDesc+0x70>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80195de:	893a      	ldrh	r2, [r7, #8]
 80195e0:	6879      	ldr	r1, [r7, #4]
 80195e2:	4618      	mov	r0, r3
 80195e4:	f000 fbc6 	bl	8019d74 <USBH_ParseStringDesc>
  }

  return status;
 80195e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80195ea:	4618      	mov	r0, r3
 80195ec:	3718      	adds	r7, #24
 80195ee:	46bd      	mov	sp, r7
 80195f0:	bd80      	pop	{r7, pc}
 80195f2:	bf00      	nop
 80195f4:	0801d62c 	.word	0x0801d62c
 80195f8:	0801d6c4 	.word	0x0801d6c4

080195fc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b084      	sub	sp, #16
 8019600:	af00      	add	r7, sp, #0
 8019602:	60f8      	str	r0, [r7, #12]
 8019604:	607b      	str	r3, [r7, #4]
 8019606:	460b      	mov	r3, r1
 8019608:	72fb      	strb	r3, [r7, #11]
 801960a:	4613      	mov	r3, r2
 801960c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	789b      	ldrb	r3, [r3, #2]
 8019612:	2b01      	cmp	r3, #1
 8019614:	d11c      	bne.n	8019650 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8019616:	7afb      	ldrb	r3, [r7, #11]
 8019618:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801961c:	b2da      	uxtb	r2, r3
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	2206      	movs	r2, #6
 8019626:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	893a      	ldrh	r2, [r7, #8]
 801962c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 801962e:	893b      	ldrh	r3, [r7, #8]
 8019630:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8019634:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8019638:	d104      	bne.n	8019644 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	f240 4209 	movw	r2, #1033	@ 0x409
 8019640:	829a      	strh	r2, [r3, #20]
 8019642:	e002      	b.n	801964a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	2200      	movs	r2, #0
 8019648:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	8b3a      	ldrh	r2, [r7, #24]
 801964e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8019650:	8b3b      	ldrh	r3, [r7, #24]
 8019652:	461a      	mov	r2, r3
 8019654:	6879      	ldr	r1, [r7, #4]
 8019656:	68f8      	ldr	r0, [r7, #12]
 8019658:	f000 fbd9 	bl	8019e0e <USBH_CtlReq>
 801965c:	4603      	mov	r3, r0
}
 801965e:	4618      	mov	r0, r3
 8019660:	3710      	adds	r7, #16
 8019662:	46bd      	mov	sp, r7
 8019664:	bd80      	pop	{r7, pc}

08019666 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8019666:	b580      	push	{r7, lr}
 8019668:	b082      	sub	sp, #8
 801966a:	af00      	add	r7, sp, #0
 801966c:	6078      	str	r0, [r7, #4]
 801966e:	460b      	mov	r3, r1
 8019670:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	789b      	ldrb	r3, [r3, #2]
 8019676:	2b01      	cmp	r3, #1
 8019678:	d10f      	bne.n	801969a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	2200      	movs	r2, #0
 801967e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	2205      	movs	r2, #5
 8019684:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8019686:	78fb      	ldrb	r3, [r7, #3]
 8019688:	b29a      	uxth	r2, r3
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	2200      	movs	r2, #0
 8019692:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	2200      	movs	r2, #0
 8019698:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801969a:	2200      	movs	r2, #0
 801969c:	2100      	movs	r1, #0
 801969e:	6878      	ldr	r0, [r7, #4]
 80196a0:	f000 fbb5 	bl	8019e0e <USBH_CtlReq>
 80196a4:	4603      	mov	r3, r0
}
 80196a6:	4618      	mov	r0, r3
 80196a8:	3708      	adds	r7, #8
 80196aa:	46bd      	mov	sp, r7
 80196ac:	bd80      	pop	{r7, pc}

080196ae <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80196ae:	b580      	push	{r7, lr}
 80196b0:	b082      	sub	sp, #8
 80196b2:	af00      	add	r7, sp, #0
 80196b4:	6078      	str	r0, [r7, #4]
 80196b6:	460b      	mov	r3, r1
 80196b8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	789b      	ldrb	r3, [r3, #2]
 80196be:	2b01      	cmp	r3, #1
 80196c0:	d10e      	bne.n	80196e0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	2200      	movs	r2, #0
 80196c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	2209      	movs	r2, #9
 80196cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	887a      	ldrh	r2, [r7, #2]
 80196d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	2200      	movs	r2, #0
 80196d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	2200      	movs	r2, #0
 80196de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80196e0:	2200      	movs	r2, #0
 80196e2:	2100      	movs	r1, #0
 80196e4:	6878      	ldr	r0, [r7, #4]
 80196e6:	f000 fb92 	bl	8019e0e <USBH_CtlReq>
 80196ea:	4603      	mov	r3, r0
}
 80196ec:	4618      	mov	r0, r3
 80196ee:	3708      	adds	r7, #8
 80196f0:	46bd      	mov	sp, r7
 80196f2:	bd80      	pop	{r7, pc}

080196f4 <USBH_SetInterface>:
  * @param  phost: Host Handle
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num, uint8_t altSetting)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b082      	sub	sp, #8
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
 80196fc:	460b      	mov	r3, r1
 80196fe:	70fb      	strb	r3, [r7, #3]
 8019700:	4613      	mov	r3, r2
 8019702:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	789b      	ldrb	r3, [r3, #2]
 8019708:	2b01      	cmp	r3, #1
 801970a:	d110      	bne.n	801972e <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	2201      	movs	r2, #1
 8019710:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	220b      	movs	r2, #11
 8019716:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 8019718:	78bb      	ldrb	r3, [r7, #2]
 801971a:	b29a      	uxth	r2, r3
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8019720:	78fb      	ldrb	r3, [r7, #3]
 8019722:	b29a      	uxth	r2, r3
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	2200      	movs	r2, #0
 801972c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801972e:	2200      	movs	r2, #0
 8019730:	2100      	movs	r1, #0
 8019732:	6878      	ldr	r0, [r7, #4]
 8019734:	f000 fb6b 	bl	8019e0e <USBH_CtlReq>
 8019738:	4603      	mov	r3, r0
}
 801973a:	4618      	mov	r0, r3
 801973c:	3708      	adds	r7, #8
 801973e:	46bd      	mov	sp, r7
 8019740:	bd80      	pop	{r7, pc}

08019742 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8019742:	b580      	push	{r7, lr}
 8019744:	b082      	sub	sp, #8
 8019746:	af00      	add	r7, sp, #0
 8019748:	6078      	str	r0, [r7, #4]
 801974a:	460b      	mov	r3, r1
 801974c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	789b      	ldrb	r3, [r3, #2]
 8019752:	2b01      	cmp	r3, #1
 8019754:	d10f      	bne.n	8019776 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	2200      	movs	r2, #0
 801975a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	2203      	movs	r2, #3
 8019760:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8019762:	78fb      	ldrb	r3, [r7, #3]
 8019764:	b29a      	uxth	r2, r3
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	2200      	movs	r2, #0
 801976e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	2200      	movs	r2, #0
 8019774:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8019776:	2200      	movs	r2, #0
 8019778:	2100      	movs	r1, #0
 801977a:	6878      	ldr	r0, [r7, #4]
 801977c:	f000 fb47 	bl	8019e0e <USBH_CtlReq>
 8019780:	4603      	mov	r3, r0
}
 8019782:	4618      	mov	r0, r3
 8019784:	3708      	adds	r7, #8
 8019786:	46bd      	mov	sp, r7
 8019788:	bd80      	pop	{r7, pc}

0801978a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801978a:	b580      	push	{r7, lr}
 801978c:	b082      	sub	sp, #8
 801978e:	af00      	add	r7, sp, #0
 8019790:	6078      	str	r0, [r7, #4]
 8019792:	460b      	mov	r3, r1
 8019794:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	789b      	ldrb	r3, [r3, #2]
 801979a:	2b01      	cmp	r3, #1
 801979c:	d10f      	bne.n	80197be <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	2202      	movs	r2, #2
 80197a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	2201      	movs	r2, #1
 80197a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	2200      	movs	r2, #0
 80197ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80197b0:	78fb      	ldrb	r3, [r7, #3]
 80197b2:	b29a      	uxth	r2, r3
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	2200      	movs	r2, #0
 80197bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80197be:	2200      	movs	r2, #0
 80197c0:	2100      	movs	r1, #0
 80197c2:	6878      	ldr	r0, [r7, #4]
 80197c4:	f000 fb23 	bl	8019e0e <USBH_CtlReq>
 80197c8:	4603      	mov	r3, r0
}
 80197ca:	4618      	mov	r0, r3
 80197cc:	3708      	adds	r7, #8
 80197ce:	46bd      	mov	sp, r7
 80197d0:	bd80      	pop	{r7, pc}
	...

080197d4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80197d4:	b480      	push	{r7}
 80197d6:	b087      	sub	sp, #28
 80197d8:	af00      	add	r7, sp, #0
 80197da:	60f8      	str	r0, [r7, #12]
 80197dc:	60b9      	str	r1, [r7, #8]
 80197de:	4613      	mov	r3, r2
 80197e0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80197e2:	68fa      	ldr	r2, [r7, #12]
 80197e4:	f248 1326 	movw	r3, #33062	@ 0x8126
 80197e8:	4413      	add	r3, r2
 80197ea:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80197ec:	2300      	movs	r3, #0
 80197ee:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80197f0:	68bb      	ldr	r3, [r7, #8]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d101      	bne.n	80197fa <USBH_ParseDevDesc+0x26>
  {
    return USBH_FAIL;
 80197f6:	2302      	movs	r3, #2
 80197f8:	e09a      	b.n	8019930 <USBH_ParseDevDesc+0x15c>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80197fa:	68bb      	ldr	r3, [r7, #8]
 80197fc:	781a      	ldrb	r2, [r3, #0]
 80197fe:	693b      	ldr	r3, [r7, #16]
 8019800:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8019802:	68bb      	ldr	r3, [r7, #8]
 8019804:	785a      	ldrb	r2, [r3, #1]
 8019806:	693b      	ldr	r3, [r7, #16]
 8019808:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 801980a:	68bb      	ldr	r3, [r7, #8]
 801980c:	3302      	adds	r3, #2
 801980e:	781b      	ldrb	r3, [r3, #0]
 8019810:	461a      	mov	r2, r3
 8019812:	68bb      	ldr	r3, [r7, #8]
 8019814:	3303      	adds	r3, #3
 8019816:	781b      	ldrb	r3, [r3, #0]
 8019818:	021b      	lsls	r3, r3, #8
 801981a:	b29b      	uxth	r3, r3
 801981c:	4313      	orrs	r3, r2
 801981e:	b29a      	uxth	r2, r3
 8019820:	693b      	ldr	r3, [r7, #16]
 8019822:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8019824:	68bb      	ldr	r3, [r7, #8]
 8019826:	791a      	ldrb	r2, [r3, #4]
 8019828:	693b      	ldr	r3, [r7, #16]
 801982a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 801982c:	68bb      	ldr	r3, [r7, #8]
 801982e:	795a      	ldrb	r2, [r3, #5]
 8019830:	693b      	ldr	r3, [r7, #16]
 8019832:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8019834:	68bb      	ldr	r3, [r7, #8]
 8019836:	799a      	ldrb	r2, [r3, #6]
 8019838:	693b      	ldr	r3, [r7, #16]
 801983a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 801983c:	68bb      	ldr	r3, [r7, #8]
 801983e:	79da      	ldrb	r2, [r3, #7]
 8019840:	693b      	ldr	r3, [r7, #16]
 8019842:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801984a:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 801984e:	2b00      	cmp	r3, #0
 8019850:	d006      	beq.n	8019860 <USBH_ParseDevDesc+0x8c>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019858:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801985c:	2b01      	cmp	r3, #1
 801985e:	d11b      	bne.n	8019898 <USBH_ParseDevDesc+0xc4>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8019860:	693b      	ldr	r3, [r7, #16]
 8019862:	79db      	ldrb	r3, [r3, #7]
 8019864:	2b20      	cmp	r3, #32
 8019866:	dc0f      	bgt.n	8019888 <USBH_ParseDevDesc+0xb4>
 8019868:	2b08      	cmp	r3, #8
 801986a:	db0f      	blt.n	801988c <USBH_ParseDevDesc+0xb8>
 801986c:	3b08      	subs	r3, #8
 801986e:	4a33      	ldr	r2, [pc, #204]	@ (801993c <USBH_ParseDevDesc+0x168>)
 8019870:	fa22 f303 	lsr.w	r3, r2, r3
 8019874:	f003 0301 	and.w	r3, r3, #1
 8019878:	2b00      	cmp	r3, #0
 801987a:	bf14      	ite	ne
 801987c:	2301      	movne	r3, #1
 801987e:	2300      	moveq	r3, #0
 8019880:	b2db      	uxtb	r3, r3
 8019882:	2b00      	cmp	r3, #0
 8019884:	d106      	bne.n	8019894 <USBH_ParseDevDesc+0xc0>
 8019886:	e001      	b.n	801988c <USBH_ParseDevDesc+0xb8>
 8019888:	2b40      	cmp	r3, #64	@ 0x40
 801988a:	d003      	beq.n	8019894 <USBH_ParseDevDesc+0xc0>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 801988c:	693b      	ldr	r3, [r7, #16]
 801988e:	2208      	movs	r2, #8
 8019890:	71da      	strb	r2, [r3, #7]
        break;
 8019892:	e000      	b.n	8019896 <USBH_ParseDevDesc+0xc2>
        break;
 8019894:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8019896:	e010      	b.n	80198ba <USBH_ParseDevDesc+0xe6>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801989e:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 80198a2:	2b02      	cmp	r3, #2
 80198a4:	d107      	bne.n	80198b6 <USBH_ParseDevDesc+0xe2>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80198a6:	693b      	ldr	r3, [r7, #16]
 80198a8:	79db      	ldrb	r3, [r3, #7]
 80198aa:	2b08      	cmp	r3, #8
 80198ac:	d005      	beq.n	80198ba <USBH_ParseDevDesc+0xe6>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80198ae:	693b      	ldr	r3, [r7, #16]
 80198b0:	2208      	movs	r2, #8
 80198b2:	71da      	strb	r2, [r3, #7]
 80198b4:	e001      	b.n	80198ba <USBH_ParseDevDesc+0xe6>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80198b6:	2303      	movs	r3, #3
 80198b8:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80198ba:	88fb      	ldrh	r3, [r7, #6]
 80198bc:	2b08      	cmp	r3, #8
 80198be:	d936      	bls.n	801992e <USBH_ParseDevDesc+0x15a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80198c0:	68bb      	ldr	r3, [r7, #8]
 80198c2:	3308      	adds	r3, #8
 80198c4:	781b      	ldrb	r3, [r3, #0]
 80198c6:	461a      	mov	r2, r3
 80198c8:	68bb      	ldr	r3, [r7, #8]
 80198ca:	3309      	adds	r3, #9
 80198cc:	781b      	ldrb	r3, [r3, #0]
 80198ce:	021b      	lsls	r3, r3, #8
 80198d0:	b29b      	uxth	r3, r3
 80198d2:	4313      	orrs	r3, r2
 80198d4:	b29a      	uxth	r2, r3
 80198d6:	693b      	ldr	r3, [r7, #16]
 80198d8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80198da:	68bb      	ldr	r3, [r7, #8]
 80198dc:	330a      	adds	r3, #10
 80198de:	781b      	ldrb	r3, [r3, #0]
 80198e0:	461a      	mov	r2, r3
 80198e2:	68bb      	ldr	r3, [r7, #8]
 80198e4:	330b      	adds	r3, #11
 80198e6:	781b      	ldrb	r3, [r3, #0]
 80198e8:	021b      	lsls	r3, r3, #8
 80198ea:	b29b      	uxth	r3, r3
 80198ec:	4313      	orrs	r3, r2
 80198ee:	b29a      	uxth	r2, r3
 80198f0:	693b      	ldr	r3, [r7, #16]
 80198f2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80198f4:	68bb      	ldr	r3, [r7, #8]
 80198f6:	330c      	adds	r3, #12
 80198f8:	781b      	ldrb	r3, [r3, #0]
 80198fa:	461a      	mov	r2, r3
 80198fc:	68bb      	ldr	r3, [r7, #8]
 80198fe:	330d      	adds	r3, #13
 8019900:	781b      	ldrb	r3, [r3, #0]
 8019902:	021b      	lsls	r3, r3, #8
 8019904:	b29b      	uxth	r3, r3
 8019906:	4313      	orrs	r3, r2
 8019908:	b29a      	uxth	r2, r3
 801990a:	693b      	ldr	r3, [r7, #16]
 801990c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 801990e:	68bb      	ldr	r3, [r7, #8]
 8019910:	7b9a      	ldrb	r2, [r3, #14]
 8019912:	693b      	ldr	r3, [r7, #16]
 8019914:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8019916:	68bb      	ldr	r3, [r7, #8]
 8019918:	7bda      	ldrb	r2, [r3, #15]
 801991a:	693b      	ldr	r3, [r7, #16]
 801991c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 801991e:	68bb      	ldr	r3, [r7, #8]
 8019920:	7c1a      	ldrb	r2, [r3, #16]
 8019922:	693b      	ldr	r3, [r7, #16]
 8019924:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8019926:	68bb      	ldr	r3, [r7, #8]
 8019928:	7c5a      	ldrb	r2, [r3, #17]
 801992a:	693b      	ldr	r3, [r7, #16]
 801992c:	745a      	strb	r2, [r3, #17]
  }

  return status;
 801992e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019930:	4618      	mov	r0, r3
 8019932:	371c      	adds	r7, #28
 8019934:	46bd      	mov	sp, r7
 8019936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801993a:	4770      	bx	lr
 801993c:	01000101 	.word	0x01000101

08019940 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8019940:	b580      	push	{r7, lr}
 8019942:	b08c      	sub	sp, #48	@ 0x30
 8019944:	af00      	add	r7, sp, #0
 8019946:	60f8      	str	r0, [r7, #12]
 8019948:	60b9      	str	r1, [r7, #8]
 801994a:	4613      	mov	r3, r2
 801994c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801994e:	68fa      	ldr	r2, [r7, #12]
 8019950:	f248 1338 	movw	r3, #33080	@ 0x8138
 8019954:	4413      	add	r3, r2
 8019956:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8019958:	2300      	movs	r3, #0
 801995a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 801995e:	2300      	movs	r3, #0
 8019960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8019964:	2300      	movs	r3, #0
 8019966:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 801996a:	68bb      	ldr	r3, [r7, #8]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d101      	bne.n	8019974 <USBH_ParseCfgDesc+0x34>
  {
    return USBH_FAIL;
 8019970:	2302      	movs	r3, #2
 8019972:	e0de      	b.n	8019b32 <USBH_ParseCfgDesc+0x1f2>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8019974:	68bb      	ldr	r3, [r7, #8]
 8019976:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8019978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801997a:	781b      	ldrb	r3, [r3, #0]
 801997c:	2b09      	cmp	r3, #9
 801997e:	d002      	beq.n	8019986 <USBH_ParseCfgDesc+0x46>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8019980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019982:	2209      	movs	r2, #9
 8019984:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8019986:	68bb      	ldr	r3, [r7, #8]
 8019988:	781a      	ldrb	r2, [r3, #0]
 801998a:	6a3b      	ldr	r3, [r7, #32]
 801998c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 801998e:	68bb      	ldr	r3, [r7, #8]
 8019990:	785a      	ldrb	r2, [r3, #1]
 8019992:	6a3b      	ldr	r3, [r7, #32]
 8019994:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8019996:	68bb      	ldr	r3, [r7, #8]
 8019998:	3302      	adds	r3, #2
 801999a:	781b      	ldrb	r3, [r3, #0]
 801999c:	461a      	mov	r2, r3
 801999e:	68bb      	ldr	r3, [r7, #8]
 80199a0:	3303      	adds	r3, #3
 80199a2:	781b      	ldrb	r3, [r3, #0]
 80199a4:	021b      	lsls	r3, r3, #8
 80199a6:	b29b      	uxth	r3, r3
 80199a8:	4313      	orrs	r3, r2
 80199aa:	b29b      	uxth	r3, r3
 80199ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80199b0:	bf28      	it	cs
 80199b2:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80199b6:	b29a      	uxth	r2, r3
 80199b8:	6a3b      	ldr	r3, [r7, #32]
 80199ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80199bc:	68bb      	ldr	r3, [r7, #8]
 80199be:	791a      	ldrb	r2, [r3, #4]
 80199c0:	6a3b      	ldr	r3, [r7, #32]
 80199c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80199c4:	68bb      	ldr	r3, [r7, #8]
 80199c6:	795a      	ldrb	r2, [r3, #5]
 80199c8:	6a3b      	ldr	r3, [r7, #32]
 80199ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80199cc:	68bb      	ldr	r3, [r7, #8]
 80199ce:	799a      	ldrb	r2, [r3, #6]
 80199d0:	6a3b      	ldr	r3, [r7, #32]
 80199d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80199d4:	68bb      	ldr	r3, [r7, #8]
 80199d6:	79da      	ldrb	r2, [r3, #7]
 80199d8:	6a3b      	ldr	r3, [r7, #32]
 80199da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80199dc:	68bb      	ldr	r3, [r7, #8]
 80199de:	7a1a      	ldrb	r2, [r3, #8]
 80199e0:	6a3b      	ldr	r3, [r7, #32]
 80199e2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80199e4:	88fb      	ldrh	r3, [r7, #6]
 80199e6:	2b09      	cmp	r3, #9
 80199e8:	f240 80a1 	bls.w	8019b2e <USBH_ParseCfgDesc+0x1ee>
  {
    ptr = USB_LEN_CFG_DESC;
 80199ec:	2309      	movs	r3, #9
 80199ee:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80199f0:	2300      	movs	r3, #0
 80199f2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80199f4:	e085      	b.n	8019b02 <USBH_ParseCfgDesc+0x1c2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80199f6:	f107 0316 	add.w	r3, r7, #22
 80199fa:	4619      	mov	r1, r3
 80199fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80199fe:	f000 f9ec 	bl	8019dda <USBH_GetNextDesc>
 8019a02:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8019a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a06:	785b      	ldrb	r3, [r3, #1]
 8019a08:	2b04      	cmp	r3, #4
 8019a0a:	d17a      	bne.n	8019b02 <USBH_ParseCfgDesc+0x1c2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8019a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a0e:	781b      	ldrb	r3, [r3, #0]
 8019a10:	2b09      	cmp	r3, #9
 8019a12:	d002      	beq.n	8019a1a <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8019a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a16:	2209      	movs	r2, #9
 8019a18:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8019a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a1e:	2232      	movs	r2, #50	@ 0x32
 8019a20:	fb02 f303 	mul.w	r3, r2, r3
 8019a24:	3308      	adds	r3, #8
 8019a26:	6a3a      	ldr	r2, [r7, #32]
 8019a28:	4413      	add	r3, r2
 8019a2a:	3302      	adds	r3, #2
 8019a2c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8019a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019a30:	69f8      	ldr	r0, [r7, #28]
 8019a32:	f000 f882 	bl	8019b3a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8019a36:	2300      	movs	r3, #0
 8019a38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8019a40:	e043      	b.n	8019aca <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8019a42:	f107 0316 	add.w	r3, r7, #22
 8019a46:	4619      	mov	r1, r3
 8019a48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019a4a:	f000 f9c6 	bl	8019dda <USBH_GetNextDesc>
 8019a4e:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8019a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a52:	785b      	ldrb	r3, [r3, #1]
 8019a54:	2b05      	cmp	r3, #5
 8019a56:	d138      	bne.n	8019aca <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8019a58:	69fb      	ldr	r3, [r7, #28]
 8019a5a:	795b      	ldrb	r3, [r3, #5]
 8019a5c:	2b01      	cmp	r3, #1
 8019a5e:	d113      	bne.n	8019a88 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8019a60:	69fb      	ldr	r3, [r7, #28]
 8019a62:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8019a64:	2b02      	cmp	r3, #2
 8019a66:	d003      	beq.n	8019a70 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8019a68:	69fb      	ldr	r3, [r7, #28]
 8019a6a:	799b      	ldrb	r3, [r3, #6]
 8019a6c:	2b03      	cmp	r3, #3
 8019a6e:	d10b      	bne.n	8019a88 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8019a70:	69fb      	ldr	r3, [r7, #28]
 8019a72:	79db      	ldrb	r3, [r3, #7]
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d10b      	bne.n	8019a90 <USBH_ParseCfgDesc+0x150>
 8019a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a7a:	781b      	ldrb	r3, [r3, #0]
 8019a7c:	2b09      	cmp	r3, #9
 8019a7e:	d007      	beq.n	8019a90 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8019a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a82:	2209      	movs	r2, #9
 8019a84:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8019a86:	e003      	b.n	8019a90 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8019a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a8a:	2207      	movs	r2, #7
 8019a8c:	701a      	strb	r2, [r3, #0]
 8019a8e:	e000      	b.n	8019a92 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8019a90:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8019a92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a96:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8019a9a:	3201      	adds	r2, #1
 8019a9c:	00d2      	lsls	r2, r2, #3
 8019a9e:	2132      	movs	r1, #50	@ 0x32
 8019aa0:	fb01 f303 	mul.w	r3, r1, r3
 8019aa4:	4413      	add	r3, r2
 8019aa6:	3308      	adds	r3, #8
 8019aa8:	6a3a      	ldr	r2, [r7, #32]
 8019aaa:	4413      	add	r3, r2
 8019aac:	3304      	adds	r3, #4
 8019aae:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8019ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019ab2:	69b9      	ldr	r1, [r7, #24]
 8019ab4:	68f8      	ldr	r0, [r7, #12]
 8019ab6:	f000 f86f 	bl	8019b98 <USBH_ParseEPDesc>
 8019aba:	4603      	mov	r3, r0
 8019abc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8019ac0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019ac4:	3301      	adds	r3, #1
 8019ac6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8019aca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019ace:	2b04      	cmp	r3, #4
 8019ad0:	d80a      	bhi.n	8019ae8 <USBH_ParseCfgDesc+0x1a8>
 8019ad2:	69fb      	ldr	r3, [r7, #28]
 8019ad4:	791b      	ldrb	r3, [r3, #4]
 8019ad6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8019ada:	429a      	cmp	r2, r3
 8019adc:	d204      	bcs.n	8019ae8 <USBH_ParseCfgDesc+0x1a8>
 8019ade:	6a3b      	ldr	r3, [r7, #32]
 8019ae0:	885a      	ldrh	r2, [r3, #2]
 8019ae2:	8afb      	ldrh	r3, [r7, #22]
 8019ae4:	429a      	cmp	r2, r3
 8019ae6:	d8ac      	bhi.n	8019a42 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8019ae8:	69fb      	ldr	r3, [r7, #28]
 8019aea:	791b      	ldrb	r3, [r3, #4]
 8019aec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8019af0:	429a      	cmp	r2, r3
 8019af2:	d201      	bcs.n	8019af8 <USBH_ParseCfgDesc+0x1b8>
        {
          return USBH_NOT_SUPPORTED;
 8019af4:	2303      	movs	r3, #3
 8019af6:	e01c      	b.n	8019b32 <USBH_ParseCfgDesc+0x1f2>
        }

        if_ix++;
 8019af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019afc:	3301      	adds	r3, #1
 8019afe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8019b02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019b06:	2b09      	cmp	r3, #9
 8019b08:	d805      	bhi.n	8019b16 <USBH_ParseCfgDesc+0x1d6>
 8019b0a:	6a3b      	ldr	r3, [r7, #32]
 8019b0c:	885a      	ldrh	r2, [r3, #2]
 8019b0e:	8afb      	ldrh	r3, [r7, #22]
 8019b10:	429a      	cmp	r2, r3
 8019b12:	f63f af70 	bhi.w	80199f6 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8019b16:	6a3b      	ldr	r3, [r7, #32]
 8019b18:	791b      	ldrb	r3, [r3, #4]
 8019b1a:	2b0a      	cmp	r3, #10
 8019b1c:	bf28      	it	cs
 8019b1e:	230a      	movcs	r3, #10
 8019b20:	b2db      	uxtb	r3, r3
 8019b22:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019b26:	429a      	cmp	r2, r3
 8019b28:	d201      	bcs.n	8019b2e <USBH_ParseCfgDesc+0x1ee>
    {
      return USBH_NOT_SUPPORTED;
 8019b2a:	2303      	movs	r3, #3
 8019b2c:	e001      	b.n	8019b32 <USBH_ParseCfgDesc+0x1f2>
    }
  }

  return status;
 8019b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8019b32:	4618      	mov	r0, r3
 8019b34:	3730      	adds	r7, #48	@ 0x30
 8019b36:	46bd      	mov	sp, r7
 8019b38:	bd80      	pop	{r7, pc}

08019b3a <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8019b3a:	b480      	push	{r7}
 8019b3c:	b083      	sub	sp, #12
 8019b3e:	af00      	add	r7, sp, #0
 8019b40:	6078      	str	r0, [r7, #4]
 8019b42:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8019b44:	683b      	ldr	r3, [r7, #0]
 8019b46:	781a      	ldrb	r2, [r3, #0]
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8019b4c:	683b      	ldr	r3, [r7, #0]
 8019b4e:	785a      	ldrb	r2, [r3, #1]
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8019b54:	683b      	ldr	r3, [r7, #0]
 8019b56:	789a      	ldrb	r2, [r3, #2]
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8019b5c:	683b      	ldr	r3, [r7, #0]
 8019b5e:	78da      	ldrb	r2, [r3, #3]
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8019b64:	683b      	ldr	r3, [r7, #0]
 8019b66:	791a      	ldrb	r2, [r3, #4]
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8019b6c:	683b      	ldr	r3, [r7, #0]
 8019b6e:	795a      	ldrb	r2, [r3, #5]
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8019b74:	683b      	ldr	r3, [r7, #0]
 8019b76:	799a      	ldrb	r2, [r3, #6]
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8019b7c:	683b      	ldr	r3, [r7, #0]
 8019b7e:	79da      	ldrb	r2, [r3, #7]
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8019b84:	683b      	ldr	r3, [r7, #0]
 8019b86:	7a1a      	ldrb	r2, [r3, #8]
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	721a      	strb	r2, [r3, #8]
}
 8019b8c:	bf00      	nop
 8019b8e:	370c      	adds	r7, #12
 8019b90:	46bd      	mov	sp, r7
 8019b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b96:	4770      	bx	lr

08019b98 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8019b98:	b480      	push	{r7}
 8019b9a:	b087      	sub	sp, #28
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	60f8      	str	r0, [r7, #12]
 8019ba0:	60b9      	str	r1, [r7, #8]
 8019ba2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	781a      	ldrb	r2, [r3, #0]
 8019bac:	68bb      	ldr	r3, [r7, #8]
 8019bae:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	785a      	ldrb	r2, [r3, #1]
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	789a      	ldrb	r2, [r3, #2]
 8019bbc:	68bb      	ldr	r3, [r7, #8]
 8019bbe:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	78da      	ldrb	r2, [r3, #3]
 8019bc4:	68bb      	ldr	r3, [r7, #8]
 8019bc6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	3304      	adds	r3, #4
 8019bcc:	781b      	ldrb	r3, [r3, #0]
 8019bce:	461a      	mov	r2, r3
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	3305      	adds	r3, #5
 8019bd4:	781b      	ldrb	r3, [r3, #0]
 8019bd6:	021b      	lsls	r3, r3, #8
 8019bd8:	b29b      	uxth	r3, r3
 8019bda:	4313      	orrs	r3, r2
 8019bdc:	b29a      	uxth	r2, r3
 8019bde:	68bb      	ldr	r3, [r7, #8]
 8019be0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	799a      	ldrb	r2, [r3, #6]
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8019bea:	68bb      	ldr	r3, [r7, #8]
 8019bec:	889b      	ldrh	r3, [r3, #4]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d009      	beq.n	8019c06 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8019bf2:	68bb      	ldr	r3, [r7, #8]
 8019bf4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8019bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019bfa:	d804      	bhi.n	8019c06 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8019bfc:	68bb      	ldr	r3, [r7, #8]
 8019bfe:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8019c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019c04:	d901      	bls.n	8019c0a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8019c06:	2303      	movs	r3, #3
 8019c08:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019c10:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d136      	bne.n	8019c86 <USBH_ParseEPDesc+0xee>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8019c18:	68bb      	ldr	r3, [r7, #8]
 8019c1a:	78db      	ldrb	r3, [r3, #3]
 8019c1c:	f003 0303 	and.w	r3, r3, #3
 8019c20:	2b02      	cmp	r3, #2
 8019c22:	d108      	bne.n	8019c36 <USBH_ParseEPDesc+0x9e>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8019c24:	68bb      	ldr	r3, [r7, #8]
 8019c26:	889b      	ldrh	r3, [r3, #4]
 8019c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019c2c:	f240 809b 	bls.w	8019d66 <USBH_ParseEPDesc+0x1ce>
      {
        status = USBH_NOT_SUPPORTED;
 8019c30:	2303      	movs	r3, #3
 8019c32:	75fb      	strb	r3, [r7, #23]
 8019c34:	e097      	b.n	8019d66 <USBH_ParseEPDesc+0x1ce>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8019c36:	68bb      	ldr	r3, [r7, #8]
 8019c38:	78db      	ldrb	r3, [r3, #3]
 8019c3a:	f003 0303 	and.w	r3, r3, #3
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d107      	bne.n	8019c52 <USBH_ParseEPDesc+0xba>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8019c42:	68bb      	ldr	r3, [r7, #8]
 8019c44:	889b      	ldrh	r3, [r3, #4]
 8019c46:	2b40      	cmp	r3, #64	@ 0x40
 8019c48:	f240 808d 	bls.w	8019d66 <USBH_ParseEPDesc+0x1ce>
      {
        status = USBH_NOT_SUPPORTED;
 8019c4c:	2303      	movs	r3, #3
 8019c4e:	75fb      	strb	r3, [r7, #23]
 8019c50:	e089      	b.n	8019d66 <USBH_ParseEPDesc+0x1ce>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8019c52:	68bb      	ldr	r3, [r7, #8]
 8019c54:	78db      	ldrb	r3, [r3, #3]
 8019c56:	f003 0303 	and.w	r3, r3, #3
 8019c5a:	2b01      	cmp	r3, #1
 8019c5c:	d005      	beq.n	8019c6a <USBH_ParseEPDesc+0xd2>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8019c5e:	68bb      	ldr	r3, [r7, #8]
 8019c60:	78db      	ldrb	r3, [r3, #3]
 8019c62:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8019c66:	2b03      	cmp	r3, #3
 8019c68:	d10a      	bne.n	8019c80 <USBH_ParseEPDesc+0xe8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8019c6a:	68bb      	ldr	r3, [r7, #8]
 8019c6c:	799b      	ldrb	r3, [r3, #6]
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d003      	beq.n	8019c7a <USBH_ParseEPDesc+0xe2>
 8019c72:	68bb      	ldr	r3, [r7, #8]
 8019c74:	799b      	ldrb	r3, [r3, #6]
 8019c76:	2b10      	cmp	r3, #16
 8019c78:	d974      	bls.n	8019d64 <USBH_ParseEPDesc+0x1cc>
      {
        status = USBH_NOT_SUPPORTED;
 8019c7a:	2303      	movs	r3, #3
 8019c7c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8019c7e:	e071      	b.n	8019d64 <USBH_ParseEPDesc+0x1cc>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8019c80:	2303      	movs	r3, #3
 8019c82:	75fb      	strb	r3, [r7, #23]
 8019c84:	e06f      	b.n	8019d66 <USBH_ParseEPDesc+0x1ce>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019c8c:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8019c90:	2b01      	cmp	r3, #1
 8019c92:	d13c      	bne.n	8019d0e <USBH_ParseEPDesc+0x176>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8019c94:	68bb      	ldr	r3, [r7, #8]
 8019c96:	78db      	ldrb	r3, [r3, #3]
 8019c98:	f003 0303 	and.w	r3, r3, #3
 8019c9c:	2b02      	cmp	r3, #2
 8019c9e:	d005      	beq.n	8019cac <USBH_ParseEPDesc+0x114>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8019ca0:	68bb      	ldr	r3, [r7, #8]
 8019ca2:	78db      	ldrb	r3, [r3, #3]
 8019ca4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d106      	bne.n	8019cba <USBH_ParseEPDesc+0x122>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8019cac:	68bb      	ldr	r3, [r7, #8]
 8019cae:	889b      	ldrh	r3, [r3, #4]
 8019cb0:	2b40      	cmp	r3, #64	@ 0x40
 8019cb2:	d958      	bls.n	8019d66 <USBH_ParseEPDesc+0x1ce>
      {
        status = USBH_NOT_SUPPORTED;
 8019cb4:	2303      	movs	r3, #3
 8019cb6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8019cb8:	e055      	b.n	8019d66 <USBH_ParseEPDesc+0x1ce>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8019cba:	68bb      	ldr	r3, [r7, #8]
 8019cbc:	78db      	ldrb	r3, [r3, #3]
 8019cbe:	f003 0303 	and.w	r3, r3, #3
 8019cc2:	2b01      	cmp	r3, #1
 8019cc4:	d10e      	bne.n	8019ce4 <USBH_ParseEPDesc+0x14c>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8019cc6:	68bb      	ldr	r3, [r7, #8]
 8019cc8:	799b      	ldrb	r3, [r3, #6]
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d007      	beq.n	8019cde <USBH_ParseEPDesc+0x146>
          (ep_descriptor->bInterval > 0x10U) ||
 8019cce:	68bb      	ldr	r3, [r7, #8]
 8019cd0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8019cd2:	2b10      	cmp	r3, #16
 8019cd4:	d803      	bhi.n	8019cde <USBH_ParseEPDesc+0x146>
          (ep_descriptor->wMaxPacketSize > 64U))
 8019cd6:	68bb      	ldr	r3, [r7, #8]
 8019cd8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8019cda:	2b40      	cmp	r3, #64	@ 0x40
 8019cdc:	d943      	bls.n	8019d66 <USBH_ParseEPDesc+0x1ce>
      {
        status = USBH_NOT_SUPPORTED;
 8019cde:	2303      	movs	r3, #3
 8019ce0:	75fb      	strb	r3, [r7, #23]
 8019ce2:	e040      	b.n	8019d66 <USBH_ParseEPDesc+0x1ce>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8019ce4:	68bb      	ldr	r3, [r7, #8]
 8019ce6:	78db      	ldrb	r3, [r3, #3]
 8019ce8:	f003 0303 	and.w	r3, r3, #3
 8019cec:	2b03      	cmp	r3, #3
 8019cee:	d10b      	bne.n	8019d08 <USBH_ParseEPDesc+0x170>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8019cf0:	68bb      	ldr	r3, [r7, #8]
 8019cf2:	799b      	ldrb	r3, [r3, #6]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d004      	beq.n	8019d02 <USBH_ParseEPDesc+0x16a>
 8019cf8:	68bb      	ldr	r3, [r7, #8]
 8019cfa:	889b      	ldrh	r3, [r3, #4]
 8019cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019d00:	d331      	bcc.n	8019d66 <USBH_ParseEPDesc+0x1ce>
      {
        status = USBH_NOT_SUPPORTED;
 8019d02:	2303      	movs	r3, #3
 8019d04:	75fb      	strb	r3, [r7, #23]
 8019d06:	e02e      	b.n	8019d66 <USBH_ParseEPDesc+0x1ce>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8019d08:	2303      	movs	r3, #3
 8019d0a:	75fb      	strb	r3, [r7, #23]
 8019d0c:	e02b      	b.n	8019d66 <USBH_ParseEPDesc+0x1ce>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019d14:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 8019d18:	2b02      	cmp	r3, #2
 8019d1a:	d120      	bne.n	8019d5e <USBH_ParseEPDesc+0x1c6>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8019d1c:	68bb      	ldr	r3, [r7, #8]
 8019d1e:	78db      	ldrb	r3, [r3, #3]
 8019d20:	f003 0303 	and.w	r3, r3, #3
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d106      	bne.n	8019d36 <USBH_ParseEPDesc+0x19e>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8019d28:	68bb      	ldr	r3, [r7, #8]
 8019d2a:	889b      	ldrh	r3, [r3, #4]
 8019d2c:	2b08      	cmp	r3, #8
 8019d2e:	d01a      	beq.n	8019d66 <USBH_ParseEPDesc+0x1ce>
      {
        status = USBH_NOT_SUPPORTED;
 8019d30:	2303      	movs	r3, #3
 8019d32:	75fb      	strb	r3, [r7, #23]
 8019d34:	e017      	b.n	8019d66 <USBH_ParseEPDesc+0x1ce>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8019d36:	68bb      	ldr	r3, [r7, #8]
 8019d38:	78db      	ldrb	r3, [r3, #3]
 8019d3a:	f003 0303 	and.w	r3, r3, #3
 8019d3e:	2b03      	cmp	r3, #3
 8019d40:	d10a      	bne.n	8019d58 <USBH_ParseEPDesc+0x1c0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8019d42:	68bb      	ldr	r3, [r7, #8]
 8019d44:	799b      	ldrb	r3, [r3, #6]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d003      	beq.n	8019d52 <USBH_ParseEPDesc+0x1ba>
 8019d4a:	68bb      	ldr	r3, [r7, #8]
 8019d4c:	889b      	ldrh	r3, [r3, #4]
 8019d4e:	2b08      	cmp	r3, #8
 8019d50:	d909      	bls.n	8019d66 <USBH_ParseEPDesc+0x1ce>
      {
        status = USBH_NOT_SUPPORTED;
 8019d52:	2303      	movs	r3, #3
 8019d54:	75fb      	strb	r3, [r7, #23]
 8019d56:	e006      	b.n	8019d66 <USBH_ParseEPDesc+0x1ce>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8019d58:	2303      	movs	r3, #3
 8019d5a:	75fb      	strb	r3, [r7, #23]
 8019d5c:	e003      	b.n	8019d66 <USBH_ParseEPDesc+0x1ce>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8019d5e:	2303      	movs	r3, #3
 8019d60:	75fb      	strb	r3, [r7, #23]
 8019d62:	e000      	b.n	8019d66 <USBH_ParseEPDesc+0x1ce>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8019d64:	bf00      	nop
  }

  return status;
 8019d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8019d68:	4618      	mov	r0, r3
 8019d6a:	371c      	adds	r7, #28
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d72:	4770      	bx	lr

08019d74 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8019d74:	b480      	push	{r7}
 8019d76:	b087      	sub	sp, #28
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	60f8      	str	r0, [r7, #12]
 8019d7c:	60b9      	str	r1, [r7, #8]
 8019d7e:	4613      	mov	r3, r2
 8019d80:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	3301      	adds	r3, #1
 8019d86:	781b      	ldrb	r3, [r3, #0]
 8019d88:	2b03      	cmp	r3, #3
 8019d8a:	d120      	bne.n	8019dce <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	781b      	ldrb	r3, [r3, #0]
 8019d90:	1e9a      	subs	r2, r3, #2
 8019d92:	88fb      	ldrh	r3, [r7, #6]
 8019d94:	4293      	cmp	r3, r2
 8019d96:	bf28      	it	cs
 8019d98:	4613      	movcs	r3, r2
 8019d9a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	3302      	adds	r3, #2
 8019da0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8019da2:	2300      	movs	r3, #0
 8019da4:	82fb      	strh	r3, [r7, #22]
 8019da6:	e00b      	b.n	8019dc0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8019da8:	8afb      	ldrh	r3, [r7, #22]
 8019daa:	68fa      	ldr	r2, [r7, #12]
 8019dac:	4413      	add	r3, r2
 8019dae:	781a      	ldrb	r2, [r3, #0]
 8019db0:	68bb      	ldr	r3, [r7, #8]
 8019db2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8019db4:	68bb      	ldr	r3, [r7, #8]
 8019db6:	3301      	adds	r3, #1
 8019db8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8019dba:	8afb      	ldrh	r3, [r7, #22]
 8019dbc:	3302      	adds	r3, #2
 8019dbe:	82fb      	strh	r3, [r7, #22]
 8019dc0:	8afa      	ldrh	r2, [r7, #22]
 8019dc2:	8abb      	ldrh	r3, [r7, #20]
 8019dc4:	429a      	cmp	r2, r3
 8019dc6:	d3ef      	bcc.n	8019da8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8019dc8:	68bb      	ldr	r3, [r7, #8]
 8019dca:	2200      	movs	r2, #0
 8019dcc:	701a      	strb	r2, [r3, #0]
  }
}
 8019dce:	bf00      	nop
 8019dd0:	371c      	adds	r7, #28
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd8:	4770      	bx	lr

08019dda <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8019dda:	b480      	push	{r7}
 8019ddc:	b085      	sub	sp, #20
 8019dde:	af00      	add	r7, sp, #0
 8019de0:	6078      	str	r0, [r7, #4]
 8019de2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8019de4:	683b      	ldr	r3, [r7, #0]
 8019de6:	881b      	ldrh	r3, [r3, #0]
 8019de8:	687a      	ldr	r2, [r7, #4]
 8019dea:	7812      	ldrb	r2, [r2, #0]
 8019dec:	4413      	add	r3, r2
 8019dee:	b29a      	uxth	r2, r3
 8019df0:	683b      	ldr	r3, [r7, #0]
 8019df2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	781b      	ldrb	r3, [r3, #0]
 8019df8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	4413      	add	r3, r2
 8019dfe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8019e00:	68fb      	ldr	r3, [r7, #12]
}
 8019e02:	4618      	mov	r0, r3
 8019e04:	3714      	adds	r7, #20
 8019e06:	46bd      	mov	sp, r7
 8019e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0c:	4770      	bx	lr

08019e0e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8019e0e:	b580      	push	{r7, lr}
 8019e10:	b086      	sub	sp, #24
 8019e12:	af00      	add	r7, sp, #0
 8019e14:	60f8      	str	r0, [r7, #12]
 8019e16:	60b9      	str	r1, [r7, #8]
 8019e18:	4613      	mov	r3, r2
 8019e1a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8019e1c:	2301      	movs	r3, #1
 8019e1e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	789b      	ldrb	r3, [r3, #2]
 8019e24:	2b01      	cmp	r3, #1
 8019e26:	d002      	beq.n	8019e2e <USBH_CtlReq+0x20>
 8019e28:	2b02      	cmp	r3, #2
 8019e2a:	d00f      	beq.n	8019e4c <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8019e2c:	e027      	b.n	8019e7e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	68ba      	ldr	r2, [r7, #8]
 8019e32:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	88fa      	ldrh	r2, [r7, #6]
 8019e38:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	2201      	movs	r2, #1
 8019e3e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8019e40:	68fb      	ldr	r3, [r7, #12]
 8019e42:	2202      	movs	r2, #2
 8019e44:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8019e46:	2301      	movs	r3, #1
 8019e48:	75fb      	strb	r3, [r7, #23]
      break;
 8019e4a:	e018      	b.n	8019e7e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8019e4c:	68f8      	ldr	r0, [r7, #12]
 8019e4e:	f000 f81b 	bl	8019e88 <USBH_HandleControl>
 8019e52:	4603      	mov	r3, r0
 8019e54:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8019e56:	7dfb      	ldrb	r3, [r7, #23]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d002      	beq.n	8019e62 <USBH_CtlReq+0x54>
 8019e5c:	7dfb      	ldrb	r3, [r7, #23]
 8019e5e:	2b03      	cmp	r3, #3
 8019e60:	d106      	bne.n	8019e70 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	2201      	movs	r2, #1
 8019e66:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	761a      	strb	r2, [r3, #24]
      break;
 8019e6e:	e005      	b.n	8019e7c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8019e70:	7dfb      	ldrb	r3, [r7, #23]
 8019e72:	2b02      	cmp	r3, #2
 8019e74:	d102      	bne.n	8019e7c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	2201      	movs	r2, #1
 8019e7a:	709a      	strb	r2, [r3, #2]
      break;
 8019e7c:	bf00      	nop
  }
  return status;
 8019e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019e80:	4618      	mov	r0, r3
 8019e82:	3718      	adds	r7, #24
 8019e84:	46bd      	mov	sp, r7
 8019e86:	bd80      	pop	{r7, pc}

08019e88 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b086      	sub	sp, #24
 8019e8c:	af02      	add	r7, sp, #8
 8019e8e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8019e90:	2301      	movs	r3, #1
 8019e92:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8019e94:	2300      	movs	r3, #0
 8019e96:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	7e1b      	ldrb	r3, [r3, #24]
 8019e9c:	3b01      	subs	r3, #1
 8019e9e:	2b0a      	cmp	r3, #10
 8019ea0:	f200 816a 	bhi.w	801a178 <USBH_HandleControl+0x2f0>
 8019ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8019eac <USBH_HandleControl+0x24>)
 8019ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019eaa:	bf00      	nop
 8019eac:	08019ed9 	.word	0x08019ed9
 8019eb0:	08019ef3 	.word	0x08019ef3
 8019eb4:	08019f5d 	.word	0x08019f5d
 8019eb8:	08019f87 	.word	0x08019f87
 8019ebc:	08019fc1 	.word	0x08019fc1
 8019ec0:	08019fef 	.word	0x08019fef
 8019ec4:	0801a041 	.word	0x0801a041
 8019ec8:	0801a067 	.word	0x0801a067
 8019ecc:	0801a0a3 	.word	0x0801a0a3
 8019ed0:	0801a0cd 	.word	0x0801a0cd
 8019ed4:	0801a10b 	.word	0x0801a10b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	f103 0110 	add.w	r1, r3, #16
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	795b      	ldrb	r3, [r3, #5]
 8019ee2:	461a      	mov	r2, r3
 8019ee4:	6878      	ldr	r0, [r7, #4]
 8019ee6:	f000 f95b 	bl	801a1a0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	2202      	movs	r2, #2
 8019eee:	761a      	strb	r2, [r3, #24]
      break;
 8019ef0:	e14d      	b.n	801a18e <USBH_HandleControl+0x306>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	795b      	ldrb	r3, [r3, #5]
 8019ef6:	4619      	mov	r1, r3
 8019ef8:	6878      	ldr	r0, [r7, #4]
 8019efa:	f001 f9d7 	bl	801b2ac <USBH_LL_GetURBState>
 8019efe:	4603      	mov	r3, r0
 8019f00:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8019f02:	7bbb      	ldrb	r3, [r7, #14]
 8019f04:	2b01      	cmp	r3, #1
 8019f06:	d11e      	bne.n	8019f46 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	7c1b      	ldrb	r3, [r3, #16]
 8019f0c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8019f10:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	8adb      	ldrh	r3, [r3, #22]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d00a      	beq.n	8019f30 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8019f1a:	7b7b      	ldrb	r3, [r7, #13]
 8019f1c:	2b80      	cmp	r3, #128	@ 0x80
 8019f1e:	d103      	bne.n	8019f28 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	2203      	movs	r2, #3
 8019f24:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8019f26:	e129      	b.n	801a17c <USBH_HandleControl+0x2f4>
            phost->Control.state = CTRL_DATA_OUT;
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	2205      	movs	r2, #5
 8019f2c:	761a      	strb	r2, [r3, #24]
      break;
 8019f2e:	e125      	b.n	801a17c <USBH_HandleControl+0x2f4>
          if (direction == USB_D2H)
 8019f30:	7b7b      	ldrb	r3, [r7, #13]
 8019f32:	2b80      	cmp	r3, #128	@ 0x80
 8019f34:	d103      	bne.n	8019f3e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	2209      	movs	r2, #9
 8019f3a:	761a      	strb	r2, [r3, #24]
      break;
 8019f3c:	e11e      	b.n	801a17c <USBH_HandleControl+0x2f4>
            phost->Control.state = CTRL_STATUS_IN;
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	2207      	movs	r2, #7
 8019f42:	761a      	strb	r2, [r3, #24]
      break;
 8019f44:	e11a      	b.n	801a17c <USBH_HandleControl+0x2f4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8019f46:	7bbb      	ldrb	r3, [r7, #14]
 8019f48:	2b04      	cmp	r3, #4
 8019f4a:	d003      	beq.n	8019f54 <USBH_HandleControl+0xcc>
 8019f4c:	7bbb      	ldrb	r3, [r7, #14]
 8019f4e:	2b02      	cmp	r3, #2
 8019f50:	f040 8114 	bne.w	801a17c <USBH_HandleControl+0x2f4>
          phost->Control.state = CTRL_ERROR;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	220b      	movs	r2, #11
 8019f58:	761a      	strb	r2, [r3, #24]
      break;
 8019f5a:	e10f      	b.n	801a17c <USBH_HandleControl+0x2f4>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019f62:	f8d3 3394 	ldr.w	r3, [r3, #916]	@ 0x394
 8019f66:	b29a      	uxth	r2, r3
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	6899      	ldr	r1, [r3, #8]
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	899a      	ldrh	r2, [r3, #12]
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	791b      	ldrb	r3, [r3, #4]
 8019f78:	6878      	ldr	r0, [r7, #4]
 8019f7a:	f000 f952 	bl	801a222 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	2204      	movs	r2, #4
 8019f82:	761a      	strb	r2, [r3, #24]
      break;
 8019f84:	e103      	b.n	801a18e <USBH_HandleControl+0x306>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	791b      	ldrb	r3, [r3, #4]
 8019f8a:	4619      	mov	r1, r3
 8019f8c:	6878      	ldr	r0, [r7, #4]
 8019f8e:	f001 f98d 	bl	801b2ac <USBH_LL_GetURBState>
 8019f92:	4603      	mov	r3, r0
 8019f94:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8019f96:	7bbb      	ldrb	r3, [r7, #14]
 8019f98:	2b01      	cmp	r3, #1
 8019f9a:	d103      	bne.n	8019fa4 <USBH_HandleControl+0x11c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	2209      	movs	r2, #9
 8019fa0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8019fa2:	e0ed      	b.n	801a180 <USBH_HandleControl+0x2f8>
      else if (URB_Status == USBH_URB_STALL)
 8019fa4:	7bbb      	ldrb	r3, [r7, #14]
 8019fa6:	2b05      	cmp	r3, #5
 8019fa8:	d102      	bne.n	8019fb0 <USBH_HandleControl+0x128>
        status = USBH_NOT_SUPPORTED;
 8019faa:	2303      	movs	r3, #3
 8019fac:	73fb      	strb	r3, [r7, #15]
      break;
 8019fae:	e0e7      	b.n	801a180 <USBH_HandleControl+0x2f8>
        if (URB_Status == USBH_URB_ERROR)
 8019fb0:	7bbb      	ldrb	r3, [r7, #14]
 8019fb2:	2b04      	cmp	r3, #4
 8019fb4:	f040 80e4 	bne.w	801a180 <USBH_HandleControl+0x2f8>
          phost->Control.state = CTRL_ERROR;
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	220b      	movs	r2, #11
 8019fbc:	761a      	strb	r2, [r3, #24]
      break;
 8019fbe:	e0df      	b.n	801a180 <USBH_HandleControl+0x2f8>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	6899      	ldr	r1, [r3, #8]
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	899a      	ldrh	r2, [r3, #12]
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	795b      	ldrb	r3, [r3, #5]
 8019fcc:	2001      	movs	r0, #1
 8019fce:	9000      	str	r0, [sp, #0]
 8019fd0:	6878      	ldr	r0, [r7, #4]
 8019fd2:	f000 f8ff 	bl	801a1d4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8019fdc:	f8d3 3394 	ldr.w	r3, [r3, #916]	@ 0x394
 8019fe0:	b29a      	uxth	r2, r3
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	2206      	movs	r2, #6
 8019fea:	761a      	strb	r2, [r3, #24]
      break;
 8019fec:	e0cf      	b.n	801a18e <USBH_HandleControl+0x306>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	795b      	ldrb	r3, [r3, #5]
 8019ff2:	4619      	mov	r1, r3
 8019ff4:	6878      	ldr	r0, [r7, #4]
 8019ff6:	f001 f959 	bl	801b2ac <USBH_LL_GetURBState>
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8019ffe:	7bbb      	ldrb	r3, [r7, #14]
 801a000:	2b01      	cmp	r3, #1
 801a002:	d103      	bne.n	801a00c <USBH_HandleControl+0x184>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	2207      	movs	r2, #7
 801a008:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801a00a:	e0bb      	b.n	801a184 <USBH_HandleControl+0x2fc>
      else if (URB_Status == USBH_URB_STALL)
 801a00c:	7bbb      	ldrb	r3, [r7, #14]
 801a00e:	2b05      	cmp	r3, #5
 801a010:	d105      	bne.n	801a01e <USBH_HandleControl+0x196>
        phost->Control.state = CTRL_STALLED;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	220c      	movs	r2, #12
 801a016:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801a018:	2303      	movs	r3, #3
 801a01a:	73fb      	strb	r3, [r7, #15]
      break;
 801a01c:	e0b2      	b.n	801a184 <USBH_HandleControl+0x2fc>
      else if (URB_Status == USBH_URB_NOTREADY)
 801a01e:	7bbb      	ldrb	r3, [r7, #14]
 801a020:	2b02      	cmp	r3, #2
 801a022:	d103      	bne.n	801a02c <USBH_HandleControl+0x1a4>
        phost->Control.state = CTRL_DATA_OUT;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	2205      	movs	r2, #5
 801a028:	761a      	strb	r2, [r3, #24]
      break;
 801a02a:	e0ab      	b.n	801a184 <USBH_HandleControl+0x2fc>
        if (URB_Status == USBH_URB_ERROR)
 801a02c:	7bbb      	ldrb	r3, [r7, #14]
 801a02e:	2b04      	cmp	r3, #4
 801a030:	f040 80a8 	bne.w	801a184 <USBH_HandleControl+0x2fc>
          phost->Control.state = CTRL_ERROR;
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	220b      	movs	r2, #11
 801a038:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801a03a:	2302      	movs	r3, #2
 801a03c:	73fb      	strb	r3, [r7, #15]
      break;
 801a03e:	e0a1      	b.n	801a184 <USBH_HandleControl+0x2fc>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	791b      	ldrb	r3, [r3, #4]
 801a044:	2200      	movs	r2, #0
 801a046:	2100      	movs	r1, #0
 801a048:	6878      	ldr	r0, [r7, #4]
 801a04a:	f000 f8ea 	bl	801a222 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801a054:	f8d3 3394 	ldr.w	r3, [r3, #916]	@ 0x394
 801a058:	b29a      	uxth	r2, r3
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	2208      	movs	r2, #8
 801a062:	761a      	strb	r2, [r3, #24]

      break;
 801a064:	e093      	b.n	801a18e <USBH_HandleControl+0x306>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	791b      	ldrb	r3, [r3, #4]
 801a06a:	4619      	mov	r1, r3
 801a06c:	6878      	ldr	r0, [r7, #4]
 801a06e:	f001 f91d 	bl	801b2ac <USBH_LL_GetURBState>
 801a072:	4603      	mov	r3, r0
 801a074:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801a076:	7bbb      	ldrb	r3, [r7, #14]
 801a078:	2b01      	cmp	r3, #1
 801a07a:	d105      	bne.n	801a088 <USBH_HandleControl+0x200>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	220d      	movs	r2, #13
 801a080:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801a082:	2300      	movs	r3, #0
 801a084:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801a086:	e07f      	b.n	801a188 <USBH_HandleControl+0x300>
      else if (URB_Status == USBH_URB_ERROR)
 801a088:	7bbb      	ldrb	r3, [r7, #14]
 801a08a:	2b04      	cmp	r3, #4
 801a08c:	d103      	bne.n	801a096 <USBH_HandleControl+0x20e>
        phost->Control.state = CTRL_ERROR;
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	220b      	movs	r2, #11
 801a092:	761a      	strb	r2, [r3, #24]
      break;
 801a094:	e078      	b.n	801a188 <USBH_HandleControl+0x300>
        if (URB_Status == USBH_URB_STALL)
 801a096:	7bbb      	ldrb	r3, [r7, #14]
 801a098:	2b05      	cmp	r3, #5
 801a09a:	d175      	bne.n	801a188 <USBH_HandleControl+0x300>
          status = USBH_NOT_SUPPORTED;
 801a09c:	2303      	movs	r3, #3
 801a09e:	73fb      	strb	r3, [r7, #15]
      break;
 801a0a0:	e072      	b.n	801a188 <USBH_HandleControl+0x300>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	795b      	ldrb	r3, [r3, #5]
 801a0a6:	2201      	movs	r2, #1
 801a0a8:	9200      	str	r2, [sp, #0]
 801a0aa:	2200      	movs	r2, #0
 801a0ac:	2100      	movs	r1, #0
 801a0ae:	6878      	ldr	r0, [r7, #4]
 801a0b0:	f000 f890 	bl	801a1d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801a0ba:	f8d3 3394 	ldr.w	r3, [r3, #916]	@ 0x394
 801a0be:	b29a      	uxth	r2, r3
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	220a      	movs	r2, #10
 801a0c8:	761a      	strb	r2, [r3, #24]
      break;
 801a0ca:	e060      	b.n	801a18e <USBH_HandleControl+0x306>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	795b      	ldrb	r3, [r3, #5]
 801a0d0:	4619      	mov	r1, r3
 801a0d2:	6878      	ldr	r0, [r7, #4]
 801a0d4:	f001 f8ea 	bl	801b2ac <USBH_LL_GetURBState>
 801a0d8:	4603      	mov	r3, r0
 801a0da:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801a0dc:	7bbb      	ldrb	r3, [r7, #14]
 801a0de:	2b01      	cmp	r3, #1
 801a0e0:	d105      	bne.n	801a0ee <USBH_HandleControl+0x266>
      {
        status = USBH_OK;
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	220d      	movs	r2, #13
 801a0ea:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801a0ec:	e04e      	b.n	801a18c <USBH_HandleControl+0x304>
      else if (URB_Status == USBH_URB_NOTREADY)
 801a0ee:	7bbb      	ldrb	r3, [r7, #14]
 801a0f0:	2b02      	cmp	r3, #2
 801a0f2:	d103      	bne.n	801a0fc <USBH_HandleControl+0x274>
        phost->Control.state = CTRL_STATUS_OUT;
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	2209      	movs	r2, #9
 801a0f8:	761a      	strb	r2, [r3, #24]
      break;
 801a0fa:	e047      	b.n	801a18c <USBH_HandleControl+0x304>
        if (URB_Status == USBH_URB_ERROR)
 801a0fc:	7bbb      	ldrb	r3, [r7, #14]
 801a0fe:	2b04      	cmp	r3, #4
 801a100:	d144      	bne.n	801a18c <USBH_HandleControl+0x304>
          phost->Control.state = CTRL_ERROR;
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	220b      	movs	r2, #11
 801a106:	761a      	strb	r2, [r3, #24]
      break;
 801a108:	e040      	b.n	801a18c <USBH_HandleControl+0x304>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	7e5b      	ldrb	r3, [r3, #25]
 801a10e:	3301      	adds	r3, #1
 801a110:	b2da      	uxtb	r2, r3
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	765a      	strb	r2, [r3, #25]
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	7e5b      	ldrb	r3, [r3, #25]
 801a11a:	2b02      	cmp	r3, #2
 801a11c:	d806      	bhi.n	801a12c <USBH_HandleControl+0x2a4>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	2201      	movs	r2, #1
 801a122:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	2201      	movs	r2, #1
 801a128:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801a12a:	e030      	b.n	801a18e <USBH_HandleControl+0x306>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801a132:	f8d3 33a4 	ldr.w	r3, [r3, #932]	@ 0x3a4
 801a136:	2106      	movs	r1, #6
 801a138:	6878      	ldr	r0, [r7, #4]
 801a13a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	2200      	movs	r2, #0
 801a140:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 801a142:	4815      	ldr	r0, [pc, #84]	@ (801a198 <USBH_HandleControl+0x310>)
 801a144:	f001 faf6 	bl	801b734 <iprintf>
 801a148:	4814      	ldr	r0, [pc, #80]	@ (801a19c <USBH_HandleControl+0x314>)
 801a14a:	f001 faf3 	bl	801b734 <iprintf>
 801a14e:	200a      	movs	r0, #10
 801a150:	f001 fb02 	bl	801b758 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	795b      	ldrb	r3, [r3, #5]
 801a158:	4619      	mov	r1, r3
 801a15a:	6878      	ldr	r0, [r7, #4]
 801a15c:	f000 f950 	bl	801a400 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	791b      	ldrb	r3, [r3, #4]
 801a164:	4619      	mov	r1, r3
 801a166:	6878      	ldr	r0, [r7, #4]
 801a168:	f000 f94a 	bl	801a400 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	2200      	movs	r2, #0
 801a170:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801a172:	2302      	movs	r3, #2
 801a174:	73fb      	strb	r3, [r7, #15]
      break;
 801a176:	e00a      	b.n	801a18e <USBH_HandleControl+0x306>

    default:
      break;
 801a178:	bf00      	nop
 801a17a:	e008      	b.n	801a18e <USBH_HandleControl+0x306>
      break;
 801a17c:	bf00      	nop
 801a17e:	e006      	b.n	801a18e <USBH_HandleControl+0x306>
      break;
 801a180:	bf00      	nop
 801a182:	e004      	b.n	801a18e <USBH_HandleControl+0x306>
      break;
 801a184:	bf00      	nop
 801a186:	e002      	b.n	801a18e <USBH_HandleControl+0x306>
      break;
 801a188:	bf00      	nop
 801a18a:	e000      	b.n	801a18e <USBH_HandleControl+0x306>
      break;
 801a18c:	bf00      	nop
  }

  return status;
 801a18e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a190:	4618      	mov	r0, r3
 801a192:	3710      	adds	r7, #16
 801a194:	46bd      	mov	sp, r7
 801a196:	bd80      	pop	{r7, pc}
 801a198:	0801d62c 	.word	0x0801d62c
 801a19c:	0801d708 	.word	0x0801d708

0801a1a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 801a1a0:	b580      	push	{r7, lr}
 801a1a2:	b088      	sub	sp, #32
 801a1a4:	af04      	add	r7, sp, #16
 801a1a6:	60f8      	str	r0, [r7, #12]
 801a1a8:	60b9      	str	r1, [r7, #8]
 801a1aa:	4613      	mov	r3, r2
 801a1ac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801a1ae:	79f9      	ldrb	r1, [r7, #7]
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	9303      	str	r3, [sp, #12]
 801a1b4:	2308      	movs	r3, #8
 801a1b6:	9302      	str	r3, [sp, #8]
 801a1b8:	68bb      	ldr	r3, [r7, #8]
 801a1ba:	9301      	str	r3, [sp, #4]
 801a1bc:	2300      	movs	r3, #0
 801a1be:	9300      	str	r3, [sp, #0]
 801a1c0:	2300      	movs	r3, #0
 801a1c2:	2200      	movs	r2, #0
 801a1c4:	68f8      	ldr	r0, [r7, #12]
 801a1c6:	f001 f83e 	bl	801b246 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801a1ca:	2300      	movs	r3, #0
}
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	3710      	adds	r7, #16
 801a1d0:	46bd      	mov	sp, r7
 801a1d2:	bd80      	pop	{r7, pc}

0801a1d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	b088      	sub	sp, #32
 801a1d8:	af04      	add	r7, sp, #16
 801a1da:	60f8      	str	r0, [r7, #12]
 801a1dc:	60b9      	str	r1, [r7, #8]
 801a1de:	4611      	mov	r1, r2
 801a1e0:	461a      	mov	r2, r3
 801a1e2:	460b      	mov	r3, r1
 801a1e4:	80fb      	strh	r3, [r7, #6]
 801a1e6:	4613      	mov	r3, r2
 801a1e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801a1f0:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d001      	beq.n	801a1fc <USBH_CtlSendData+0x28>
  {
    do_ping = 0U;
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801a1fc:	7979      	ldrb	r1, [r7, #5]
 801a1fe:	7e3b      	ldrb	r3, [r7, #24]
 801a200:	9303      	str	r3, [sp, #12]
 801a202:	88fb      	ldrh	r3, [r7, #6]
 801a204:	9302      	str	r3, [sp, #8]
 801a206:	68bb      	ldr	r3, [r7, #8]
 801a208:	9301      	str	r3, [sp, #4]
 801a20a:	2301      	movs	r3, #1
 801a20c:	9300      	str	r3, [sp, #0]
 801a20e:	2300      	movs	r3, #0
 801a210:	2200      	movs	r2, #0
 801a212:	68f8      	ldr	r0, [r7, #12]
 801a214:	f001 f817 	bl	801b246 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801a218:	2300      	movs	r3, #0
}
 801a21a:	4618      	mov	r0, r3
 801a21c:	3710      	adds	r7, #16
 801a21e:	46bd      	mov	sp, r7
 801a220:	bd80      	pop	{r7, pc}

0801a222 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801a222:	b580      	push	{r7, lr}
 801a224:	b088      	sub	sp, #32
 801a226:	af04      	add	r7, sp, #16
 801a228:	60f8      	str	r0, [r7, #12]
 801a22a:	60b9      	str	r1, [r7, #8]
 801a22c:	4611      	mov	r1, r2
 801a22e:	461a      	mov	r2, r3
 801a230:	460b      	mov	r3, r1
 801a232:	80fb      	strh	r3, [r7, #6]
 801a234:	4613      	mov	r3, r2
 801a236:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801a238:	7979      	ldrb	r1, [r7, #5]
 801a23a:	2300      	movs	r3, #0
 801a23c:	9303      	str	r3, [sp, #12]
 801a23e:	88fb      	ldrh	r3, [r7, #6]
 801a240:	9302      	str	r3, [sp, #8]
 801a242:	68bb      	ldr	r3, [r7, #8]
 801a244:	9301      	str	r3, [sp, #4]
 801a246:	2301      	movs	r3, #1
 801a248:	9300      	str	r3, [sp, #0]
 801a24a:	2300      	movs	r3, #0
 801a24c:	2201      	movs	r2, #1
 801a24e:	68f8      	ldr	r0, [r7, #12]
 801a250:	f000 fff9 	bl	801b246 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801a254:	2300      	movs	r3, #0

}
 801a256:	4618      	mov	r0, r3
 801a258:	3710      	adds	r7, #16
 801a25a:	46bd      	mov	sp, r7
 801a25c:	bd80      	pop	{r7, pc}

0801a25e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801a25e:	b580      	push	{r7, lr}
 801a260:	b088      	sub	sp, #32
 801a262:	af04      	add	r7, sp, #16
 801a264:	60f8      	str	r0, [r7, #12]
 801a266:	60b9      	str	r1, [r7, #8]
 801a268:	4611      	mov	r1, r2
 801a26a:	461a      	mov	r2, r3
 801a26c:	460b      	mov	r3, r1
 801a26e:	80fb      	strh	r3, [r7, #6]
 801a270:	4613      	mov	r3, r2
 801a272:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801a27a:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d001      	beq.n	801a286 <USBH_BulkSendData+0x28>
  {
    do_ping = 0U;
 801a282:	2300      	movs	r3, #0
 801a284:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801a286:	7979      	ldrb	r1, [r7, #5]
 801a288:	7e3b      	ldrb	r3, [r7, #24]
 801a28a:	9303      	str	r3, [sp, #12]
 801a28c:	88fb      	ldrh	r3, [r7, #6]
 801a28e:	9302      	str	r3, [sp, #8]
 801a290:	68bb      	ldr	r3, [r7, #8]
 801a292:	9301      	str	r3, [sp, #4]
 801a294:	2301      	movs	r3, #1
 801a296:	9300      	str	r3, [sp, #0]
 801a298:	2302      	movs	r3, #2
 801a29a:	2200      	movs	r2, #0
 801a29c:	68f8      	ldr	r0, [r7, #12]
 801a29e:	f000 ffd2 	bl	801b246 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801a2a2:	2300      	movs	r3, #0
}
 801a2a4:	4618      	mov	r0, r3
 801a2a6:	3710      	adds	r7, #16
 801a2a8:	46bd      	mov	sp, r7
 801a2aa:	bd80      	pop	{r7, pc}

0801a2ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	b088      	sub	sp, #32
 801a2b0:	af04      	add	r7, sp, #16
 801a2b2:	60f8      	str	r0, [r7, #12]
 801a2b4:	60b9      	str	r1, [r7, #8]
 801a2b6:	4611      	mov	r1, r2
 801a2b8:	461a      	mov	r2, r3
 801a2ba:	460b      	mov	r3, r1
 801a2bc:	80fb      	strh	r3, [r7, #6]
 801a2be:	4613      	mov	r3, r2
 801a2c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801a2c2:	7979      	ldrb	r1, [r7, #5]
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	9303      	str	r3, [sp, #12]
 801a2c8:	88fb      	ldrh	r3, [r7, #6]
 801a2ca:	9302      	str	r3, [sp, #8]
 801a2cc:	68bb      	ldr	r3, [r7, #8]
 801a2ce:	9301      	str	r3, [sp, #4]
 801a2d0:	2301      	movs	r3, #1
 801a2d2:	9300      	str	r3, [sp, #0]
 801a2d4:	2302      	movs	r3, #2
 801a2d6:	2201      	movs	r2, #1
 801a2d8:	68f8      	ldr	r0, [r7, #12]
 801a2da:	f000 ffb4 	bl	801b246 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801a2de:	2300      	movs	r3, #0
}
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	3710      	adds	r7, #16
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	bd80      	pop	{r7, pc}

0801a2e8 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b088      	sub	sp, #32
 801a2ec:	af04      	add	r7, sp, #16
 801a2ee:	60f8      	str	r0, [r7, #12]
 801a2f0:	60b9      	str	r1, [r7, #8]
 801a2f2:	4611      	mov	r1, r2
 801a2f4:	461a      	mov	r2, r3
 801a2f6:	460b      	mov	r3, r1
 801a2f8:	71fb      	strb	r3, [r7, #7]
 801a2fa:	4613      	mov	r3, r2
 801a2fc:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801a2fe:	79fb      	ldrb	r3, [r7, #7]
 801a300:	b29b      	uxth	r3, r3
 801a302:	79b9      	ldrb	r1, [r7, #6]
 801a304:	2200      	movs	r2, #0
 801a306:	9203      	str	r2, [sp, #12]
 801a308:	9302      	str	r3, [sp, #8]
 801a30a:	68bb      	ldr	r3, [r7, #8]
 801a30c:	9301      	str	r3, [sp, #4]
 801a30e:	2301      	movs	r3, #1
 801a310:	9300      	str	r3, [sp, #0]
 801a312:	2303      	movs	r3, #3
 801a314:	2201      	movs	r2, #1
 801a316:	68f8      	ldr	r0, [r7, #12]
 801a318:	f000 ff95 	bl	801b246 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 801a31c:	2300      	movs	r3, #0
}
 801a31e:	4618      	mov	r0, r3
 801a320:	3710      	adds	r7, #16
 801a322:	46bd      	mov	sp, r7
 801a324:	bd80      	pop	{r7, pc}

0801a326 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 801a326:	b580      	push	{r7, lr}
 801a328:	b088      	sub	sp, #32
 801a32a:	af04      	add	r7, sp, #16
 801a32c:	60f8      	str	r0, [r7, #12]
 801a32e:	60b9      	str	r1, [r7, #8]
 801a330:	607a      	str	r2, [r7, #4]
 801a332:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	b29b      	uxth	r3, r3
 801a338:	78f9      	ldrb	r1, [r7, #3]
 801a33a:	2200      	movs	r2, #0
 801a33c:	9203      	str	r2, [sp, #12]
 801a33e:	9302      	str	r3, [sp, #8]
 801a340:	68bb      	ldr	r3, [r7, #8]
 801a342:	9301      	str	r3, [sp, #4]
 801a344:	2301      	movs	r3, #1
 801a346:	9300      	str	r3, [sp, #0]
 801a348:	2301      	movs	r3, #1
 801a34a:	2200      	movs	r2, #0
 801a34c:	68f8      	ldr	r0, [r7, #12]
 801a34e:	f000 ff7a 	bl	801b246 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 801a352:	2300      	movs	r3, #0
}
 801a354:	4618      	mov	r0, r3
 801a356:	3710      	adds	r7, #16
 801a358:	46bd      	mov	sp, r7
 801a35a:	bd80      	pop	{r7, pc}

0801a35c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	b086      	sub	sp, #24
 801a360:	af04      	add	r7, sp, #16
 801a362:	6078      	str	r0, [r7, #4]
 801a364:	4608      	mov	r0, r1
 801a366:	4611      	mov	r1, r2
 801a368:	461a      	mov	r2, r3
 801a36a:	4603      	mov	r3, r0
 801a36c:	70fb      	strb	r3, [r7, #3]
 801a36e:	460b      	mov	r3, r1
 801a370:	70bb      	strb	r3, [r7, #2]
 801a372:	4613      	mov	r3, r2
 801a374:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801a376:	7878      	ldrb	r0, [r7, #1]
 801a378:	78ba      	ldrb	r2, [r7, #2]
 801a37a:	78f9      	ldrb	r1, [r7, #3]
 801a37c:	8b3b      	ldrh	r3, [r7, #24]
 801a37e:	9302      	str	r3, [sp, #8]
 801a380:	7d3b      	ldrb	r3, [r7, #20]
 801a382:	9301      	str	r3, [sp, #4]
 801a384:	7c3b      	ldrb	r3, [r7, #16]
 801a386:	9300      	str	r3, [sp, #0]
 801a388:	4603      	mov	r3, r0
 801a38a:	6878      	ldr	r0, [r7, #4]
 801a38c:	f000 ff09 	bl	801b1a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 801a390:	2300      	movs	r3, #0
}
 801a392:	4618      	mov	r0, r3
 801a394:	3708      	adds	r7, #8
 801a396:	46bd      	mov	sp, r7
 801a398:	bd80      	pop	{r7, pc}

0801a39a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801a39a:	b580      	push	{r7, lr}
 801a39c:	b082      	sub	sp, #8
 801a39e:	af00      	add	r7, sp, #0
 801a3a0:	6078      	str	r0, [r7, #4]
 801a3a2:	460b      	mov	r3, r1
 801a3a4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801a3a6:	78fb      	ldrb	r3, [r7, #3]
 801a3a8:	4619      	mov	r1, r3
 801a3aa:	6878      	ldr	r0, [r7, #4]
 801a3ac:	f000 ff2a 	bl	801b204 <USBH_LL_ClosePipe>

  return USBH_OK;
 801a3b0:	2300      	movs	r3, #0
}
 801a3b2:	4618      	mov	r0, r3
 801a3b4:	3708      	adds	r7, #8
 801a3b6:	46bd      	mov	sp, r7
 801a3b8:	bd80      	pop	{r7, pc}

0801a3ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801a3ba:	b580      	push	{r7, lr}
 801a3bc:	b084      	sub	sp, #16
 801a3be:	af00      	add	r7, sp, #0
 801a3c0:	6078      	str	r0, [r7, #4]
 801a3c2:	460b      	mov	r3, r1
 801a3c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801a3c6:	6878      	ldr	r0, [r7, #4]
 801a3c8:	f000 f83c 	bl	801a444 <USBH_GetFreePipe>
 801a3cc:	4603      	mov	r3, r0
 801a3ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801a3d0:	89fb      	ldrh	r3, [r7, #14]
 801a3d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a3d6:	4293      	cmp	r3, r2
 801a3d8:	d00c      	beq.n	801a3f4 <USBH_AllocPipe+0x3a>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801a3da:	78fb      	ldrb	r3, [r7, #3]
 801a3dc:	89fa      	ldrh	r2, [r7, #14]
 801a3de:	f002 000f 	and.w	r0, r2, #15
 801a3e2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 801a3e6:	6879      	ldr	r1, [r7, #4]
 801a3e8:	f242 03d4 	movw	r3, #8404	@ 0x20d4
 801a3ec:	4403      	add	r3, r0
 801a3ee:	009b      	lsls	r3, r3, #2
 801a3f0:	440b      	add	r3, r1
 801a3f2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801a3f4:	89fb      	ldrh	r3, [r7, #14]
 801a3f6:	b2db      	uxtb	r3, r3
}
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	3710      	adds	r7, #16
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	bd80      	pop	{r7, pc}

0801a400 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801a400:	b480      	push	{r7}
 801a402:	b083      	sub	sp, #12
 801a404:	af00      	add	r7, sp, #0
 801a406:	6078      	str	r0, [r7, #4]
 801a408:	460b      	mov	r3, r1
 801a40a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 801a40c:	78fb      	ldrb	r3, [r7, #3]
 801a40e:	2b0f      	cmp	r3, #15
 801a410:	d811      	bhi.n	801a436 <USBH_FreePipe+0x36>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801a412:	78f9      	ldrb	r1, [r7, #3]
 801a414:	687a      	ldr	r2, [r7, #4]
 801a416:	f242 03d4 	movw	r3, #8404	@ 0x20d4
 801a41a:	440b      	add	r3, r1
 801a41c:	009b      	lsls	r3, r3, #2
 801a41e:	4413      	add	r3, r2
 801a420:	685b      	ldr	r3, [r3, #4]
 801a422:	78f8      	ldrb	r0, [r7, #3]
 801a424:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801a428:	6879      	ldr	r1, [r7, #4]
 801a42a:	f242 03d4 	movw	r3, #8404	@ 0x20d4
 801a42e:	4403      	add	r3, r0
 801a430:	009b      	lsls	r3, r3, #2
 801a432:	440b      	add	r3, r1
 801a434:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801a436:	2300      	movs	r3, #0
}
 801a438:	4618      	mov	r0, r3
 801a43a:	370c      	adds	r7, #12
 801a43c:	46bd      	mov	sp, r7
 801a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a442:	4770      	bx	lr

0801a444 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801a444:	b480      	push	{r7}
 801a446:	b085      	sub	sp, #20
 801a448:	af00      	add	r7, sp, #0
 801a44a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801a44c:	2300      	movs	r3, #0
 801a44e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801a450:	2300      	movs	r3, #0
 801a452:	73fb      	strb	r3, [r7, #15]
 801a454:	e011      	b.n	801a47a <USBH_GetFreePipe+0x36>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801a456:	7bf9      	ldrb	r1, [r7, #15]
 801a458:	687a      	ldr	r2, [r7, #4]
 801a45a:	f242 03d4 	movw	r3, #8404	@ 0x20d4
 801a45e:	440b      	add	r3, r1
 801a460:	009b      	lsls	r3, r3, #2
 801a462:	4413      	add	r3, r2
 801a464:	685b      	ldr	r3, [r3, #4]
 801a466:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d102      	bne.n	801a474 <USBH_GetFreePipe+0x30>
    {
      return (uint16_t)idx;
 801a46e:	7bfb      	ldrb	r3, [r7, #15]
 801a470:	b29b      	uxth	r3, r3
 801a472:	e007      	b.n	801a484 <USBH_GetFreePipe+0x40>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801a474:	7bfb      	ldrb	r3, [r7, #15]
 801a476:	3301      	adds	r3, #1
 801a478:	73fb      	strb	r3, [r7, #15]
 801a47a:	7bfb      	ldrb	r3, [r7, #15]
 801a47c:	2b0f      	cmp	r3, #15
 801a47e:	d9ea      	bls.n	801a456 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801a480:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 801a484:	4618      	mov	r0, r3
 801a486:	3714      	adds	r7, #20
 801a488:	46bd      	mov	sp, r7
 801a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a48e:	4770      	bx	lr

0801a490 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a490:	b580      	push	{r7, lr}
 801a492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a494:	2200      	movs	r2, #0
 801a496:	4913      	ldr	r1, [pc, #76]	@ (801a4e4 <MX_USB_DEVICE_Init+0x54>)
 801a498:	4813      	ldr	r0, [pc, #76]	@ (801a4e8 <MX_USB_DEVICE_Init+0x58>)
 801a49a:	f7f5 fe13 	bl	80100c4 <USBD_Init>
 801a49e:	4603      	mov	r3, r0
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d001      	beq.n	801a4a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a4a4:	f7e7 f840 	bl	8001528 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 801a4a8:	4910      	ldr	r1, [pc, #64]	@ (801a4ec <MX_USB_DEVICE_Init+0x5c>)
 801a4aa:	480f      	ldr	r0, [pc, #60]	@ (801a4e8 <MX_USB_DEVICE_Init+0x58>)
 801a4ac:	f7f5 fe48 	bl	8010140 <USBD_RegisterClass>
 801a4b0:	4603      	mov	r3, r0
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d001      	beq.n	801a4ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a4b6:	f7e7 f837 	bl	8001528 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 801a4ba:	490d      	ldr	r1, [pc, #52]	@ (801a4f0 <MX_USB_DEVICE_Init+0x60>)
 801a4bc:	480a      	ldr	r0, [pc, #40]	@ (801a4e8 <MX_USB_DEVICE_Init+0x58>)
 801a4be:	f7f5 fd97 	bl	800fff0 <USBD_CUSTOM_HID_RegisterInterface>
 801a4c2:	4603      	mov	r3, r0
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d001      	beq.n	801a4cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a4c8:	f7e7 f82e 	bl	8001528 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a4cc:	4806      	ldr	r0, [pc, #24]	@ (801a4e8 <MX_USB_DEVICE_Init+0x58>)
 801a4ce:	f7f5 fe7b 	bl	80101c8 <USBD_Start>
 801a4d2:	4603      	mov	r3, r0
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d001      	beq.n	801a4dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a4d8:	f7e7 f826 	bl	8001528 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a4dc:	f7ee f836 	bl	800854c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a4e0:	bf00      	nop
 801a4e2:	bd80      	pop	{r7, pc}
 801a4e4:	24000204 	.word	0x24000204
 801a4e8:	24000a34 	.word	0x24000a34
 801a4ec:	24000084 	.word	0x24000084
 801a4f0:	240001f4 	.word	0x240001f4

0801a4f4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 801a4f4:	b480      	push	{r7}
 801a4f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a4f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	46bd      	mov	sp, r7
 801a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a502:	4770      	bx	lr

0801a504 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 801a504:	b480      	push	{r7}
 801a506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801a508:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a50a:	4618      	mov	r0, r3
 801a50c:	46bd      	mov	sp, r7
 801a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a512:	4770      	bx	lr

0801a514 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 801a514:	b580      	push	{r7, lr}
 801a516:	b082      	sub	sp, #8
 801a518:	af00      	add	r7, sp, #0
 801a51a:	4603      	mov	r3, r0
 801a51c:	460a      	mov	r2, r1
 801a51e:	71fb      	strb	r3, [r7, #7]
 801a520:	4613      	mov	r3, r2
 801a522:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 801a524:	4806      	ldr	r0, [pc, #24]	@ (801a540 <CUSTOM_HID_OutEvent_FS+0x2c>)
 801a526:	f7f5 fd01 	bl	800ff2c <USBD_CUSTOM_HID_ReceivePacket>
 801a52a:	4603      	mov	r3, r0
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d002      	beq.n	801a536 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 801a530:	f04f 33ff 	mov.w	r3, #4294967295
 801a534:	e000      	b.n	801a538 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 801a536:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801a538:	4618      	mov	r0, r3
 801a53a:	3708      	adds	r7, #8
 801a53c:	46bd      	mov	sp, r7
 801a53e:	bd80      	pop	{r7, pc}
 801a540:	24000a34 	.word	0x24000a34

0801a544 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a544:	b480      	push	{r7}
 801a546:	b083      	sub	sp, #12
 801a548:	af00      	add	r7, sp, #0
 801a54a:	4603      	mov	r3, r0
 801a54c:	6039      	str	r1, [r7, #0]
 801a54e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a550:	683b      	ldr	r3, [r7, #0]
 801a552:	2212      	movs	r2, #18
 801a554:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a556:	4b03      	ldr	r3, [pc, #12]	@ (801a564 <USBD_FS_DeviceDescriptor+0x20>)
}
 801a558:	4618      	mov	r0, r3
 801a55a:	370c      	adds	r7, #12
 801a55c:	46bd      	mov	sp, r7
 801a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a562:	4770      	bx	lr
 801a564:	24000224 	.word	0x24000224

0801a568 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a568:	b480      	push	{r7}
 801a56a:	b083      	sub	sp, #12
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	4603      	mov	r3, r0
 801a570:	6039      	str	r1, [r7, #0]
 801a572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a574:	683b      	ldr	r3, [r7, #0]
 801a576:	2204      	movs	r2, #4
 801a578:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a57a:	4b03      	ldr	r3, [pc, #12]	@ (801a588 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801a57c:	4618      	mov	r0, r3
 801a57e:	370c      	adds	r7, #12
 801a580:	46bd      	mov	sp, r7
 801a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a586:	4770      	bx	lr
 801a588:	24000238 	.word	0x24000238

0801a58c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a58c:	b580      	push	{r7, lr}
 801a58e:	b082      	sub	sp, #8
 801a590:	af00      	add	r7, sp, #0
 801a592:	4603      	mov	r3, r0
 801a594:	6039      	str	r1, [r7, #0]
 801a596:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a598:	79fb      	ldrb	r3, [r7, #7]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d105      	bne.n	801a5aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a59e:	683a      	ldr	r2, [r7, #0]
 801a5a0:	4907      	ldr	r1, [pc, #28]	@ (801a5c0 <USBD_FS_ProductStrDescriptor+0x34>)
 801a5a2:	4808      	ldr	r0, [pc, #32]	@ (801a5c4 <USBD_FS_ProductStrDescriptor+0x38>)
 801a5a4:	f7f6 ffea 	bl	801157c <USBD_GetString>
 801a5a8:	e004      	b.n	801a5b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a5aa:	683a      	ldr	r2, [r7, #0]
 801a5ac:	4904      	ldr	r1, [pc, #16]	@ (801a5c0 <USBD_FS_ProductStrDescriptor+0x34>)
 801a5ae:	4805      	ldr	r0, [pc, #20]	@ (801a5c4 <USBD_FS_ProductStrDescriptor+0x38>)
 801a5b0:	f7f6 ffe4 	bl	801157c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a5b4:	4b02      	ldr	r3, [pc, #8]	@ (801a5c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	3708      	adds	r7, #8
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	bd80      	pop	{r7, pc}
 801a5be:	bf00      	nop
 801a5c0:	24000d10 	.word	0x24000d10
 801a5c4:	0801d730 	.word	0x0801d730

0801a5c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b082      	sub	sp, #8
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	4603      	mov	r3, r0
 801a5d0:	6039      	str	r1, [r7, #0]
 801a5d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a5d4:	683a      	ldr	r2, [r7, #0]
 801a5d6:	4904      	ldr	r1, [pc, #16]	@ (801a5e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a5d8:	4804      	ldr	r0, [pc, #16]	@ (801a5ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a5da:	f7f6 ffcf 	bl	801157c <USBD_GetString>
  return USBD_StrDesc;
 801a5de:	4b02      	ldr	r3, [pc, #8]	@ (801a5e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	3708      	adds	r7, #8
 801a5e4:	46bd      	mov	sp, r7
 801a5e6:	bd80      	pop	{r7, pc}
 801a5e8:	24000d10 	.word	0x24000d10
 801a5ec:	0801d740 	.word	0x0801d740

0801a5f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5f0:	b580      	push	{r7, lr}
 801a5f2:	b082      	sub	sp, #8
 801a5f4:	af00      	add	r7, sp, #0
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	6039      	str	r1, [r7, #0]
 801a5fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a5fc:	683b      	ldr	r3, [r7, #0]
 801a5fe:	221a      	movs	r2, #26
 801a600:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a602:	f000 f843 	bl	801a68c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a606:	4b02      	ldr	r3, [pc, #8]	@ (801a610 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a608:	4618      	mov	r0, r3
 801a60a:	3708      	adds	r7, #8
 801a60c:	46bd      	mov	sp, r7
 801a60e:	bd80      	pop	{r7, pc}
 801a610:	2400023c 	.word	0x2400023c

0801a614 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a614:	b580      	push	{r7, lr}
 801a616:	b082      	sub	sp, #8
 801a618:	af00      	add	r7, sp, #0
 801a61a:	4603      	mov	r3, r0
 801a61c:	6039      	str	r1, [r7, #0]
 801a61e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a620:	79fb      	ldrb	r3, [r7, #7]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d105      	bne.n	801a632 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a626:	683a      	ldr	r2, [r7, #0]
 801a628:	4907      	ldr	r1, [pc, #28]	@ (801a648 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a62a:	4808      	ldr	r0, [pc, #32]	@ (801a64c <USBD_FS_ConfigStrDescriptor+0x38>)
 801a62c:	f7f6 ffa6 	bl	801157c <USBD_GetString>
 801a630:	e004      	b.n	801a63c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a632:	683a      	ldr	r2, [r7, #0]
 801a634:	4904      	ldr	r1, [pc, #16]	@ (801a648 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a636:	4805      	ldr	r0, [pc, #20]	@ (801a64c <USBD_FS_ConfigStrDescriptor+0x38>)
 801a638:	f7f6 ffa0 	bl	801157c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a63c:	4b02      	ldr	r3, [pc, #8]	@ (801a648 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a63e:	4618      	mov	r0, r3
 801a640:	3708      	adds	r7, #8
 801a642:	46bd      	mov	sp, r7
 801a644:	bd80      	pop	{r7, pc}
 801a646:	bf00      	nop
 801a648:	24000d10 	.word	0x24000d10
 801a64c:	0801d748 	.word	0x0801d748

0801a650 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a650:	b580      	push	{r7, lr}
 801a652:	b082      	sub	sp, #8
 801a654:	af00      	add	r7, sp, #0
 801a656:	4603      	mov	r3, r0
 801a658:	6039      	str	r1, [r7, #0]
 801a65a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a65c:	79fb      	ldrb	r3, [r7, #7]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d105      	bne.n	801a66e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a662:	683a      	ldr	r2, [r7, #0]
 801a664:	4907      	ldr	r1, [pc, #28]	@ (801a684 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a666:	4808      	ldr	r0, [pc, #32]	@ (801a688 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a668:	f7f6 ff88 	bl	801157c <USBD_GetString>
 801a66c:	e004      	b.n	801a678 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a66e:	683a      	ldr	r2, [r7, #0]
 801a670:	4904      	ldr	r1, [pc, #16]	@ (801a684 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a672:	4805      	ldr	r0, [pc, #20]	@ (801a688 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a674:	f7f6 ff82 	bl	801157c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a678:	4b02      	ldr	r3, [pc, #8]	@ (801a684 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a67a:	4618      	mov	r0, r3
 801a67c:	3708      	adds	r7, #8
 801a67e:	46bd      	mov	sp, r7
 801a680:	bd80      	pop	{r7, pc}
 801a682:	bf00      	nop
 801a684:	24000d10 	.word	0x24000d10
 801a688:	0801d75c 	.word	0x0801d75c

0801a68c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b084      	sub	sp, #16
 801a690:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a692:	4b0f      	ldr	r3, [pc, #60]	@ (801a6d0 <Get_SerialNum+0x44>)
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a698:	4b0e      	ldr	r3, [pc, #56]	@ (801a6d4 <Get_SerialNum+0x48>)
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a69e:	4b0e      	ldr	r3, [pc, #56]	@ (801a6d8 <Get_SerialNum+0x4c>)
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a6a4:	68fa      	ldr	r2, [r7, #12]
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	4413      	add	r3, r2
 801a6aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d009      	beq.n	801a6c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a6b2:	2208      	movs	r2, #8
 801a6b4:	4909      	ldr	r1, [pc, #36]	@ (801a6dc <Get_SerialNum+0x50>)
 801a6b6:	68f8      	ldr	r0, [r7, #12]
 801a6b8:	f000 f814 	bl	801a6e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a6bc:	2204      	movs	r2, #4
 801a6be:	4908      	ldr	r1, [pc, #32]	@ (801a6e0 <Get_SerialNum+0x54>)
 801a6c0:	68b8      	ldr	r0, [r7, #8]
 801a6c2:	f000 f80f 	bl	801a6e4 <IntToUnicode>
  }
}
 801a6c6:	bf00      	nop
 801a6c8:	3710      	adds	r7, #16
 801a6ca:	46bd      	mov	sp, r7
 801a6cc:	bd80      	pop	{r7, pc}
 801a6ce:	bf00      	nop
 801a6d0:	1ff1e800 	.word	0x1ff1e800
 801a6d4:	1ff1e804 	.word	0x1ff1e804
 801a6d8:	1ff1e808 	.word	0x1ff1e808
 801a6dc:	2400023e 	.word	0x2400023e
 801a6e0:	2400024e 	.word	0x2400024e

0801a6e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a6e4:	b480      	push	{r7}
 801a6e6:	b087      	sub	sp, #28
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	60f8      	str	r0, [r7, #12]
 801a6ec:	60b9      	str	r1, [r7, #8]
 801a6ee:	4613      	mov	r3, r2
 801a6f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a6f6:	2300      	movs	r3, #0
 801a6f8:	75fb      	strb	r3, [r7, #23]
 801a6fa:	e027      	b.n	801a74c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	0f1b      	lsrs	r3, r3, #28
 801a700:	2b09      	cmp	r3, #9
 801a702:	d80b      	bhi.n	801a71c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	0f1b      	lsrs	r3, r3, #28
 801a708:	b2da      	uxtb	r2, r3
 801a70a:	7dfb      	ldrb	r3, [r7, #23]
 801a70c:	005b      	lsls	r3, r3, #1
 801a70e:	4619      	mov	r1, r3
 801a710:	68bb      	ldr	r3, [r7, #8]
 801a712:	440b      	add	r3, r1
 801a714:	3230      	adds	r2, #48	@ 0x30
 801a716:	b2d2      	uxtb	r2, r2
 801a718:	701a      	strb	r2, [r3, #0]
 801a71a:	e00a      	b.n	801a732 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	0f1b      	lsrs	r3, r3, #28
 801a720:	b2da      	uxtb	r2, r3
 801a722:	7dfb      	ldrb	r3, [r7, #23]
 801a724:	005b      	lsls	r3, r3, #1
 801a726:	4619      	mov	r1, r3
 801a728:	68bb      	ldr	r3, [r7, #8]
 801a72a:	440b      	add	r3, r1
 801a72c:	3237      	adds	r2, #55	@ 0x37
 801a72e:	b2d2      	uxtb	r2, r2
 801a730:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	011b      	lsls	r3, r3, #4
 801a736:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a738:	7dfb      	ldrb	r3, [r7, #23]
 801a73a:	005b      	lsls	r3, r3, #1
 801a73c:	3301      	adds	r3, #1
 801a73e:	68ba      	ldr	r2, [r7, #8]
 801a740:	4413      	add	r3, r2
 801a742:	2200      	movs	r2, #0
 801a744:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a746:	7dfb      	ldrb	r3, [r7, #23]
 801a748:	3301      	adds	r3, #1
 801a74a:	75fb      	strb	r3, [r7, #23]
 801a74c:	7dfa      	ldrb	r2, [r7, #23]
 801a74e:	79fb      	ldrb	r3, [r7, #7]
 801a750:	429a      	cmp	r2, r3
 801a752:	d3d3      	bcc.n	801a6fc <IntToUnicode+0x18>
  }
}
 801a754:	bf00      	nop
 801a756:	bf00      	nop
 801a758:	371c      	adds	r7, #28
 801a75a:	46bd      	mov	sp, r7
 801a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a760:	4770      	bx	lr
	...

0801a764 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b08a      	sub	sp, #40	@ 0x28
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a76c:	f107 0314 	add.w	r3, r7, #20
 801a770:	2200      	movs	r2, #0
 801a772:	601a      	str	r2, [r3, #0]
 801a774:	605a      	str	r2, [r3, #4]
 801a776:	609a      	str	r2, [r3, #8]
 801a778:	60da      	str	r2, [r3, #12]
 801a77a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	4a1f      	ldr	r2, [pc, #124]	@ (801a800 <HAL_PCD_MspInit+0x9c>)
 801a782:	4293      	cmp	r3, r2
 801a784:	d138      	bne.n	801a7f8 <HAL_PCD_MspInit+0x94>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a786:	f7ed fee1 	bl	800854c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a78a:	4b1e      	ldr	r3, [pc, #120]	@ (801a804 <HAL_PCD_MspInit+0xa0>)
 801a78c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a790:	4a1c      	ldr	r2, [pc, #112]	@ (801a804 <HAL_PCD_MspInit+0xa0>)
 801a792:	f043 0301 	orr.w	r3, r3, #1
 801a796:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801a79a:	4b1a      	ldr	r3, [pc, #104]	@ (801a804 <HAL_PCD_MspInit+0xa0>)
 801a79c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a7a0:	f003 0301 	and.w	r3, r3, #1
 801a7a4:	613b      	str	r3, [r7, #16]
 801a7a6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a7a8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801a7ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a7ae:	2302      	movs	r3, #2
 801a7b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a7b2:	2300      	movs	r3, #0
 801a7b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801a7ba:	230a      	movs	r3, #10
 801a7bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a7be:	f107 0314 	add.w	r3, r7, #20
 801a7c2:	4619      	mov	r1, r3
 801a7c4:	4810      	ldr	r0, [pc, #64]	@ (801a808 <HAL_PCD_MspInit+0xa4>)
 801a7c6:	f7ea f8f1 	bl	80049ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a7ca:	4b0e      	ldr	r3, [pc, #56]	@ (801a804 <HAL_PCD_MspInit+0xa0>)
 801a7cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a7d0:	4a0c      	ldr	r2, [pc, #48]	@ (801a804 <HAL_PCD_MspInit+0xa0>)
 801a7d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801a7d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801a7da:	4b0a      	ldr	r3, [pc, #40]	@ (801a804 <HAL_PCD_MspInit+0xa0>)
 801a7dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a7e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801a7e4:	60fb      	str	r3, [r7, #12]
 801a7e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801a7e8:	2200      	movs	r2, #0
 801a7ea:	2100      	movs	r1, #0
 801a7ec:	2065      	movs	r0, #101	@ 0x65
 801a7ee:	f7e7 fd66 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a7f2:	2065      	movs	r0, #101	@ 0x65
 801a7f4:	f7e7 fd7d 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a7f8:	bf00      	nop
 801a7fa:	3728      	adds	r7, #40	@ 0x28
 801a7fc:	46bd      	mov	sp, r7
 801a7fe:	bd80      	pop	{r7, pc}
 801a800:	40080000 	.word	0x40080000
 801a804:	58024400 	.word	0x58024400
 801a808:	58020000 	.word	0x58020000

0801a80c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a80c:	b580      	push	{r7, lr}
 801a80e:	b082      	sub	sp, #8
 801a810:	af00      	add	r7, sp, #0
 801a812:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801a820:	4619      	mov	r1, r3
 801a822:	4610      	mov	r0, r2
 801a824:	f7f5 fd1d 	bl	8010262 <USBD_LL_SetupStage>
}
 801a828:	bf00      	nop
 801a82a:	3708      	adds	r7, #8
 801a82c:	46bd      	mov	sp, r7
 801a82e:	bd80      	pop	{r7, pc}

0801a830 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a830:	b580      	push	{r7, lr}
 801a832:	b082      	sub	sp, #8
 801a834:	af00      	add	r7, sp, #0
 801a836:	6078      	str	r0, [r7, #4]
 801a838:	460b      	mov	r3, r1
 801a83a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a842:	78fa      	ldrb	r2, [r7, #3]
 801a844:	6879      	ldr	r1, [r7, #4]
 801a846:	4613      	mov	r3, r2
 801a848:	00db      	lsls	r3, r3, #3
 801a84a:	4413      	add	r3, r2
 801a84c:	009b      	lsls	r3, r3, #2
 801a84e:	440b      	add	r3, r1
 801a850:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801a854:	681a      	ldr	r2, [r3, #0]
 801a856:	78fb      	ldrb	r3, [r7, #3]
 801a858:	4619      	mov	r1, r3
 801a85a:	f7f5 fd57 	bl	801030c <USBD_LL_DataOutStage>
}
 801a85e:	bf00      	nop
 801a860:	3708      	adds	r7, #8
 801a862:	46bd      	mov	sp, r7
 801a864:	bd80      	pop	{r7, pc}

0801a866 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a866:	b580      	push	{r7, lr}
 801a868:	b082      	sub	sp, #8
 801a86a:	af00      	add	r7, sp, #0
 801a86c:	6078      	str	r0, [r7, #4]
 801a86e:	460b      	mov	r3, r1
 801a870:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a878:	78fa      	ldrb	r2, [r7, #3]
 801a87a:	6879      	ldr	r1, [r7, #4]
 801a87c:	4613      	mov	r3, r2
 801a87e:	00db      	lsls	r3, r3, #3
 801a880:	4413      	add	r3, r2
 801a882:	009b      	lsls	r3, r3, #2
 801a884:	440b      	add	r3, r1
 801a886:	3320      	adds	r3, #32
 801a888:	681a      	ldr	r2, [r3, #0]
 801a88a:	78fb      	ldrb	r3, [r7, #3]
 801a88c:	4619      	mov	r1, r3
 801a88e:	f7f5 fdf0 	bl	8010472 <USBD_LL_DataInStage>
}
 801a892:	bf00      	nop
 801a894:	3708      	adds	r7, #8
 801a896:	46bd      	mov	sp, r7
 801a898:	bd80      	pop	{r7, pc}

0801a89a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a89a:	b580      	push	{r7, lr}
 801a89c:	b082      	sub	sp, #8
 801a89e:	af00      	add	r7, sp, #0
 801a8a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	f7f5 ff2a 	bl	8010702 <USBD_LL_SOF>
}
 801a8ae:	bf00      	nop
 801a8b0:	3708      	adds	r7, #8
 801a8b2:	46bd      	mov	sp, r7
 801a8b4:	bd80      	pop	{r7, pc}

0801a8b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8b6:	b580      	push	{r7, lr}
 801a8b8:	b084      	sub	sp, #16
 801a8ba:	af00      	add	r7, sp, #0
 801a8bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a8be:	2301      	movs	r3, #1
 801a8c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	79db      	ldrb	r3, [r3, #7]
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d102      	bne.n	801a8d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	73fb      	strb	r3, [r7, #15]
 801a8ce:	e008      	b.n	801a8e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	79db      	ldrb	r3, [r3, #7]
 801a8d4:	2b02      	cmp	r3, #2
 801a8d6:	d102      	bne.n	801a8de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a8d8:	2301      	movs	r3, #1
 801a8da:	73fb      	strb	r3, [r7, #15]
 801a8dc:	e001      	b.n	801a8e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a8de:	f7e6 fe23 	bl	8001528 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a8e8:	7bfa      	ldrb	r2, [r7, #15]
 801a8ea:	4611      	mov	r1, r2
 801a8ec:	4618      	mov	r0, r3
 801a8ee:	f7f5 fec4 	bl	801067a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	f7f5 fe6c 	bl	80105d6 <USBD_LL_Reset>
}
 801a8fe:	bf00      	nop
 801a900:	3710      	adds	r7, #16
 801a902:	46bd      	mov	sp, r7
 801a904:	bd80      	pop	{r7, pc}
	...

0801a908 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a908:	b580      	push	{r7, lr}
 801a90a:	b082      	sub	sp, #8
 801a90c:	af00      	add	r7, sp, #0
 801a90e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a916:	4618      	mov	r0, r3
 801a918:	f7f5 febf 	bl	801069a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	687a      	ldr	r2, [r7, #4]
 801a928:	6812      	ldr	r2, [r2, #0]
 801a92a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801a92e:	f043 0301 	orr.w	r3, r3, #1
 801a932:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	7adb      	ldrb	r3, [r3, #11]
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d005      	beq.n	801a948 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a93c:	4b04      	ldr	r3, [pc, #16]	@ (801a950 <HAL_PCD_SuspendCallback+0x48>)
 801a93e:	691b      	ldr	r3, [r3, #16]
 801a940:	4a03      	ldr	r2, [pc, #12]	@ (801a950 <HAL_PCD_SuspendCallback+0x48>)
 801a942:	f043 0306 	orr.w	r3, r3, #6
 801a946:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a948:	bf00      	nop
 801a94a:	3708      	adds	r7, #8
 801a94c:	46bd      	mov	sp, r7
 801a94e:	bd80      	pop	{r7, pc}
 801a950:	e000ed00 	.word	0xe000ed00

0801a954 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a954:	b580      	push	{r7, lr}
 801a956:	b082      	sub	sp, #8
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a962:	4618      	mov	r0, r3
 801a964:	f7f5 feb5 	bl	80106d2 <USBD_LL_Resume>
}
 801a968:	bf00      	nop
 801a96a:	3708      	adds	r7, #8
 801a96c:	46bd      	mov	sp, r7
 801a96e:	bd80      	pop	{r7, pc}

0801a970 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a970:	b580      	push	{r7, lr}
 801a972:	b082      	sub	sp, #8
 801a974:	af00      	add	r7, sp, #0
 801a976:	6078      	str	r0, [r7, #4]
 801a978:	460b      	mov	r3, r1
 801a97a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a982:	78fa      	ldrb	r2, [r7, #3]
 801a984:	4611      	mov	r1, r2
 801a986:	4618      	mov	r0, r3
 801a988:	f7f5 ff0d 	bl	80107a6 <USBD_LL_IsoOUTIncomplete>
}
 801a98c:	bf00      	nop
 801a98e:	3708      	adds	r7, #8
 801a990:	46bd      	mov	sp, r7
 801a992:	bd80      	pop	{r7, pc}

0801a994 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a994:	b580      	push	{r7, lr}
 801a996:	b082      	sub	sp, #8
 801a998:	af00      	add	r7, sp, #0
 801a99a:	6078      	str	r0, [r7, #4]
 801a99c:	460b      	mov	r3, r1
 801a99e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a9a6:	78fa      	ldrb	r2, [r7, #3]
 801a9a8:	4611      	mov	r1, r2
 801a9aa:	4618      	mov	r0, r3
 801a9ac:	f7f5 fec9 	bl	8010742 <USBD_LL_IsoINIncomplete>
}
 801a9b0:	bf00      	nop
 801a9b2:	3708      	adds	r7, #8
 801a9b4:	46bd      	mov	sp, r7
 801a9b6:	bd80      	pop	{r7, pc}

0801a9b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9b8:	b580      	push	{r7, lr}
 801a9ba:	b082      	sub	sp, #8
 801a9bc:	af00      	add	r7, sp, #0
 801a9be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	f7f5 ff1f 	bl	801080a <USBD_LL_DevConnected>
}
 801a9cc:	bf00      	nop
 801a9ce:	3708      	adds	r7, #8
 801a9d0:	46bd      	mov	sp, r7
 801a9d2:	bd80      	pop	{r7, pc}

0801a9d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9d4:	b580      	push	{r7, lr}
 801a9d6:	b082      	sub	sp, #8
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a9e2:	4618      	mov	r0, r3
 801a9e4:	f7f5 ff1c 	bl	8010820 <USBD_LL_DevDisconnected>
}
 801a9e8:	bf00      	nop
 801a9ea:	3708      	adds	r7, #8
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}

0801a9f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b082      	sub	sp, #8
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	781b      	ldrb	r3, [r3, #0]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d148      	bne.n	801aa92 <USBD_LL_Init+0xa2>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801aa00:	4a26      	ldr	r2, [pc, #152]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	4a24      	ldr	r2, [pc, #144]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa0c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801aa10:	4b22      	ldr	r3, [pc, #136]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa12:	4a23      	ldr	r2, [pc, #140]	@ (801aaa0 <USBD_LL_Init+0xb0>)
 801aa14:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801aa16:	4b21      	ldr	r3, [pc, #132]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa18:	2209      	movs	r2, #9
 801aa1a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801aa1c:	4b1f      	ldr	r3, [pc, #124]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa1e:	2202      	movs	r2, #2
 801aa20:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801aa22:	4b1e      	ldr	r3, [pc, #120]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa24:	2200      	movs	r2, #0
 801aa26:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801aa28:	4b1c      	ldr	r3, [pc, #112]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa2a:	2202      	movs	r2, #2
 801aa2c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801aa2e:	4b1b      	ldr	r3, [pc, #108]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa30:	2200      	movs	r2, #0
 801aa32:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801aa34:	4b19      	ldr	r3, [pc, #100]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa36:	2200      	movs	r2, #0
 801aa38:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801aa3a:	4b18      	ldr	r3, [pc, #96]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801aa40:	4b16      	ldr	r3, [pc, #88]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa42:	2200      	movs	r2, #0
 801aa44:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801aa46:	4b15      	ldr	r3, [pc, #84]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa48:	2200      	movs	r2, #0
 801aa4a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801aa4c:	4b13      	ldr	r3, [pc, #76]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa4e:	2200      	movs	r2, #0
 801aa50:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801aa52:	4812      	ldr	r0, [pc, #72]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa54:	f7ec fab7 	bl	8006fc6 <HAL_PCD_Init>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d001      	beq.n	801aa62 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801aa5e:	f7e6 fd63 	bl	8001528 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801aa62:	2180      	movs	r1, #128	@ 0x80
 801aa64:	480d      	ldr	r0, [pc, #52]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa66:	f7ed fcf6 	bl	8008456 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801aa6a:	2240      	movs	r2, #64	@ 0x40
 801aa6c:	2100      	movs	r1, #0
 801aa6e:	480b      	ldr	r0, [pc, #44]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa70:	f7ed fcaa 	bl	80083c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801aa74:	2280      	movs	r2, #128	@ 0x80
 801aa76:	2101      	movs	r1, #1
 801aa78:	4808      	ldr	r0, [pc, #32]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa7a:	f7ed fca5 	bl	80083c8 <HAL_PCDEx_SetTxFiFo>

	// 以下为端点2、3设置TxFIFO。由于H7有足够大的内存，地址直接加0x100
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0xB0);
 801aa7e:	22b0      	movs	r2, #176	@ 0xb0
 801aa80:	2102      	movs	r1, #2
 801aa82:	4806      	ldr	r0, [pc, #24]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa84:	f7ed fca0 	bl	80083c8 <HAL_PCDEx_SetTxFiFo>
	HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 3, 0xB0);
 801aa88:	22b0      	movs	r2, #176	@ 0xb0
 801aa8a:	2103      	movs	r1, #3
 801aa8c:	4803      	ldr	r0, [pc, #12]	@ (801aa9c <USBD_LL_Init+0xac>)
 801aa8e:	f7ed fc9b 	bl	80083c8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801aa92:	2300      	movs	r3, #0
}
 801aa94:	4618      	mov	r0, r3
 801aa96:	3708      	adds	r7, #8
 801aa98:	46bd      	mov	sp, r7
 801aa9a:	bd80      	pop	{r7, pc}
 801aa9c:	24000f10 	.word	0x24000f10
 801aaa0:	40080000 	.word	0x40080000

0801aaa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	b084      	sub	sp, #16
 801aaa8:	af00      	add	r7, sp, #0
 801aaaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aaac:	2300      	movs	r3, #0
 801aaae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aab0:	2300      	movs	r3, #0
 801aab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801aaba:	4618      	mov	r0, r3
 801aabc:	f7ec fb8f 	bl	80071de <HAL_PCD_Start>
 801aac0:	4603      	mov	r3, r0
 801aac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aac4:	7bfb      	ldrb	r3, [r7, #15]
 801aac6:	4618      	mov	r0, r3
 801aac8:	f000 f930 	bl	801ad2c <USBD_Get_USB_Status>
 801aacc:	4603      	mov	r3, r0
 801aace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aad0:	7bbb      	ldrb	r3, [r7, #14]
}
 801aad2:	4618      	mov	r0, r3
 801aad4:	3710      	adds	r7, #16
 801aad6:	46bd      	mov	sp, r7
 801aad8:	bd80      	pop	{r7, pc}

0801aada <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801aada:	b580      	push	{r7, lr}
 801aadc:	b084      	sub	sp, #16
 801aade:	af00      	add	r7, sp, #0
 801aae0:	6078      	str	r0, [r7, #4]
 801aae2:	4608      	mov	r0, r1
 801aae4:	4611      	mov	r1, r2
 801aae6:	461a      	mov	r2, r3
 801aae8:	4603      	mov	r3, r0
 801aaea:	70fb      	strb	r3, [r7, #3]
 801aaec:	460b      	mov	r3, r1
 801aaee:	70bb      	strb	r3, [r7, #2]
 801aaf0:	4613      	mov	r3, r2
 801aaf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aaf8:	2300      	movs	r3, #0
 801aafa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801ab02:	78bb      	ldrb	r3, [r7, #2]
 801ab04:	883a      	ldrh	r2, [r7, #0]
 801ab06:	78f9      	ldrb	r1, [r7, #3]
 801ab08:	f7ed f890 	bl	8007c2c <HAL_PCD_EP_Open>
 801ab0c:	4603      	mov	r3, r0
 801ab0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab10:	7bfb      	ldrb	r3, [r7, #15]
 801ab12:	4618      	mov	r0, r3
 801ab14:	f000 f90a 	bl	801ad2c <USBD_Get_USB_Status>
 801ab18:	4603      	mov	r3, r0
 801ab1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab1c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab1e:	4618      	mov	r0, r3
 801ab20:	3710      	adds	r7, #16
 801ab22:	46bd      	mov	sp, r7
 801ab24:	bd80      	pop	{r7, pc}

0801ab26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab26:	b580      	push	{r7, lr}
 801ab28:	b084      	sub	sp, #16
 801ab2a:	af00      	add	r7, sp, #0
 801ab2c:	6078      	str	r0, [r7, #4]
 801ab2e:	460b      	mov	r3, r1
 801ab30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab32:	2300      	movs	r3, #0
 801ab34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab36:	2300      	movs	r3, #0
 801ab38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ab40:	78fa      	ldrb	r2, [r7, #3]
 801ab42:	4611      	mov	r1, r2
 801ab44:	4618      	mov	r0, r3
 801ab46:	f7ed f8db 	bl	8007d00 <HAL_PCD_EP_Close>
 801ab4a:	4603      	mov	r3, r0
 801ab4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab4e:	7bfb      	ldrb	r3, [r7, #15]
 801ab50:	4618      	mov	r0, r3
 801ab52:	f000 f8eb 	bl	801ad2c <USBD_Get_USB_Status>
 801ab56:	4603      	mov	r3, r0
 801ab58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab5a:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	3710      	adds	r7, #16
 801ab60:	46bd      	mov	sp, r7
 801ab62:	bd80      	pop	{r7, pc}

0801ab64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab64:	b580      	push	{r7, lr}
 801ab66:	b084      	sub	sp, #16
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
 801ab6c:	460b      	mov	r3, r1
 801ab6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab70:	2300      	movs	r3, #0
 801ab72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab74:	2300      	movs	r3, #0
 801ab76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ab7e:	78fa      	ldrb	r2, [r7, #3]
 801ab80:	4611      	mov	r1, r2
 801ab82:	4618      	mov	r0, r3
 801ab84:	f7ed f97b 	bl	8007e7e <HAL_PCD_EP_SetStall>
 801ab88:	4603      	mov	r3, r0
 801ab8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab8c:	7bfb      	ldrb	r3, [r7, #15]
 801ab8e:	4618      	mov	r0, r3
 801ab90:	f000 f8cc 	bl	801ad2c <USBD_Get_USB_Status>
 801ab94:	4603      	mov	r3, r0
 801ab96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab98:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	3710      	adds	r7, #16
 801ab9e:	46bd      	mov	sp, r7
 801aba0:	bd80      	pop	{r7, pc}

0801aba2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aba2:	b580      	push	{r7, lr}
 801aba4:	b084      	sub	sp, #16
 801aba6:	af00      	add	r7, sp, #0
 801aba8:	6078      	str	r0, [r7, #4]
 801abaa:	460b      	mov	r3, r1
 801abac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abae:	2300      	movs	r3, #0
 801abb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abb2:	2300      	movs	r3, #0
 801abb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801abbc:	78fa      	ldrb	r2, [r7, #3]
 801abbe:	4611      	mov	r1, r2
 801abc0:	4618      	mov	r0, r3
 801abc2:	f7ed f9bf 	bl	8007f44 <HAL_PCD_EP_ClrStall>
 801abc6:	4603      	mov	r3, r0
 801abc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abca:	7bfb      	ldrb	r3, [r7, #15]
 801abcc:	4618      	mov	r0, r3
 801abce:	f000 f8ad 	bl	801ad2c <USBD_Get_USB_Status>
 801abd2:	4603      	mov	r3, r0
 801abd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801abd6:	7bbb      	ldrb	r3, [r7, #14]
}
 801abd8:	4618      	mov	r0, r3
 801abda:	3710      	adds	r7, #16
 801abdc:	46bd      	mov	sp, r7
 801abde:	bd80      	pop	{r7, pc}

0801abe0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801abe0:	b480      	push	{r7}
 801abe2:	b085      	sub	sp, #20
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	6078      	str	r0, [r7, #4]
 801abe8:	460b      	mov	r3, r1
 801abea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801abf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801abf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	da0b      	bge.n	801ac14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801abfc:	78fb      	ldrb	r3, [r7, #3]
 801abfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801ac02:	68f9      	ldr	r1, [r7, #12]
 801ac04:	4613      	mov	r3, r2
 801ac06:	00db      	lsls	r3, r3, #3
 801ac08:	4413      	add	r3, r2
 801ac0a:	009b      	lsls	r3, r3, #2
 801ac0c:	440b      	add	r3, r1
 801ac0e:	3316      	adds	r3, #22
 801ac10:	781b      	ldrb	r3, [r3, #0]
 801ac12:	e00b      	b.n	801ac2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ac14:	78fb      	ldrb	r3, [r7, #3]
 801ac16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801ac1a:	68f9      	ldr	r1, [r7, #12]
 801ac1c:	4613      	mov	r3, r2
 801ac1e:	00db      	lsls	r3, r3, #3
 801ac20:	4413      	add	r3, r2
 801ac22:	009b      	lsls	r3, r3, #2
 801ac24:	440b      	add	r3, r1
 801ac26:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801ac2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	3714      	adds	r7, #20
 801ac30:	46bd      	mov	sp, r7
 801ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac36:	4770      	bx	lr

0801ac38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	b084      	sub	sp, #16
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	6078      	str	r0, [r7, #4]
 801ac40:	460b      	mov	r3, r1
 801ac42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac44:	2300      	movs	r3, #0
 801ac46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac48:	2300      	movs	r3, #0
 801ac4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801ac52:	78fa      	ldrb	r2, [r7, #3]
 801ac54:	4611      	mov	r1, r2
 801ac56:	4618      	mov	r0, r3
 801ac58:	f7ec ffc4 	bl	8007be4 <HAL_PCD_SetAddress>
 801ac5c:	4603      	mov	r3, r0
 801ac5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac60:	7bfb      	ldrb	r3, [r7, #15]
 801ac62:	4618      	mov	r0, r3
 801ac64:	f000 f862 	bl	801ad2c <USBD_Get_USB_Status>
 801ac68:	4603      	mov	r3, r0
 801ac6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac6c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac6e:	4618      	mov	r0, r3
 801ac70:	3710      	adds	r7, #16
 801ac72:	46bd      	mov	sp, r7
 801ac74:	bd80      	pop	{r7, pc}

0801ac76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ac76:	b580      	push	{r7, lr}
 801ac78:	b086      	sub	sp, #24
 801ac7a:	af00      	add	r7, sp, #0
 801ac7c:	60f8      	str	r0, [r7, #12]
 801ac7e:	607a      	str	r2, [r7, #4]
 801ac80:	603b      	str	r3, [r7, #0]
 801ac82:	460b      	mov	r3, r1
 801ac84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac86:	2300      	movs	r3, #0
 801ac88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801ac94:	7af9      	ldrb	r1, [r7, #11]
 801ac96:	683b      	ldr	r3, [r7, #0]
 801ac98:	687a      	ldr	r2, [r7, #4]
 801ac9a:	f7ed f8b6 	bl	8007e0a <HAL_PCD_EP_Transmit>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aca2:	7dfb      	ldrb	r3, [r7, #23]
 801aca4:	4618      	mov	r0, r3
 801aca6:	f000 f841 	bl	801ad2c <USBD_Get_USB_Status>
 801acaa:	4603      	mov	r3, r0
 801acac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801acae:	7dbb      	ldrb	r3, [r7, #22]
}
 801acb0:	4618      	mov	r0, r3
 801acb2:	3718      	adds	r7, #24
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bd80      	pop	{r7, pc}

0801acb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801acb8:	b580      	push	{r7, lr}
 801acba:	b086      	sub	sp, #24
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	60f8      	str	r0, [r7, #12]
 801acc0:	607a      	str	r2, [r7, #4]
 801acc2:	603b      	str	r3, [r7, #0]
 801acc4:	460b      	mov	r3, r1
 801acc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801acc8:	2300      	movs	r3, #0
 801acca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801accc:	2300      	movs	r3, #0
 801acce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801acd6:	7af9      	ldrb	r1, [r7, #11]
 801acd8:	683b      	ldr	r3, [r7, #0]
 801acda:	687a      	ldr	r2, [r7, #4]
 801acdc:	f7ed f85a 	bl	8007d94 <HAL_PCD_EP_Receive>
 801ace0:	4603      	mov	r3, r0
 801ace2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ace4:	7dfb      	ldrb	r3, [r7, #23]
 801ace6:	4618      	mov	r0, r3
 801ace8:	f000 f820 	bl	801ad2c <USBD_Get_USB_Status>
 801acec:	4603      	mov	r3, r0
 801acee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801acf0:	7dbb      	ldrb	r3, [r7, #22]
}
 801acf2:	4618      	mov	r0, r3
 801acf4:	3718      	adds	r7, #24
 801acf6:	46bd      	mov	sp, r7
 801acf8:	bd80      	pop	{r7, pc}
	...

0801acfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801acfc:	b480      	push	{r7}
 801acfe:	b083      	sub	sp, #12
 801ad00:	af00      	add	r7, sp, #0
 801ad02:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 801ad04:	4b03      	ldr	r3, [pc, #12]	@ (801ad14 <USBD_static_malloc+0x18>)
}
 801ad06:	4618      	mov	r0, r3
 801ad08:	370c      	adds	r7, #12
 801ad0a:	46bd      	mov	sp, r7
 801ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad10:	4770      	bx	lr
 801ad12:	bf00      	nop
 801ad14:	240013f4 	.word	0x240013f4

0801ad18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ad18:	b480      	push	{r7}
 801ad1a:	b083      	sub	sp, #12
 801ad1c:	af00      	add	r7, sp, #0
 801ad1e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801ad20:	bf00      	nop
 801ad22:	370c      	adds	r7, #12
 801ad24:	46bd      	mov	sp, r7
 801ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad2a:	4770      	bx	lr

0801ad2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ad2c:	b480      	push	{r7}
 801ad2e:	b085      	sub	sp, #20
 801ad30:	af00      	add	r7, sp, #0
 801ad32:	4603      	mov	r3, r0
 801ad34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad36:	2300      	movs	r3, #0
 801ad38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ad3a:	79fb      	ldrb	r3, [r7, #7]
 801ad3c:	2b03      	cmp	r3, #3
 801ad3e:	d817      	bhi.n	801ad70 <USBD_Get_USB_Status+0x44>
 801ad40:	a201      	add	r2, pc, #4	@ (adr r2, 801ad48 <USBD_Get_USB_Status+0x1c>)
 801ad42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad46:	bf00      	nop
 801ad48:	0801ad59 	.word	0x0801ad59
 801ad4c:	0801ad5f 	.word	0x0801ad5f
 801ad50:	0801ad65 	.word	0x0801ad65
 801ad54:	0801ad6b 	.word	0x0801ad6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ad58:	2300      	movs	r3, #0
 801ad5a:	73fb      	strb	r3, [r7, #15]
    break;
 801ad5c:	e00b      	b.n	801ad76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ad5e:	2303      	movs	r3, #3
 801ad60:	73fb      	strb	r3, [r7, #15]
    break;
 801ad62:	e008      	b.n	801ad76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ad64:	2301      	movs	r3, #1
 801ad66:	73fb      	strb	r3, [r7, #15]
    break;
 801ad68:	e005      	b.n	801ad76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ad6a:	2303      	movs	r3, #3
 801ad6c:	73fb      	strb	r3, [r7, #15]
    break;
 801ad6e:	e002      	b.n	801ad76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ad70:	2303      	movs	r3, #3
 801ad72:	73fb      	strb	r3, [r7, #15]
    break;
 801ad74:	bf00      	nop
  }
  return usb_status;
 801ad76:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad78:	4618      	mov	r0, r3
 801ad7a:	3714      	adds	r7, #20
 801ad7c:	46bd      	mov	sp, r7
 801ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad82:	4770      	bx	lr

0801ad84 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801ad84:	b580      	push	{r7, lr}
 801ad86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 801ad88:	2200      	movs	r2, #0
 801ad8a:	4920      	ldr	r1, [pc, #128]	@ (801ae0c <MX_USB_HOST_Init+0x88>)
 801ad8c:	4820      	ldr	r0, [pc, #128]	@ (801ae10 <MX_USB_HOST_Init+0x8c>)
 801ad8e:	f7fd fae9 	bl	8018364 <USBH_Init>
 801ad92:	4603      	mov	r3, r0
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d001      	beq.n	801ad9c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801ad98:	f7e6 fbc6 	bl	8001528 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_AUDIO_CLASS) != USBH_OK)
 801ad9c:	491d      	ldr	r1, [pc, #116]	@ (801ae14 <MX_USB_HOST_Init+0x90>)
 801ad9e:	481c      	ldr	r0, [pc, #112]	@ (801ae10 <MX_USB_HOST_Init+0x8c>)
 801ada0:	f7fd fbbe 	bl	8018520 <USBH_RegisterClass>
 801ada4:	4603      	mov	r3, r0
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d001      	beq.n	801adae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801adaa:	f7e6 fbbd 	bl	8001528 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 801adae:	491a      	ldr	r1, [pc, #104]	@ (801ae18 <MX_USB_HOST_Init+0x94>)
 801adb0:	4817      	ldr	r0, [pc, #92]	@ (801ae10 <MX_USB_HOST_Init+0x8c>)
 801adb2:	f7fd fbb5 	bl	8018520 <USBH_RegisterClass>
 801adb6:	4603      	mov	r3, r0
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d001      	beq.n	801adc0 <MX_USB_HOST_Init+0x3c>
  {
    Error_Handler();
 801adbc:	f7e6 fbb4 	bl	8001528 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 801adc0:	4916      	ldr	r1, [pc, #88]	@ (801ae1c <MX_USB_HOST_Init+0x98>)
 801adc2:	4813      	ldr	r0, [pc, #76]	@ (801ae10 <MX_USB_HOST_Init+0x8c>)
 801adc4:	f7fd fbac 	bl	8018520 <USBH_RegisterClass>
 801adc8:	4603      	mov	r3, r0
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d001      	beq.n	801add2 <MX_USB_HOST_Init+0x4e>
  {
    Error_Handler();
 801adce:	f7e6 fbab 	bl	8001528 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASS) != USBH_OK)
 801add2:	4913      	ldr	r1, [pc, #76]	@ (801ae20 <MX_USB_HOST_Init+0x9c>)
 801add4:	480e      	ldr	r0, [pc, #56]	@ (801ae10 <MX_USB_HOST_Init+0x8c>)
 801add6:	f7fd fba3 	bl	8018520 <USBH_RegisterClass>
 801adda:	4603      	mov	r3, r0
 801addc:	2b00      	cmp	r3, #0
 801adde:	d001      	beq.n	801ade4 <MX_USB_HOST_Init+0x60>
  {
    Error_Handler();
 801ade0:	f7e6 fba2 	bl	8001528 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MTP_CLASS) != USBH_OK)
 801ade4:	490f      	ldr	r1, [pc, #60]	@ (801ae24 <MX_USB_HOST_Init+0xa0>)
 801ade6:	480a      	ldr	r0, [pc, #40]	@ (801ae10 <MX_USB_HOST_Init+0x8c>)
 801ade8:	f7fd fb9a 	bl	8018520 <USBH_RegisterClass>
 801adec:	4603      	mov	r3, r0
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d001      	beq.n	801adf6 <MX_USB_HOST_Init+0x72>
  {
    Error_Handler();
 801adf2:	f7e6 fb99 	bl	8001528 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 801adf6:	4806      	ldr	r0, [pc, #24]	@ (801ae10 <MX_USB_HOST_Init+0x8c>)
 801adf8:	f7fd fcc5 	bl	8018786 <USBH_Start>
 801adfc:	4603      	mov	r3, r0
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d001      	beq.n	801ae06 <MX_USB_HOST_Init+0x82>
  {
    Error_Handler();
 801ae02:	f7e6 fb91 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801ae06:	bf00      	nop
 801ae08:	bd80      	pop	{r7, pc}
 801ae0a:	bf00      	nop
 801ae0c:	0801ae3d 	.word	0x0801ae3d
 801ae10:	2400144c 	.word	0x2400144c
 801ae14:	24000130 	.word	0x24000130
 801ae18:	24000150 	.word	0x24000150
 801ae1c:	24000190 	.word	0x24000190
 801ae20:	24000170 	.word	0x24000170
 801ae24:	240001b0 	.word	0x240001b0

0801ae28 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 801ae2c:	4802      	ldr	r0, [pc, #8]	@ (801ae38 <MX_USB_HOST_Process+0x10>)
 801ae2e:	f7fd fcbb 	bl	80187a8 <USBH_Process>
}
 801ae32:	bf00      	nop
 801ae34:	bd80      	pop	{r7, pc}
 801ae36:	bf00      	nop
 801ae38:	2400144c 	.word	0x2400144c

0801ae3c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801ae3c:	b480      	push	{r7}
 801ae3e:	b083      	sub	sp, #12
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	6078      	str	r0, [r7, #4]
 801ae44:	460b      	mov	r3, r1
 801ae46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801ae48:	78fb      	ldrb	r3, [r7, #3]
 801ae4a:	3b01      	subs	r3, #1
 801ae4c:	2b04      	cmp	r3, #4
 801ae4e:	d819      	bhi.n	801ae84 <USBH_UserProcess+0x48>
 801ae50:	a201      	add	r2, pc, #4	@ (adr r2, 801ae58 <USBH_UserProcess+0x1c>)
 801ae52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae56:	bf00      	nop
 801ae58:	0801ae85 	.word	0x0801ae85
 801ae5c:	0801ae75 	.word	0x0801ae75
 801ae60:	0801ae85 	.word	0x0801ae85
 801ae64:	0801ae7d 	.word	0x0801ae7d
 801ae68:	0801ae6d 	.word	0x0801ae6d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801ae6c:	4b09      	ldr	r3, [pc, #36]	@ (801ae94 <USBH_UserProcess+0x58>)
 801ae6e:	2203      	movs	r2, #3
 801ae70:	701a      	strb	r2, [r3, #0]
  break;
 801ae72:	e008      	b.n	801ae86 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801ae74:	4b07      	ldr	r3, [pc, #28]	@ (801ae94 <USBH_UserProcess+0x58>)
 801ae76:	2202      	movs	r2, #2
 801ae78:	701a      	strb	r2, [r3, #0]
  break;
 801ae7a:	e004      	b.n	801ae86 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801ae7c:	4b05      	ldr	r3, [pc, #20]	@ (801ae94 <USBH_UserProcess+0x58>)
 801ae7e:	2201      	movs	r2, #1
 801ae80:	701a      	strb	r2, [r3, #0]
  break;
 801ae82:	e000      	b.n	801ae86 <USBH_UserProcess+0x4a>

  default:
  break;
 801ae84:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801ae86:	bf00      	nop
 801ae88:	370c      	adds	r7, #12
 801ae8a:	46bd      	mov	sp, r7
 801ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae90:	4770      	bx	lr
 801ae92:	bf00      	nop
 801ae94:	240097f4 	.word	0x240097f4

0801ae98 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801ae98:	b580      	push	{r7, lr}
 801ae9a:	b08a      	sub	sp, #40	@ 0x28
 801ae9c:	af00      	add	r7, sp, #0
 801ae9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801aea0:	f107 0314 	add.w	r3, r7, #20
 801aea4:	2200      	movs	r2, #0
 801aea6:	601a      	str	r2, [r3, #0]
 801aea8:	605a      	str	r2, [r3, #4]
 801aeaa:	609a      	str	r2, [r3, #8]
 801aeac:	60da      	str	r2, [r3, #12]
 801aeae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	4a1f      	ldr	r2, [pc, #124]	@ (801af34 <HAL_HCD_MspInit+0x9c>)
 801aeb6:	4293      	cmp	r3, r2
 801aeb8:	d138      	bne.n	801af2c <HAL_HCD_MspInit+0x94>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801aeba:	f7ed fb47 	bl	800854c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801aebe:	4b1e      	ldr	r3, [pc, #120]	@ (801af38 <HAL_HCD_MspInit+0xa0>)
 801aec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801aec4:	4a1c      	ldr	r2, [pc, #112]	@ (801af38 <HAL_HCD_MspInit+0xa0>)
 801aec6:	f043 0302 	orr.w	r3, r3, #2
 801aeca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801aece:	4b1a      	ldr	r3, [pc, #104]	@ (801af38 <HAL_HCD_MspInit+0xa0>)
 801aed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801aed4:	f003 0302 	and.w	r3, r3, #2
 801aed8:	613b      	str	r3, [r7, #16]
 801aeda:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 801aedc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 801aee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801aee2:	2302      	movs	r3, #2
 801aee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801aee6:	2300      	movs	r3, #0
 801aee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801aeea:	2303      	movs	r3, #3
 801aeec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 801aeee:	230c      	movs	r3, #12
 801aef0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801aef2:	f107 0314 	add.w	r3, r7, #20
 801aef6:	4619      	mov	r1, r3
 801aef8:	4810      	ldr	r0, [pc, #64]	@ (801af3c <HAL_HCD_MspInit+0xa4>)
 801aefa:	f7e9 fd57 	bl	80049ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801aefe:	4b0e      	ldr	r3, [pc, #56]	@ (801af38 <HAL_HCD_MspInit+0xa0>)
 801af00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801af04:	4a0c      	ldr	r2, [pc, #48]	@ (801af38 <HAL_HCD_MspInit+0xa0>)
 801af06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801af0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801af0e:	4b0a      	ldr	r3, [pc, #40]	@ (801af38 <HAL_HCD_MspInit+0xa0>)
 801af10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801af14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801af18:	60fb      	str	r3, [r7, #12]
 801af1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801af1c:	2200      	movs	r2, #0
 801af1e:	2100      	movs	r1, #0
 801af20:	204d      	movs	r0, #77	@ 0x4d
 801af22:	f7e7 f9cc 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801af26:	204d      	movs	r0, #77	@ 0x4d
 801af28:	f7e7 f9e3 	bl	80022f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801af2c:	bf00      	nop
 801af2e:	3728      	adds	r7, #40	@ 0x28
 801af30:	46bd      	mov	sp, r7
 801af32:	bd80      	pop	{r7, pc}
 801af34:	40040000 	.word	0x40040000
 801af38:	58024400 	.word	0x58024400
 801af3c:	58020400 	.word	0x58020400

0801af40 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801af40:	b580      	push	{r7, lr}
 801af42:	b082      	sub	sp, #8
 801af44:	af00      	add	r7, sp, #0
 801af46:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801af4e:	4618      	mov	r0, r3
 801af50:	f7fe fa00 	bl	8019354 <USBH_LL_IncTimer>
}
 801af54:	bf00      	nop
 801af56:	3708      	adds	r7, #8
 801af58:	46bd      	mov	sp, r7
 801af5a:	bd80      	pop	{r7, pc}

0801af5c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801af5c:	b580      	push	{r7, lr}
 801af5e:	b082      	sub	sp, #8
 801af60:	af00      	add	r7, sp, #0
 801af62:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801af6a:	4618      	mov	r0, r3
 801af6c:	f7fe fa4a 	bl	8019404 <USBH_LL_Connect>
}
 801af70:	bf00      	nop
 801af72:	3708      	adds	r7, #8
 801af74:	46bd      	mov	sp, r7
 801af76:	bd80      	pop	{r7, pc}

0801af78 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801af78:	b580      	push	{r7, lr}
 801af7a:	b082      	sub	sp, #8
 801af7c:	af00      	add	r7, sp, #0
 801af7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801af86:	4618      	mov	r0, r3
 801af88:	f7fe fa59 	bl	801943e <USBH_LL_Disconnect>
}
 801af8c:	bf00      	nop
 801af8e:	3708      	adds	r7, #8
 801af90:	46bd      	mov	sp, r7
 801af92:	bd80      	pop	{r7, pc}

0801af94 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801af94:	b480      	push	{r7}
 801af96:	b083      	sub	sp, #12
 801af98:	af00      	add	r7, sp, #0
 801af9a:	6078      	str	r0, [r7, #4]
 801af9c:	460b      	mov	r3, r1
 801af9e:	70fb      	strb	r3, [r7, #3]
 801afa0:	4613      	mov	r3, r2
 801afa2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801afa4:	bf00      	nop
 801afa6:	370c      	adds	r7, #12
 801afa8:	46bd      	mov	sp, r7
 801afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afae:	4770      	bx	lr

0801afb0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801afb0:	b580      	push	{r7, lr}
 801afb2:	b082      	sub	sp, #8
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801afbe:	4618      	mov	r0, r3
 801afc0:	f7fe f9fa 	bl	80193b8 <USBH_LL_PortEnabled>
}
 801afc4:	bf00      	nop
 801afc6:	3708      	adds	r7, #8
 801afc8:	46bd      	mov	sp, r7
 801afca:	bd80      	pop	{r7, pc}

0801afcc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b082      	sub	sp, #8
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801afda:	4618      	mov	r0, r3
 801afdc:	f7fe f9fc 	bl	80193d8 <USBH_LL_PortDisabled>
}
 801afe0:	bf00      	nop
 801afe2:	3708      	adds	r7, #8
 801afe4:	46bd      	mov	sp, r7
 801afe6:	bd80      	pop	{r7, pc}

0801afe8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801afe8:	b580      	push	{r7, lr}
 801afea:	b082      	sub	sp, #8
 801afec:	af00      	add	r7, sp, #0
 801afee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801aff6:	f893 339c 	ldrb.w	r3, [r3, #924]	@ 0x39c
 801affa:	2b00      	cmp	r3, #0
 801affc:	d132      	bne.n	801b064 <USBH_LL_Init+0x7c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 801affe:	4a1c      	ldr	r2, [pc, #112]	@ (801b070 <USBH_LL_Init+0x88>)
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801b00c:	461a      	mov	r2, r3
 801b00e:	4b18      	ldr	r3, [pc, #96]	@ (801b070 <USBH_LL_Init+0x88>)
 801b010:	f8c2 33a0 	str.w	r3, [r2, #928]	@ 0x3a0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801b014:	4b16      	ldr	r3, [pc, #88]	@ (801b070 <USBH_LL_Init+0x88>)
 801b016:	4a17      	ldr	r2, [pc, #92]	@ (801b074 <USBH_LL_Init+0x8c>)
 801b018:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 801b01a:	4b15      	ldr	r3, [pc, #84]	@ (801b070 <USBH_LL_Init+0x88>)
 801b01c:	2210      	movs	r2, #16
 801b01e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 801b020:	4b13      	ldr	r3, [pc, #76]	@ (801b070 <USBH_LL_Init+0x88>)
 801b022:	2201      	movs	r2, #1
 801b024:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801b026:	4b12      	ldr	r3, [pc, #72]	@ (801b070 <USBH_LL_Init+0x88>)
 801b028:	2200      	movs	r2, #0
 801b02a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801b02c:	4b10      	ldr	r3, [pc, #64]	@ (801b070 <USBH_LL_Init+0x88>)
 801b02e:	2202      	movs	r2, #2
 801b030:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801b032:	4b0f      	ldr	r3, [pc, #60]	@ (801b070 <USBH_LL_Init+0x88>)
 801b034:	2200      	movs	r2, #0
 801b036:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801b038:	4b0d      	ldr	r3, [pc, #52]	@ (801b070 <USBH_LL_Init+0x88>)
 801b03a:	2200      	movs	r2, #0
 801b03c:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801b03e:	4b0c      	ldr	r3, [pc, #48]	@ (801b070 <USBH_LL_Init+0x88>)
 801b040:	2200      	movs	r2, #0
 801b042:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 801b044:	480a      	ldr	r0, [pc, #40]	@ (801b070 <USBH_LL_Init+0x88>)
 801b046:	f7e9 fe94 	bl	8004d72 <HAL_HCD_Init>
 801b04a:	4603      	mov	r3, r0
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d001      	beq.n	801b054 <USBH_LL_Init+0x6c>
  {
    Error_Handler( );
 801b050:	f7e6 fa6a 	bl	8001528 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 801b054:	4806      	ldr	r0, [pc, #24]	@ (801b070 <USBH_LL_Init+0x88>)
 801b056:	f7ea faeb 	bl	8005630 <HAL_HCD_GetCurrentFrame>
 801b05a:	4603      	mov	r3, r0
 801b05c:	4619      	mov	r1, r3
 801b05e:	6878      	ldr	r0, [r7, #4]
 801b060:	f7fe f966 	bl	8019330 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801b064:	2300      	movs	r3, #0
}
 801b066:	4618      	mov	r0, r3
 801b068:	3708      	adds	r7, #8
 801b06a:	46bd      	mov	sp, r7
 801b06c:	bd80      	pop	{r7, pc}
 801b06e:	bf00      	nop
 801b070:	240097f8 	.word	0x240097f8
 801b074:	40040000 	.word	0x40040000

0801b078 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b084      	sub	sp, #16
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b080:	2300      	movs	r3, #0
 801b082:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b084:	2300      	movs	r3, #0
 801b086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801b08e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 801b092:	4618      	mov	r0, r3
 801b094:	f7ea fa54 	bl	8005540 <HAL_HCD_Start>
 801b098:	4603      	mov	r3, r0
 801b09a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801b09c:	7bfb      	ldrb	r3, [r7, #15]
 801b09e:	4618      	mov	r0, r3
 801b0a0:	f000 f99c 	bl	801b3dc <USBH_Get_USB_Status>
 801b0a4:	4603      	mov	r3, r0
 801b0a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 801b0aa:	4618      	mov	r0, r3
 801b0ac:	3710      	adds	r7, #16
 801b0ae:	46bd      	mov	sp, r7
 801b0b0:	bd80      	pop	{r7, pc}

0801b0b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801b0b2:	b580      	push	{r7, lr}
 801b0b4:	b084      	sub	sp, #16
 801b0b6:	af00      	add	r7, sp, #0
 801b0b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b0be:	2300      	movs	r3, #0
 801b0c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801b0c8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 801b0cc:	4618      	mov	r0, r3
 801b0ce:	f7ea fa5a 	bl	8005586 <HAL_HCD_Stop>
 801b0d2:	4603      	mov	r3, r0
 801b0d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801b0d6:	7bfb      	ldrb	r3, [r7, #15]
 801b0d8:	4618      	mov	r0, r3
 801b0da:	f000 f97f 	bl	801b3dc <USBH_Get_USB_Status>
 801b0de:	4603      	mov	r3, r0
 801b0e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b0e2:	7bbb      	ldrb	r3, [r7, #14]
}
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	3710      	adds	r7, #16
 801b0e8:	46bd      	mov	sp, r7
 801b0ea:	bd80      	pop	{r7, pc}

0801b0ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801b0ec:	b580      	push	{r7, lr}
 801b0ee:	b084      	sub	sp, #16
 801b0f0:	af00      	add	r7, sp, #0
 801b0f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801b0f4:	2301      	movs	r3, #1
 801b0f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801b0fe:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 801b102:	4618      	mov	r0, r3
 801b104:	f7ea faa2 	bl	800564c <HAL_HCD_GetCurrentSpeed>
 801b108:	4603      	mov	r3, r0
 801b10a:	2b02      	cmp	r3, #2
 801b10c:	d00c      	beq.n	801b128 <USBH_LL_GetSpeed+0x3c>
 801b10e:	2b02      	cmp	r3, #2
 801b110:	d80d      	bhi.n	801b12e <USBH_LL_GetSpeed+0x42>
 801b112:	2b00      	cmp	r3, #0
 801b114:	d002      	beq.n	801b11c <USBH_LL_GetSpeed+0x30>
 801b116:	2b01      	cmp	r3, #1
 801b118:	d003      	beq.n	801b122 <USBH_LL_GetSpeed+0x36>
 801b11a:	e008      	b.n	801b12e <USBH_LL_GetSpeed+0x42>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801b11c:	2300      	movs	r3, #0
 801b11e:	73fb      	strb	r3, [r7, #15]
    break;
 801b120:	e008      	b.n	801b134 <USBH_LL_GetSpeed+0x48>

  case 1 :
    speed = USBH_SPEED_FULL;
 801b122:	2301      	movs	r3, #1
 801b124:	73fb      	strb	r3, [r7, #15]
    break;
 801b126:	e005      	b.n	801b134 <USBH_LL_GetSpeed+0x48>

  case 2 :
    speed = USBH_SPEED_LOW;
 801b128:	2302      	movs	r3, #2
 801b12a:	73fb      	strb	r3, [r7, #15]
    break;
 801b12c:	e002      	b.n	801b134 <USBH_LL_GetSpeed+0x48>

  default:
   speed = USBH_SPEED_FULL;
 801b12e:	2301      	movs	r3, #1
 801b130:	73fb      	strb	r3, [r7, #15]
    break;
 801b132:	bf00      	nop
  }
  return  speed;
 801b134:	7bfb      	ldrb	r3, [r7, #15]
}
 801b136:	4618      	mov	r0, r3
 801b138:	3710      	adds	r7, #16
 801b13a:	46bd      	mov	sp, r7
 801b13c:	bd80      	pop	{r7, pc}

0801b13e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801b13e:	b580      	push	{r7, lr}
 801b140:	b084      	sub	sp, #16
 801b142:	af00      	add	r7, sp, #0
 801b144:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b146:	2300      	movs	r3, #0
 801b148:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b14a:	2300      	movs	r3, #0
 801b14c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801b154:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 801b158:	4618      	mov	r0, r3
 801b15a:	f7ea fa31 	bl	80055c0 <HAL_HCD_ResetPort>
 801b15e:	4603      	mov	r3, r0
 801b160:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801b162:	7bfb      	ldrb	r3, [r7, #15]
 801b164:	4618      	mov	r0, r3
 801b166:	f000 f939 	bl	801b3dc <USBH_Get_USB_Status>
 801b16a:	4603      	mov	r3, r0
 801b16c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b16e:	7bbb      	ldrb	r3, [r7, #14]
}
 801b170:	4618      	mov	r0, r3
 801b172:	3710      	adds	r7, #16
 801b174:	46bd      	mov	sp, r7
 801b176:	bd80      	pop	{r7, pc}

0801b178 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b082      	sub	sp, #8
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	6078      	str	r0, [r7, #4]
 801b180:	460b      	mov	r3, r1
 801b182:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801b18a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 801b18e:	78fa      	ldrb	r2, [r7, #3]
 801b190:	4611      	mov	r1, r2
 801b192:	4618      	mov	r0, r3
 801b194:	f7ea fa37 	bl	8005606 <HAL_HCD_HC_GetXferCount>
 801b198:	4603      	mov	r3, r0
}
 801b19a:	4618      	mov	r0, r3
 801b19c:	3708      	adds	r7, #8
 801b19e:	46bd      	mov	sp, r7
 801b1a0:	bd80      	pop	{r7, pc}

0801b1a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801b1a2:	b590      	push	{r4, r7, lr}
 801b1a4:	b089      	sub	sp, #36	@ 0x24
 801b1a6:	af04      	add	r7, sp, #16
 801b1a8:	6078      	str	r0, [r7, #4]
 801b1aa:	4608      	mov	r0, r1
 801b1ac:	4611      	mov	r1, r2
 801b1ae:	461a      	mov	r2, r3
 801b1b0:	4603      	mov	r3, r0
 801b1b2:	70fb      	strb	r3, [r7, #3]
 801b1b4:	460b      	mov	r3, r1
 801b1b6:	70bb      	strb	r3, [r7, #2]
 801b1b8:	4613      	mov	r3, r2
 801b1ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b1bc:	2300      	movs	r3, #0
 801b1be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b1c0:	2300      	movs	r3, #0
 801b1c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801b1ca:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 801b1ce:	787c      	ldrb	r4, [r7, #1]
 801b1d0:	78ba      	ldrb	r2, [r7, #2]
 801b1d2:	78f9      	ldrb	r1, [r7, #3]
 801b1d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b1d6:	9302      	str	r3, [sp, #8]
 801b1d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b1dc:	9301      	str	r3, [sp, #4]
 801b1de:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b1e2:	9300      	str	r3, [sp, #0]
 801b1e4:	4623      	mov	r3, r4
 801b1e6:	f7e9 fe21 	bl	8004e2c <HAL_HCD_HC_Init>
 801b1ea:	4603      	mov	r3, r0
 801b1ec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801b1ee:	7bfb      	ldrb	r3, [r7, #15]
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	f000 f8f3 	bl	801b3dc <USBH_Get_USB_Status>
 801b1f6:	4603      	mov	r3, r0
 801b1f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b1fa:	7bbb      	ldrb	r3, [r7, #14]
}
 801b1fc:	4618      	mov	r0, r3
 801b1fe:	3714      	adds	r7, #20
 801b200:	46bd      	mov	sp, r7
 801b202:	bd90      	pop	{r4, r7, pc}

0801b204 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801b204:	b580      	push	{r7, lr}
 801b206:	b084      	sub	sp, #16
 801b208:	af00      	add	r7, sp, #0
 801b20a:	6078      	str	r0, [r7, #4]
 801b20c:	460b      	mov	r3, r1
 801b20e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b210:	2300      	movs	r3, #0
 801b212:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b214:	2300      	movs	r3, #0
 801b216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801b21e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 801b222:	78fa      	ldrb	r2, [r7, #3]
 801b224:	4611      	mov	r1, r2
 801b226:	4618      	mov	r0, r3
 801b228:	f7e9 feb8 	bl	8004f9c <HAL_HCD_HC_Halt>
 801b22c:	4603      	mov	r3, r0
 801b22e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801b230:	7bfb      	ldrb	r3, [r7, #15]
 801b232:	4618      	mov	r0, r3
 801b234:	f000 f8d2 	bl	801b3dc <USBH_Get_USB_Status>
 801b238:	4603      	mov	r3, r0
 801b23a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b23c:	7bbb      	ldrb	r3, [r7, #14]
}
 801b23e:	4618      	mov	r0, r3
 801b240:	3710      	adds	r7, #16
 801b242:	46bd      	mov	sp, r7
 801b244:	bd80      	pop	{r7, pc}

0801b246 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801b246:	b590      	push	{r4, r7, lr}
 801b248:	b089      	sub	sp, #36	@ 0x24
 801b24a:	af04      	add	r7, sp, #16
 801b24c:	6078      	str	r0, [r7, #4]
 801b24e:	4608      	mov	r0, r1
 801b250:	4611      	mov	r1, r2
 801b252:	461a      	mov	r2, r3
 801b254:	4603      	mov	r3, r0
 801b256:	70fb      	strb	r3, [r7, #3]
 801b258:	460b      	mov	r3, r1
 801b25a:	70bb      	strb	r3, [r7, #2]
 801b25c:	4613      	mov	r3, r2
 801b25e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b260:	2300      	movs	r3, #0
 801b262:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b264:	2300      	movs	r3, #0
 801b266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801b26e:	f8d3 03a0 	ldr.w	r0, [r3, #928]	@ 0x3a0
 801b272:	787c      	ldrb	r4, [r7, #1]
 801b274:	78ba      	ldrb	r2, [r7, #2]
 801b276:	78f9      	ldrb	r1, [r7, #3]
 801b278:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801b27c:	9303      	str	r3, [sp, #12]
 801b27e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b280:	9302      	str	r3, [sp, #8]
 801b282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b284:	9301      	str	r3, [sp, #4]
 801b286:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b28a:	9300      	str	r3, [sp, #0]
 801b28c:	4623      	mov	r3, r4
 801b28e:	f7e9 fea9 	bl	8004fe4 <HAL_HCD_HC_SubmitRequest>
 801b292:	4603      	mov	r3, r0
 801b294:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801b296:	7bfb      	ldrb	r3, [r7, #15]
 801b298:	4618      	mov	r0, r3
 801b29a:	f000 f89f 	bl	801b3dc <USBH_Get_USB_Status>
 801b29e:	4603      	mov	r3, r0
 801b2a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b2a2:	7bbb      	ldrb	r3, [r7, #14]
}
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	3714      	adds	r7, #20
 801b2a8:	46bd      	mov	sp, r7
 801b2aa:	bd90      	pop	{r4, r7, pc}

0801b2ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	b082      	sub	sp, #8
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	6078      	str	r0, [r7, #4]
 801b2b4:	460b      	mov	r3, r1
 801b2b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801b2be:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 801b2c2:	78fa      	ldrb	r2, [r7, #3]
 801b2c4:	4611      	mov	r1, r2
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	f7ea f988 	bl	80055dc <HAL_HCD_HC_GetURBState>
 801b2cc:	4603      	mov	r3, r0
}
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	3708      	adds	r7, #8
 801b2d2:	46bd      	mov	sp, r7
 801b2d4:	bd80      	pop	{r7, pc}

0801b2d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801b2d6:	b580      	push	{r7, lr}
 801b2d8:	b082      	sub	sp, #8
 801b2da:	af00      	add	r7, sp, #0
 801b2dc:	6078      	str	r0, [r7, #4]
 801b2de:	460b      	mov	r3, r1
 801b2e0:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 801b2e2:	20c8      	movs	r0, #200	@ 0xc8
 801b2e4:	f7e6 fed4 	bl	8002090 <HAL_Delay>
  return USBH_OK;
 801b2e8:	2300      	movs	r3, #0
}
 801b2ea:	4618      	mov	r0, r3
 801b2ec:	3708      	adds	r7, #8
 801b2ee:	46bd      	mov	sp, r7
 801b2f0:	bd80      	pop	{r7, pc}

0801b2f2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801b2f2:	b480      	push	{r7}
 801b2f4:	b085      	sub	sp, #20
 801b2f6:	af00      	add	r7, sp, #0
 801b2f8:	6078      	str	r0, [r7, #4]
 801b2fa:	460b      	mov	r3, r1
 801b2fc:	70fb      	strb	r3, [r7, #3]
 801b2fe:	4613      	mov	r3, r2
 801b300:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801b308:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 801b30c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801b30e:	78fa      	ldrb	r2, [r7, #3]
 801b310:	68f9      	ldr	r1, [r7, #12]
 801b312:	4613      	mov	r3, r2
 801b314:	011b      	lsls	r3, r3, #4
 801b316:	1a9b      	subs	r3, r3, r2
 801b318:	009b      	lsls	r3, r3, #2
 801b31a:	440b      	add	r3, r1
 801b31c:	3317      	adds	r3, #23
 801b31e:	781b      	ldrb	r3, [r3, #0]
 801b320:	2b00      	cmp	r3, #0
 801b322:	d00a      	beq.n	801b33a <USBH_LL_SetToggle+0x48>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801b324:	78fa      	ldrb	r2, [r7, #3]
 801b326:	68f9      	ldr	r1, [r7, #12]
 801b328:	4613      	mov	r3, r2
 801b32a:	011b      	lsls	r3, r3, #4
 801b32c:	1a9b      	subs	r3, r3, r2
 801b32e:	009b      	lsls	r3, r3, #2
 801b330:	440b      	add	r3, r1
 801b332:	333c      	adds	r3, #60	@ 0x3c
 801b334:	78ba      	ldrb	r2, [r7, #2]
 801b336:	701a      	strb	r2, [r3, #0]
 801b338:	e009      	b.n	801b34e <USBH_LL_SetToggle+0x5c>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801b33a:	78fa      	ldrb	r2, [r7, #3]
 801b33c:	68f9      	ldr	r1, [r7, #12]
 801b33e:	4613      	mov	r3, r2
 801b340:	011b      	lsls	r3, r3, #4
 801b342:	1a9b      	subs	r3, r3, r2
 801b344:	009b      	lsls	r3, r3, #2
 801b346:	440b      	add	r3, r1
 801b348:	333d      	adds	r3, #61	@ 0x3d
 801b34a:	78ba      	ldrb	r2, [r7, #2]
 801b34c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801b34e:	2300      	movs	r3, #0
}
 801b350:	4618      	mov	r0, r3
 801b352:	3714      	adds	r7, #20
 801b354:	46bd      	mov	sp, r7
 801b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b35a:	4770      	bx	lr

0801b35c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801b35c:	b480      	push	{r7}
 801b35e:	b085      	sub	sp, #20
 801b360:	af00      	add	r7, sp, #0
 801b362:	6078      	str	r0, [r7, #4]
 801b364:	460b      	mov	r3, r1
 801b366:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801b368:	2300      	movs	r3, #0
 801b36a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801b372:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 801b376:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 801b378:	78fa      	ldrb	r2, [r7, #3]
 801b37a:	68b9      	ldr	r1, [r7, #8]
 801b37c:	4613      	mov	r3, r2
 801b37e:	011b      	lsls	r3, r3, #4
 801b380:	1a9b      	subs	r3, r3, r2
 801b382:	009b      	lsls	r3, r3, #2
 801b384:	440b      	add	r3, r1
 801b386:	3317      	adds	r3, #23
 801b388:	781b      	ldrb	r3, [r3, #0]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d00a      	beq.n	801b3a4 <USBH_LL_GetToggle+0x48>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801b38e:	78fa      	ldrb	r2, [r7, #3]
 801b390:	68b9      	ldr	r1, [r7, #8]
 801b392:	4613      	mov	r3, r2
 801b394:	011b      	lsls	r3, r3, #4
 801b396:	1a9b      	subs	r3, r3, r2
 801b398:	009b      	lsls	r3, r3, #2
 801b39a:	440b      	add	r3, r1
 801b39c:	333c      	adds	r3, #60	@ 0x3c
 801b39e:	781b      	ldrb	r3, [r3, #0]
 801b3a0:	73fb      	strb	r3, [r7, #15]
 801b3a2:	e009      	b.n	801b3b8 <USBH_LL_GetToggle+0x5c>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 801b3a4:	78fa      	ldrb	r2, [r7, #3]
 801b3a6:	68b9      	ldr	r1, [r7, #8]
 801b3a8:	4613      	mov	r3, r2
 801b3aa:	011b      	lsls	r3, r3, #4
 801b3ac:	1a9b      	subs	r3, r3, r2
 801b3ae:	009b      	lsls	r3, r3, #2
 801b3b0:	440b      	add	r3, r1
 801b3b2:	333d      	adds	r3, #61	@ 0x3d
 801b3b4:	781b      	ldrb	r3, [r3, #0]
 801b3b6:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 801b3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	3714      	adds	r7, #20
 801b3be:	46bd      	mov	sp, r7
 801b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3c4:	4770      	bx	lr

0801b3c6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801b3c6:	b580      	push	{r7, lr}
 801b3c8:	b082      	sub	sp, #8
 801b3ca:	af00      	add	r7, sp, #0
 801b3cc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801b3ce:	6878      	ldr	r0, [r7, #4]
 801b3d0:	f7e6 fe5e 	bl	8002090 <HAL_Delay>
}
 801b3d4:	bf00      	nop
 801b3d6:	3708      	adds	r7, #8
 801b3d8:	46bd      	mov	sp, r7
 801b3da:	bd80      	pop	{r7, pc}

0801b3dc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b3dc:	b480      	push	{r7}
 801b3de:	b085      	sub	sp, #20
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	4603      	mov	r3, r0
 801b3e4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801b3e6:	2300      	movs	r3, #0
 801b3e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b3ea:	79fb      	ldrb	r3, [r7, #7]
 801b3ec:	2b03      	cmp	r3, #3
 801b3ee:	d817      	bhi.n	801b420 <USBH_Get_USB_Status+0x44>
 801b3f0:	a201      	add	r2, pc, #4	@ (adr r2, 801b3f8 <USBH_Get_USB_Status+0x1c>)
 801b3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3f6:	bf00      	nop
 801b3f8:	0801b409 	.word	0x0801b409
 801b3fc:	0801b40f 	.word	0x0801b40f
 801b400:	0801b415 	.word	0x0801b415
 801b404:	0801b41b 	.word	0x0801b41b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801b408:	2300      	movs	r3, #0
 801b40a:	73fb      	strb	r3, [r7, #15]
    break;
 801b40c:	e00b      	b.n	801b426 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801b40e:	2302      	movs	r3, #2
 801b410:	73fb      	strb	r3, [r7, #15]
    break;
 801b412:	e008      	b.n	801b426 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801b414:	2301      	movs	r3, #1
 801b416:	73fb      	strb	r3, [r7, #15]
    break;
 801b418:	e005      	b.n	801b426 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801b41a:	2302      	movs	r3, #2
 801b41c:	73fb      	strb	r3, [r7, #15]
    break;
 801b41e:	e002      	b.n	801b426 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801b420:	2302      	movs	r3, #2
 801b422:	73fb      	strb	r3, [r7, #15]
    break;
 801b424:	bf00      	nop
  }
  return usb_status;
 801b426:	7bfb      	ldrb	r3, [r7, #15]
}
 801b428:	4618      	mov	r0, r3
 801b42a:	3714      	adds	r7, #20
 801b42c:	46bd      	mov	sp, r7
 801b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b432:	4770      	bx	lr

0801b434 <malloc>:
 801b434:	4b02      	ldr	r3, [pc, #8]	@ (801b440 <malloc+0xc>)
 801b436:	4601      	mov	r1, r0
 801b438:	6818      	ldr	r0, [r3, #0]
 801b43a:	f000 b82d 	b.w	801b498 <_malloc_r>
 801b43e:	bf00      	nop
 801b440:	24000264 	.word	0x24000264

0801b444 <free>:
 801b444:	4b02      	ldr	r3, [pc, #8]	@ (801b450 <free+0xc>)
 801b446:	4601      	mov	r1, r0
 801b448:	6818      	ldr	r0, [r3, #0]
 801b44a:	f000 bb5d 	b.w	801bb08 <_free_r>
 801b44e:	bf00      	nop
 801b450:	24000264 	.word	0x24000264

0801b454 <sbrk_aligned>:
 801b454:	b570      	push	{r4, r5, r6, lr}
 801b456:	4e0f      	ldr	r6, [pc, #60]	@ (801b494 <sbrk_aligned+0x40>)
 801b458:	460c      	mov	r4, r1
 801b45a:	6831      	ldr	r1, [r6, #0]
 801b45c:	4605      	mov	r5, r0
 801b45e:	b911      	cbnz	r1, 801b466 <sbrk_aligned+0x12>
 801b460:	f000 faf4 	bl	801ba4c <_sbrk_r>
 801b464:	6030      	str	r0, [r6, #0]
 801b466:	4621      	mov	r1, r4
 801b468:	4628      	mov	r0, r5
 801b46a:	f000 faef 	bl	801ba4c <_sbrk_r>
 801b46e:	1c43      	adds	r3, r0, #1
 801b470:	d103      	bne.n	801b47a <sbrk_aligned+0x26>
 801b472:	f04f 34ff 	mov.w	r4, #4294967295
 801b476:	4620      	mov	r0, r4
 801b478:	bd70      	pop	{r4, r5, r6, pc}
 801b47a:	1cc4      	adds	r4, r0, #3
 801b47c:	f024 0403 	bic.w	r4, r4, #3
 801b480:	42a0      	cmp	r0, r4
 801b482:	d0f8      	beq.n	801b476 <sbrk_aligned+0x22>
 801b484:	1a21      	subs	r1, r4, r0
 801b486:	4628      	mov	r0, r5
 801b488:	f000 fae0 	bl	801ba4c <_sbrk_r>
 801b48c:	3001      	adds	r0, #1
 801b48e:	d1f2      	bne.n	801b476 <sbrk_aligned+0x22>
 801b490:	e7ef      	b.n	801b472 <sbrk_aligned+0x1e>
 801b492:	bf00      	nop
 801b494:	24009bd8 	.word	0x24009bd8

0801b498 <_malloc_r>:
 801b498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b49c:	1ccd      	adds	r5, r1, #3
 801b49e:	f025 0503 	bic.w	r5, r5, #3
 801b4a2:	3508      	adds	r5, #8
 801b4a4:	2d0c      	cmp	r5, #12
 801b4a6:	bf38      	it	cc
 801b4a8:	250c      	movcc	r5, #12
 801b4aa:	2d00      	cmp	r5, #0
 801b4ac:	4606      	mov	r6, r0
 801b4ae:	db01      	blt.n	801b4b4 <_malloc_r+0x1c>
 801b4b0:	42a9      	cmp	r1, r5
 801b4b2:	d904      	bls.n	801b4be <_malloc_r+0x26>
 801b4b4:	230c      	movs	r3, #12
 801b4b6:	6033      	str	r3, [r6, #0]
 801b4b8:	2000      	movs	r0, #0
 801b4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b594 <_malloc_r+0xfc>
 801b4c2:	f000 f869 	bl	801b598 <__malloc_lock>
 801b4c6:	f8d8 3000 	ldr.w	r3, [r8]
 801b4ca:	461c      	mov	r4, r3
 801b4cc:	bb44      	cbnz	r4, 801b520 <_malloc_r+0x88>
 801b4ce:	4629      	mov	r1, r5
 801b4d0:	4630      	mov	r0, r6
 801b4d2:	f7ff ffbf 	bl	801b454 <sbrk_aligned>
 801b4d6:	1c43      	adds	r3, r0, #1
 801b4d8:	4604      	mov	r4, r0
 801b4da:	d158      	bne.n	801b58e <_malloc_r+0xf6>
 801b4dc:	f8d8 4000 	ldr.w	r4, [r8]
 801b4e0:	4627      	mov	r7, r4
 801b4e2:	2f00      	cmp	r7, #0
 801b4e4:	d143      	bne.n	801b56e <_malloc_r+0xd6>
 801b4e6:	2c00      	cmp	r4, #0
 801b4e8:	d04b      	beq.n	801b582 <_malloc_r+0xea>
 801b4ea:	6823      	ldr	r3, [r4, #0]
 801b4ec:	4639      	mov	r1, r7
 801b4ee:	4630      	mov	r0, r6
 801b4f0:	eb04 0903 	add.w	r9, r4, r3
 801b4f4:	f000 faaa 	bl	801ba4c <_sbrk_r>
 801b4f8:	4581      	cmp	r9, r0
 801b4fa:	d142      	bne.n	801b582 <_malloc_r+0xea>
 801b4fc:	6821      	ldr	r1, [r4, #0]
 801b4fe:	1a6d      	subs	r5, r5, r1
 801b500:	4629      	mov	r1, r5
 801b502:	4630      	mov	r0, r6
 801b504:	f7ff ffa6 	bl	801b454 <sbrk_aligned>
 801b508:	3001      	adds	r0, #1
 801b50a:	d03a      	beq.n	801b582 <_malloc_r+0xea>
 801b50c:	6823      	ldr	r3, [r4, #0]
 801b50e:	442b      	add	r3, r5
 801b510:	6023      	str	r3, [r4, #0]
 801b512:	f8d8 3000 	ldr.w	r3, [r8]
 801b516:	685a      	ldr	r2, [r3, #4]
 801b518:	bb62      	cbnz	r2, 801b574 <_malloc_r+0xdc>
 801b51a:	f8c8 7000 	str.w	r7, [r8]
 801b51e:	e00f      	b.n	801b540 <_malloc_r+0xa8>
 801b520:	6822      	ldr	r2, [r4, #0]
 801b522:	1b52      	subs	r2, r2, r5
 801b524:	d420      	bmi.n	801b568 <_malloc_r+0xd0>
 801b526:	2a0b      	cmp	r2, #11
 801b528:	d917      	bls.n	801b55a <_malloc_r+0xc2>
 801b52a:	1961      	adds	r1, r4, r5
 801b52c:	42a3      	cmp	r3, r4
 801b52e:	6025      	str	r5, [r4, #0]
 801b530:	bf18      	it	ne
 801b532:	6059      	strne	r1, [r3, #4]
 801b534:	6863      	ldr	r3, [r4, #4]
 801b536:	bf08      	it	eq
 801b538:	f8c8 1000 	streq.w	r1, [r8]
 801b53c:	5162      	str	r2, [r4, r5]
 801b53e:	604b      	str	r3, [r1, #4]
 801b540:	4630      	mov	r0, r6
 801b542:	f000 f82f 	bl	801b5a4 <__malloc_unlock>
 801b546:	f104 000b 	add.w	r0, r4, #11
 801b54a:	1d23      	adds	r3, r4, #4
 801b54c:	f020 0007 	bic.w	r0, r0, #7
 801b550:	1ac2      	subs	r2, r0, r3
 801b552:	bf1c      	itt	ne
 801b554:	1a1b      	subne	r3, r3, r0
 801b556:	50a3      	strne	r3, [r4, r2]
 801b558:	e7af      	b.n	801b4ba <_malloc_r+0x22>
 801b55a:	6862      	ldr	r2, [r4, #4]
 801b55c:	42a3      	cmp	r3, r4
 801b55e:	bf0c      	ite	eq
 801b560:	f8c8 2000 	streq.w	r2, [r8]
 801b564:	605a      	strne	r2, [r3, #4]
 801b566:	e7eb      	b.n	801b540 <_malloc_r+0xa8>
 801b568:	4623      	mov	r3, r4
 801b56a:	6864      	ldr	r4, [r4, #4]
 801b56c:	e7ae      	b.n	801b4cc <_malloc_r+0x34>
 801b56e:	463c      	mov	r4, r7
 801b570:	687f      	ldr	r7, [r7, #4]
 801b572:	e7b6      	b.n	801b4e2 <_malloc_r+0x4a>
 801b574:	461a      	mov	r2, r3
 801b576:	685b      	ldr	r3, [r3, #4]
 801b578:	42a3      	cmp	r3, r4
 801b57a:	d1fb      	bne.n	801b574 <_malloc_r+0xdc>
 801b57c:	2300      	movs	r3, #0
 801b57e:	6053      	str	r3, [r2, #4]
 801b580:	e7de      	b.n	801b540 <_malloc_r+0xa8>
 801b582:	230c      	movs	r3, #12
 801b584:	6033      	str	r3, [r6, #0]
 801b586:	4630      	mov	r0, r6
 801b588:	f000 f80c 	bl	801b5a4 <__malloc_unlock>
 801b58c:	e794      	b.n	801b4b8 <_malloc_r+0x20>
 801b58e:	6005      	str	r5, [r0, #0]
 801b590:	e7d6      	b.n	801b540 <_malloc_r+0xa8>
 801b592:	bf00      	nop
 801b594:	24009bdc 	.word	0x24009bdc

0801b598 <__malloc_lock>:
 801b598:	4801      	ldr	r0, [pc, #4]	@ (801b5a0 <__malloc_lock+0x8>)
 801b59a:	f000 baa4 	b.w	801bae6 <__retarget_lock_acquire_recursive>
 801b59e:	bf00      	nop
 801b5a0:	24009d20 	.word	0x24009d20

0801b5a4 <__malloc_unlock>:
 801b5a4:	4801      	ldr	r0, [pc, #4]	@ (801b5ac <__malloc_unlock+0x8>)
 801b5a6:	f000 ba9f 	b.w	801bae8 <__retarget_lock_release_recursive>
 801b5aa:	bf00      	nop
 801b5ac:	24009d20 	.word	0x24009d20

0801b5b0 <std>:
 801b5b0:	2300      	movs	r3, #0
 801b5b2:	b510      	push	{r4, lr}
 801b5b4:	4604      	mov	r4, r0
 801b5b6:	e9c0 3300 	strd	r3, r3, [r0]
 801b5ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b5be:	6083      	str	r3, [r0, #8]
 801b5c0:	8181      	strh	r1, [r0, #12]
 801b5c2:	6643      	str	r3, [r0, #100]	@ 0x64
 801b5c4:	81c2      	strh	r2, [r0, #14]
 801b5c6:	6183      	str	r3, [r0, #24]
 801b5c8:	4619      	mov	r1, r3
 801b5ca:	2208      	movs	r2, #8
 801b5cc:	305c      	adds	r0, #92	@ 0x5c
 801b5ce:	f000 fa01 	bl	801b9d4 <memset>
 801b5d2:	4b0d      	ldr	r3, [pc, #52]	@ (801b608 <std+0x58>)
 801b5d4:	6263      	str	r3, [r4, #36]	@ 0x24
 801b5d6:	4b0d      	ldr	r3, [pc, #52]	@ (801b60c <std+0x5c>)
 801b5d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b5da:	4b0d      	ldr	r3, [pc, #52]	@ (801b610 <std+0x60>)
 801b5dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b5de:	4b0d      	ldr	r3, [pc, #52]	@ (801b614 <std+0x64>)
 801b5e0:	6323      	str	r3, [r4, #48]	@ 0x30
 801b5e2:	4b0d      	ldr	r3, [pc, #52]	@ (801b618 <std+0x68>)
 801b5e4:	6224      	str	r4, [r4, #32]
 801b5e6:	429c      	cmp	r4, r3
 801b5e8:	d006      	beq.n	801b5f8 <std+0x48>
 801b5ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b5ee:	4294      	cmp	r4, r2
 801b5f0:	d002      	beq.n	801b5f8 <std+0x48>
 801b5f2:	33d0      	adds	r3, #208	@ 0xd0
 801b5f4:	429c      	cmp	r4, r3
 801b5f6:	d105      	bne.n	801b604 <std+0x54>
 801b5f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b600:	f000 ba70 	b.w	801bae4 <__retarget_lock_init_recursive>
 801b604:	bd10      	pop	{r4, pc}
 801b606:	bf00      	nop
 801b608:	0801b825 	.word	0x0801b825
 801b60c:	0801b847 	.word	0x0801b847
 801b610:	0801b87f 	.word	0x0801b87f
 801b614:	0801b8a3 	.word	0x0801b8a3
 801b618:	24009be0 	.word	0x24009be0

0801b61c <stdio_exit_handler>:
 801b61c:	4a02      	ldr	r2, [pc, #8]	@ (801b628 <stdio_exit_handler+0xc>)
 801b61e:	4903      	ldr	r1, [pc, #12]	@ (801b62c <stdio_exit_handler+0x10>)
 801b620:	4803      	ldr	r0, [pc, #12]	@ (801b630 <stdio_exit_handler+0x14>)
 801b622:	f000 b869 	b.w	801b6f8 <_fwalk_sglue>
 801b626:	bf00      	nop
 801b628:	24000258 	.word	0x24000258
 801b62c:	0801c241 	.word	0x0801c241
 801b630:	24000268 	.word	0x24000268

0801b634 <cleanup_stdio>:
 801b634:	6841      	ldr	r1, [r0, #4]
 801b636:	4b0c      	ldr	r3, [pc, #48]	@ (801b668 <cleanup_stdio+0x34>)
 801b638:	4299      	cmp	r1, r3
 801b63a:	b510      	push	{r4, lr}
 801b63c:	4604      	mov	r4, r0
 801b63e:	d001      	beq.n	801b644 <cleanup_stdio+0x10>
 801b640:	f000 fdfe 	bl	801c240 <_fflush_r>
 801b644:	68a1      	ldr	r1, [r4, #8]
 801b646:	4b09      	ldr	r3, [pc, #36]	@ (801b66c <cleanup_stdio+0x38>)
 801b648:	4299      	cmp	r1, r3
 801b64a:	d002      	beq.n	801b652 <cleanup_stdio+0x1e>
 801b64c:	4620      	mov	r0, r4
 801b64e:	f000 fdf7 	bl	801c240 <_fflush_r>
 801b652:	68e1      	ldr	r1, [r4, #12]
 801b654:	4b06      	ldr	r3, [pc, #24]	@ (801b670 <cleanup_stdio+0x3c>)
 801b656:	4299      	cmp	r1, r3
 801b658:	d004      	beq.n	801b664 <cleanup_stdio+0x30>
 801b65a:	4620      	mov	r0, r4
 801b65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b660:	f000 bdee 	b.w	801c240 <_fflush_r>
 801b664:	bd10      	pop	{r4, pc}
 801b666:	bf00      	nop
 801b668:	24009be0 	.word	0x24009be0
 801b66c:	24009c48 	.word	0x24009c48
 801b670:	24009cb0 	.word	0x24009cb0

0801b674 <global_stdio_init.part.0>:
 801b674:	b510      	push	{r4, lr}
 801b676:	4b0b      	ldr	r3, [pc, #44]	@ (801b6a4 <global_stdio_init.part.0+0x30>)
 801b678:	4c0b      	ldr	r4, [pc, #44]	@ (801b6a8 <global_stdio_init.part.0+0x34>)
 801b67a:	4a0c      	ldr	r2, [pc, #48]	@ (801b6ac <global_stdio_init.part.0+0x38>)
 801b67c:	601a      	str	r2, [r3, #0]
 801b67e:	4620      	mov	r0, r4
 801b680:	2200      	movs	r2, #0
 801b682:	2104      	movs	r1, #4
 801b684:	f7ff ff94 	bl	801b5b0 <std>
 801b688:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b68c:	2201      	movs	r2, #1
 801b68e:	2109      	movs	r1, #9
 801b690:	f7ff ff8e 	bl	801b5b0 <std>
 801b694:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b698:	2202      	movs	r2, #2
 801b69a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b69e:	2112      	movs	r1, #18
 801b6a0:	f7ff bf86 	b.w	801b5b0 <std>
 801b6a4:	24009d18 	.word	0x24009d18
 801b6a8:	24009be0 	.word	0x24009be0
 801b6ac:	0801b61d 	.word	0x0801b61d

0801b6b0 <__sfp_lock_acquire>:
 801b6b0:	4801      	ldr	r0, [pc, #4]	@ (801b6b8 <__sfp_lock_acquire+0x8>)
 801b6b2:	f000 ba18 	b.w	801bae6 <__retarget_lock_acquire_recursive>
 801b6b6:	bf00      	nop
 801b6b8:	24009d21 	.word	0x24009d21

0801b6bc <__sfp_lock_release>:
 801b6bc:	4801      	ldr	r0, [pc, #4]	@ (801b6c4 <__sfp_lock_release+0x8>)
 801b6be:	f000 ba13 	b.w	801bae8 <__retarget_lock_release_recursive>
 801b6c2:	bf00      	nop
 801b6c4:	24009d21 	.word	0x24009d21

0801b6c8 <__sinit>:
 801b6c8:	b510      	push	{r4, lr}
 801b6ca:	4604      	mov	r4, r0
 801b6cc:	f7ff fff0 	bl	801b6b0 <__sfp_lock_acquire>
 801b6d0:	6a23      	ldr	r3, [r4, #32]
 801b6d2:	b11b      	cbz	r3, 801b6dc <__sinit+0x14>
 801b6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b6d8:	f7ff bff0 	b.w	801b6bc <__sfp_lock_release>
 801b6dc:	4b04      	ldr	r3, [pc, #16]	@ (801b6f0 <__sinit+0x28>)
 801b6de:	6223      	str	r3, [r4, #32]
 801b6e0:	4b04      	ldr	r3, [pc, #16]	@ (801b6f4 <__sinit+0x2c>)
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d1f5      	bne.n	801b6d4 <__sinit+0xc>
 801b6e8:	f7ff ffc4 	bl	801b674 <global_stdio_init.part.0>
 801b6ec:	e7f2      	b.n	801b6d4 <__sinit+0xc>
 801b6ee:	bf00      	nop
 801b6f0:	0801b635 	.word	0x0801b635
 801b6f4:	24009d18 	.word	0x24009d18

0801b6f8 <_fwalk_sglue>:
 801b6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b6fc:	4607      	mov	r7, r0
 801b6fe:	4688      	mov	r8, r1
 801b700:	4614      	mov	r4, r2
 801b702:	2600      	movs	r6, #0
 801b704:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b708:	f1b9 0901 	subs.w	r9, r9, #1
 801b70c:	d505      	bpl.n	801b71a <_fwalk_sglue+0x22>
 801b70e:	6824      	ldr	r4, [r4, #0]
 801b710:	2c00      	cmp	r4, #0
 801b712:	d1f7      	bne.n	801b704 <_fwalk_sglue+0xc>
 801b714:	4630      	mov	r0, r6
 801b716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b71a:	89ab      	ldrh	r3, [r5, #12]
 801b71c:	2b01      	cmp	r3, #1
 801b71e:	d907      	bls.n	801b730 <_fwalk_sglue+0x38>
 801b720:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b724:	3301      	adds	r3, #1
 801b726:	d003      	beq.n	801b730 <_fwalk_sglue+0x38>
 801b728:	4629      	mov	r1, r5
 801b72a:	4638      	mov	r0, r7
 801b72c:	47c0      	blx	r8
 801b72e:	4306      	orrs	r6, r0
 801b730:	3568      	adds	r5, #104	@ 0x68
 801b732:	e7e9      	b.n	801b708 <_fwalk_sglue+0x10>

0801b734 <iprintf>:
 801b734:	b40f      	push	{r0, r1, r2, r3}
 801b736:	b507      	push	{r0, r1, r2, lr}
 801b738:	4906      	ldr	r1, [pc, #24]	@ (801b754 <iprintf+0x20>)
 801b73a:	ab04      	add	r3, sp, #16
 801b73c:	6808      	ldr	r0, [r1, #0]
 801b73e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b742:	6881      	ldr	r1, [r0, #8]
 801b744:	9301      	str	r3, [sp, #4]
 801b746:	f000 fa53 	bl	801bbf0 <_vfiprintf_r>
 801b74a:	b003      	add	sp, #12
 801b74c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b750:	b004      	add	sp, #16
 801b752:	4770      	bx	lr
 801b754:	24000264 	.word	0x24000264

0801b758 <putchar>:
 801b758:	4b02      	ldr	r3, [pc, #8]	@ (801b764 <putchar+0xc>)
 801b75a:	4601      	mov	r1, r0
 801b75c:	6818      	ldr	r0, [r3, #0]
 801b75e:	6882      	ldr	r2, [r0, #8]
 801b760:	f000 bdf8 	b.w	801c354 <_putc_r>
 801b764:	24000264 	.word	0x24000264

0801b768 <_puts_r>:
 801b768:	6a03      	ldr	r3, [r0, #32]
 801b76a:	b570      	push	{r4, r5, r6, lr}
 801b76c:	6884      	ldr	r4, [r0, #8]
 801b76e:	4605      	mov	r5, r0
 801b770:	460e      	mov	r6, r1
 801b772:	b90b      	cbnz	r3, 801b778 <_puts_r+0x10>
 801b774:	f7ff ffa8 	bl	801b6c8 <__sinit>
 801b778:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b77a:	07db      	lsls	r3, r3, #31
 801b77c:	d405      	bmi.n	801b78a <_puts_r+0x22>
 801b77e:	89a3      	ldrh	r3, [r4, #12]
 801b780:	0598      	lsls	r0, r3, #22
 801b782:	d402      	bmi.n	801b78a <_puts_r+0x22>
 801b784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b786:	f000 f9ae 	bl	801bae6 <__retarget_lock_acquire_recursive>
 801b78a:	89a3      	ldrh	r3, [r4, #12]
 801b78c:	0719      	lsls	r1, r3, #28
 801b78e:	d502      	bpl.n	801b796 <_puts_r+0x2e>
 801b790:	6923      	ldr	r3, [r4, #16]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d135      	bne.n	801b802 <_puts_r+0x9a>
 801b796:	4621      	mov	r1, r4
 801b798:	4628      	mov	r0, r5
 801b79a:	f000 f8c5 	bl	801b928 <__swsetup_r>
 801b79e:	b380      	cbz	r0, 801b802 <_puts_r+0x9a>
 801b7a0:	f04f 35ff 	mov.w	r5, #4294967295
 801b7a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b7a6:	07da      	lsls	r2, r3, #31
 801b7a8:	d405      	bmi.n	801b7b6 <_puts_r+0x4e>
 801b7aa:	89a3      	ldrh	r3, [r4, #12]
 801b7ac:	059b      	lsls	r3, r3, #22
 801b7ae:	d402      	bmi.n	801b7b6 <_puts_r+0x4e>
 801b7b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b7b2:	f000 f999 	bl	801bae8 <__retarget_lock_release_recursive>
 801b7b6:	4628      	mov	r0, r5
 801b7b8:	bd70      	pop	{r4, r5, r6, pc}
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	da04      	bge.n	801b7c8 <_puts_r+0x60>
 801b7be:	69a2      	ldr	r2, [r4, #24]
 801b7c0:	429a      	cmp	r2, r3
 801b7c2:	dc17      	bgt.n	801b7f4 <_puts_r+0x8c>
 801b7c4:	290a      	cmp	r1, #10
 801b7c6:	d015      	beq.n	801b7f4 <_puts_r+0x8c>
 801b7c8:	6823      	ldr	r3, [r4, #0]
 801b7ca:	1c5a      	adds	r2, r3, #1
 801b7cc:	6022      	str	r2, [r4, #0]
 801b7ce:	7019      	strb	r1, [r3, #0]
 801b7d0:	68a3      	ldr	r3, [r4, #8]
 801b7d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b7d6:	3b01      	subs	r3, #1
 801b7d8:	60a3      	str	r3, [r4, #8]
 801b7da:	2900      	cmp	r1, #0
 801b7dc:	d1ed      	bne.n	801b7ba <_puts_r+0x52>
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	da11      	bge.n	801b806 <_puts_r+0x9e>
 801b7e2:	4622      	mov	r2, r4
 801b7e4:	210a      	movs	r1, #10
 801b7e6:	4628      	mov	r0, r5
 801b7e8:	f000 f85f 	bl	801b8aa <__swbuf_r>
 801b7ec:	3001      	adds	r0, #1
 801b7ee:	d0d7      	beq.n	801b7a0 <_puts_r+0x38>
 801b7f0:	250a      	movs	r5, #10
 801b7f2:	e7d7      	b.n	801b7a4 <_puts_r+0x3c>
 801b7f4:	4622      	mov	r2, r4
 801b7f6:	4628      	mov	r0, r5
 801b7f8:	f000 f857 	bl	801b8aa <__swbuf_r>
 801b7fc:	3001      	adds	r0, #1
 801b7fe:	d1e7      	bne.n	801b7d0 <_puts_r+0x68>
 801b800:	e7ce      	b.n	801b7a0 <_puts_r+0x38>
 801b802:	3e01      	subs	r6, #1
 801b804:	e7e4      	b.n	801b7d0 <_puts_r+0x68>
 801b806:	6823      	ldr	r3, [r4, #0]
 801b808:	1c5a      	adds	r2, r3, #1
 801b80a:	6022      	str	r2, [r4, #0]
 801b80c:	220a      	movs	r2, #10
 801b80e:	701a      	strb	r2, [r3, #0]
 801b810:	e7ee      	b.n	801b7f0 <_puts_r+0x88>
	...

0801b814 <puts>:
 801b814:	4b02      	ldr	r3, [pc, #8]	@ (801b820 <puts+0xc>)
 801b816:	4601      	mov	r1, r0
 801b818:	6818      	ldr	r0, [r3, #0]
 801b81a:	f7ff bfa5 	b.w	801b768 <_puts_r>
 801b81e:	bf00      	nop
 801b820:	24000264 	.word	0x24000264

0801b824 <__sread>:
 801b824:	b510      	push	{r4, lr}
 801b826:	460c      	mov	r4, r1
 801b828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b82c:	f000 f8fc 	bl	801ba28 <_read_r>
 801b830:	2800      	cmp	r0, #0
 801b832:	bfab      	itete	ge
 801b834:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b836:	89a3      	ldrhlt	r3, [r4, #12]
 801b838:	181b      	addge	r3, r3, r0
 801b83a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b83e:	bfac      	ite	ge
 801b840:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b842:	81a3      	strhlt	r3, [r4, #12]
 801b844:	bd10      	pop	{r4, pc}

0801b846 <__swrite>:
 801b846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b84a:	461f      	mov	r7, r3
 801b84c:	898b      	ldrh	r3, [r1, #12]
 801b84e:	05db      	lsls	r3, r3, #23
 801b850:	4605      	mov	r5, r0
 801b852:	460c      	mov	r4, r1
 801b854:	4616      	mov	r6, r2
 801b856:	d505      	bpl.n	801b864 <__swrite+0x1e>
 801b858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b85c:	2302      	movs	r3, #2
 801b85e:	2200      	movs	r2, #0
 801b860:	f000 f8d0 	bl	801ba04 <_lseek_r>
 801b864:	89a3      	ldrh	r3, [r4, #12]
 801b866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b86a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b86e:	81a3      	strh	r3, [r4, #12]
 801b870:	4632      	mov	r2, r6
 801b872:	463b      	mov	r3, r7
 801b874:	4628      	mov	r0, r5
 801b876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b87a:	f000 b8f7 	b.w	801ba6c <_write_r>

0801b87e <__sseek>:
 801b87e:	b510      	push	{r4, lr}
 801b880:	460c      	mov	r4, r1
 801b882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b886:	f000 f8bd 	bl	801ba04 <_lseek_r>
 801b88a:	1c43      	adds	r3, r0, #1
 801b88c:	89a3      	ldrh	r3, [r4, #12]
 801b88e:	bf15      	itete	ne
 801b890:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b892:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b896:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b89a:	81a3      	strheq	r3, [r4, #12]
 801b89c:	bf18      	it	ne
 801b89e:	81a3      	strhne	r3, [r4, #12]
 801b8a0:	bd10      	pop	{r4, pc}

0801b8a2 <__sclose>:
 801b8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8a6:	f000 b89d 	b.w	801b9e4 <_close_r>

0801b8aa <__swbuf_r>:
 801b8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8ac:	460e      	mov	r6, r1
 801b8ae:	4614      	mov	r4, r2
 801b8b0:	4605      	mov	r5, r0
 801b8b2:	b118      	cbz	r0, 801b8bc <__swbuf_r+0x12>
 801b8b4:	6a03      	ldr	r3, [r0, #32]
 801b8b6:	b90b      	cbnz	r3, 801b8bc <__swbuf_r+0x12>
 801b8b8:	f7ff ff06 	bl	801b6c8 <__sinit>
 801b8bc:	69a3      	ldr	r3, [r4, #24]
 801b8be:	60a3      	str	r3, [r4, #8]
 801b8c0:	89a3      	ldrh	r3, [r4, #12]
 801b8c2:	071a      	lsls	r2, r3, #28
 801b8c4:	d501      	bpl.n	801b8ca <__swbuf_r+0x20>
 801b8c6:	6923      	ldr	r3, [r4, #16]
 801b8c8:	b943      	cbnz	r3, 801b8dc <__swbuf_r+0x32>
 801b8ca:	4621      	mov	r1, r4
 801b8cc:	4628      	mov	r0, r5
 801b8ce:	f000 f82b 	bl	801b928 <__swsetup_r>
 801b8d2:	b118      	cbz	r0, 801b8dc <__swbuf_r+0x32>
 801b8d4:	f04f 37ff 	mov.w	r7, #4294967295
 801b8d8:	4638      	mov	r0, r7
 801b8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b8dc:	6823      	ldr	r3, [r4, #0]
 801b8de:	6922      	ldr	r2, [r4, #16]
 801b8e0:	1a98      	subs	r0, r3, r2
 801b8e2:	6963      	ldr	r3, [r4, #20]
 801b8e4:	b2f6      	uxtb	r6, r6
 801b8e6:	4283      	cmp	r3, r0
 801b8e8:	4637      	mov	r7, r6
 801b8ea:	dc05      	bgt.n	801b8f8 <__swbuf_r+0x4e>
 801b8ec:	4621      	mov	r1, r4
 801b8ee:	4628      	mov	r0, r5
 801b8f0:	f000 fca6 	bl	801c240 <_fflush_r>
 801b8f4:	2800      	cmp	r0, #0
 801b8f6:	d1ed      	bne.n	801b8d4 <__swbuf_r+0x2a>
 801b8f8:	68a3      	ldr	r3, [r4, #8]
 801b8fa:	3b01      	subs	r3, #1
 801b8fc:	60a3      	str	r3, [r4, #8]
 801b8fe:	6823      	ldr	r3, [r4, #0]
 801b900:	1c5a      	adds	r2, r3, #1
 801b902:	6022      	str	r2, [r4, #0]
 801b904:	701e      	strb	r6, [r3, #0]
 801b906:	6962      	ldr	r2, [r4, #20]
 801b908:	1c43      	adds	r3, r0, #1
 801b90a:	429a      	cmp	r2, r3
 801b90c:	d004      	beq.n	801b918 <__swbuf_r+0x6e>
 801b90e:	89a3      	ldrh	r3, [r4, #12]
 801b910:	07db      	lsls	r3, r3, #31
 801b912:	d5e1      	bpl.n	801b8d8 <__swbuf_r+0x2e>
 801b914:	2e0a      	cmp	r6, #10
 801b916:	d1df      	bne.n	801b8d8 <__swbuf_r+0x2e>
 801b918:	4621      	mov	r1, r4
 801b91a:	4628      	mov	r0, r5
 801b91c:	f000 fc90 	bl	801c240 <_fflush_r>
 801b920:	2800      	cmp	r0, #0
 801b922:	d0d9      	beq.n	801b8d8 <__swbuf_r+0x2e>
 801b924:	e7d6      	b.n	801b8d4 <__swbuf_r+0x2a>
	...

0801b928 <__swsetup_r>:
 801b928:	b538      	push	{r3, r4, r5, lr}
 801b92a:	4b29      	ldr	r3, [pc, #164]	@ (801b9d0 <__swsetup_r+0xa8>)
 801b92c:	4605      	mov	r5, r0
 801b92e:	6818      	ldr	r0, [r3, #0]
 801b930:	460c      	mov	r4, r1
 801b932:	b118      	cbz	r0, 801b93c <__swsetup_r+0x14>
 801b934:	6a03      	ldr	r3, [r0, #32]
 801b936:	b90b      	cbnz	r3, 801b93c <__swsetup_r+0x14>
 801b938:	f7ff fec6 	bl	801b6c8 <__sinit>
 801b93c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b940:	0719      	lsls	r1, r3, #28
 801b942:	d422      	bmi.n	801b98a <__swsetup_r+0x62>
 801b944:	06da      	lsls	r2, r3, #27
 801b946:	d407      	bmi.n	801b958 <__swsetup_r+0x30>
 801b948:	2209      	movs	r2, #9
 801b94a:	602a      	str	r2, [r5, #0]
 801b94c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b950:	81a3      	strh	r3, [r4, #12]
 801b952:	f04f 30ff 	mov.w	r0, #4294967295
 801b956:	e033      	b.n	801b9c0 <__swsetup_r+0x98>
 801b958:	0758      	lsls	r0, r3, #29
 801b95a:	d512      	bpl.n	801b982 <__swsetup_r+0x5a>
 801b95c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b95e:	b141      	cbz	r1, 801b972 <__swsetup_r+0x4a>
 801b960:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b964:	4299      	cmp	r1, r3
 801b966:	d002      	beq.n	801b96e <__swsetup_r+0x46>
 801b968:	4628      	mov	r0, r5
 801b96a:	f000 f8cd 	bl	801bb08 <_free_r>
 801b96e:	2300      	movs	r3, #0
 801b970:	6363      	str	r3, [r4, #52]	@ 0x34
 801b972:	89a3      	ldrh	r3, [r4, #12]
 801b974:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b978:	81a3      	strh	r3, [r4, #12]
 801b97a:	2300      	movs	r3, #0
 801b97c:	6063      	str	r3, [r4, #4]
 801b97e:	6923      	ldr	r3, [r4, #16]
 801b980:	6023      	str	r3, [r4, #0]
 801b982:	89a3      	ldrh	r3, [r4, #12]
 801b984:	f043 0308 	orr.w	r3, r3, #8
 801b988:	81a3      	strh	r3, [r4, #12]
 801b98a:	6923      	ldr	r3, [r4, #16]
 801b98c:	b94b      	cbnz	r3, 801b9a2 <__swsetup_r+0x7a>
 801b98e:	89a3      	ldrh	r3, [r4, #12]
 801b990:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b998:	d003      	beq.n	801b9a2 <__swsetup_r+0x7a>
 801b99a:	4621      	mov	r1, r4
 801b99c:	4628      	mov	r0, r5
 801b99e:	f000 fc9d 	bl	801c2dc <__smakebuf_r>
 801b9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b9a6:	f013 0201 	ands.w	r2, r3, #1
 801b9aa:	d00a      	beq.n	801b9c2 <__swsetup_r+0x9a>
 801b9ac:	2200      	movs	r2, #0
 801b9ae:	60a2      	str	r2, [r4, #8]
 801b9b0:	6962      	ldr	r2, [r4, #20]
 801b9b2:	4252      	negs	r2, r2
 801b9b4:	61a2      	str	r2, [r4, #24]
 801b9b6:	6922      	ldr	r2, [r4, #16]
 801b9b8:	b942      	cbnz	r2, 801b9cc <__swsetup_r+0xa4>
 801b9ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b9be:	d1c5      	bne.n	801b94c <__swsetup_r+0x24>
 801b9c0:	bd38      	pop	{r3, r4, r5, pc}
 801b9c2:	0799      	lsls	r1, r3, #30
 801b9c4:	bf58      	it	pl
 801b9c6:	6962      	ldrpl	r2, [r4, #20]
 801b9c8:	60a2      	str	r2, [r4, #8]
 801b9ca:	e7f4      	b.n	801b9b6 <__swsetup_r+0x8e>
 801b9cc:	2000      	movs	r0, #0
 801b9ce:	e7f7      	b.n	801b9c0 <__swsetup_r+0x98>
 801b9d0:	24000264 	.word	0x24000264

0801b9d4 <memset>:
 801b9d4:	4402      	add	r2, r0
 801b9d6:	4603      	mov	r3, r0
 801b9d8:	4293      	cmp	r3, r2
 801b9da:	d100      	bne.n	801b9de <memset+0xa>
 801b9dc:	4770      	bx	lr
 801b9de:	f803 1b01 	strb.w	r1, [r3], #1
 801b9e2:	e7f9      	b.n	801b9d8 <memset+0x4>

0801b9e4 <_close_r>:
 801b9e4:	b538      	push	{r3, r4, r5, lr}
 801b9e6:	4d06      	ldr	r5, [pc, #24]	@ (801ba00 <_close_r+0x1c>)
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	4604      	mov	r4, r0
 801b9ec:	4608      	mov	r0, r1
 801b9ee:	602b      	str	r3, [r5, #0]
 801b9f0:	f7e6 f96d 	bl	8001cce <_close>
 801b9f4:	1c43      	adds	r3, r0, #1
 801b9f6:	d102      	bne.n	801b9fe <_close_r+0x1a>
 801b9f8:	682b      	ldr	r3, [r5, #0]
 801b9fa:	b103      	cbz	r3, 801b9fe <_close_r+0x1a>
 801b9fc:	6023      	str	r3, [r4, #0]
 801b9fe:	bd38      	pop	{r3, r4, r5, pc}
 801ba00:	24009d1c 	.word	0x24009d1c

0801ba04 <_lseek_r>:
 801ba04:	b538      	push	{r3, r4, r5, lr}
 801ba06:	4d07      	ldr	r5, [pc, #28]	@ (801ba24 <_lseek_r+0x20>)
 801ba08:	4604      	mov	r4, r0
 801ba0a:	4608      	mov	r0, r1
 801ba0c:	4611      	mov	r1, r2
 801ba0e:	2200      	movs	r2, #0
 801ba10:	602a      	str	r2, [r5, #0]
 801ba12:	461a      	mov	r2, r3
 801ba14:	f7e6 f982 	bl	8001d1c <_lseek>
 801ba18:	1c43      	adds	r3, r0, #1
 801ba1a:	d102      	bne.n	801ba22 <_lseek_r+0x1e>
 801ba1c:	682b      	ldr	r3, [r5, #0]
 801ba1e:	b103      	cbz	r3, 801ba22 <_lseek_r+0x1e>
 801ba20:	6023      	str	r3, [r4, #0]
 801ba22:	bd38      	pop	{r3, r4, r5, pc}
 801ba24:	24009d1c 	.word	0x24009d1c

0801ba28 <_read_r>:
 801ba28:	b538      	push	{r3, r4, r5, lr}
 801ba2a:	4d07      	ldr	r5, [pc, #28]	@ (801ba48 <_read_r+0x20>)
 801ba2c:	4604      	mov	r4, r0
 801ba2e:	4608      	mov	r0, r1
 801ba30:	4611      	mov	r1, r2
 801ba32:	2200      	movs	r2, #0
 801ba34:	602a      	str	r2, [r5, #0]
 801ba36:	461a      	mov	r2, r3
 801ba38:	f7e6 f910 	bl	8001c5c <_read>
 801ba3c:	1c43      	adds	r3, r0, #1
 801ba3e:	d102      	bne.n	801ba46 <_read_r+0x1e>
 801ba40:	682b      	ldr	r3, [r5, #0]
 801ba42:	b103      	cbz	r3, 801ba46 <_read_r+0x1e>
 801ba44:	6023      	str	r3, [r4, #0]
 801ba46:	bd38      	pop	{r3, r4, r5, pc}
 801ba48:	24009d1c 	.word	0x24009d1c

0801ba4c <_sbrk_r>:
 801ba4c:	b538      	push	{r3, r4, r5, lr}
 801ba4e:	4d06      	ldr	r5, [pc, #24]	@ (801ba68 <_sbrk_r+0x1c>)
 801ba50:	2300      	movs	r3, #0
 801ba52:	4604      	mov	r4, r0
 801ba54:	4608      	mov	r0, r1
 801ba56:	602b      	str	r3, [r5, #0]
 801ba58:	f7e6 f96e 	bl	8001d38 <_sbrk>
 801ba5c:	1c43      	adds	r3, r0, #1
 801ba5e:	d102      	bne.n	801ba66 <_sbrk_r+0x1a>
 801ba60:	682b      	ldr	r3, [r5, #0]
 801ba62:	b103      	cbz	r3, 801ba66 <_sbrk_r+0x1a>
 801ba64:	6023      	str	r3, [r4, #0]
 801ba66:	bd38      	pop	{r3, r4, r5, pc}
 801ba68:	24009d1c 	.word	0x24009d1c

0801ba6c <_write_r>:
 801ba6c:	b538      	push	{r3, r4, r5, lr}
 801ba6e:	4d07      	ldr	r5, [pc, #28]	@ (801ba8c <_write_r+0x20>)
 801ba70:	4604      	mov	r4, r0
 801ba72:	4608      	mov	r0, r1
 801ba74:	4611      	mov	r1, r2
 801ba76:	2200      	movs	r2, #0
 801ba78:	602a      	str	r2, [r5, #0]
 801ba7a:	461a      	mov	r2, r3
 801ba7c:	f7e6 f90b 	bl	8001c96 <_write>
 801ba80:	1c43      	adds	r3, r0, #1
 801ba82:	d102      	bne.n	801ba8a <_write_r+0x1e>
 801ba84:	682b      	ldr	r3, [r5, #0]
 801ba86:	b103      	cbz	r3, 801ba8a <_write_r+0x1e>
 801ba88:	6023      	str	r3, [r4, #0]
 801ba8a:	bd38      	pop	{r3, r4, r5, pc}
 801ba8c:	24009d1c 	.word	0x24009d1c

0801ba90 <__errno>:
 801ba90:	4b01      	ldr	r3, [pc, #4]	@ (801ba98 <__errno+0x8>)
 801ba92:	6818      	ldr	r0, [r3, #0]
 801ba94:	4770      	bx	lr
 801ba96:	bf00      	nop
 801ba98:	24000264 	.word	0x24000264

0801ba9c <__libc_init_array>:
 801ba9c:	b570      	push	{r4, r5, r6, lr}
 801ba9e:	4d0d      	ldr	r5, [pc, #52]	@ (801bad4 <__libc_init_array+0x38>)
 801baa0:	4c0d      	ldr	r4, [pc, #52]	@ (801bad8 <__libc_init_array+0x3c>)
 801baa2:	1b64      	subs	r4, r4, r5
 801baa4:	10a4      	asrs	r4, r4, #2
 801baa6:	2600      	movs	r6, #0
 801baa8:	42a6      	cmp	r6, r4
 801baaa:	d109      	bne.n	801bac0 <__libc_init_array+0x24>
 801baac:	4d0b      	ldr	r5, [pc, #44]	@ (801badc <__libc_init_array+0x40>)
 801baae:	4c0c      	ldr	r4, [pc, #48]	@ (801bae0 <__libc_init_array+0x44>)
 801bab0:	f000 fca6 	bl	801c400 <_init>
 801bab4:	1b64      	subs	r4, r4, r5
 801bab6:	10a4      	asrs	r4, r4, #2
 801bab8:	2600      	movs	r6, #0
 801baba:	42a6      	cmp	r6, r4
 801babc:	d105      	bne.n	801baca <__libc_init_array+0x2e>
 801babe:	bd70      	pop	{r4, r5, r6, pc}
 801bac0:	f855 3b04 	ldr.w	r3, [r5], #4
 801bac4:	4798      	blx	r3
 801bac6:	3601      	adds	r6, #1
 801bac8:	e7ee      	b.n	801baa8 <__libc_init_array+0xc>
 801baca:	f855 3b04 	ldr.w	r3, [r5], #4
 801bace:	4798      	blx	r3
 801bad0:	3601      	adds	r6, #1
 801bad2:	e7f2      	b.n	801baba <__libc_init_array+0x1e>
 801bad4:	0801d7f0 	.word	0x0801d7f0
 801bad8:	0801d7f0 	.word	0x0801d7f0
 801badc:	0801d7f0 	.word	0x0801d7f0
 801bae0:	0801d7f4 	.word	0x0801d7f4

0801bae4 <__retarget_lock_init_recursive>:
 801bae4:	4770      	bx	lr

0801bae6 <__retarget_lock_acquire_recursive>:
 801bae6:	4770      	bx	lr

0801bae8 <__retarget_lock_release_recursive>:
 801bae8:	4770      	bx	lr

0801baea <memcpy>:
 801baea:	440a      	add	r2, r1
 801baec:	4291      	cmp	r1, r2
 801baee:	f100 33ff 	add.w	r3, r0, #4294967295
 801baf2:	d100      	bne.n	801baf6 <memcpy+0xc>
 801baf4:	4770      	bx	lr
 801baf6:	b510      	push	{r4, lr}
 801baf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bafc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bb00:	4291      	cmp	r1, r2
 801bb02:	d1f9      	bne.n	801baf8 <memcpy+0xe>
 801bb04:	bd10      	pop	{r4, pc}
	...

0801bb08 <_free_r>:
 801bb08:	b538      	push	{r3, r4, r5, lr}
 801bb0a:	4605      	mov	r5, r0
 801bb0c:	2900      	cmp	r1, #0
 801bb0e:	d041      	beq.n	801bb94 <_free_r+0x8c>
 801bb10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bb14:	1f0c      	subs	r4, r1, #4
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	bfb8      	it	lt
 801bb1a:	18e4      	addlt	r4, r4, r3
 801bb1c:	f7ff fd3c 	bl	801b598 <__malloc_lock>
 801bb20:	4a1d      	ldr	r2, [pc, #116]	@ (801bb98 <_free_r+0x90>)
 801bb22:	6813      	ldr	r3, [r2, #0]
 801bb24:	b933      	cbnz	r3, 801bb34 <_free_r+0x2c>
 801bb26:	6063      	str	r3, [r4, #4]
 801bb28:	6014      	str	r4, [r2, #0]
 801bb2a:	4628      	mov	r0, r5
 801bb2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bb30:	f7ff bd38 	b.w	801b5a4 <__malloc_unlock>
 801bb34:	42a3      	cmp	r3, r4
 801bb36:	d908      	bls.n	801bb4a <_free_r+0x42>
 801bb38:	6820      	ldr	r0, [r4, #0]
 801bb3a:	1821      	adds	r1, r4, r0
 801bb3c:	428b      	cmp	r3, r1
 801bb3e:	bf01      	itttt	eq
 801bb40:	6819      	ldreq	r1, [r3, #0]
 801bb42:	685b      	ldreq	r3, [r3, #4]
 801bb44:	1809      	addeq	r1, r1, r0
 801bb46:	6021      	streq	r1, [r4, #0]
 801bb48:	e7ed      	b.n	801bb26 <_free_r+0x1e>
 801bb4a:	461a      	mov	r2, r3
 801bb4c:	685b      	ldr	r3, [r3, #4]
 801bb4e:	b10b      	cbz	r3, 801bb54 <_free_r+0x4c>
 801bb50:	42a3      	cmp	r3, r4
 801bb52:	d9fa      	bls.n	801bb4a <_free_r+0x42>
 801bb54:	6811      	ldr	r1, [r2, #0]
 801bb56:	1850      	adds	r0, r2, r1
 801bb58:	42a0      	cmp	r0, r4
 801bb5a:	d10b      	bne.n	801bb74 <_free_r+0x6c>
 801bb5c:	6820      	ldr	r0, [r4, #0]
 801bb5e:	4401      	add	r1, r0
 801bb60:	1850      	adds	r0, r2, r1
 801bb62:	4283      	cmp	r3, r0
 801bb64:	6011      	str	r1, [r2, #0]
 801bb66:	d1e0      	bne.n	801bb2a <_free_r+0x22>
 801bb68:	6818      	ldr	r0, [r3, #0]
 801bb6a:	685b      	ldr	r3, [r3, #4]
 801bb6c:	6053      	str	r3, [r2, #4]
 801bb6e:	4408      	add	r0, r1
 801bb70:	6010      	str	r0, [r2, #0]
 801bb72:	e7da      	b.n	801bb2a <_free_r+0x22>
 801bb74:	d902      	bls.n	801bb7c <_free_r+0x74>
 801bb76:	230c      	movs	r3, #12
 801bb78:	602b      	str	r3, [r5, #0]
 801bb7a:	e7d6      	b.n	801bb2a <_free_r+0x22>
 801bb7c:	6820      	ldr	r0, [r4, #0]
 801bb7e:	1821      	adds	r1, r4, r0
 801bb80:	428b      	cmp	r3, r1
 801bb82:	bf04      	itt	eq
 801bb84:	6819      	ldreq	r1, [r3, #0]
 801bb86:	685b      	ldreq	r3, [r3, #4]
 801bb88:	6063      	str	r3, [r4, #4]
 801bb8a:	bf04      	itt	eq
 801bb8c:	1809      	addeq	r1, r1, r0
 801bb8e:	6021      	streq	r1, [r4, #0]
 801bb90:	6054      	str	r4, [r2, #4]
 801bb92:	e7ca      	b.n	801bb2a <_free_r+0x22>
 801bb94:	bd38      	pop	{r3, r4, r5, pc}
 801bb96:	bf00      	nop
 801bb98:	24009bdc 	.word	0x24009bdc

0801bb9c <__sfputc_r>:
 801bb9c:	6893      	ldr	r3, [r2, #8]
 801bb9e:	3b01      	subs	r3, #1
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	b410      	push	{r4}
 801bba4:	6093      	str	r3, [r2, #8]
 801bba6:	da08      	bge.n	801bbba <__sfputc_r+0x1e>
 801bba8:	6994      	ldr	r4, [r2, #24]
 801bbaa:	42a3      	cmp	r3, r4
 801bbac:	db01      	blt.n	801bbb2 <__sfputc_r+0x16>
 801bbae:	290a      	cmp	r1, #10
 801bbb0:	d103      	bne.n	801bbba <__sfputc_r+0x1e>
 801bbb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bbb6:	f7ff be78 	b.w	801b8aa <__swbuf_r>
 801bbba:	6813      	ldr	r3, [r2, #0]
 801bbbc:	1c58      	adds	r0, r3, #1
 801bbbe:	6010      	str	r0, [r2, #0]
 801bbc0:	7019      	strb	r1, [r3, #0]
 801bbc2:	4608      	mov	r0, r1
 801bbc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bbc8:	4770      	bx	lr

0801bbca <__sfputs_r>:
 801bbca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbcc:	4606      	mov	r6, r0
 801bbce:	460f      	mov	r7, r1
 801bbd0:	4614      	mov	r4, r2
 801bbd2:	18d5      	adds	r5, r2, r3
 801bbd4:	42ac      	cmp	r4, r5
 801bbd6:	d101      	bne.n	801bbdc <__sfputs_r+0x12>
 801bbd8:	2000      	movs	r0, #0
 801bbda:	e007      	b.n	801bbec <__sfputs_r+0x22>
 801bbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bbe0:	463a      	mov	r2, r7
 801bbe2:	4630      	mov	r0, r6
 801bbe4:	f7ff ffda 	bl	801bb9c <__sfputc_r>
 801bbe8:	1c43      	adds	r3, r0, #1
 801bbea:	d1f3      	bne.n	801bbd4 <__sfputs_r+0xa>
 801bbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bbf0 <_vfiprintf_r>:
 801bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbf4:	460d      	mov	r5, r1
 801bbf6:	b09d      	sub	sp, #116	@ 0x74
 801bbf8:	4614      	mov	r4, r2
 801bbfa:	4698      	mov	r8, r3
 801bbfc:	4606      	mov	r6, r0
 801bbfe:	b118      	cbz	r0, 801bc08 <_vfiprintf_r+0x18>
 801bc00:	6a03      	ldr	r3, [r0, #32]
 801bc02:	b90b      	cbnz	r3, 801bc08 <_vfiprintf_r+0x18>
 801bc04:	f7ff fd60 	bl	801b6c8 <__sinit>
 801bc08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bc0a:	07d9      	lsls	r1, r3, #31
 801bc0c:	d405      	bmi.n	801bc1a <_vfiprintf_r+0x2a>
 801bc0e:	89ab      	ldrh	r3, [r5, #12]
 801bc10:	059a      	lsls	r2, r3, #22
 801bc12:	d402      	bmi.n	801bc1a <_vfiprintf_r+0x2a>
 801bc14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bc16:	f7ff ff66 	bl	801bae6 <__retarget_lock_acquire_recursive>
 801bc1a:	89ab      	ldrh	r3, [r5, #12]
 801bc1c:	071b      	lsls	r3, r3, #28
 801bc1e:	d501      	bpl.n	801bc24 <_vfiprintf_r+0x34>
 801bc20:	692b      	ldr	r3, [r5, #16]
 801bc22:	b99b      	cbnz	r3, 801bc4c <_vfiprintf_r+0x5c>
 801bc24:	4629      	mov	r1, r5
 801bc26:	4630      	mov	r0, r6
 801bc28:	f7ff fe7e 	bl	801b928 <__swsetup_r>
 801bc2c:	b170      	cbz	r0, 801bc4c <_vfiprintf_r+0x5c>
 801bc2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bc30:	07dc      	lsls	r4, r3, #31
 801bc32:	d504      	bpl.n	801bc3e <_vfiprintf_r+0x4e>
 801bc34:	f04f 30ff 	mov.w	r0, #4294967295
 801bc38:	b01d      	add	sp, #116	@ 0x74
 801bc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc3e:	89ab      	ldrh	r3, [r5, #12]
 801bc40:	0598      	lsls	r0, r3, #22
 801bc42:	d4f7      	bmi.n	801bc34 <_vfiprintf_r+0x44>
 801bc44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bc46:	f7ff ff4f 	bl	801bae8 <__retarget_lock_release_recursive>
 801bc4a:	e7f3      	b.n	801bc34 <_vfiprintf_r+0x44>
 801bc4c:	2300      	movs	r3, #0
 801bc4e:	9309      	str	r3, [sp, #36]	@ 0x24
 801bc50:	2320      	movs	r3, #32
 801bc52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bc56:	f8cd 800c 	str.w	r8, [sp, #12]
 801bc5a:	2330      	movs	r3, #48	@ 0x30
 801bc5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801be0c <_vfiprintf_r+0x21c>
 801bc60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bc64:	f04f 0901 	mov.w	r9, #1
 801bc68:	4623      	mov	r3, r4
 801bc6a:	469a      	mov	sl, r3
 801bc6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bc70:	b10a      	cbz	r2, 801bc76 <_vfiprintf_r+0x86>
 801bc72:	2a25      	cmp	r2, #37	@ 0x25
 801bc74:	d1f9      	bne.n	801bc6a <_vfiprintf_r+0x7a>
 801bc76:	ebba 0b04 	subs.w	fp, sl, r4
 801bc7a:	d00b      	beq.n	801bc94 <_vfiprintf_r+0xa4>
 801bc7c:	465b      	mov	r3, fp
 801bc7e:	4622      	mov	r2, r4
 801bc80:	4629      	mov	r1, r5
 801bc82:	4630      	mov	r0, r6
 801bc84:	f7ff ffa1 	bl	801bbca <__sfputs_r>
 801bc88:	3001      	adds	r0, #1
 801bc8a:	f000 80a7 	beq.w	801bddc <_vfiprintf_r+0x1ec>
 801bc8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bc90:	445a      	add	r2, fp
 801bc92:	9209      	str	r2, [sp, #36]	@ 0x24
 801bc94:	f89a 3000 	ldrb.w	r3, [sl]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	f000 809f 	beq.w	801bddc <_vfiprintf_r+0x1ec>
 801bc9e:	2300      	movs	r3, #0
 801bca0:	f04f 32ff 	mov.w	r2, #4294967295
 801bca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bca8:	f10a 0a01 	add.w	sl, sl, #1
 801bcac:	9304      	str	r3, [sp, #16]
 801bcae:	9307      	str	r3, [sp, #28]
 801bcb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bcb4:	931a      	str	r3, [sp, #104]	@ 0x68
 801bcb6:	4654      	mov	r4, sl
 801bcb8:	2205      	movs	r2, #5
 801bcba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcbe:	4853      	ldr	r0, [pc, #332]	@ (801be0c <_vfiprintf_r+0x21c>)
 801bcc0:	f7e4 fb0e 	bl	80002e0 <memchr>
 801bcc4:	9a04      	ldr	r2, [sp, #16]
 801bcc6:	b9d8      	cbnz	r0, 801bd00 <_vfiprintf_r+0x110>
 801bcc8:	06d1      	lsls	r1, r2, #27
 801bcca:	bf44      	itt	mi
 801bccc:	2320      	movmi	r3, #32
 801bcce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bcd2:	0713      	lsls	r3, r2, #28
 801bcd4:	bf44      	itt	mi
 801bcd6:	232b      	movmi	r3, #43	@ 0x2b
 801bcd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bcdc:	f89a 3000 	ldrb.w	r3, [sl]
 801bce0:	2b2a      	cmp	r3, #42	@ 0x2a
 801bce2:	d015      	beq.n	801bd10 <_vfiprintf_r+0x120>
 801bce4:	9a07      	ldr	r2, [sp, #28]
 801bce6:	4654      	mov	r4, sl
 801bce8:	2000      	movs	r0, #0
 801bcea:	f04f 0c0a 	mov.w	ip, #10
 801bcee:	4621      	mov	r1, r4
 801bcf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bcf4:	3b30      	subs	r3, #48	@ 0x30
 801bcf6:	2b09      	cmp	r3, #9
 801bcf8:	d94b      	bls.n	801bd92 <_vfiprintf_r+0x1a2>
 801bcfa:	b1b0      	cbz	r0, 801bd2a <_vfiprintf_r+0x13a>
 801bcfc:	9207      	str	r2, [sp, #28]
 801bcfe:	e014      	b.n	801bd2a <_vfiprintf_r+0x13a>
 801bd00:	eba0 0308 	sub.w	r3, r0, r8
 801bd04:	fa09 f303 	lsl.w	r3, r9, r3
 801bd08:	4313      	orrs	r3, r2
 801bd0a:	9304      	str	r3, [sp, #16]
 801bd0c:	46a2      	mov	sl, r4
 801bd0e:	e7d2      	b.n	801bcb6 <_vfiprintf_r+0xc6>
 801bd10:	9b03      	ldr	r3, [sp, #12]
 801bd12:	1d19      	adds	r1, r3, #4
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	9103      	str	r1, [sp, #12]
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	bfbb      	ittet	lt
 801bd1c:	425b      	neglt	r3, r3
 801bd1e:	f042 0202 	orrlt.w	r2, r2, #2
 801bd22:	9307      	strge	r3, [sp, #28]
 801bd24:	9307      	strlt	r3, [sp, #28]
 801bd26:	bfb8      	it	lt
 801bd28:	9204      	strlt	r2, [sp, #16]
 801bd2a:	7823      	ldrb	r3, [r4, #0]
 801bd2c:	2b2e      	cmp	r3, #46	@ 0x2e
 801bd2e:	d10a      	bne.n	801bd46 <_vfiprintf_r+0x156>
 801bd30:	7863      	ldrb	r3, [r4, #1]
 801bd32:	2b2a      	cmp	r3, #42	@ 0x2a
 801bd34:	d132      	bne.n	801bd9c <_vfiprintf_r+0x1ac>
 801bd36:	9b03      	ldr	r3, [sp, #12]
 801bd38:	1d1a      	adds	r2, r3, #4
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	9203      	str	r2, [sp, #12]
 801bd3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bd42:	3402      	adds	r4, #2
 801bd44:	9305      	str	r3, [sp, #20]
 801bd46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801be1c <_vfiprintf_r+0x22c>
 801bd4a:	7821      	ldrb	r1, [r4, #0]
 801bd4c:	2203      	movs	r2, #3
 801bd4e:	4650      	mov	r0, sl
 801bd50:	f7e4 fac6 	bl	80002e0 <memchr>
 801bd54:	b138      	cbz	r0, 801bd66 <_vfiprintf_r+0x176>
 801bd56:	9b04      	ldr	r3, [sp, #16]
 801bd58:	eba0 000a 	sub.w	r0, r0, sl
 801bd5c:	2240      	movs	r2, #64	@ 0x40
 801bd5e:	4082      	lsls	r2, r0
 801bd60:	4313      	orrs	r3, r2
 801bd62:	3401      	adds	r4, #1
 801bd64:	9304      	str	r3, [sp, #16]
 801bd66:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd6a:	4829      	ldr	r0, [pc, #164]	@ (801be10 <_vfiprintf_r+0x220>)
 801bd6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bd70:	2206      	movs	r2, #6
 801bd72:	f7e4 fab5 	bl	80002e0 <memchr>
 801bd76:	2800      	cmp	r0, #0
 801bd78:	d03f      	beq.n	801bdfa <_vfiprintf_r+0x20a>
 801bd7a:	4b26      	ldr	r3, [pc, #152]	@ (801be14 <_vfiprintf_r+0x224>)
 801bd7c:	bb1b      	cbnz	r3, 801bdc6 <_vfiprintf_r+0x1d6>
 801bd7e:	9b03      	ldr	r3, [sp, #12]
 801bd80:	3307      	adds	r3, #7
 801bd82:	f023 0307 	bic.w	r3, r3, #7
 801bd86:	3308      	adds	r3, #8
 801bd88:	9303      	str	r3, [sp, #12]
 801bd8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd8c:	443b      	add	r3, r7
 801bd8e:	9309      	str	r3, [sp, #36]	@ 0x24
 801bd90:	e76a      	b.n	801bc68 <_vfiprintf_r+0x78>
 801bd92:	fb0c 3202 	mla	r2, ip, r2, r3
 801bd96:	460c      	mov	r4, r1
 801bd98:	2001      	movs	r0, #1
 801bd9a:	e7a8      	b.n	801bcee <_vfiprintf_r+0xfe>
 801bd9c:	2300      	movs	r3, #0
 801bd9e:	3401      	adds	r4, #1
 801bda0:	9305      	str	r3, [sp, #20]
 801bda2:	4619      	mov	r1, r3
 801bda4:	f04f 0c0a 	mov.w	ip, #10
 801bda8:	4620      	mov	r0, r4
 801bdaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bdae:	3a30      	subs	r2, #48	@ 0x30
 801bdb0:	2a09      	cmp	r2, #9
 801bdb2:	d903      	bls.n	801bdbc <_vfiprintf_r+0x1cc>
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d0c6      	beq.n	801bd46 <_vfiprintf_r+0x156>
 801bdb8:	9105      	str	r1, [sp, #20]
 801bdba:	e7c4      	b.n	801bd46 <_vfiprintf_r+0x156>
 801bdbc:	fb0c 2101 	mla	r1, ip, r1, r2
 801bdc0:	4604      	mov	r4, r0
 801bdc2:	2301      	movs	r3, #1
 801bdc4:	e7f0      	b.n	801bda8 <_vfiprintf_r+0x1b8>
 801bdc6:	ab03      	add	r3, sp, #12
 801bdc8:	9300      	str	r3, [sp, #0]
 801bdca:	462a      	mov	r2, r5
 801bdcc:	4b12      	ldr	r3, [pc, #72]	@ (801be18 <_vfiprintf_r+0x228>)
 801bdce:	a904      	add	r1, sp, #16
 801bdd0:	4630      	mov	r0, r6
 801bdd2:	f3af 8000 	nop.w
 801bdd6:	4607      	mov	r7, r0
 801bdd8:	1c78      	adds	r0, r7, #1
 801bdda:	d1d6      	bne.n	801bd8a <_vfiprintf_r+0x19a>
 801bddc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bdde:	07d9      	lsls	r1, r3, #31
 801bde0:	d405      	bmi.n	801bdee <_vfiprintf_r+0x1fe>
 801bde2:	89ab      	ldrh	r3, [r5, #12]
 801bde4:	059a      	lsls	r2, r3, #22
 801bde6:	d402      	bmi.n	801bdee <_vfiprintf_r+0x1fe>
 801bde8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bdea:	f7ff fe7d 	bl	801bae8 <__retarget_lock_release_recursive>
 801bdee:	89ab      	ldrh	r3, [r5, #12]
 801bdf0:	065b      	lsls	r3, r3, #25
 801bdf2:	f53f af1f 	bmi.w	801bc34 <_vfiprintf_r+0x44>
 801bdf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bdf8:	e71e      	b.n	801bc38 <_vfiprintf_r+0x48>
 801bdfa:	ab03      	add	r3, sp, #12
 801bdfc:	9300      	str	r3, [sp, #0]
 801bdfe:	462a      	mov	r2, r5
 801be00:	4b05      	ldr	r3, [pc, #20]	@ (801be18 <_vfiprintf_r+0x228>)
 801be02:	a904      	add	r1, sp, #16
 801be04:	4630      	mov	r0, r6
 801be06:	f000 f879 	bl	801befc <_printf_i>
 801be0a:	e7e4      	b.n	801bdd6 <_vfiprintf_r+0x1e6>
 801be0c:	0801d7b4 	.word	0x0801d7b4
 801be10:	0801d7be 	.word	0x0801d7be
 801be14:	00000000 	.word	0x00000000
 801be18:	0801bbcb 	.word	0x0801bbcb
 801be1c:	0801d7ba 	.word	0x0801d7ba

0801be20 <_printf_common>:
 801be20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be24:	4616      	mov	r6, r2
 801be26:	4698      	mov	r8, r3
 801be28:	688a      	ldr	r2, [r1, #8]
 801be2a:	690b      	ldr	r3, [r1, #16]
 801be2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801be30:	4293      	cmp	r3, r2
 801be32:	bfb8      	it	lt
 801be34:	4613      	movlt	r3, r2
 801be36:	6033      	str	r3, [r6, #0]
 801be38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801be3c:	4607      	mov	r7, r0
 801be3e:	460c      	mov	r4, r1
 801be40:	b10a      	cbz	r2, 801be46 <_printf_common+0x26>
 801be42:	3301      	adds	r3, #1
 801be44:	6033      	str	r3, [r6, #0]
 801be46:	6823      	ldr	r3, [r4, #0]
 801be48:	0699      	lsls	r1, r3, #26
 801be4a:	bf42      	ittt	mi
 801be4c:	6833      	ldrmi	r3, [r6, #0]
 801be4e:	3302      	addmi	r3, #2
 801be50:	6033      	strmi	r3, [r6, #0]
 801be52:	6825      	ldr	r5, [r4, #0]
 801be54:	f015 0506 	ands.w	r5, r5, #6
 801be58:	d106      	bne.n	801be68 <_printf_common+0x48>
 801be5a:	f104 0a19 	add.w	sl, r4, #25
 801be5e:	68e3      	ldr	r3, [r4, #12]
 801be60:	6832      	ldr	r2, [r6, #0]
 801be62:	1a9b      	subs	r3, r3, r2
 801be64:	42ab      	cmp	r3, r5
 801be66:	dc26      	bgt.n	801beb6 <_printf_common+0x96>
 801be68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801be6c:	6822      	ldr	r2, [r4, #0]
 801be6e:	3b00      	subs	r3, #0
 801be70:	bf18      	it	ne
 801be72:	2301      	movne	r3, #1
 801be74:	0692      	lsls	r2, r2, #26
 801be76:	d42b      	bmi.n	801bed0 <_printf_common+0xb0>
 801be78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801be7c:	4641      	mov	r1, r8
 801be7e:	4638      	mov	r0, r7
 801be80:	47c8      	blx	r9
 801be82:	3001      	adds	r0, #1
 801be84:	d01e      	beq.n	801bec4 <_printf_common+0xa4>
 801be86:	6823      	ldr	r3, [r4, #0]
 801be88:	6922      	ldr	r2, [r4, #16]
 801be8a:	f003 0306 	and.w	r3, r3, #6
 801be8e:	2b04      	cmp	r3, #4
 801be90:	bf02      	ittt	eq
 801be92:	68e5      	ldreq	r5, [r4, #12]
 801be94:	6833      	ldreq	r3, [r6, #0]
 801be96:	1aed      	subeq	r5, r5, r3
 801be98:	68a3      	ldr	r3, [r4, #8]
 801be9a:	bf0c      	ite	eq
 801be9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bea0:	2500      	movne	r5, #0
 801bea2:	4293      	cmp	r3, r2
 801bea4:	bfc4      	itt	gt
 801bea6:	1a9b      	subgt	r3, r3, r2
 801bea8:	18ed      	addgt	r5, r5, r3
 801beaa:	2600      	movs	r6, #0
 801beac:	341a      	adds	r4, #26
 801beae:	42b5      	cmp	r5, r6
 801beb0:	d11a      	bne.n	801bee8 <_printf_common+0xc8>
 801beb2:	2000      	movs	r0, #0
 801beb4:	e008      	b.n	801bec8 <_printf_common+0xa8>
 801beb6:	2301      	movs	r3, #1
 801beb8:	4652      	mov	r2, sl
 801beba:	4641      	mov	r1, r8
 801bebc:	4638      	mov	r0, r7
 801bebe:	47c8      	blx	r9
 801bec0:	3001      	adds	r0, #1
 801bec2:	d103      	bne.n	801becc <_printf_common+0xac>
 801bec4:	f04f 30ff 	mov.w	r0, #4294967295
 801bec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801becc:	3501      	adds	r5, #1
 801bece:	e7c6      	b.n	801be5e <_printf_common+0x3e>
 801bed0:	18e1      	adds	r1, r4, r3
 801bed2:	1c5a      	adds	r2, r3, #1
 801bed4:	2030      	movs	r0, #48	@ 0x30
 801bed6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801beda:	4422      	add	r2, r4
 801bedc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bee0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bee4:	3302      	adds	r3, #2
 801bee6:	e7c7      	b.n	801be78 <_printf_common+0x58>
 801bee8:	2301      	movs	r3, #1
 801beea:	4622      	mov	r2, r4
 801beec:	4641      	mov	r1, r8
 801beee:	4638      	mov	r0, r7
 801bef0:	47c8      	blx	r9
 801bef2:	3001      	adds	r0, #1
 801bef4:	d0e6      	beq.n	801bec4 <_printf_common+0xa4>
 801bef6:	3601      	adds	r6, #1
 801bef8:	e7d9      	b.n	801beae <_printf_common+0x8e>
	...

0801befc <_printf_i>:
 801befc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bf00:	7e0f      	ldrb	r7, [r1, #24]
 801bf02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bf04:	2f78      	cmp	r7, #120	@ 0x78
 801bf06:	4691      	mov	r9, r2
 801bf08:	4680      	mov	r8, r0
 801bf0a:	460c      	mov	r4, r1
 801bf0c:	469a      	mov	sl, r3
 801bf0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bf12:	d807      	bhi.n	801bf24 <_printf_i+0x28>
 801bf14:	2f62      	cmp	r7, #98	@ 0x62
 801bf16:	d80a      	bhi.n	801bf2e <_printf_i+0x32>
 801bf18:	2f00      	cmp	r7, #0
 801bf1a:	f000 80d1 	beq.w	801c0c0 <_printf_i+0x1c4>
 801bf1e:	2f58      	cmp	r7, #88	@ 0x58
 801bf20:	f000 80b8 	beq.w	801c094 <_printf_i+0x198>
 801bf24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bf28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bf2c:	e03a      	b.n	801bfa4 <_printf_i+0xa8>
 801bf2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bf32:	2b15      	cmp	r3, #21
 801bf34:	d8f6      	bhi.n	801bf24 <_printf_i+0x28>
 801bf36:	a101      	add	r1, pc, #4	@ (adr r1, 801bf3c <_printf_i+0x40>)
 801bf38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bf3c:	0801bf95 	.word	0x0801bf95
 801bf40:	0801bfa9 	.word	0x0801bfa9
 801bf44:	0801bf25 	.word	0x0801bf25
 801bf48:	0801bf25 	.word	0x0801bf25
 801bf4c:	0801bf25 	.word	0x0801bf25
 801bf50:	0801bf25 	.word	0x0801bf25
 801bf54:	0801bfa9 	.word	0x0801bfa9
 801bf58:	0801bf25 	.word	0x0801bf25
 801bf5c:	0801bf25 	.word	0x0801bf25
 801bf60:	0801bf25 	.word	0x0801bf25
 801bf64:	0801bf25 	.word	0x0801bf25
 801bf68:	0801c0a7 	.word	0x0801c0a7
 801bf6c:	0801bfd3 	.word	0x0801bfd3
 801bf70:	0801c061 	.word	0x0801c061
 801bf74:	0801bf25 	.word	0x0801bf25
 801bf78:	0801bf25 	.word	0x0801bf25
 801bf7c:	0801c0c9 	.word	0x0801c0c9
 801bf80:	0801bf25 	.word	0x0801bf25
 801bf84:	0801bfd3 	.word	0x0801bfd3
 801bf88:	0801bf25 	.word	0x0801bf25
 801bf8c:	0801bf25 	.word	0x0801bf25
 801bf90:	0801c069 	.word	0x0801c069
 801bf94:	6833      	ldr	r3, [r6, #0]
 801bf96:	1d1a      	adds	r2, r3, #4
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	6032      	str	r2, [r6, #0]
 801bf9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bfa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bfa4:	2301      	movs	r3, #1
 801bfa6:	e09c      	b.n	801c0e2 <_printf_i+0x1e6>
 801bfa8:	6833      	ldr	r3, [r6, #0]
 801bfaa:	6820      	ldr	r0, [r4, #0]
 801bfac:	1d19      	adds	r1, r3, #4
 801bfae:	6031      	str	r1, [r6, #0]
 801bfb0:	0606      	lsls	r6, r0, #24
 801bfb2:	d501      	bpl.n	801bfb8 <_printf_i+0xbc>
 801bfb4:	681d      	ldr	r5, [r3, #0]
 801bfb6:	e003      	b.n	801bfc0 <_printf_i+0xc4>
 801bfb8:	0645      	lsls	r5, r0, #25
 801bfba:	d5fb      	bpl.n	801bfb4 <_printf_i+0xb8>
 801bfbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bfc0:	2d00      	cmp	r5, #0
 801bfc2:	da03      	bge.n	801bfcc <_printf_i+0xd0>
 801bfc4:	232d      	movs	r3, #45	@ 0x2d
 801bfc6:	426d      	negs	r5, r5
 801bfc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bfcc:	4858      	ldr	r0, [pc, #352]	@ (801c130 <_printf_i+0x234>)
 801bfce:	230a      	movs	r3, #10
 801bfd0:	e011      	b.n	801bff6 <_printf_i+0xfa>
 801bfd2:	6821      	ldr	r1, [r4, #0]
 801bfd4:	6833      	ldr	r3, [r6, #0]
 801bfd6:	0608      	lsls	r0, r1, #24
 801bfd8:	f853 5b04 	ldr.w	r5, [r3], #4
 801bfdc:	d402      	bmi.n	801bfe4 <_printf_i+0xe8>
 801bfde:	0649      	lsls	r1, r1, #25
 801bfe0:	bf48      	it	mi
 801bfe2:	b2ad      	uxthmi	r5, r5
 801bfe4:	2f6f      	cmp	r7, #111	@ 0x6f
 801bfe6:	4852      	ldr	r0, [pc, #328]	@ (801c130 <_printf_i+0x234>)
 801bfe8:	6033      	str	r3, [r6, #0]
 801bfea:	bf14      	ite	ne
 801bfec:	230a      	movne	r3, #10
 801bfee:	2308      	moveq	r3, #8
 801bff0:	2100      	movs	r1, #0
 801bff2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bff6:	6866      	ldr	r6, [r4, #4]
 801bff8:	60a6      	str	r6, [r4, #8]
 801bffa:	2e00      	cmp	r6, #0
 801bffc:	db05      	blt.n	801c00a <_printf_i+0x10e>
 801bffe:	6821      	ldr	r1, [r4, #0]
 801c000:	432e      	orrs	r6, r5
 801c002:	f021 0104 	bic.w	r1, r1, #4
 801c006:	6021      	str	r1, [r4, #0]
 801c008:	d04b      	beq.n	801c0a2 <_printf_i+0x1a6>
 801c00a:	4616      	mov	r6, r2
 801c00c:	fbb5 f1f3 	udiv	r1, r5, r3
 801c010:	fb03 5711 	mls	r7, r3, r1, r5
 801c014:	5dc7      	ldrb	r7, [r0, r7]
 801c016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c01a:	462f      	mov	r7, r5
 801c01c:	42bb      	cmp	r3, r7
 801c01e:	460d      	mov	r5, r1
 801c020:	d9f4      	bls.n	801c00c <_printf_i+0x110>
 801c022:	2b08      	cmp	r3, #8
 801c024:	d10b      	bne.n	801c03e <_printf_i+0x142>
 801c026:	6823      	ldr	r3, [r4, #0]
 801c028:	07df      	lsls	r7, r3, #31
 801c02a:	d508      	bpl.n	801c03e <_printf_i+0x142>
 801c02c:	6923      	ldr	r3, [r4, #16]
 801c02e:	6861      	ldr	r1, [r4, #4]
 801c030:	4299      	cmp	r1, r3
 801c032:	bfde      	ittt	le
 801c034:	2330      	movle	r3, #48	@ 0x30
 801c036:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c03a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c03e:	1b92      	subs	r2, r2, r6
 801c040:	6122      	str	r2, [r4, #16]
 801c042:	f8cd a000 	str.w	sl, [sp]
 801c046:	464b      	mov	r3, r9
 801c048:	aa03      	add	r2, sp, #12
 801c04a:	4621      	mov	r1, r4
 801c04c:	4640      	mov	r0, r8
 801c04e:	f7ff fee7 	bl	801be20 <_printf_common>
 801c052:	3001      	adds	r0, #1
 801c054:	d14a      	bne.n	801c0ec <_printf_i+0x1f0>
 801c056:	f04f 30ff 	mov.w	r0, #4294967295
 801c05a:	b004      	add	sp, #16
 801c05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c060:	6823      	ldr	r3, [r4, #0]
 801c062:	f043 0320 	orr.w	r3, r3, #32
 801c066:	6023      	str	r3, [r4, #0]
 801c068:	4832      	ldr	r0, [pc, #200]	@ (801c134 <_printf_i+0x238>)
 801c06a:	2778      	movs	r7, #120	@ 0x78
 801c06c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c070:	6823      	ldr	r3, [r4, #0]
 801c072:	6831      	ldr	r1, [r6, #0]
 801c074:	061f      	lsls	r7, r3, #24
 801c076:	f851 5b04 	ldr.w	r5, [r1], #4
 801c07a:	d402      	bmi.n	801c082 <_printf_i+0x186>
 801c07c:	065f      	lsls	r7, r3, #25
 801c07e:	bf48      	it	mi
 801c080:	b2ad      	uxthmi	r5, r5
 801c082:	6031      	str	r1, [r6, #0]
 801c084:	07d9      	lsls	r1, r3, #31
 801c086:	bf44      	itt	mi
 801c088:	f043 0320 	orrmi.w	r3, r3, #32
 801c08c:	6023      	strmi	r3, [r4, #0]
 801c08e:	b11d      	cbz	r5, 801c098 <_printf_i+0x19c>
 801c090:	2310      	movs	r3, #16
 801c092:	e7ad      	b.n	801bff0 <_printf_i+0xf4>
 801c094:	4826      	ldr	r0, [pc, #152]	@ (801c130 <_printf_i+0x234>)
 801c096:	e7e9      	b.n	801c06c <_printf_i+0x170>
 801c098:	6823      	ldr	r3, [r4, #0]
 801c09a:	f023 0320 	bic.w	r3, r3, #32
 801c09e:	6023      	str	r3, [r4, #0]
 801c0a0:	e7f6      	b.n	801c090 <_printf_i+0x194>
 801c0a2:	4616      	mov	r6, r2
 801c0a4:	e7bd      	b.n	801c022 <_printf_i+0x126>
 801c0a6:	6833      	ldr	r3, [r6, #0]
 801c0a8:	6825      	ldr	r5, [r4, #0]
 801c0aa:	6961      	ldr	r1, [r4, #20]
 801c0ac:	1d18      	adds	r0, r3, #4
 801c0ae:	6030      	str	r0, [r6, #0]
 801c0b0:	062e      	lsls	r6, r5, #24
 801c0b2:	681b      	ldr	r3, [r3, #0]
 801c0b4:	d501      	bpl.n	801c0ba <_printf_i+0x1be>
 801c0b6:	6019      	str	r1, [r3, #0]
 801c0b8:	e002      	b.n	801c0c0 <_printf_i+0x1c4>
 801c0ba:	0668      	lsls	r0, r5, #25
 801c0bc:	d5fb      	bpl.n	801c0b6 <_printf_i+0x1ba>
 801c0be:	8019      	strh	r1, [r3, #0]
 801c0c0:	2300      	movs	r3, #0
 801c0c2:	6123      	str	r3, [r4, #16]
 801c0c4:	4616      	mov	r6, r2
 801c0c6:	e7bc      	b.n	801c042 <_printf_i+0x146>
 801c0c8:	6833      	ldr	r3, [r6, #0]
 801c0ca:	1d1a      	adds	r2, r3, #4
 801c0cc:	6032      	str	r2, [r6, #0]
 801c0ce:	681e      	ldr	r6, [r3, #0]
 801c0d0:	6862      	ldr	r2, [r4, #4]
 801c0d2:	2100      	movs	r1, #0
 801c0d4:	4630      	mov	r0, r6
 801c0d6:	f7e4 f903 	bl	80002e0 <memchr>
 801c0da:	b108      	cbz	r0, 801c0e0 <_printf_i+0x1e4>
 801c0dc:	1b80      	subs	r0, r0, r6
 801c0de:	6060      	str	r0, [r4, #4]
 801c0e0:	6863      	ldr	r3, [r4, #4]
 801c0e2:	6123      	str	r3, [r4, #16]
 801c0e4:	2300      	movs	r3, #0
 801c0e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c0ea:	e7aa      	b.n	801c042 <_printf_i+0x146>
 801c0ec:	6923      	ldr	r3, [r4, #16]
 801c0ee:	4632      	mov	r2, r6
 801c0f0:	4649      	mov	r1, r9
 801c0f2:	4640      	mov	r0, r8
 801c0f4:	47d0      	blx	sl
 801c0f6:	3001      	adds	r0, #1
 801c0f8:	d0ad      	beq.n	801c056 <_printf_i+0x15a>
 801c0fa:	6823      	ldr	r3, [r4, #0]
 801c0fc:	079b      	lsls	r3, r3, #30
 801c0fe:	d413      	bmi.n	801c128 <_printf_i+0x22c>
 801c100:	68e0      	ldr	r0, [r4, #12]
 801c102:	9b03      	ldr	r3, [sp, #12]
 801c104:	4298      	cmp	r0, r3
 801c106:	bfb8      	it	lt
 801c108:	4618      	movlt	r0, r3
 801c10a:	e7a6      	b.n	801c05a <_printf_i+0x15e>
 801c10c:	2301      	movs	r3, #1
 801c10e:	4632      	mov	r2, r6
 801c110:	4649      	mov	r1, r9
 801c112:	4640      	mov	r0, r8
 801c114:	47d0      	blx	sl
 801c116:	3001      	adds	r0, #1
 801c118:	d09d      	beq.n	801c056 <_printf_i+0x15a>
 801c11a:	3501      	adds	r5, #1
 801c11c:	68e3      	ldr	r3, [r4, #12]
 801c11e:	9903      	ldr	r1, [sp, #12]
 801c120:	1a5b      	subs	r3, r3, r1
 801c122:	42ab      	cmp	r3, r5
 801c124:	dcf2      	bgt.n	801c10c <_printf_i+0x210>
 801c126:	e7eb      	b.n	801c100 <_printf_i+0x204>
 801c128:	2500      	movs	r5, #0
 801c12a:	f104 0619 	add.w	r6, r4, #25
 801c12e:	e7f5      	b.n	801c11c <_printf_i+0x220>
 801c130:	0801d7c5 	.word	0x0801d7c5
 801c134:	0801d7d6 	.word	0x0801d7d6

0801c138 <__sflush_r>:
 801c138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c140:	0716      	lsls	r6, r2, #28
 801c142:	4605      	mov	r5, r0
 801c144:	460c      	mov	r4, r1
 801c146:	d454      	bmi.n	801c1f2 <__sflush_r+0xba>
 801c148:	684b      	ldr	r3, [r1, #4]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	dc02      	bgt.n	801c154 <__sflush_r+0x1c>
 801c14e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c150:	2b00      	cmp	r3, #0
 801c152:	dd48      	ble.n	801c1e6 <__sflush_r+0xae>
 801c154:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c156:	2e00      	cmp	r6, #0
 801c158:	d045      	beq.n	801c1e6 <__sflush_r+0xae>
 801c15a:	2300      	movs	r3, #0
 801c15c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c160:	682f      	ldr	r7, [r5, #0]
 801c162:	6a21      	ldr	r1, [r4, #32]
 801c164:	602b      	str	r3, [r5, #0]
 801c166:	d030      	beq.n	801c1ca <__sflush_r+0x92>
 801c168:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c16a:	89a3      	ldrh	r3, [r4, #12]
 801c16c:	0759      	lsls	r1, r3, #29
 801c16e:	d505      	bpl.n	801c17c <__sflush_r+0x44>
 801c170:	6863      	ldr	r3, [r4, #4]
 801c172:	1ad2      	subs	r2, r2, r3
 801c174:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c176:	b10b      	cbz	r3, 801c17c <__sflush_r+0x44>
 801c178:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c17a:	1ad2      	subs	r2, r2, r3
 801c17c:	2300      	movs	r3, #0
 801c17e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c180:	6a21      	ldr	r1, [r4, #32]
 801c182:	4628      	mov	r0, r5
 801c184:	47b0      	blx	r6
 801c186:	1c43      	adds	r3, r0, #1
 801c188:	89a3      	ldrh	r3, [r4, #12]
 801c18a:	d106      	bne.n	801c19a <__sflush_r+0x62>
 801c18c:	6829      	ldr	r1, [r5, #0]
 801c18e:	291d      	cmp	r1, #29
 801c190:	d82b      	bhi.n	801c1ea <__sflush_r+0xb2>
 801c192:	4a2a      	ldr	r2, [pc, #168]	@ (801c23c <__sflush_r+0x104>)
 801c194:	40ca      	lsrs	r2, r1
 801c196:	07d6      	lsls	r6, r2, #31
 801c198:	d527      	bpl.n	801c1ea <__sflush_r+0xb2>
 801c19a:	2200      	movs	r2, #0
 801c19c:	6062      	str	r2, [r4, #4]
 801c19e:	04d9      	lsls	r1, r3, #19
 801c1a0:	6922      	ldr	r2, [r4, #16]
 801c1a2:	6022      	str	r2, [r4, #0]
 801c1a4:	d504      	bpl.n	801c1b0 <__sflush_r+0x78>
 801c1a6:	1c42      	adds	r2, r0, #1
 801c1a8:	d101      	bne.n	801c1ae <__sflush_r+0x76>
 801c1aa:	682b      	ldr	r3, [r5, #0]
 801c1ac:	b903      	cbnz	r3, 801c1b0 <__sflush_r+0x78>
 801c1ae:	6560      	str	r0, [r4, #84]	@ 0x54
 801c1b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c1b2:	602f      	str	r7, [r5, #0]
 801c1b4:	b1b9      	cbz	r1, 801c1e6 <__sflush_r+0xae>
 801c1b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c1ba:	4299      	cmp	r1, r3
 801c1bc:	d002      	beq.n	801c1c4 <__sflush_r+0x8c>
 801c1be:	4628      	mov	r0, r5
 801c1c0:	f7ff fca2 	bl	801bb08 <_free_r>
 801c1c4:	2300      	movs	r3, #0
 801c1c6:	6363      	str	r3, [r4, #52]	@ 0x34
 801c1c8:	e00d      	b.n	801c1e6 <__sflush_r+0xae>
 801c1ca:	2301      	movs	r3, #1
 801c1cc:	4628      	mov	r0, r5
 801c1ce:	47b0      	blx	r6
 801c1d0:	4602      	mov	r2, r0
 801c1d2:	1c50      	adds	r0, r2, #1
 801c1d4:	d1c9      	bne.n	801c16a <__sflush_r+0x32>
 801c1d6:	682b      	ldr	r3, [r5, #0]
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d0c6      	beq.n	801c16a <__sflush_r+0x32>
 801c1dc:	2b1d      	cmp	r3, #29
 801c1de:	d001      	beq.n	801c1e4 <__sflush_r+0xac>
 801c1e0:	2b16      	cmp	r3, #22
 801c1e2:	d11e      	bne.n	801c222 <__sflush_r+0xea>
 801c1e4:	602f      	str	r7, [r5, #0]
 801c1e6:	2000      	movs	r0, #0
 801c1e8:	e022      	b.n	801c230 <__sflush_r+0xf8>
 801c1ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c1ee:	b21b      	sxth	r3, r3
 801c1f0:	e01b      	b.n	801c22a <__sflush_r+0xf2>
 801c1f2:	690f      	ldr	r7, [r1, #16]
 801c1f4:	2f00      	cmp	r7, #0
 801c1f6:	d0f6      	beq.n	801c1e6 <__sflush_r+0xae>
 801c1f8:	0793      	lsls	r3, r2, #30
 801c1fa:	680e      	ldr	r6, [r1, #0]
 801c1fc:	bf08      	it	eq
 801c1fe:	694b      	ldreq	r3, [r1, #20]
 801c200:	600f      	str	r7, [r1, #0]
 801c202:	bf18      	it	ne
 801c204:	2300      	movne	r3, #0
 801c206:	eba6 0807 	sub.w	r8, r6, r7
 801c20a:	608b      	str	r3, [r1, #8]
 801c20c:	f1b8 0f00 	cmp.w	r8, #0
 801c210:	dde9      	ble.n	801c1e6 <__sflush_r+0xae>
 801c212:	6a21      	ldr	r1, [r4, #32]
 801c214:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c216:	4643      	mov	r3, r8
 801c218:	463a      	mov	r2, r7
 801c21a:	4628      	mov	r0, r5
 801c21c:	47b0      	blx	r6
 801c21e:	2800      	cmp	r0, #0
 801c220:	dc08      	bgt.n	801c234 <__sflush_r+0xfc>
 801c222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c22a:	81a3      	strh	r3, [r4, #12]
 801c22c:	f04f 30ff 	mov.w	r0, #4294967295
 801c230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c234:	4407      	add	r7, r0
 801c236:	eba8 0800 	sub.w	r8, r8, r0
 801c23a:	e7e7      	b.n	801c20c <__sflush_r+0xd4>
 801c23c:	20400001 	.word	0x20400001

0801c240 <_fflush_r>:
 801c240:	b538      	push	{r3, r4, r5, lr}
 801c242:	690b      	ldr	r3, [r1, #16]
 801c244:	4605      	mov	r5, r0
 801c246:	460c      	mov	r4, r1
 801c248:	b913      	cbnz	r3, 801c250 <_fflush_r+0x10>
 801c24a:	2500      	movs	r5, #0
 801c24c:	4628      	mov	r0, r5
 801c24e:	bd38      	pop	{r3, r4, r5, pc}
 801c250:	b118      	cbz	r0, 801c25a <_fflush_r+0x1a>
 801c252:	6a03      	ldr	r3, [r0, #32]
 801c254:	b90b      	cbnz	r3, 801c25a <_fflush_r+0x1a>
 801c256:	f7ff fa37 	bl	801b6c8 <__sinit>
 801c25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d0f3      	beq.n	801c24a <_fflush_r+0xa>
 801c262:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c264:	07d0      	lsls	r0, r2, #31
 801c266:	d404      	bmi.n	801c272 <_fflush_r+0x32>
 801c268:	0599      	lsls	r1, r3, #22
 801c26a:	d402      	bmi.n	801c272 <_fflush_r+0x32>
 801c26c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c26e:	f7ff fc3a 	bl	801bae6 <__retarget_lock_acquire_recursive>
 801c272:	4628      	mov	r0, r5
 801c274:	4621      	mov	r1, r4
 801c276:	f7ff ff5f 	bl	801c138 <__sflush_r>
 801c27a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c27c:	07da      	lsls	r2, r3, #31
 801c27e:	4605      	mov	r5, r0
 801c280:	d4e4      	bmi.n	801c24c <_fflush_r+0xc>
 801c282:	89a3      	ldrh	r3, [r4, #12]
 801c284:	059b      	lsls	r3, r3, #22
 801c286:	d4e1      	bmi.n	801c24c <_fflush_r+0xc>
 801c288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c28a:	f7ff fc2d 	bl	801bae8 <__retarget_lock_release_recursive>
 801c28e:	e7dd      	b.n	801c24c <_fflush_r+0xc>

0801c290 <__swhatbuf_r>:
 801c290:	b570      	push	{r4, r5, r6, lr}
 801c292:	460c      	mov	r4, r1
 801c294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c298:	2900      	cmp	r1, #0
 801c29a:	b096      	sub	sp, #88	@ 0x58
 801c29c:	4615      	mov	r5, r2
 801c29e:	461e      	mov	r6, r3
 801c2a0:	da0d      	bge.n	801c2be <__swhatbuf_r+0x2e>
 801c2a2:	89a3      	ldrh	r3, [r4, #12]
 801c2a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c2a8:	f04f 0100 	mov.w	r1, #0
 801c2ac:	bf14      	ite	ne
 801c2ae:	2340      	movne	r3, #64	@ 0x40
 801c2b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c2b4:	2000      	movs	r0, #0
 801c2b6:	6031      	str	r1, [r6, #0]
 801c2b8:	602b      	str	r3, [r5, #0]
 801c2ba:	b016      	add	sp, #88	@ 0x58
 801c2bc:	bd70      	pop	{r4, r5, r6, pc}
 801c2be:	466a      	mov	r2, sp
 801c2c0:	f000 f87c 	bl	801c3bc <_fstat_r>
 801c2c4:	2800      	cmp	r0, #0
 801c2c6:	dbec      	blt.n	801c2a2 <__swhatbuf_r+0x12>
 801c2c8:	9901      	ldr	r1, [sp, #4]
 801c2ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c2ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c2d2:	4259      	negs	r1, r3
 801c2d4:	4159      	adcs	r1, r3
 801c2d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c2da:	e7eb      	b.n	801c2b4 <__swhatbuf_r+0x24>

0801c2dc <__smakebuf_r>:
 801c2dc:	898b      	ldrh	r3, [r1, #12]
 801c2de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c2e0:	079d      	lsls	r5, r3, #30
 801c2e2:	4606      	mov	r6, r0
 801c2e4:	460c      	mov	r4, r1
 801c2e6:	d507      	bpl.n	801c2f8 <__smakebuf_r+0x1c>
 801c2e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c2ec:	6023      	str	r3, [r4, #0]
 801c2ee:	6123      	str	r3, [r4, #16]
 801c2f0:	2301      	movs	r3, #1
 801c2f2:	6163      	str	r3, [r4, #20]
 801c2f4:	b003      	add	sp, #12
 801c2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2f8:	ab01      	add	r3, sp, #4
 801c2fa:	466a      	mov	r2, sp
 801c2fc:	f7ff ffc8 	bl	801c290 <__swhatbuf_r>
 801c300:	9f00      	ldr	r7, [sp, #0]
 801c302:	4605      	mov	r5, r0
 801c304:	4639      	mov	r1, r7
 801c306:	4630      	mov	r0, r6
 801c308:	f7ff f8c6 	bl	801b498 <_malloc_r>
 801c30c:	b948      	cbnz	r0, 801c322 <__smakebuf_r+0x46>
 801c30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c312:	059a      	lsls	r2, r3, #22
 801c314:	d4ee      	bmi.n	801c2f4 <__smakebuf_r+0x18>
 801c316:	f023 0303 	bic.w	r3, r3, #3
 801c31a:	f043 0302 	orr.w	r3, r3, #2
 801c31e:	81a3      	strh	r3, [r4, #12]
 801c320:	e7e2      	b.n	801c2e8 <__smakebuf_r+0xc>
 801c322:	89a3      	ldrh	r3, [r4, #12]
 801c324:	6020      	str	r0, [r4, #0]
 801c326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c32a:	81a3      	strh	r3, [r4, #12]
 801c32c:	9b01      	ldr	r3, [sp, #4]
 801c32e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c332:	b15b      	cbz	r3, 801c34c <__smakebuf_r+0x70>
 801c334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c338:	4630      	mov	r0, r6
 801c33a:	f000 f851 	bl	801c3e0 <_isatty_r>
 801c33e:	b128      	cbz	r0, 801c34c <__smakebuf_r+0x70>
 801c340:	89a3      	ldrh	r3, [r4, #12]
 801c342:	f023 0303 	bic.w	r3, r3, #3
 801c346:	f043 0301 	orr.w	r3, r3, #1
 801c34a:	81a3      	strh	r3, [r4, #12]
 801c34c:	89a3      	ldrh	r3, [r4, #12]
 801c34e:	431d      	orrs	r5, r3
 801c350:	81a5      	strh	r5, [r4, #12]
 801c352:	e7cf      	b.n	801c2f4 <__smakebuf_r+0x18>

0801c354 <_putc_r>:
 801c354:	b570      	push	{r4, r5, r6, lr}
 801c356:	460d      	mov	r5, r1
 801c358:	4614      	mov	r4, r2
 801c35a:	4606      	mov	r6, r0
 801c35c:	b118      	cbz	r0, 801c366 <_putc_r+0x12>
 801c35e:	6a03      	ldr	r3, [r0, #32]
 801c360:	b90b      	cbnz	r3, 801c366 <_putc_r+0x12>
 801c362:	f7ff f9b1 	bl	801b6c8 <__sinit>
 801c366:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c368:	07d8      	lsls	r0, r3, #31
 801c36a:	d405      	bmi.n	801c378 <_putc_r+0x24>
 801c36c:	89a3      	ldrh	r3, [r4, #12]
 801c36e:	0599      	lsls	r1, r3, #22
 801c370:	d402      	bmi.n	801c378 <_putc_r+0x24>
 801c372:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c374:	f7ff fbb7 	bl	801bae6 <__retarget_lock_acquire_recursive>
 801c378:	68a3      	ldr	r3, [r4, #8]
 801c37a:	3b01      	subs	r3, #1
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	60a3      	str	r3, [r4, #8]
 801c380:	da05      	bge.n	801c38e <_putc_r+0x3a>
 801c382:	69a2      	ldr	r2, [r4, #24]
 801c384:	4293      	cmp	r3, r2
 801c386:	db12      	blt.n	801c3ae <_putc_r+0x5a>
 801c388:	b2eb      	uxtb	r3, r5
 801c38a:	2b0a      	cmp	r3, #10
 801c38c:	d00f      	beq.n	801c3ae <_putc_r+0x5a>
 801c38e:	6823      	ldr	r3, [r4, #0]
 801c390:	1c5a      	adds	r2, r3, #1
 801c392:	6022      	str	r2, [r4, #0]
 801c394:	701d      	strb	r5, [r3, #0]
 801c396:	b2ed      	uxtb	r5, r5
 801c398:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c39a:	07da      	lsls	r2, r3, #31
 801c39c:	d405      	bmi.n	801c3aa <_putc_r+0x56>
 801c39e:	89a3      	ldrh	r3, [r4, #12]
 801c3a0:	059b      	lsls	r3, r3, #22
 801c3a2:	d402      	bmi.n	801c3aa <_putc_r+0x56>
 801c3a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c3a6:	f7ff fb9f 	bl	801bae8 <__retarget_lock_release_recursive>
 801c3aa:	4628      	mov	r0, r5
 801c3ac:	bd70      	pop	{r4, r5, r6, pc}
 801c3ae:	4629      	mov	r1, r5
 801c3b0:	4622      	mov	r2, r4
 801c3b2:	4630      	mov	r0, r6
 801c3b4:	f7ff fa79 	bl	801b8aa <__swbuf_r>
 801c3b8:	4605      	mov	r5, r0
 801c3ba:	e7ed      	b.n	801c398 <_putc_r+0x44>

0801c3bc <_fstat_r>:
 801c3bc:	b538      	push	{r3, r4, r5, lr}
 801c3be:	4d07      	ldr	r5, [pc, #28]	@ (801c3dc <_fstat_r+0x20>)
 801c3c0:	2300      	movs	r3, #0
 801c3c2:	4604      	mov	r4, r0
 801c3c4:	4608      	mov	r0, r1
 801c3c6:	4611      	mov	r1, r2
 801c3c8:	602b      	str	r3, [r5, #0]
 801c3ca:	f7e5 fc8c 	bl	8001ce6 <_fstat>
 801c3ce:	1c43      	adds	r3, r0, #1
 801c3d0:	d102      	bne.n	801c3d8 <_fstat_r+0x1c>
 801c3d2:	682b      	ldr	r3, [r5, #0]
 801c3d4:	b103      	cbz	r3, 801c3d8 <_fstat_r+0x1c>
 801c3d6:	6023      	str	r3, [r4, #0]
 801c3d8:	bd38      	pop	{r3, r4, r5, pc}
 801c3da:	bf00      	nop
 801c3dc:	24009d1c 	.word	0x24009d1c

0801c3e0 <_isatty_r>:
 801c3e0:	b538      	push	{r3, r4, r5, lr}
 801c3e2:	4d06      	ldr	r5, [pc, #24]	@ (801c3fc <_isatty_r+0x1c>)
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	4604      	mov	r4, r0
 801c3e8:	4608      	mov	r0, r1
 801c3ea:	602b      	str	r3, [r5, #0]
 801c3ec:	f7e5 fc8b 	bl	8001d06 <_isatty>
 801c3f0:	1c43      	adds	r3, r0, #1
 801c3f2:	d102      	bne.n	801c3fa <_isatty_r+0x1a>
 801c3f4:	682b      	ldr	r3, [r5, #0]
 801c3f6:	b103      	cbz	r3, 801c3fa <_isatty_r+0x1a>
 801c3f8:	6023      	str	r3, [r4, #0]
 801c3fa:	bd38      	pop	{r3, r4, r5, pc}
 801c3fc:	24009d1c 	.word	0x24009d1c

0801c400 <_init>:
 801c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c402:	bf00      	nop
 801c404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c406:	bc08      	pop	{r3}
 801c408:	469e      	mov	lr, r3
 801c40a:	4770      	bx	lr

0801c40c <_fini>:
 801c40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c40e:	bf00      	nop
 801c410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c412:	bc08      	pop	{r3}
 801c414:	469e      	mov	lr, r3
 801c416:	4770      	bx	lr
